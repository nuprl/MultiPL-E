language: scala
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        var result = List[String]()\n        for (i <- arr) {\n \
    \           if (i >= 1 && i <= 9) {\n                result = map(i.toInt) ::\
    \ result\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r8p4plq.scala:21)\n\tat Problem.main(tmp1r8p4plq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n \
    \       result.toList.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h3ms3vq.scala:19)\n\tat Problem.main(tmp4h3ms3vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1L -> \"\
    One\")\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n   \
    \     map += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map +=\
    \ (6L -> \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"\
    Eight\")\n        map += (9L -> \"Nine\")\n        val result = new ListBuffer[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result += map(i)\n            }\n        }\n        result.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnjrg8e1.scala:30)\n\tat Problem.main(tmppnjrg8e1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1L -> \"One\"\
    )\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n        map\
    \ += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map += (6L ->\
    \ \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"Eight\"\
    )\n        map += (9L -> \"Nine\")\n        val result = new ListBuffer[String]\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result += map(i)\n            }\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpooo0td2q.scala:30)\n\tat Problem.main(tmpooo0td2q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        val result = new ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                result += map(i)\n \
    \           }\n        }\n        result.toList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe5jqc_et.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).map(x =>\
    \ map(x.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = new ListBuffer[String]\n        for (i <- arr)\
    \ {\n            if (i > 0 && i < 10) {\n                result += map(i.toInt)\n\
    \            }\n        }\n        result.toList.sorted.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmeqgks7r.scala:21)\n\tat Problem.main(tmpmeqgks7r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = for (i <- arr if i >= 1 && i <= 9) yield map(i.toInt)\n\
    \        result.sortBy(_.length).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptbotiuhd.scala:16)\n\tat Problem.main(tmptbotiuhd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1 -> \"One\"\
    )\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n        map\
    \ += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6 -> \"\
    Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\")\n   \
    \     map += (9 -> \"Nine\")\n        val list = new ListBuffer[String]\n    \
    \    for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n                list\
    \ += map(i)\n            }\n        }\n        list.toList.sorted.reverse\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08ctz738.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08ctz738.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp08ctz738.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp08ctz738.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp08ctz738.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = arr.map(x => (x, x.toString.length)).groupBy(_._2).map(x\
    \ => (x._1, x._2.map(_._1)))\n        m.toList.sortBy(_._1).map(_._2.sorted.map(_.toString))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2qe5z0t.scala:12:49\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        m.toList.sortBy(_._1).map(_._2.sorted.map(_.toString))\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    \e[1m\e[31mList\e\
    [0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6qn5nk7m.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1L -> \"\
    One\")\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n   \
    \     map += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map +=\
    \ (6L -> \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"\
    Eight\")\n        map += (9L -> \"Nine\")\n        val sorted = arr.filter(x =>\
    \ x >= 1 && x <= 9).sorted\n        sorted.map(x => map(x)).reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).map(x =>\
    \ map(x.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = for (i <- arr if i >= 1 && i <= 9) yield\
    \ map(i)\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppknupcdq.scala:16)\n\tat Problem.main(tmppknupcdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = new HashMap[Long, String]\n        m(1) = \"One\"\n   \
    \     m(2) = \"Two\"\n        m(3) = \"Three\"\n        m(4) = \"Four\"\n    \
    \    m(5) = \"Five\"\n        m(6) = \"Six\"\n        m(7) = \"Seven\"\n     \
    \   m(8) = \"Eight\"\n        m(9) = \"Nine\"\n        arr.map(x => m(x)).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoxr5jgxl.scala:24)\n\tat Problem.main(tmpoxr5jgxl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val sorted = arr.sortWith(_.toString.length < _.toString.length)\n\
    \        sorted.map(x => x.toString.reverse.map(y => y match {\n            case\
    \ '1' => \"One\"\n            case '2' => \"Two\"\n            case '3' => \"\
    Three\"\n            case '4' => \"Four\"\n            case '5' => \"Five\"\n\
    \            case '6' => \"Six\"\n            case '7' => \"Seven\"\n        \
    \    case '8' => \"Eight\"\n            case '9' => \"Nine\"\n            case\
    \ _ => \"\"\n        }).mkString(\" \"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj9z0cvjk.scala:26)\n\tat Problem.main(tmpj9z0cvjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val sorted = arr.sortWith((a, b) => a.toString.length < b.toString.length)\n\
    \        sorted.map(x => x.toString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_03qob7s.scala:15)\n\tat Problem.main(tmp_03qob7s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        arr.map(x => x.toString).sortBy(x => x.length).map(x => x.toString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_nb__5n.scala:14)\n\tat Problem.main(tmpl_nb__5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).map(x =>\
    \ map(x.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        arr.map(x => x.toString).sortBy(x => x.length).map(x => x.toString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_nb__5n.scala:14)\n\tat Problem.main(tmpl_nb__5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.sortWith(_ < _).filter(x => x >= 1 && x\
    \ <= 9)\n        sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6qn5nk7m.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6qn5nk7m.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        val result = new ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n        result.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpil4j1v7f.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).map(x => map(x.toInt)).sorted(Ordering.String.reverse)\n\
    \        list\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7yf4073.scala:16)\n\tat Problem.main(tmpc7yf4073.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        val result = new ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                result += map(i)\n \
    \           }\n        }\n        result.toList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe5jqc_et.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jqc_et.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val filtered = arr.filter(x => x >= 1 && x <= 9)\n      \
    \  val sorted = filtered.sorted\n        val reversed = sorted.reverse\n     \
    \   val result = reversed.map(x => map(x.toInt))\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1 -> \"One\"\
    )\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n        map\
    \ += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6 -> \"\
    Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\")\n   \
    \     map += (9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sortWith(_ <\
    \ _).reverse.map(x => map(x.toInt))\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) result += map(i.toInt)\n        }\n   \
    \     result.toList.sorted.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj90hxgcs.scala:19)\n\tat Problem.main(tmpj90hxgcs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val res = for (i <- arr if i >= 1 && i <= 9) yield map(i.toInt)\n\
    \        res.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcbjz6n_3.scala:16)\n\tat Problem.main(tmpcbjz6n_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val digits = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => x.toString)\n        val names = List(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        digits.map(x =>\
    \ names(x.toInt - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val s = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        if (s.isEmpty) List() else s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1L -> \"One\"\
    )\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n        map\
    \ += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map += (6L ->\
    \ \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"Eight\"\
    )\n        map += (9L -> \"Nine\")\n        val result = new ListBuffer[String]\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result += map(i)\n            }\n        }\n        result.toList.sorted.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ccc82rq.scala:30)\n\tat Problem.main(tmp5ccc82rq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1L -> \"One\"\
    )\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n        map\
    \ += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map += (6L ->\
    \ \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"Eight\"\
    )\n        map += (9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1 -> \"One\"\
    )\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n        map\
    \ += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6 -> \"\
    Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\")\n   \
    \     map += (9 -> \"Nine\")\n        val result = new ListBuffer[String]\n  \
    \      for (i <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n\
    \        }\n        result.toList.sorted.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kmvbapa.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7kmvbapa.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7kmvbapa.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7kmvbapa.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7kmvbapa.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        val result = new ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n        result.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpil4j1v7f.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpil4j1v7f.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i > 0 && i < 10) {\n                result += map(i)\n\
    \            }\n        }\n        result.toList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7z26gct.scala:21)\n\tat Problem.main(tmp_7z26gct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        arr.map(x => x.toString).sortBy(x => x.length).map(x => x.toString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_nb__5n.scala:14)\n\tat Problem.main(tmpl_nb__5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1L -> \"One\"\
    )\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n        map\
    \ += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map += (6L ->\
    \ \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"Eight\"\
    )\n        map += (9L -> \"Nine\")\n        val sorted = arr.filter(x => x >=\
    \ 1 && x <= 9).sorted\n        sorted.map(x => map(x)).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1L -> \"\
    One\")\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n   \
    \     map += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map +=\
    \ (6L -> \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"\
    Eight\")\n        map += (9L -> \"Nine\")\n        val result = new ListBuffer[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n\
    \        }\n        result.toList.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpokdq1byf.scala:28)\n\tat Problem.main(tmpokdq1byf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val res = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        sorted.reverse.map(x => map(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        val result = new ListBuffer[String]\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7_8ro5q.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7_8ro5q.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx7_8ro5q.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7_8ro5q.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx7_8ro5q.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n\
    \        val reversed = sorted.reverse\n        reversed.map(x => map(x))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val s = arr.map(x => x.toString)\n        s.sortWith((x, y) =>\
    \ x.length < y.length)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfy_fym32.scala:15)\n\tat Problem.main(tmpfy_fym32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += 1 -> \"One\"\
    \n        map += 2 -> \"Two\"\n        map += 3 -> \"Three\"\n        map += 4\
    \ -> \"Four\"\n        map += 5 -> \"Five\"\n        map += 6 -> \"Six\"\n   \
    \     map += 7 -> \"Seven\"\n        map += 8 -> \"Eight\"\n        map += 9 ->\
    \ \"Nine\"\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n  \
    \      sorted.map(x => map(x)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzg_c03o.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += \e[31m1\e[0m ->\
    \ \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzg_c03o.scala:13:15 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += \e[31m2\e[0m -> \e[31m\"Two\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxzg_c03o.scala:14:15 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        map += \e[31m3\e[0m -> \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    (\e\
    [1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzg_c03o.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        map += \e[31m4\e[0m ->\
    \ \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m  \
    \ |\e[0m               Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxzg_c03o.scala:16:15 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += \e[31m5\e[0m -> \e[31m\"Five\"\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \     Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m               Required:\
    \ (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = new ListBuffer[String]\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                result += map(i.toInt)\n\
    \            }\n        }\n        result.toList.sorted.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm986d0c_.scala:21)\n\tat Problem.main(tmpm986d0c_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = arr.groupBy(_.toString.length)\n        val l = m.keys.toList.sortWith(_\
    \ < _)\n        val result = new ListBuffer[String]\n        for (i <- l) {\n\
    \            val l2 = m(i).toList.sortWith(_ < _)\n            for (j <- l2) result\
    \ += j.toString\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjxa3_vf9.scala:21)\n\tat Problem.main(tmpjxa3_vf9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val result = new ListBuffer[String]\n        for (i <- 1 to 9)\
    \ {\n            val x = arr.filter(_ == i)\n            if (x.length > 0) {\n\
    \                result += x.length.toString + \" \" + i.toString\n          \
    \  }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplzupqrqz.scala:21)\n\tat Problem.main(tmplzupqrqz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1 -> \"\
    One\")\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n     \
    \   map += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6\
    \ -> \"Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\"\
    )\n        map += (9 -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1\
    \ && x <= 9).sorted\n        sorted.map(x => map(x)).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_f8xl1j0.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_f8xl1j0.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_f8xl1j0.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_f8xl1j0.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_f8xl1j0.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map[Long, String](1 -> \"One\", 2 -> \"Two\", 3 -> \"\
    Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\"\
    , 9 -> \"Nine\")\n        val result = arr.filter(x => x > 0 && x < 10).sorted.reverse.map(x\
    \ => map(x))\n        result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0k7y7vxq.scala:11:36\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmap\e\
    [0m = Map[\e[35mLong\e[0m, \e[35mString\e[0m](\e[31m1\e[0m -> \e[31m\"One\"\e\
    [0m, \e[31m2\e[0m -> \e[31m\"Two\"\e[0m, \e[31m3\e[0m -> \e[31m\"Three\"\e[0m,\
    \ \e[31m4\e[0m -> \e[31m\"Four\"\e[0m, \e[31m5\e[0m -> \e[31m\"Five\"\e[0m, \e\
    [31m6\e[0m -> \e[31m\"Six\"\e[0m, \e[31m7\e[0m -> \e[31m\"Seven\"\e[0m, \e[31m8\e\
    [0m -> \e[31m\"Eight\"\e[0m, \e[31m9\e[0m -> \e[31m\"Nine\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Found:    (\e[1m\e[31mInt\e[0m, String)\n\
    \e[31m   |\e[0m                                    Required: (\e[1m\e[32mLong\e\
    [0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0k7y7vxq.scala:11:48\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmap\e\
    [0m = Map[\e[35mLong\e[0m, \e[35mString\e[0m](\e[31m1\e[0m -> \e[31m\"One\"\e\
    [0m, \e[31m2\e[0m -> \e[31m\"Two\"\e[0m, \e[31m3\e[0m -> \e[31m\"Three\"\e[0m,\
    \ \e[31m4\e[0m -> \e[31m\"Four\"\e[0m, \e[31m5\e[0m -> \e[31m\"Five\"\e[0m, \e\
    [31m6\e[0m -> \e[31m\"Six\"\e[0m, \e[31m7\e[0m -> \e[31m\"Seven\"\e[0m, \e[31m8\e\
    [0m -> \e[31m\"Eight\"\e[0m, \e[31m9\e[0m -> \e[31m\"Nine\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                Found:    (\e[1m\e\
    [31mInt\e[0m, String)\n\e[31m   |\e[0m                                       \
    \         Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0k7y7vxq.scala:11:60 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = Map[\e[35mLong\e\
    [0m, \e[35mString\e[0m](\e[31m1\e[0m -> \e[31m\"One\"\e[0m, \e[31m2\e[0m -> \e\
    [31m\"Two\"\e[0m, \e[31m3\e[0m -> \e[31m\"Three\"\e[0m, \e[31m4\e[0m -> \e[31m\"\
    Four\"\e[0m, \e[31m5\e[0m -> \e[31m\"Five\"\e[0m, \e[31m6\e[0m -> \e[31m\"Six\"\
    \e[0m, \e[31m7\e[0m -> \e[31m\"Seven\"\e[0m, \e[31m8\e[0m -> \e[31m\"Eight\""
  stdout: ''
  timestamp: 1660009934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sortWith(_ <\
    \ _).reverse.map(x => map(x.toInt))\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n \
    \       result.toList.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h3ms3vq.scala:19)\n\tat Problem.main(tmp4h3ms3vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val res = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map.put(1, \"One\"\
    )\n        map.put(2, \"Two\")\n        map.put(3, \"Three\")\n        map.put(4,\
    \ \"Four\")\n        map.put(5, \"Five\")\n        map.put(6, \"Six\")\n     \
    \   map.put(7, \"Seven\")\n        map.put(8, \"Eight\")\n        map.put(9, \"\
    Nine\")\n        val result = new ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                result += map.get(i).get\n\
    \            }\n        }\n        result.toList.sorted.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppbvarfdc.scala:30)\n\tat Problem.main(tmppbvarfdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = arr.map(x => (x, x.toString.length)).groupBy(_._2).mapValues(_.map(_._1))\n\
    \        m.toList.sortBy(_._1).map(_._2).map(_.map(_.toString)).flatten\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwz2k48qi.scala:15)\n\tat Problem.main(tmpwz2k48qi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        arr.map(x => x.toString).sortBy(x => x.length).map(x => x.toString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_nb__5n.scala:14)\n\tat Problem.main(tmpl_nb__5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = arr.map(x => (x, x.toString.length)).groupBy(_._2).map(x\
    \ => (x._1, x._2.map(_._1)))\n        m.toList.sortBy(_._1).map(_._2).map(_.map(_.toString)).map(_.mkString(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tvmnvaj.scala:15)\n\tat Problem.main(tmp0tvmnvaj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).map(x =>\
    \ map(x.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        def byLengthHelper(arr : List[Long], acc : List[String]) : List[String]\
    \ = {\n            if (arr.isEmpty) acc\n            else {\n                val\
    \ (ones, rest) = arr.partition(x => x >= 1 && x <= 9)\n                val sorted\
    \ = ones.sorted.reverse\n                byLengthHelper(rest, acc ::: sorted.map(x\
    \ => x match {\n                    case 1 => \"One\"\n                    case\
    \ 2 => \"Two\"\n                    case 3 => \"Three\"\n                    case\
    \ 4 => \"Four\"\n                    case 5 => \"Five\"\n                    case\
    \ 6 => \"Six\"\n                    case 7 => \"Seven\"\n                    case\
    \ 8 => \"Eight\"\n                    case 9 => \"Nine\"\n                }))\n\
    \            }\n        }\n        byLengthHelper(arr, List())\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map.put(1, \"One\"\
    )\n        map.put(2, \"Two\")\n        map.put(3, \"Three\")\n        map.put(4,\
    \ \"Four\")\n        map.put(5, \"Five\")\n        map.put(6, \"Six\")\n     \
    \   map.put(7, \"Seven\")\n        map.put(8, \"Eight\")\n        map.put(9, \"\
    Nine\")\n        val sorted = arr.filter(x => x > 0 && x < 10).sorted\n      \
    \  sorted.map(x => map.get(x).get).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = new ListBuffer[String]\n        for (i <- arr)\
    \ {\n            if (i > 0 && i < 10) result += map(i.toInt)\n        }\n    \
    \    result.toList.sorted.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2deerlyq.scala:19)\n\tat Problem.main(tmp2deerlyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1 -> \"One\"\
    )\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n        map\
    \ += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6 -> \"\
    Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\")\n   \
    \     map += (9 -> \"Nine\")\n        val list = new ListBuffer[String]\n    \
    \    for (i <- arr) {\n            if (i >= 1 && i <= 9) list += map(i)\n    \
    \    }\n        list.toList.sorted.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vt3xo9v.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vt3xo9v.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4vt3xo9v.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4vt3xo9v.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4vt3xo9v.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n \
    \       result.toList.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h3ms3vq.scala:19)\n\tat Problem.main(tmp4h3ms3vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.map(x => map(x.toInt)).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val res = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1L -> \"\
    One\")\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n   \
    \     map += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map +=\
    \ (6L -> \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"\
    Eight\")\n        map += (9L -> \"Nine\")\n        val result = new ListBuffer[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n\
    \        }\n        result.toList.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpokdq1byf.scala:28)\n\tat Problem.main(tmpokdq1byf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1 -> \"One\"\
    )\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n        map\
    \ += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6 -> \"\
    Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\")\n   \
    \     map += (9 -> \"Nine\")\n        val result = new ListBuffer[String]\n  \
    \      for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n               \
    \ result += map(i)\n            }\n        }\n        result.toList.sorted.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps32o02n4.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps32o02n4.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps32o02n4.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps32o02n4.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps32o02n4.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n \
    \       result.toList.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h3ms3vq.scala:19)\n\tat Problem.main(tmp4h3ms3vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val result = new ListBuffer[String]\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                result += map(i.toInt)\n\
    \            }\n        }\n        result.toList.sorted.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm986d0c_.scala:21)\n\tat Problem.main(tmpm986d0c_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) {\n                result += map(i)\n\
    \            }\n        }\n        result.toList.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi45yqr1u.scala:21)\n\tat Problem.main(tmpi45yqr1u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = arr.map(x => (x, x.toString.length)).groupBy(_._2).map(x\
    \ => (x._1, x._2.map(_._1)))\n        m.toList.sortBy(_._1).map(_._2).map(_.map(_.toString)).map(_.sorted).map(_.reverse).map(_.mkString(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppznppe5s.scala:15)\n\tat Problem.main(tmppznppe5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1L -> \"One\"\
    )\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n        map\
    \ += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map += (6L ->\
    \ \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"Eight\"\
    )\n        map += (9L -> \"Nine\")\n        val sorted = arr.filter(x => x >=\
    \ 1 && x <= 9).sorted\n        sorted.map(x => map(x)).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n \
    \       result.toList.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h3ms3vq.scala:19)\n\tat Problem.main(tmp4h3ms3vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1 -> \"One\"\
    )\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n        map\
    \ += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6 -> \"\
    Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\")\n   \
    \     map += (9 -> \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx_f9q3e9.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1 -> \"\
    One\")\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n     \
    \   map += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map += (6\
    \ -> \"Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\"\
    )\n        map += (9 -> \"Nine\")\n        val list = arr.filter(x => x >= 1 &&\
    \ x <= 9).sorted.reverse.map(x => map(x))\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9narcyvu.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map += (\e[31m1\e[0m\
    \ -> \e[31m\"One\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m\
    \   |\e[0m                Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9narcyvu.scala:13:16 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        map += (\e[31m2\e[0m -> \e[31m\"Two\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m            \
    \    Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9narcyvu.scala:14:16 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        map += (\e[31m3\e[0m -> \e[31m\"Three\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m          \
    \      Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9narcyvu.scala:15:16 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        map += (\e[31m4\e[0m -> \e[31m\"Four\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9narcyvu.scala:16:16 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        map += (\e[31m5\e[0m -> \e[31m\"Five\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    (\e[1m\e[31mInt\e[0m, String)\n\e[31m   |\e[0m           \
    \     Required: (\e[1m\e[32mLong\e["
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        arr.map(x => x.toString).sortBy(x => x.length).map(x => x.toString)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_nb__5n.scala:14)\n\tat Problem.main(tmpl_nb__5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n       \
    \ val reversed = sorted.reverse\n        val result = reversed.map(x => x match\
    \ {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n          \
    \  case 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 =>\
    \ \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n \
    \           case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val res = new ListBuffer[String]\n        for (i <- arr) {\n  \
    \          if (i == 1) res += \"One\"\n            else if (i == 2) res += \"\
    Two\"\n            else if (i == 3) res += \"Three\"\n            else if (i ==\
    \ 4) res += \"Four\"\n            else if (i == 5) res += \"Five\"\n         \
    \   else if (i == 6) res += \"Six\"\n            else if (i == 7) res += \"Seven\"\
    \n            else if (i == 8) res += \"Eight\"\n            else if (i == 9)\
    \ res += \"Nine\"\n        }\n        res.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3jfbq___.scala:26)\n\tat Problem.main(tmp3jfbq___.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Int, List[String]]\n        for (i <- arr)\
    \ {\n            val str = i.toString\n            val len = str.length\n    \
    \        if (map.contains(len)) map(len) = str :: map(len)\n            else map(len)\
    \ = List(str)\n        }\n        val sorted = map.toList.sortBy(_._1)\n     \
    \   val result = new ListBuffer[String]\n        for (i <- sorted) {\n       \
    \     for (j <- i._2) result += j\n        }\n        result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xa1np0z.scala:26)\n\tat Problem.main(tmp2xa1np0z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val res = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]()\n        map += (1L -> \"\
    One\")\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n   \
    \     map += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map +=\
    \ (6L -> \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"\
    Eight\")\n        map += (9L -> \"Nine\")\n        val result = new ListBuffer[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result += map(i)\n            }\n        }\n        result.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnjrg8e1.scala:30)\n\tat Problem.main(tmppnjrg8e1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map += (1L -> \"One\"\
    )\n        map += (2L -> \"Two\")\n        map += (3L -> \"Three\")\n        map\
    \ += (4L -> \"Four\")\n        map += (5L -> \"Five\")\n        map += (6L ->\
    \ \"Six\")\n        map += (7L -> \"Seven\")\n        map += (8L -> \"Eight\"\
    )\n        map += (9L -> \"Nine\")\n        val list = new ListBuffer[String]\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) list += map(i)\n\
    \        }\n        list.toList.sorted.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqwhrhxbs.scala:28)\n\tat Problem.main(tmpqwhrhxbs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = new HashMap[Long, String]\n        map.put(1, \"One\"\
    )\n        map.put(2, \"Two\")\n        map.put(3, \"Three\")\n        map.put(4,\
    \ \"Four\")\n        map.put(5, \"Five\")\n        map.put(6, \"Six\")\n     \
    \   map.put(7, \"Seven\")\n        map.put(8, \"Eight\")\n        map.put(9, \"\
    Nine\")\n        val result = new ListBuffer[String]\n        for (i <- arr) {\n\
    \            if (map.contains(i)) result += map(i)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfm6385z2.scala:28)\n\tat Problem.main(tmpfm6385z2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val m = arr.groupBy(_.toString.length).map(x => (x._1, x._2.sorted))\n\
    \        m.toList.sortBy(_._1).map(x => x._2.map(_.toString)).flatten\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv05dgbgd.scala:15)\n\tat Problem.main(tmpv05dgbgd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        if (list.isEmpty) List() else list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted\n \
    \       sorted.reverse.map(x => map(x.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val result = new ListBuffer[String]\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) result += map(i)\n        }\n \
    \       result.toList.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h3ms3vq.scala:19)\n\tat Problem.main(tmp4h3ms3vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x =>\
    \ map(x.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x))\n        list\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L\
    \ -> \"Four\", 5L -> \"Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\"\
    , 9L -> \"Nine\")\n        val sorted = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        sorted.map(x => map(x))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // If the array is empty, return an empty array:\n    // If the array has any\
    \ strange number ignore it:\n    def byLength(arr : List[Long]) : List[String]\
    \ = {\n        val map = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 ->\
    \ \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 ->\
    \ \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => map(x.toInt))\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009909
