name: HumanEval_73_smallest_change
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers, find the minimum number of elements that\n\
  \    // need to be changed to make the array palindromic. A palindromic array is\
  \ an array that\n    // is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n    // For example:\n    def\
  \ smallestChange(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\
  \ == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong,\
  \ 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong)))\
  \ == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n\
  \    }\n\n}\n"
completions: ["        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  for (k <- i until j) {\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (len <- 2 to n) {\n            for (i <- 0 until n - len +\
    \ 1) {\n                val j = i + len - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                val j = i + l\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j)\
    \ = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n        for (len\
    \ <- 2 to n) {\n            for (i <- 0 until n - len + 1) {\n               \
    \ val j = i + len - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i +\
    \ 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) +\
    \ 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n       \
    \ for (i <- 0 until n - 1) dp(i)(i + 1) = arr(i) - arr(i + 1)\n        for (k\
    \ <- 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k) + arr(i) - arr(i + 1), dp(i)(i + k - 1) + arr(i\
    \ + k) - arr(i + k - 1))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) {\n            for (j <- 0 until n) {\n               \
    \ if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n  \
    \          }\n        }\n        for (i <- 0 until n) {\n            for (j <-\
    \ i + 1 until n) {\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i <= j) {\n                    if (i == j) dp(i)(j) = 0\n          \
    \          else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n            \
    \        else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n\
    \                    for (k <- i until j) {\n                        dp(i)(j)\
    \ = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n          \
    \      }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                dp(i)(i + l) = min(dp(i + 1)(i + l) + abs(arr(i)\
    \ - arr(i + l)), dp(i)(i + l - 1) + abs(arr(i + l) - arr(i + l - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n    \
    \            else dp(i)(j) = Long.MaxValue\n            }\n        }\n       \
    \ for (i <- 0 until n) {\n            for (j <- 0 until n) {\n               \
    \ if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j) = abs(arr(i)\
    \ - arr(j))\n                else {\n                    for (k <- i until j)\
    \ {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n\
    \                    }\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j)\
    \ = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n        for (i <-\
    \ 0 until n; j <- i + 1 until n) {\n            dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1) + abs(arr(i) - arr(j)))\n        }\n        dp(0)(n - 1)", "   \
    \     val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (len <- 3 to n) {\n\
    \            for (i <- 0 to n - len) {\n                val j = i + len - 1\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (l <- 2 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            for (j <-\
    \ i + 1 until n) {\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i < j) {\n                    if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                    else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j -\
    \ 1)) + 1\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for\
    \ (i <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j - 1) + abs(arr(i) - arr(j)), dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i <= j) {\n                    if (i ==\
    \ j) dp(i)(j) = 0\n                    else if (i + 1 == j) dp(i)(j) = abs(arr(i)\
    \ - arr(j))\n                    else {\n                        dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n                   \
    \     dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n    \
    \                }\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n  \
    \      }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n\
    \                val j = i + len - 1\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (len <- 3 to n) {\n            for (i <- 0 to\
    \ n - len) {\n                val j = i + len - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 to n - len) {\n                val j = i + len - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i + 1)(i + k) + abs(arr(i) - arr(i + 1)))\n \
    \           }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n; j <- 0\
    \ until n) {\n            if (i == j) dp(i)(j) = 0\n            else dp(i)(j)\
    \ = Long.MaxValue\n        }\n        for (i <- 0 until n; j <- 0 until n) {\n\
    \            if (i == j) dp(i)(j) = 0\n            else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n            else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j\
    \ - 1) + abs(arr(i) - arr(j)))\n            for (k <- i until j) dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(k) + dp(k + 1)(j))\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) =\
    \ 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i != n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n \
    \       }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l)\
    \ {\n                val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n   \
    \             else dp(i)(j) = Long.MaxValue\n            }\n        }\n      \
    \  for (i <- 0 until n) {\n            for (j <- 0 until n) {\n              \
    \  if (i <= j) {\n                    if (i == j) dp(i)(j) = 0\n             \
    \       else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n               \
    \     else {\n                        dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1)\
    \ + abs(arr(i) - arr(j)))\n                        for (k <- i until j) {\n  \
    \                          dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) =\
    \ 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n    \
    \            val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n            }\n        }\n        for (l <- 2 until n) {\n  \
    \          for (i <- 0 until n - l) {\n                val j = i + l\n       \
    \         dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n               \
    \     else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + abs(arr(i) - arr(j))\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i <= j) {\n                    if (i == j) dp(i)(j)\
    \ = 0\n                    else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                    else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n                    for (k <- i until j) {\n                   \
    \     dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i <= j) {\n                    if (i == j) dp(i)(j)\
    \ = 0\n                    else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                    else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n                    for (k <- i until j) {\n                   \
    \     dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) =\
    \ abs(arr(i) - arr(i + 1))\n        for (i <- 2 until n) {\n            for (j\
    \ <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1)\
    \ + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n      \
    \          else dp(i)(j) = Long.MaxValue\n            }\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                for (k <- i until j) {\n                    dp(i)(j)\
    \ = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j) + abs(arr(i) - arr(j)))\n          \
    \      }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val left = Array.fill(n)(0L)\n        val right = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            left(i) = if (i == 0) arr(i) else\
    \ left(i - 1) + arr(i)\n            right(n - i - 1) = if (i == 0) arr(n - i -\
    \ 1) else right(n - i) + arr(n - i - 1)\n        }\n        var result = Long.MaxValue\n\
    \        for (i <- 0 until n) {\n            val leftSum = if (i == 0) 0 else\
    \ left(i - 1)\n            val rightSum = if (i == n - 1) 0 else right(i + 1)\n\
    \            result = min(result, abs(leftSum - rightSum))\n        }\n      \
    \  result", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i\
    \ + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) {\n            for (j <- 0 until n) {\n               \
    \ if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n  \
    \          }\n        }\n        for (i <- 0 until n) {\n            for (j <-\
    \ 0 until n) {\n                if (i + 1 <= j) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)))\n                if (i <= j - 1) dp(i)(j)\
    \ = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n                if\
    \ (i + 1 <= j - 1) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n + 1,\
    \ n + 1)\n        for (i <- 0 to n) dp(i)(0) = 0\n        for (j <- 0 to n) dp(0)(j)\
    \ = 0\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n        \
    \        if (arr(i - 1) == arr(n - j)) dp(i)(j) = dp(i - 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i - 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(n)(n)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i <= j) {\n                    if (i ==\
    \ j) dp(i)(j) = 0\n                    else if (i + 1 == j) dp(i)(j) = abs(arr(i)\
    \ - arr(j))\n                    else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1)\
    \ + abs(arr(i) - arr(j)))\n                    for (k <- i until j) {\n      \
    \                  dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n       \
    \             }\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 2 until n) {\n            for (i <- 0 until n - l) {\n                val j\
    \ = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i +\
    \ 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n  \
    \      dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                val k = j + i\n     \
    \           dp(j)(k) = min(dp(j + 1)(k) + abs(arr(j) - arr(j + 1)), dp(j)(k -\
    \ 1) + abs(arr(k) - arr(k - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  for (k <- i until j) {\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 to n - len) {\n                val j = i + len - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                if (i == j) dp(i)(j)\
    \ = 0\n                else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                else {\n                    for (k <- i until j) {\n        \
    \                dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n         \
    \           }\n                }\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                val j = i + k\n               \
    \ dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n; j <- 0 until n) dp(i)(j) = Long.MaxValue\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n                for (k <- i + 1 until\
    \ j) dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n            }\n      \
    \  }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n\
    \ + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 0\n        for (j <- 0 to\
    \ n) dp(0)(j) = 0\n        for (i <- 1 to n) {\n            for (j <- 1 to n)\
    \ {\n                if (arr(i - 1) == arr(n - j)) dp(i)(j) = dp(i - 1)(j - 1)\n\
    \                else dp(i)(j) = min(dp(i - 1)(j), dp(i)(j - 1)) + 1\n       \
    \     }\n        }\n        dp(n)(n)", "        val n = arr.length\n        val\
    \ dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n\
    \                val j = i + len - 1\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (len <- 2 to n) {\n            for (i <- 0 until n - len +\
    \ 1) {\n                val j = i + len - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                val j = i + l\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <-\
    \ n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n              \
    \  dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n \
    \           for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          for (k <- i until j) {\n                        dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(k) + dp(k + 1)(j))\n                    }\n                }\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                dp(i)(i + l) = min(dp(i + 1)(i + l) + abs(arr(i) -\
    \ arr(i + l)), dp(i)(i + l - 1) + abs(arr(i + l) - arr(i + l - 1)))\n        \
    \    }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n      \
    \  val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n\
    \        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n      \
    \          dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + 1)), dp(i)(i\
    \ + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n   \
    \     dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n\
    \            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- i until n) {\n                if (i == j) dp(i)(j)\
    \ = 0\n                else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                else {\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)))\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n                    dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n                }\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n     \
    \   for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n       \
    \ for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n           \
    \     val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n       \
    \ for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n          \
    \      val j = i + l - 1\n                dp(i)(j) = Long.MaxValue\n         \
    \       if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + 1)\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1) + 1)\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        var dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i < j) {\n                    if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                    else dp(i)(j) = min(dp(i +\
    \ 1)(j), dp(i)(j - 1)) + 1\n                }\n            }\n        }\n    \
    \    dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val sum = arr.sum\n        val dp\
    \ = Array.fill(n)(Array.fill(n)(0L))\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = arr(i)\n            if (i + 1 < n) dp(i)(i + 1) = arr(i) + arr(i\
    \ + 1)\n        }\n        for (i <- 2 until n) {\n            for (j <- 0 until\
    \ n - i) {\n                dp(j)(j + i) = dp(j)(j + i - 1) + arr(j + i)\n   \
    \         }\n        }\n        val dp2 = Array.fill(n)(Array.fill(n)(0L))\n \
    \       for (i <- 0 until n) {\n            dp2(i)(i) = arr(i)\n            if\
    \ (i + 1 < n) dp2(i)(i + 1) = arr(i) + arr(i + 1)\n        }\n        for (i <-\
    \ 2 until n) {\n            for (j <- 0 until n - i) {\n                dp2(j)(j\
    \ + i) = dp2(j)(j + i - 1) + arr(j + i)\n            }\n        }\n        val\
    \ dp3 = Array.fill(n)(Array.fill(n)(0L))\n        for (i <- 0 until n) {\n   \
    \         dp3(i)(i) = arr(i)\n            if (i + 1 < n) dp3(i)(i + 1) = arr(i)\
    \ + arr(i + 1)\n        }\n        for (i <- 2 until n) {\n            for (j\
    \ <- 0 until n - i) {\n                dp3(j)(j + i) = dp3(j)(j + i - 1) + arr(j\
    \ + i)\n            }\n        }\n        val dp4 = Array.fill(n)(Array.fill(n)(0L))\n\
    \        for (i <- 0 until n) {\n            dp4(i)(i) = arr(i)\n            if\
    \ (i + 1 < n) dp4(i)(i +", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n          \
    \  for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i\
    \ + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i +\
    \ k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n - 1) {\n            dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n \
    \       for (len <- 2 until n) {\n            for (i <- 0 until n - len) {\n \
    \               val j = i + len\n                dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n\
    \            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n - 1) {\n            dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n \
    \       for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n     \
    \           dp(i)(i + k) = min(dp(i)(i + k), dp(i + 1)(i + k) + abs(arr(i) - arr(i\
    \ + k)))\n                dp(i)(i + k) = min(dp(i)(i + k), dp(i)(i + k - 1) +\
    \ abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 2 until n) {\n            for (i <- 0 until n - l) {\n                val j\
    \ = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i +\
    \ 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n  \
    \      dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i) + abs(arr(j) - arr(j + i)), dp(j)(j + i - 1) + abs(arr(j + i) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i) + abs(arr(j) - arr(j + i)), dp(j)(j + i - 1) + abs(arr(j + i) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until\
    \ n) {\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n  \
    \              else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n         \
    \   }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n       \
    \ val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n       \
    \         else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n             \
    \   else dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <-\
    \ n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n              \
    \  if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i <= j) {\n                    if (i ==\
    \ j) dp(i)(j) = 0\n                    else if (i + 1 == j) dp(i)(j) = abs(arr(i)\
    \ - arr(j))\n                    else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1)\
    \ + abs(arr(i) - arr(j)))\n                    for (k <- i until j) {\n      \
    \                  dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n       \
    \             }\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) {\n                dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        \
    \    }\n        }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <-\
    \ i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) -\
    \ arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           for (m <- i until j) {\n                    dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(m) + dp(m + 1)(j) + abs(arr(i) - arr(j)))\n                }\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n     \
    \           else dp(i)(j) = Long.MaxValue\n            }\n        }\n        for\
    \ (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else\
    \ dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n \
    \       dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                val j = i + l\n     \
    \           dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n\
    \                dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j -\
    \ 1)))\n                dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            for (j <- 0 until n) {\n                if (i == j)\
    \ dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n            }\n\
    \        }\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j)\
    \ dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n                  \
    \  dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n       \
    \             dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) -\
    \ arr(j)))\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) {\n\
    \                dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n            }\n    \
    \    }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until\
    \ n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n\
    \                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)))\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 2 until n) {\n          \
    \  for (i <- 0 until n - l) {\n                val j = i + l\n               \
    \ dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n \
    \           for (i <- 0 until n - l) {\n                val j = i + l\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j) = 0\n \
    \           else dp(i)(j) = Long.MaxValue\n        }\n        for (i <- n - 1\
    \ to 0 by -1; j <- i + 1 until n) {\n            dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j) + arr(i) - arr(i + 1))\n            dp(i)(j) = min(dp(i)(j), dp(i)(j\
    \ - 1) + arr(j) - arr(j - 1))\n            dp(i)(j) = min(dp(i)(j), dp(i + 1)(j\
    \ - 1) + abs(arr(i) - arr(j)))\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (l <- 2 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                val j = i + l\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l)\
    \ {\n                val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n   \
    \             else dp(i)(j) = Long.MaxValue\n            }\n        }\n      \
    \  for (i <- 0 until n) {\n            for (j <- 0 until n) {\n              \
    \  if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j) = abs(arr(i)\
    \ - arr(j))\n                else {\n                    for (k <- i until j)\
    \ {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n\
    \                    }\n                }\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <-\
    \ n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n              \
    \  dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until n) {\n                if (i == j)\
    \ dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n            }\n\
    \        }\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                if (i < j) {\n                    if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                    else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for\
    \ (i <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n                 \
    \   dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n      \
    \              dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  for (k <- i until j) {\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n    \
    \            val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 0\n  \
    \      for (j <- 0 to n) dp(0)(j) = 0\n        for (i <- 1 to n) {\n         \
    \   for (j <- 1 to n) {\n                if (arr(i - 1) == arr(n - j)) dp(i)(j)\
    \ = dp(i - 1)(j - 1)\n                else dp(i)(j) = min(dp(i - 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(n)(n)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n    \
    \            val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                if (i == j) dp(i)(j)\
    \ = 0\n                else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                else {\n                    for (k <- i until j) {\n        \
    \                dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n         \
    \           }\n                }\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  for (k <- i until j) {\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    for (k <-\
    \ i until j) {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k\
    \ + 1)(j))\n                    }\n                }\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n  \
    \      }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n       \
    \ for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n          \
    \      val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1))\
    \ + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (len <- 2 to n) {\n            for (i <- 0 until n - len +\
    \ 1) {\n                val j = i + len - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i\
    \ + 1 until n) {\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 2 until n) {\n            for (i <- 0 until n - l) {\n                val j\
    \ = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i +\
    \ 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n  \
    \      dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k\
    \ - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k\
    \ - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k)\
    \ - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "     \
    \   val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k)\
    \ - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "     \
    \   val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                dp(i)(j)\
    \ = Long.MaxValue\n            }\n        }\n        for (i <- 0 until n) {\n\
    \            dp(i)(i) = 0\n        }\n        for (i <- 0 until n - 1) {\n   \
    \         dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                val j\
    \ = i + k\n                for (m <- i until j) {\n                    dp(i)(j)\
    \ = min(dp(i)(j), dp(i)(m) + dp(m + 1)(j) + abs(arr(i) - arr(j)))\n          \
    \      }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                val j = i + l\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- i - 1 to 0 by -1) {\n    \
    \            if (arr(i) == arr(j)) dp(i)(j) = dp(i - 1)(j + 1)\n             \
    \   else dp(i)(j) = min(dp(i - 1)(j), dp(i)(j + 1)) + 1\n            }\n     \
    \   }\n        dp(n - 1)(0)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- n - 1 to 0\
    \ by -1; j <- i + 1 until n) {\n            dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n\
    \            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n\
    \                if (l == 2) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n     \
    \           else dp(i)(j) = min(dp(i + 1)(j - 1) + (if (arr(i) == arr(j)) 0 else\
    \ 1), dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i\
    \ + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n)\
    \ dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until\
    \ n) {\n            for (i <- 0 until n - l) {\n                val j = i + l\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n          \
    \      val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l)\
    \ {\n                val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n   \
    \             else dp(i)(j) = Long.MaxValue\n            }\n        }\n      \
    \  for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = abs(arr(i) - arr(i +\
    \ 1))\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k\
    \ - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j)\
    \ dp(i)(j) = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n       \
    \ for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    for (k <-\
    \ i until j) {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k\
    \ + 1)(j))\n                    }\n                }\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                dp(i)(i + l) = min(dp(i\
    \ + 1)(i + l - 1) + abs(arr(i) - arr(i + l)), dp(i + 1)(i + l) + abs(arr(i) -\
    \ arr(i + 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (l <- 2 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                val j = i + l\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n                 \
    \   dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n      \
    \              dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          for (k <- i until j) {\n                        dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(k) + dp(k + 1)(j))\n                    }\n                }\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                val j = i + l\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    for (k <-\
    \ i until j) {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k\
    \ + 1)(j))\n                    }\n                }\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                val j = i + l\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i\
    \ + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 2 until n) {\n          \
    \  for (i <- 0 until n - l) {\n                val j = i + l\n               \
    \ dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) -\
    \ arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n        \
    \    }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n      \
    \  val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n        \
    \    dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                val j = i + l\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n    \
    \            val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (i <- 2 until n) {\n            for (j <- 0 until n - i)\
    \ {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j) - arr(j\
    \ + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + 1)))\n            }\n       \
    \ }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n            for\
    \ (i <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n; j <- 0\
    \ until n) {\n            if (i == j) dp(i)(j) = 0\n            else dp(i)(j)\
    \ = Long.MaxValue\n        }\n        for (i <- 0 until n; j <- i + 1 until n)\
    \ {\n            dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i +\
    \ 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) -\
    \ arr(j)))\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n  \
    \      val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n    \
    \        dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) -\
    \ arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n            for\
    \ (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l)\
    \ {\n                val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                if (i == j) dp(i)(j)\
    \ = 0\n                else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                else {\n                    for (k <- i until j) {\n        \
    \                dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n         \
    \           }\n                }\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n\
    \                dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j -\
    \ 1)))\n                dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n    \
    \        for (i <- 0 until n - l) {\n                val j = i + l\n         \
    \       dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) +\
    \ abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n    \
    \        for (i <- 0 until n - l) {\n                val j = i + l\n         \
    \       dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n  \
    \              dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \                dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n             \
    \   val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i +\
    \ 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) +\
    \ 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n       \
    \ for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i\
    \ + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n   \
    \     dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + 1)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (l <- 1 until n) {\n            for (i <- 0 until\
    \ n - l) {\n                val j = i + l\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j),\
    \ dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i ==\
    \ j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n\
    \                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n; j <- 0 until n) dp(i)(j) = Long.MaxValue\n        for (i <-\
    \ 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        for (len <- 2 until n) {\n            for (i <- 0 until\
    \ n - len) {\n                val j = i + len\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                val j = i + l\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i\
    \ + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n\
    \        for (i <- 0 to n) {\n            dp(i)(i) = 0\n            if (i + 1\
    \ <= n) dp(i)(i + 1) = 0\n        }\n        for (l <- 2 to n) {\n           \
    \ for (i <- 0 to n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j\
    \ - 1)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n\
    \        dp(0)(n)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  for (k <- i until j) {\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)),\
    \ dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n      \
    \  }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n                val\
    \ j = i + len - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) -\
    \ arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ dp(i)(i + l) = min(dp(i + 1)(i + l) + abs(arr(i) - arr(i + l)), dp(i)(i + l\
    \ - 1) + abs(arr(i + l) - arr(i + l - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i < j) {\n                    if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                    else dp(i)(j) =\
    \ min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                }\n            }\n    \
    \    }\n        dp(0)(n - 1)", "        def helper(arr : List[Long], left : Int,\
    \ right : Int) : Long = {\n            if (left >= right) 0\n            else\
    \ {\n                val leftValue = arr(left)\n                val rightValue\
    \ = arr(right)\n                val leftChange = abs(leftValue - rightValue)\n\
    \                val rightChange = abs(leftValue - (rightValue + 1))\n       \
    \         val change = min(leftChange, rightChange)\n                change +\
    \ helper(arr, left + 1, right - 1)\n            }\n        }\n        helper(arr,\
    \ 0, arr.length - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                val j = i + l\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 2 until n) {\n            for (i <- 0 until n - l) {\n                val j\
    \ = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i +\
    \ 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n  \
    \      dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n  \
    \                  for (k <- i until j) {\n                        dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n            \
    \    }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i + 1)(i + k) + abs(arr(i) - arr(i + 1)))\n \
    \           }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    for (k <-\
    \ i until j) {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k\
    \ + 1)(j))\n                    }\n                }\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n; j <- 0 until n) {\n            if (i == j)\
    \ dp(i)(j) = 0\n            else dp(i)(j) = Long.MaxValue\n        }\n       \
    \ for (i <- 0 until n; j <- 0 until n) {\n            if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n        }\n        for (k <- 2 until n; i <- 0 until\
    \ n - k; j <- i + k until n) {\n            dp(i)(j) = min(dp(i)(j), dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1) + abs(arr(i) - arr(j)))\n        }\n        dp(0)(n - 1)", "     \
    \   val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (l <- 2 to n) {\n            for\
    \ (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n            \
    \    if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n           \
    \ for (j <- i + 1 until n) {\n                if (arr(i) == arr(j)) dp(i)(j) =\
    \ dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (len <- 2 to n) {\n            for (i <- 0 until\
    \ n - len + 1) {\n                val j = i + len - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n\
    \                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i <= j) {\n                    if (i == j) dp(i)(j)\
    \ = 0\n                    else if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n\
    \                    else dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n                    for (k <- i until j) {\n                   \
    \     dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n                    }\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) =\
    \ abs(arr(i) - arr(i + 1))\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n\
    \        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n    \
    \            val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n       \
    \ for (i <- 0 until n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)"]
stop_tokens:
- "\n    }\n"
