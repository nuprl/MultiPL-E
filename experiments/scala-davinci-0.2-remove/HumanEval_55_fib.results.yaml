language: scala
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        def fibHelper(n : Long, a : Long, b : Long) : Long = {\n            if\
    \ (n == 0) a\n            else fibHelper(n - 1, b, a + b)\n        }\n       \
    \ fibHelper(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        def fib_helper(n : Long, a : Long, b : Long) : Long = {\n           \
    \ if (n == 0) a\n            else fib_helper(n - 1, b, a + b)\n        }\n   \
    \     fib_helper(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 1 until n) {\n            val c = a + b\n\
    \            a = b\n            b = c\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphw3x5bxj.scala:10:26\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        val sqrt5 = sqrt(5)\n        val phi = (1 + sqrt5) / 2\n        val psi\
    \ = (1 - sqrt5) / 2\n        val a = pow(phi, n)\n        val b = pow(psi, n)\n\
    \        val c = a - b\n        val d = sqrt5 * c\n        return round(d / sqrt5)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pqnmin4.scala:16)\n\tat Problem.main(tmp6pqnmin4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        val a = Array.fill(n.toInt + 1)(0L)\n        a(0) = 0\n        a(1) =\
    \ 1\n        for (i <- 2 to n.toInt) a(i) = a(i - 1) + a(i - 2)\n        a(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        val sqrt5 = sqrt(5)\n        val phi = (1 + sqrt5) / 2\n        val psi\
    \ = (1 - sqrt5) / 2\n        val fibn = (pow(phi, n) - pow(psi, n)) / sqrt5\n\
    \        fibn.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n <= 1) return n\n        var a = 0L\n        var b = 1L\n      \
    \  for (i <- 2 to n.toInt) {\n            val c = a + b\n            a = b\n \
    \           b = c\n        }\n        return b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        val phi = (1 + sqrt(5)) / 2\n        val psi = (1 - sqrt(5)) / 2\n  \
    \      return round((pow(phi, n) - pow(psi, n)) / sqrt(5))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        var i = 0L\n        while (i\
    \ < n) {\n            val c = a + b\n            a = b\n            b = c\n  \
    \          i += 1\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 0 until n) {\n    \
    \        val c = a + b\n            a = b\n            b = c\n        }\n    \
    \    a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsy0rqba.scala:8:26\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m  |\e[0m                          ^\e[0m\n\
    \e[31m  |\e[0m                          Found:    (n : Long)\n\e[31m  |\e[0m \
    \                         Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        var i = 0L\n        while (i\
    \ < n) {\n            val c = a + b\n            a = b\n            b = c\n  \
    \          i += 1\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n <= 1) return n\n        var a = 0L\n        var b = 1L\n      \
    \  for (i <- 2 to n.toInt) {\n            val c = a + b\n            a = b\n \
    \           b = c\n        }\n        return b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2L to n) {\n            val c = a + b\n\
    \            a = b\n            b = c\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2L to n) {\n            val c = a + b\n\
    \            a = b\n            b = c\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        val a = ArrayBuffer[Long]()\n        a += 0\n        a += 1\n       \
    \ for (i <- 2 to n.toInt) a += a(i - 1) + a(i - 2)\n        a(n.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2L to n) {\n            val c = a + b\n\
    \            a = b\n            b = c\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1L to n) {\n      \
    \      val c = a + b\n            a = b\n            b = c\n        }\n      \
    \  a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2L to n) {\n            val c = a + b\n\
    \            a = b\n            b = c\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        def fib_helper(n : Long, a : Long, b : Long) : Long = {\n           \
    \ if (n == 0) a\n            else fib_helper(n - 1, b, a + b)\n        }\n   \
    \     fib_helper(n, 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        var i = 0L\n        while (i\
    \ < n) {\n            val c = a + b\n            a = b\n            b = c\n  \
    \          i += 1\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1L to n) {\n      \
    \      val c = a + b\n            a = b\n            b = c\n        }\n      \
    \  return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        var c = 0L\n        for (i <-\
    \ 1 to n.toInt) {\n            c = a + b\n            a = b\n            b = c\n\
    \        }\n        return a\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        def fibRec(n : Long, a : Long, b : Long) : Long = {\n            if (n\
    \ == 0) a\n            else fibRec(n - 1, b, a + b)\n        }\n        fibRec(n,\
    \ 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) ==\
    \ (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n \
    \   assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        var i = 0L\n        while (i\
    \ < n) {\n            val c = a + b\n            a = b\n            b = c\n  \
    \          i += 1\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2L to n) {\n            val c = a + b\n\
    \            a = b\n            b = c\n        }\n        return b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1L to n) {\n      \
    \      val c = a + b\n            a = b\n            b = c\n        }\n      \
    \  a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1L to n) {\n      \
    \      val c = a + b\n            a = b\n            b = c\n        }\n      \
    \  return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) 0\n        else if (n == 1) 1\n        else fib(n - 1) +\
    \ fib(n - 2)\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        for (i <- 1 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        var a = 0L\n        var b = 1L\n        var i = 0L\n        while (i\
    \ < n) {\n            val c = a + b\n            a = b\n            b = c\n  \
    \          i += 1\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    def fib(n : Long) : Long = {\n\
    \        if (n == 0) return 0\n        if (n == 1) return 1\n        var a = 0L\n\
    \        var b = 1L\n        for (i <- 2 to n.toInt) {\n            val c = a\
    \ + b\n            a = b\n            b = c\n        }\n        return b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978459
