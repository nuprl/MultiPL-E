language: scala
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var result = false\n        var i = 1\n   \
    \     while (i <= x) {\n            if (pow(n, i) == x) {\n                result\
    \ = true\n                i = x\n            }\n            i += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0l5wyri_.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                i = x\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (x : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r == round(r))\
    \ {\n            val rr = round(r)\n            val rrr = pow(rr, 2)\n       \
    \     if (rrr == x) {\n                val rrrr = pow(rr, 3)\n               \
    \ if (rrrr == x) {\n                    val rrrrr = pow(rr, 4)\n             \
    \       if (rrrrr == x) {\n                        val rrrrrr = pow(rr, 5)\n \
    \                       if (rrrrrr == x) {\n                            val rrrrrrr\
    \ = pow(rr, 6)\n                            if (rrrrrrr == x) {\n            \
    \                    val rrrrrrrr = pow(rr, 7)\n                             \
    \   if (rrrrrrrr == x) {\n                                    val rrrrrrrrr =\
    \ pow(rr, 8)\n                                    if (rrrrrrrrr == x) {\n    \
    \                                    val rrrrrrrrrr = pow(rr, 9)\n           \
    \                             if (rrrrrrrrrr == x) {\n                       \
    \                     val rrrrrrrrrrr = pow(rr, 10)\n                        \
    \                    if (rrrrrrrrrrr == x) {\n                               \
    \                 val rrrrrrrrrrrr = pow(rr, 11)\n                           \
    \                     if (rrrrrrrrrrrr == x) {\n                             \
    \                       val rrrrrrrrrrrrr = pow(rr, 12)\n                    \
    \                                if (rrrrrrrrrrrrr == x) {\n                 \
    \                                       val rrrrrrrrrrrrrr = pow(rr, 13)\n   \
    \                                                     if (rrrrrrrrrrrrrr == x)\
    \ {\n                                                            val rrrrrrrrrrrrrrr\
    \ = pow(rr, 14)\n                                                            if\
    \ (rrrrrrrrrrrrrrr == x) {\n                                                 \
    \               val rrrrrrrrrrrrrrrr = pow(rr, 15)\n                         \
    \                                       if (rrrrrrrrrrrrrrrr == x) {\n       \
    \                                                             val rrrrrrrrrrrrrrrrr\
    \ = pow(rr, 16)\n                                                            \
    \        if (rrrrrrrrrrrrrrrrr == x) {\n                                     \
    \           \n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsbdhu6oc.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbdhu6oc.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (r ==\
    \ round(r)) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe\
    \ you are missing an else part for the conditional?\n\e[31m11 |\e[0m         \
    \   \e[33mval\e[0m \e[36mrr\e[0m = round(r)\n\e[31m12 |\e[0m            \e[33mval\e\
    [0m \e[36mrrr\e[0m = pow(rr, \e[31m2\e[0m)\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (rrr == x) {\n\e[31m14 |\e[0m                \e[33mval\e[0m \e[36mrrrr\e[0m\
    \ = pow(rr, \e[31m3\e[0m)\n\e[31m15 |\e[0m                \e[33mif\e[0m (rrrr\
    \ == x) {\n\e[31m16 |\e[0m                    \e[33mval\e[0m \e[36mrrrrr\e[0m\
    \ = pow(rr, \e[31m4\e[0m)\n\e[31m17 |\e[0m                    \e[33mif\e[0m (rrrrr\
    \ == x) {\n\e[31m18 |\e[0m                        \e[33mval\e[0m \e[36mrrrrrr\e\
    [0m = pow(rr, \e[31m5\e[0m)\n\e[31m19 |\e[0m                        \e[33mif\e\
    [0m (rrrrrr == x) {\n\e[31m20 |\e[0m                            \e[33mval\e[0m\
    \ \e[36mrrrrrrr\e[0m = pow(rr, \e[31m6\e[0m)\n\e[31m21 |\e[0m                \
    \            \e[33mif\e[0m (rrrrrrr == x) {\n\e[31m22 |\e[0m                 \
    \               \e[33mval\e[0m \e[36mrrrrrrrr\e[0m = pow(rr, \e[31m7\e[0m)\n\e\
    [31m23 |\e[0m                                \e[33mif\e[0m (rrrrrrrr == x) {\n\
    \e[31m24 |\e[0m                                    \e[33mval\e[0m \e[36mrrrrrrrrr\e\
    [0m = pow(rr, \e[31m8\e[0m)\n\e[31m25 |\e[0m                                 \
    \   \e[33mif\e[0m (rrrrrrrrr == x) {\n\e[31m26 |\e[0m                        \
    \                \e[33mval\e[0m \e[36mrrrrrrrrrr\e[0m = pow(rr, \e[31m9\e[0m)\n\
    \e[31m27 |\e[0m                                        \e[33mif\e[0m (rrrrrrrrrr\
    \ == x) {\n\e[31m28 |\e[0m                                            \e[33mval\e\
    [0m \e[36mrrrrrrrrrrr\e[0m = pow(rr, \e[31m10\e[0m)\n\e[31m29 |\e[0m         \
    \                                   \e[33mif\e[0m (rrrrrrrrrrr == x) {\n\e[31m30"
  stdout: ''
  timestamp: 1660010290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val root = pow(x, 1.0 / n)\n        root %\
    \ 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe012zrfa.scala:16)\n\tat Problem.main(tmpe012zrfa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) true\n        else if (x % n !=\
    \ 0) false\n        else isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= n) {\n            var p = pow(n, i)\n            if (p ==\
    \ x) return true\n            if (p > x) return false\n            i += 1\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3c5sbzlx.scala:20)\n\tat Problem.main(tmp3c5sbzlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var y = n\n        while (y < x) {\n      \
    \      y *= n\n        }\n        return y == x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa0wnesoc.scala:25)\n\tat Problem.main(tmpa0wnesoc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val m = log(x) / log(n)\n        if (m % 1\
    \ == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnsk10f7.scala:21)\n\tat Problem.main(tmprnsk10f7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 1\n\
    \        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val m = log(x) / log(n)\n        if (m % 1\
    \ == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnsk10f7.scala:21)\n\tat Problem.main(tmprnsk10f7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val root = pow(x, 1.0 / n)\n        root -\
    \ root.toInt == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppvbaryc8.scala:16)\n\tat Problem.main(tmppvbaryc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= n) {\n            var p = pow(n, i)\n            if (p ==\
    \ x) return true\n            if (p > x) return false\n            i += 1\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3c5sbzlx.scala:20)\n\tat Problem.main(tmp3c5sbzlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) true\n        else if (x % n !=\
    \ 0) false\n        else isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var y = n\n        while (y < x) {\n            y *= n\n\
    \            if (y == x) return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x).toLong\n        if (r * r ==\
    \ x) {\n            val rr = sqrt(r).toLong\n            if (rr * rr == r) true\n\
    \            else false\n        }\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pwp8wny.scala:20)\n\tat Problem.main(tmp6pwp8wny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        var p = n\n        while (p <= x) {\n\
    \            if (p == x) return true\n            p *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var y = n\n        while (y <= x) {\n            if (y\
    \ == x) return true\n            y *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= sqrt(x).toInt) {\n            var p = 1\n            while\
    \ (pow(i, p).toLong <= x) {\n                if (pow(i, p).toLong == x) return\
    \ true\n                p += 1\n            }\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbali_fle.scala:28)\n\tat Problem.main(tmpbali_fle.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var p = 1L\n\
    \        while (p <= x) {\n            if (p == x) return true\n            p\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var a = n\n        var b = 1\n        while (a <= x) {\n\
    \            if (a == x) return true\n            a *= n\n            b += 1\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 0\n        while (pow(n, i) <= x) {\n\
    \            if (pow(n, i) == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r % 1 == 0) {\n\
    \            val rr = pow(r, 2)\n            if (rr == x) {\n                val\
    \ rrr = sqrt(r)\n                if (rrr % 1 == 0) {\n                    val\
    \ rrrr = pow(rrr, 2)\n                    if (rrrr == r) return true\n       \
    \         }\n            }\n        }\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkoltsa7u.scala:25)\n\tat Problem.main(tmpkoltsa7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val l = log(x) / log(n)\n        l == l.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvm2m4oa.scala:21)\n\tat Problem.main(tmpxvm2m4oa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = 1L\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x).toLong\n        if (r * r ==\
    \ x) {\n            val rr = sqrt(r).toLong\n            if (rr * rr == r) true\n\
    \            else false\n        }\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6pwp8wny.scala:20)\n\tat Problem.main(tmp6pwp8wny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var m = n\n        while (m < x) {\n      \
    \      m *= n\n        }\n        m == x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptp513qls.scala:25)\n\tat Problem.main(tmptp513qls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var p = n\n\
    \        while (p <= x) {\n            if (p == x) return true\n            p\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var p = 1L\n        while (p <= x) {\n    \
    \        if (p == x) return true\n            p *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val p = log(x) /\
    \ log(n)\n        if (p % 1 == 0) return true\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l)) ==\
    \ (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val xRoot = pow(x, 1.0 / n)\n        xRoot\
    \ == round(xRoot)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpv7szg2.scala:16)\n\tat Problem.main(tmphpv7szg2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val log = log10(x) / log10(n)\n        log\
    \ == log.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_ilorxi.scala:21)\n\tat Problem.main(tmpy_ilorxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var y = x\n        while (y % n == 0) y /=\
    \ n\n        return y == 1\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r == round(r))\
    \ {\n            val rr = round(r)\n            val p = pow(rr, 2)\n         \
    \   if (p == x) {\n                val rrr = log(rr) / log(n)\n              \
    \  if (rrr == round(rrr)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaof03cki.scala:29)\n\tat Problem.main(tmpaof03cki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        val log = log10(x) /\
    \ log10(n)\n        log == log.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r == round(r))\
    \ {\n            val rr = round(r)\n            val rrr = pow(rr, 2)\n       \
    \     if (rrr == x) {\n                val rrrr = pow(rr, 3)\n               \
    \ if (rrrr == x) {\n                    val rrrrr = pow(rr, 4)\n             \
    \       if (rrrrr == x) {\n                        val rrrrrr = pow(rr, 5)\n \
    \                       if (rrrrrr == x) {\n                            val rrrrrrr\
    \ = pow(rr, 6)\n                            if (rrrrrrr == x) {\n            \
    \                    val rrrrrrrr = pow(rr, 7)\n                             \
    \   if (rrrrrrrr == x) {\n                                    val rrrrrrrrr =\
    \ pow(rr, 8)\n                                    if (rrrrrrrrr == x) {\n    \
    \                                    val rrrrrrrrrr = pow(rr, 9)\n           \
    \                             if (rrrrrrrrrr == x) {\n                       \
    \                     val rrrrrrrrrrr = pow(rr, 10)\n                        \
    \                    if (rrrrrrrrrrr == x) {\n                               \
    \                 val rrrrrrrrrrrr = pow(rr, 11)\n                           \
    \                     if (rrrrrrrrrrrr == x) {\n                             \
    \                       val rrrrrrrrrrrrr = pow(rr, 12)\n                    \
    \                                if (rrrrrrrrrrrrr == x) {\n                 \
    \                                       val rrrrrrrrrrrrrr = pow(rr, 13)\n   \
    \                                                     if (rrrrrrrrrrrrrr == x)\
    \ {\n                                                            val rrrrrrrrrrrrrrr\
    \ = pow(rr, 14)\n                                                            if\
    \ (rrrrrrrrrrrrrrr == x) {\n                                                 \
    \               val rrrrrrrrrrrrrrrr = pow(rr, 15)\n                         \
    \                                       if (rrrrrrrrrrrrrrrr == x) {\n       \
    \                                                             val rrrrrrrrrrrrrrrrr\
    \ = pow(rr, 16)\n                                                            \
    \        if (rrrrrrrrrrrrrrrrr == x) {\n                                     \
    \           \n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsbdhu6oc.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbdhu6oc.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (r ==\
    \ round(r)) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe\
    \ you are missing an else part for the conditional?\n\e[31m11 |\e[0m         \
    \   \e[33mval\e[0m \e[36mrr\e[0m = round(r)\n\e[31m12 |\e[0m            \e[33mval\e\
    [0m \e[36mrrr\e[0m = pow(rr, \e[31m2\e[0m)\n\e[31m13 |\e[0m            \e[33mif\e\
    [0m (rrr == x) {\n\e[31m14 |\e[0m                \e[33mval\e[0m \e[36mrrrr\e[0m\
    \ = pow(rr, \e[31m3\e[0m)\n\e[31m15 |\e[0m                \e[33mif\e[0m (rrrr\
    \ == x) {\n\e[31m16 |\e[0m                    \e[33mval\e[0m \e[36mrrrrr\e[0m\
    \ = pow(rr, \e[31m4\e[0m)\n\e[31m17 |\e[0m                    \e[33mif\e[0m (rrrrr\
    \ == x) {\n\e[31m18 |\e[0m                        \e[33mval\e[0m \e[36mrrrrrr\e\
    [0m = pow(rr, \e[31m5\e[0m)\n\e[31m19 |\e[0m                        \e[33mif\e\
    [0m (rrrrrr == x) {\n\e[31m20 |\e[0m                            \e[33mval\e[0m\
    \ \e[36mrrrrrrr\e[0m = pow(rr, \e[31m6\e[0m)\n\e[31m21 |\e[0m                \
    \            \e[33mif\e[0m (rrrrrrr == x) {\n\e[31m22 |\e[0m                 \
    \               \e[33mval\e[0m \e[36mrrrrrrrr\e[0m = pow(rr, \e[31m7\e[0m)\n\e\
    [31m23 |\e[0m                                \e[33mif\e[0m (rrrrrrrr == x) {\n\
    \e[31m24 |\e[0m                                    \e[33mval\e[0m \e[36mrrrrrrrrr\e\
    [0m = pow(rr, \e[31m8\e[0m)\n\e[31m25 |\e[0m                                 \
    \   \e[33mif\e[0m (rrrrrrrrr == x) {\n\e[31m26 |\e[0m                        \
    \                \e[33mval\e[0m \e[36mrrrrrrrrrr\e[0m = pow(rr, \e[31m9\e[0m)\n\
    \e[31m27 |\e[0m                                        \e[33mif\e[0m (rrrrrrrrrr\
    \ == x) {\n\e[31m28 |\e[0m                                            \e[33mval\e\
    [0m \e[36mrrrrrrrrrrr\e[0m = pow(rr, \e[31m10\e[0m)\n\e[31m29 |\e[0m         \
    \                                   \e[33mif\e[0m (rrrrrrrrrrr == x) {\n\e[31m30"
  stdout: ''
  timestamp: 1660010290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= n) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20fuve_1.scala:19)\n\tat Problem.main(tmp20fuve_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= sqrt(x)) {\n          \
    \  var p = 1\n            while (pow(i, p).toLong <= x) {\n                if\
    \ (pow(i, p).toLong == x) return true\n                p += 1\n            }\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpnhuv2r.scala:29)\n\tat Problem.main(tmprpnhuv2r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = 0\n        while (x % n == 0) {\n            x\
    \ /= n\n            p += 1\n        }\n        x == 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjkn0r4q5.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            x /= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of Long - did\
    \ you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val m = log(x) / log(n)\n        if (m % 1\
    \ == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnsk10f7.scala:21)\n\tat Problem.main(tmprnsk10f7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val p = log(x) / log(n)\n        p == p.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43i4nt0_.scala:21)\n\tat Problem.main(tmp43i4nt0_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 1\n        while (i <= x) {\n     \
    \       if (pow(n, i).toLong == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng6jsz7n.scala:26)\n\tat Problem.main(tmpng6jsz7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= sqrt(x).toInt) {\n    \
    \        var j = 2\n            var p = pow(i, j).toLong\n            while (p\
    \ <= x) {\n                if (p == x) return true\n                j += 1\n \
    \               p = pow(i, j).toLong\n            }\n            i += 1\n    \
    \    }\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvwdelh32.scala:31)\n\tat Problem.main(tmpvwdelh32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val a = log(x) / log(n)\n        a == a.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ig3emdu.scala:21)\n\tat Problem.main(tmp3ig3emdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r % 1 == 0) {\n\
    \            val rr = pow(r, 2)\n            if (rr == x) true else false\n  \
    \      } else false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010310
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var a = x\n        while (a % n == 0) a /=\
    \ n\n        a == 1\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= sqrt(x)) {\n            if (x % i == 0) {\n             \
    \   var j = 2\n                var p = i\n                while (p <= sqrt(x))\
    \ {\n                    if (x % p == 0) {\n                        if (p % i\
    \ != 0) return false\n                        j += 1\n                       \
    \ p = pow(i, j).toLong\n                    }\n                    else return\
    \ false\n                }\n                if (pow(i, j) == x) return true\n\
    \                else return false\n            }\n            i += 1\n      \
    \  }\n        return false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1cz04l3q.scala:19:38\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                        p = pow(i,\
    \ j).toLong\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val k = log(x) / log(n)\n        k == k.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90046j1r.scala:21)\n\tat Problem.main(tmp90046j1r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val nn = log(x) / log(n)\n        nn == nn.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_bplq5a.scala:21)\n\tat Problem.main(tmp7_bplq5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = 1L\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= n) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20fuve_1.scala:19)\n\tat Problem.main(tmp20fuve_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return x == 1\n        var p =\
    \ 1L\n        var i = 1\n        while (p <= x) {\n            if (p == x) return\
    \ true\n            p *= n\n            i += 1\n        }\n        false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val p = log(x) / log(n)\n        p == round(p)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd3jijmm6.scala:21)\n\tat Problem.main(tmpd3jijmm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var p = n\n\
    \        while (p <= x) {\n            if (p == x) return true\n            p\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= sqrt(x)) {\n            var j = 2\n            var p = pow(i,\
    \ j).toLong\n            while (p <= x) {\n                if (p == x) return\
    \ true\n                j += 1\n                p = pow(i, j).toLong\n       \
    \     }\n            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3pu5e9ns.scala:30)\n\tat Problem.main(tmp3pu5e9ns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var k = 1L\n        while (k <= x) {\n    \
    \        if (k == x) return true\n            k *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val log = log10(x) / log10(n)\n        log\
    \ == log.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_ilorxi.scala:21)\n\tat Problem.main(tmpy_ilorxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == round(r)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbe5ea3f4.scala:16)\n\tat Problem.main(tmpbe5ea3f4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var k = 2\n\
    \        while (k <= x) {\n            if (pow(n, k).toLong == x) return true\n\
    \            k += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val y = log(x) /\
    \ log(n)\n        return y == round(y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var k = 2\n\
    \        while (k <= x) {\n            var p = pow(n, k)\n            if (p ==\
    \ x) return true\n            if (p > x) return false\n            k += 1\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var result = false\n        var i = 1\n   \
    \     while (i <= x) {\n            if (pow(n, i) == x) {\n                result\
    \ = true\n                i = x\n            }\n            i += 1\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0l5wyri_.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                i = x\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (x : Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var m = n\n        while (m <= x) {\n     \
    \       if (m == x) return true\n            m *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeplb9lzn.scala:26)\n\tat Problem.main(tmpeplb9lzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = 1L\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        var p = n\n        while (p <= x) {\n\
    \            if (p == x) return true\n            p *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        var y = x / n\n\
    \        while (y % n == 0) y /= n\n        return y == 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var p = 1L\n        while (p <= x) {\n    \
    \        if (p == x) return true\n            p *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 1\n        while (i <= x) {\n     \
    \       if (pow(n, i).toLong == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng6jsz7n.scala:26)\n\tat Problem.main(tmpng6jsz7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val m = log(x) /\
    \ log(n)\n        if (m - m.toInt != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r == round(r))\
    \ {\n            val rr = round(r)\n            val rrr = pow(rr, 2)\n       \
    \     if (rrr == x) {\n                val rrrr = pow(rr, 3)\n               \
    \ if (rrrr == x) {\n                    return false\n                }\n    \
    \            return true\n            }\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsifu556a.scala:32)\n\tat Problem.main(tmpsifu556a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i * i > x) return false\n         \
    \   if (x % i == 0) {\n                val y = x / i\n                if (y ==\
    \ n) return true\n                if (isSimplePower(y, n)) return true\n     \
    \       }\n            i += 1\n        }\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0zk2f6yl.scala:28)\n\tat Problem.main(tmp0zk2f6yl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var y = n\n        while (y <= x) {\n            if (y\
    \ == x) return true\n            y *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val root = pow(x, 1.0 / n)\n        root %\
    \ 1 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe012zrfa.scala:16)\n\tat Problem.main(tmpe012zrfa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= n) {\n            if (i\
    \ * i > x) return false\n            if (x % i == 0) {\n                var j\
    \ = 2\n                while (j <= i) {\n                    if (i % j == 0) {\n\
    \                        if (j == i) return true\n                        else\
    \ return false\n                    }\n                    j += 1\n          \
    \      }\n            }\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps21wkoup.scala:30)\n\tat Problem.main(tmps21wkoup.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val p = log(x) / log(n)\n        p == round(p)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd3jijmm6.scala:21)\n\tat Problem.main(tmpd3jijmm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        val root =\
    \ pow(x, 1.0 / n)\n        if (root % 1 == 0) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkvafk5t5.scala:18)\n\tat Problem.main(tmpkvafk5t5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var m = n\n        while (m <= x) {\n            if (m\
    \ == x) return true\n            m *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val root = pow(x, 1.0 / n)\n        root ==\
    \ root.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppe_z9b33.scala:16)\n\tat Problem.main(tmppe_z9b33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 1\n        while (i <= x) {\n     \
    \       if (pow(n, i).toLong == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng6jsz7n.scala:26)\n\tat Problem.main(tmpng6jsz7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = 2\n        while (pow(n, p) <= x) {\n        \
    \    if (pow(n, p) == x) return true\n            p += 1\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = log(x) / log(n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoqed7esz.scala:21)\n\tat Problem.main(tmpoqed7esz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010331
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 1\n        while (i <= x) {\n     \
    \       if (pow(n, i).toLong == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng6jsz7n.scala:26)\n\tat Problem.main(tmpng6jsz7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val k = log(x) / log(n)\n        k == round(k)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpal7ufmxo.scala:21)\n\tat Problem.main(tmpal7ufmxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010330
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var power = 1L\n        while (power < x) {\n\
    \            power *= n\n        }\n        power == x\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var m = n\n        while (m <= x) {\n            if (m\
    \ == x) return true\n            m *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var m = n\n        while (m <= x) {\n     \
    \       if (m == x) return true\n            m *= n\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeplb9lzn.scala:26)\n\tat Problem.main(tmpeplb9lzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010327
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 2\n        while (i <= x) {\n     \
    \       if (pow(n, i).toLong == x) return true\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_80t4qf8.scala:25)\n\tat Problem.main(tmp_80t4qf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r == round(r))\
    \ {\n            val rr = round(r)\n            val rrr = rr.toLong\n        \
    \    if (rrr == 1) return true\n            if (rrr % n == 0) return isSimplePower(rrr,\
    \ n)\n            else return false\n        }\n        else return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmwx3r6k6.scala:20)\n\tat Problem.main(tmpmwx3r6k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var m = n\n        while (m <= x) {\n            if (m\
    \ == x) return true\n            m *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        val y = log(x) /\
    \ log(n)\n        return y == y.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x < n) return false\n        if (x == n)\
    \ return true\n        val p = log(x) / log(n)\n        if (p - p.toInt == 0)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3dokdfg7.scala:24)\n\tat Problem.main(tmp3dokdfg7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= sqrt(x)) {\n          \
    \  var p = i\n            while (p <= x) {\n                if (p == x) return\
    \ true\n                p *= i\n            }\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ufsv7hy.scala:29)\n\tat Problem.main(tmp6ufsv7hy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2L\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8rg_3jbo.scala:21)\n\tat Problem.main(tmp8rg_3jbo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= sqrt(x).toInt) {\n    \
    \        var p = 1\n            while (pow(i, p).toLong <= x) {\n            \
    \    if (pow(i, p).toLong == x) return true\n                p += 1\n        \
    \    }\n            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_bsm6hq_.scala:29)\n\tat Problem.main(tmp_bsm6hq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (x % i == 0) {\n                if (i\
    \ == n) return true\n                x /= i\n                i = 2\n         \
    \   } else i += 1\n        }\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq0zsqig5.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                x /= i\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a member of\
    \ Long - did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (n == 1) return true\n        if (x == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp11d4ds46.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= sqrt(x).toInt) {\n            var p = 1\n            while\
    \ (pow(i, p).toLong <= x) {\n                if (pow(i, p).toLong == x) return\
    \ true\n                p += 1\n            }\n            i += 1\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbali_fle.scala:28)\n\tat Problem.main(tmpbali_fle.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val p = log(x) / log(n)\n        p == round(p)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd3jijmm6.scala:21)\n\tat Problem.main(tmpd3jijmm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var m = n\n        while (m < x) {\n            m *= n\n\
    \        }\n        return m == x\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)\n    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        var i = 2\n        while (i <= n) {\n     \
    \       var j = 2\n            var p = pow(i, j).toLong\n            while (p\
    \ <= x) {\n                if (p == x) return true\n                j += 1\n \
    \               p = pow(i, j).toLong\n            }\n            i += 1\n    \
    \    }\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnocri_1g.scala:29)\n\tat Problem.main(tmpnocri_1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = sqrt(x)\n        if (r % 1 == 0) {\n\
    \            val rr = pow(r, 2)\n            if (rr == x) {\n                val\
    \ rrr = sqrt(r)\n                if (rrr % 1 == 0) {\n                    val\
    \ rrrr = pow(rrr, 2)\n                    if (rrrr == r) {\n                 \
    \       return true\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwpdl6xy2.scala:27)\n\tat Problem.main(tmpwpdl6xy2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val m = log(x) / log(n)\n        m == m.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0mwlf5sx.scala:21)\n\tat Problem.main(tmp0mwlf5sx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010339
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l),\
    \ (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt7i66msp.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l), (2l))\
    \ == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l),\
    \ (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l),\
    \ (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l),\
    \ (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n   \
    \ assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
    \ (12l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge_8c94j.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            i *= n\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member of Int - did\
    \ you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Your task is to write a function that returns true if a number x is\
    \ a simple\n    // power of n and false in other cases.\n    // x is a simple\
    \ power of n if n**int=x\n    // For example:\n    def isSimplePower(x : Long,\
    \ n : Long) : Boolean = {\n        val r = pow(x, 1.0 / n)\n        r == r.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
    \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n\
    \    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
    \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
    \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n  \
    \  assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l),\
    \ (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w9qpa3w.scala:16)\n\tat Problem.main(tmp9w9qpa3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010292
