name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // Explanation: 2 has the smallest even value,\
  \ and 2 has the smallest index.\n    // Example 2:\n    // Explanation: 2 has the\
  \ smallest even value, and 2 has the smallest index.\n    // Example 3:\n    //\
  \ Example 4:\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    def pluck(arr : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        // Fill in the code here\n        List()",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val minIndex = arr.indexOf(min)\n\
    \        List(min, minIndex)", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List(min, index)\n    \
    \    }", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 == 0)\n  \
    \      if (evens.isEmpty) return List()\n        val min = evens.min\n       \
    \ val index = arr.indexOf(min)\n        List(min, index)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List[Long]()\n      \
    \  val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List()\n        return List(min, index)", "        if (arr.length\
    \ == 0) return List()\n        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List()\n   \
    \     return List(min, minIndex)", "        if (arr.isEmpty) return List()\n \
    \       val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        if (arr.length == 0) return List()\n   \
    \     var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = Long.MaxValue\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (min == Long.MaxValue) return List()\n        return List(min, minIndex)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (min == Long.MaxValue) List() else\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                index = i\n            }\n      \
    \  }\n        if (index == -1) return List()\n        return List(min, index)",
  "        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) return List()\n        return List(min, index)", "  \
    \      var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(_ % 2 == 0)\n    \
    \    if (evens.isEmpty) return List()\n        val min = evens.min\n        val\
    \ idx = arr.indexOf(min)\n        List(min, idx)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        if\
    \ (arr.isEmpty) return List()\n        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        if (arr.isEmpty) return List()\n       \
    \ val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val minIndex = arr.indexOf(min)\n        List(min, minIndex)", "    \
    \    if (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List[Long]()\n  \
    \      var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List[Long]()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        List(min, minIndex)", "        if (arr.isEmpty) return\
    \ List()\n        var min = Long.MaxValue\n        var minIndex = -1\n       \
    \ for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) <\
    \ min) {\n                min = arr(i)\n                minIndex = i\n       \
    \     }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       else return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = Long.MaxValue\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (min == Long.MaxValue) return List()\n      \
    \  return List(min, minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(_ % 2 == 0)\n    \
    \    if (evens.isEmpty) return List()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.length == 0) return List()\n        val min = evens.min\n\
    \        val minIndex = arr.indexOf(min)\n        List(min, minIndex)", "    \
    \    val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        if (arr.length\
    \ == 0) return List()\n        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List()\n   \
    \     return List(min, minIndex)", "        if (arr.isEmpty) return List()\n \
    \       val min = arr.filter(_ % 2 == 0).min\n        if (min == Long.MaxValue)\
    \ return List()\n        List(min, arr.indexOf(min).toLong)", "        // val\
    \ arr = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        // val arr = List(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,\
    \ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\
    \ 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,\
    \ 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\
    \ 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,\
    \ 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,\
    \ 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,\
    \ 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,\
    \ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,\
    \ 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min =\
    \ evens.min\n        val index = arr.indexOf(min)\n        List(min, index)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List() else List(min, minIndex)", "        var min = Long.MaxValue\n       \
    \ var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        return List(min, index)", "   \
    \     var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   if (arr.isEmpty) return List()\n        val min = arr.filter(_ % 2 == 0).min\n\
    \        if (min == Long.MaxValue) return List()\n        List(min, arr.indexOf(min).toLong)",
  "        if (arr.isEmpty) return List()\n        val evens = arr.filter(x => x %\
    \ 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        //\
    \ val arr = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        // val arr = List(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,\
    \ 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\
    \ 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\
    \ 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,\
    \ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,\
    \ 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        return List(min,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.length\
    \ == 0) return List()\n        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List()\n   \
    \     return List(min, minIndex)", "        if (arr.isEmpty) return List()\n \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        // val arr = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    \
    \    // val arr = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,\
    \ 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\
    \ 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,\
    \ 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,\
    \ 238,", "        var min = Long.MaxValue\n        var minIndex = -1\n       \
    \ for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) <\
    \ min) {\n                min = arr(i)\n                minIndex = i\n       \
    \     }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List() else List(min, index)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (min == Long.MaxValue) return List()\n      \
    \  List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        else\
    \ return List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List()\n        return List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ return List()\n        List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        if (arr.length == 0) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (min == Long.MaxValue) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) return List()\n        return List(min,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        if (arr.isEmpty) return List()\n       \
    \ val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (min == Long.MaxValue) return List()\n        return List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n  \
    \      else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (min == Long.MaxValue) return List()\n        return List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List()\n        return List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        if (arr.length == 0) return List()\n        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        if (evens.length == 0) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List[Long]()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        // 1 <= nodes.length <= 10000\n        if\
    \ (arr.length < 1 || arr.length > 10000) return List()\n        // 0 <= node.value\n\
    \        if (arr.exists(x => x < 0)) return List()\n        // If there are no\
    \ even values or the given array is empty, return []\n        if (arr.forall(x\
    \ => x % 2 == 1)) return List()\n        // The plucked node should be the node\
    \ with the smallest even value.\n        // If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val min = evens.min\n        val index\
    \ = arr.indexOf(min)\n        List(min, index)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n  \
    \      val minEven = evens.min\n        val minEvenIndex = arr.indexOf(minEven)\n\
    \        List(minEven, minEvenIndex)", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        // arr.filter(_ % 2 == 0).sortWith(_ < _).headOption.map(x\
    \ => List(x, arr.indexOf(x).toLong)).getOrElse(List())\n        if (arr.isEmpty)\
    \ List()\n        else {\n            var min = Long.MaxValue\n            var\
    \ minIndex = -1\n            for (i <- 0 until arr.length) {\n               \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                    min = arr(i)\n \
    \                   minIndex = i\n                }\n            }\n         \
    \   if (minIndex == -1) List()\n            else List(min, minIndex.toLong)\n\
    \        }", "        var min = Long.MaxValue\n        var minIndex = -1\n   \
    \     for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else\
    \ {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) return List()\n        val min = evens.min\n        val index\
    \ = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty) return\
    \ List()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        // Fill in the code here\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val minEven = arr.filter(_ % 2 == 0).min\n        val\
    \ minEvenIndex = arr.indexOf(minEven)\n        List(minEven, minEvenIndex)", " \
    \       if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n    \
    \    var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        if (arr.isEmpty) return List()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val minIndex = arr.indexOf(min)\n\
    \        List(min, minIndex)", "        // 1 <= nodes.length <= 10000\n      \
    \  if (arr.length > 10000) return List()\n        // 0 <= node.value\n       \
    \ val evens = arr.filter(_ % 2 == 0)\n        if (evens.length == 0) return List()\n\
    \        val min = evens.min\n        val minIndex = arr.indexOf(min)\n      \
    \  List(min, minIndex)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        List(min, minIndex)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min =\
    \ evens.min\n        val index = arr.indexOf(min)\n        List(min, index)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List()\n        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)"]
stop_tokens:
- "\n    }\n"
