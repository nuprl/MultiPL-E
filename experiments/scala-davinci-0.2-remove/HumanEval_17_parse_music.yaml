name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    def parseMusic(music_string\
  \ : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        val beats = ListBuffer[Long]()\n        var count = 0\n   \
    \     for (c <- music_string) {\n            if (c == 'o') {\n               \
    \ beats += 4\n                count += 4\n            }\n            else if (c\
    \ == '|') {\n                beats += count\n                count = 0\n     \
    \       }\n        }\n        beats.toList", "        val result = new ListBuffer[Long]\n\
    \        for (c <- music_string) {\n            if (c == 'o') result += 4\n  \
    \          else if (c == '|') result(result.length - 1) += 2\n            else\
    \ if (c == '.') result(result.length - 1) += 1\n        }\n        result.toList",
  "        val notes = music_string.split(\" \").toList\n        val beats = notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else if (note == \".|\") 1\n            else 0\n        })\n\
    \        beats", "        val notes = music_string.split(\" \").toList\n     \
    \   val beats = notes.map(note => {\n            if (note == \"o\") 4\n      \
    \      else if (note == \"o|\") 2\n            else if (note == \".|\") 1\n  \
    \          else 0\n        })\n        beats", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // TODO: Implement this function\n        return\
    \ List()", "        val notes = music_string.split(\" \")\n        val beats =\
    \ new ListBuffer[Long]\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n       \
    \     else if (note == \".|\") beats += 1\n        }\n        beats.toList", " \
    \       val notes = music_string.split(\" \").toList\n        notes.map(note =>\
    \ {\n            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note.contains(\"o\")) {\n                beats += 4\n       \
    \     } else if (note.contains(\"|\")) {\n                beats += 2\n       \
    \     } else {\n                beats += 1\n            }\n        }\n       \
    \ beats.toList", "        val beats = ListBuffer[Long]()\n        var current_beat\
    \ = 0L\n        for (c <- music_string) {\n            c match {\n           \
    \     case 'o' => {\n                    beats += current_beat\n             \
    \       current_beat += 4\n                }\n                case 'o' | '|' =>\
    \ {\n                    beats += current_beat\n                    current_beat\
    \ += 2\n                }\n                case '.' | '|' => {\n             \
    \       beats += current_beat\n                    current_beat += 1\n       \
    \         }\n                case _ => {}\n            }\n        }\n        beats.toList",
  "        // Fill in your code here\n        val map = Map('o' -> 4, '.' -> 1, '|'\
    \ -> 0)\n        music_string.split(\" \").map(x => x.map(map(_)).sum).toList",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                result = result\
    \ :+ 4\n                i += 1\n            } else if (music_string(i) == 'o'\
    \ && music_string(i + 1) == '|') {\n                result = result :+ 2\n   \
    \             i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result", "        val notes = music_string.split(\"\
    \ \").toList\n        notes.map(note => {\n            if (note == \"o\") 4\n\
    \            else if (note == \"o|\") 2\n            else if (note == \".|\")\
    \ 1\n            else 0\n        })", "        val beats = ListBuffer[Long]()\n\
    \        var current_beat = 0L\n        for (c <- music_string) {\n          \
    \  c match {\n                case 'o' => {\n                    beats += current_beat\n\
    \                    current_beat += 4\n                }\n                case\
    \ 'o' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 2\n                }\n                case '.' | '|' => {\n\
    \                    beats += current_beat\n                    current_beat +=\
    \ 1\n                }\n                case _ => {\n                    // do\
    \ nothing\n                }\n            }\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        var result = List[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") result = result\
    \ :+ 4\n            else if (note == \"o|\") result = result :+ 2\n          \
    \  else if (note == \".|\") result = result :+ 1\n        }\n        result",
  "        val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note.contains(\"o|\")) beats +=\
    \ 2\n            else if (note.contains(\"o\")) beats += 4\n            else if\
    \ (note.contains(\".|\")) beats += 1\n        }\n        beats.toList", "    \
    \    var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                result = result\
    \ :+ 4\n                i += 1\n            } else if (music_string(i) == '.')\
    \ {\n                result = result :+ 1\n                i += 2\n          \
    \  } else if (music_string(i) == 'o') {\n                result = result :+ 2\n\
    \                i += 2\n            }\n        }\n        return result", " \
    \       val notes = music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // Your code here\n        val beats = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                beats += 4\n                i +=\
    \ 1\n            } else if (music_string(i) == '.') {\n                beats +=\
    \ 1\n                i += 2\n            } else if (music_string(i) == 'o') {\n\
    \                beats += 2\n                i += 2\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \").toList\n\
    \        var result = List[Long]()\n        for (note <- notes) {\n          \
    \  if (note == \"o\") result = result :+ 4\n            else if (note == \"o|\"\
    ) result = result :+ 2\n            else if (note == \".|\") result = result :+\
    \ 1\n        }\n        result", "        var result = List[Long]()\n        var\
    \ i = 0\n        while (i < music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                result = result :+ 4\n                i += 1\n  \
    \          } else if (music_string(i) == '.') {\n                result = result\
    \ :+ 1\n                i += 2\n            } else {\n                result =\
    \ result :+ 2\n                i += 2\n            }\n        }\n        return\
    \ result", "        val notes = music_string.split(\" \").toList\n        val\
    \ beats = notes.map(note => {\n            if (note.contains(\"o\")) 4\n     \
    \       else if (note.contains(\"|\")) 2\n            else 1\n        })\n   \
    \     beats", "        val beats = ListBuffer[Long]()\n        var current_beat\
    \ = 0L\n        for (c <- music_string) {\n            c match {\n           \
    \     case 'o' => {\n                    beats += current_beat\n             \
    \       current_beat += 4\n                }\n                case 'o' | '|' =>\
    \ {\n                    beats += current_beat\n                    current_beat\
    \ += 2\n                }\n                case '.' | '|' => {\n             \
    \       beats += current_beat\n                    current_beat += 1\n       \
    \         }\n                case _ => {}\n            }\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \").toList\n        notes.map(note =>\
    \ {\n            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })", "        val notes = music_string.split(\"\
    \ \")\n        val result = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note == \"o\") result += 4\n            else if (note ==\
    \ \"o|\") result += 2\n            else if (note == \".|\") result += 1\n    \
    \    }\n        result.toList", "        var result = List[Long]()\n        var\
    \ current = 0L\n        for (c <- music_string) {\n            c match {\n   \
    \             case 'o' => {\n                    result = result :+ current\n\
    \                    current = 4\n                }\n                case 'o'\
    \ => {\n                    result = result :+ current\n                    current\
    \ = 2\n                }\n                case '.' => {\n                    result\
    \ = result :+ current\n                    current = 1\n                }\n  \
    \              case '|' => {\n                    current = 0\n              \
    \  }\n            }\n        }\n        result = result :+ current\n        return\
    \ result", "        val notes = music_string.split(\" \")\n        val beats =\
    \ new ListBuffer[Long]\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n       \
    \     else if (note == \".|\") beats += 1\n        }\n        beats.toList", " \
    \       val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"\
    o\")) beats += 4\n            else if (note.contains(\".|\")) beats += 1\n   \
    \     }\n        beats.toList", "        val notes = music_string.split(\" \"\
    )\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n   \
    \         if (note == \"o\") beats += 4\n            else if (note == \"o|\")\
    \ beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        var result = List[Long]()\n        var i = 0\n \
    \       while (i < music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                result = result :+ 4\n                i += 1\n     \
    \       } else if (music_string(i) == 'o' && music_string(i + 1) == '|') {\n \
    \               result = result :+ 2\n                i += 2\n            } else\
    \ if (music_string(i) == '.' && music_string(i + 1) == '|') {\n              \
    \  result = result :+ 1\n                i += 2\n            }\n        }\n  \
    \      return result", "        val beats = ListBuffer[Long]()\n        for (i\
    \ <- 0 until music_string.length) {\n            if (music_string(i) == 'o') beats\
    \ += 4\n            else if (music_string(i) == '.') beats += 1\n        }\n \
    \       beats.toList", "        val notes = music_string.split(\" \")\n      \
    \  val beats = new ListBuffer[Long]\n        for (note <- notes) {\n         \
    \   if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '.') beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        val beats = notes.map(note => {\n            if (note ==\
    \ \"o\") 4\n            else if (note == \"o|\") 2\n            else if (note\
    \ == \".|\") 1\n            else 0\n        })\n        beats", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            if (note == \"o\") beats += 4\n      \
    \      else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        var result : List[Long]\
    \ = Nil\n        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') result = 4 :: result\n            else if (music_string(i) == '.') result\
    \ = 1 :: result\n        }\n        result.reverse", "        val notes = music_string.split(\"\
    \\\\|\")\n        val beats = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .\")) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        val beats = ListBuffer[Long]()\n        for (note <- notes)\
    \ {\n            if (note == \"o\") beats += 4\n            else if (note == \"\
    o|\") beats += 2\n            else if (note == \".|\") beats += 1\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   val beats = ListBuffer[Long]()\n        for (note <- notes) {\n          \
    \  if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    o|\")) beats += 2\n            else if (note.contains(\".|\")) beats += 1\n  \
    \      }\n        beats.toList", "        val beats = ListBuffer[Long]()\n   \
    \     var current_beat = 0L\n        for (c <- music_string) {\n            c\
    \ match {\n                case 'o' => {\n                    beats += current_beat\n\
    \                    current_beat += 4\n                }\n                case\
    \ 'o' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 2\n                }\n                case '.' | '|' => {\n\
    \                    beats += current_beat\n                    current_beat +=\
    \ 1\n                }\n                case _ => {\n                    // Do\
    \ nothing\n                }\n            }\n        }\n        beats.toList",
  "        val beats = music_string.split(\"\\\\|\").map(x => x.length).toList\n \
    \       beats", "        val notes = music_string.split(\" \")\n        val beats\
    \ = new ListBuffer[Long]\n        for (note <- notes) {\n            if (note.charAt(0)\
    \ == 'o') {\n                if (note.length == 1) beats += 4\n              \
    \  else beats += 2\n            }\n            else beats += 1\n        }\n  \
    \      beats.toList", "        val notes = music_string.split(\" \")\n       \
    \ val beats = new ListBuffer[Long]\n        for (note <- notes) {\n          \
    \  if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats +=\
    \ 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                result = result\
    \ :+ 4\n                i += 1\n            } else if (music_string(i) == 'o'\
    \ && music_string(i + 1) == '|') {\n                result = result :+ 2\n   \
    \             i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result", "        val beats = ListBuffer[Long]()\n\
    \        var curr_beat = 0L\n        for (c <- music_string) {\n            if\
    \ (c == 'o') {\n                beats += curr_beat\n                curr_beat\
    \ = 0\n            }\n            else if (c == '|') {\n                curr_beat\
    \ += 1\n            }\n        }\n        beats.toList", "        var result =\
    \ List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == '.') {\n\
    \                result = result :+ 1\n                i += 2\n            } else\
    \ if (music_string(i) == 'o') {\n                result = result :+ 2\n      \
    \          i += 2\n            }\n        }\n        return result", "       \
    \ val beats = ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4\n               \
    \ beat += 4\n            } else if (c == '|') {\n                beats += beat\n\
    \                beat = 0\n            } else if (c == '.') {\n              \
    \  beat += 1\n            }\n        }\n        beats.toList", "        val beats\
    \ = new ListBuffer[Long]\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => beats += (current_beat\
    \ + 4); current_beat += 4\n                case 'o' | '|' => beats += (current_beat\
    \ + 2); current_beat += 2\n                case '.' | '|' => beats += (current_beat\
    \ + 1); current_beat += 1\n                case _ =>\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \").toList\n\
    \        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n     \
    \       if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        // TODO: Implement this function.\n        // Hint: You can use regular\
    \ expressions to parse the string.\n        // Hint: You can use map function\
    \ to convert a list of strings to a list of integers.\n        // Hint: You can\
    \ use foldLeft to accumulate the sum of all elements in a list.\n        // Hint:\
    \ You can use toList to convert a string to a list of characters.\n        //\
    \ Hint: You can use toString to convert a character to a string.\n        // Hint:\
    \ You can use zipWithIndex to get a list of pairs (character, index).\n      \
    \  // Hint: You can use filter to get a list of elements that satisfy a predicate.\n\
    \        // Hint: You can use map to convert a list of pairs to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint", "        val result = new ListBuffer[Long]()\n        for (c\
    \ <- music_string) {\n            c match {\n                case 'o' => result\
    \ += 4\n                case 'o' | '|' => result += 2\n                case '.'\
    \ | '|' => result += 1\n                case _ =>\n            }\n        }\n\
    \        result.toList", "        val notes = music_string.split(\" \")\n    \
    \    val beats = new ListBuffer[Long]\n        for (note <- notes) {\n       \
    \     if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = new ListBuffer[Long]\n        var i = 0\n        while (i <\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        beats += 4\n                i += 1\n            } else if (music_string(i)\
    \ == '.') {\n                beats += 1\n                i += 2\n            }\
    \ else if (music_string(i) == 'o') {\n                beats += 2\n           \
    \     i += 2\n            }\n        }\n        beats.toList", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            if (note == \"o\") beats += 4\n      \
    \      else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note.length == 1) {\n                beats += 4\n           \
    \ } else if (note.length == 2) {\n                beats += 2\n            } else\
    \ if (note.length == 3) {\n                beats += 1\n            }\n       \
    \ }\n        beats.toList", "        val notes = music_string.split(\" \")\n \
    \       val beats = new ListBuffer[Long]\n        for (note <- notes) {\n    \
    \        if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        var beat = 0L\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => {\n    \
    \                beats += beat\n                    beat = 0\n               \
    \ }\n                case '.' => beat += 1\n                case '|' => beat +=\
    \ 2\n                case _ =>\n            }\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        var count = 0\n        for (c <-\
    \ music_string) {\n            if (c == 'o') {\n                beats += 4\n \
    \               count += 4\n            }\n            else if (c == '|') {\n\
    \                beats += count\n                count = 0\n            }\n  \
    \      }\n        beats.toList", "        var result = List[Long]()\n        var\
    \ current = 0L\n        for (c <- music_string) {\n            if (c == 'o') {\n\
    \                result = result :+ current\n                current = 0\n   \
    \         }\n            else if (c == '.') {\n                current += 1\n\
    \            }\n            else if (c == '|') {\n                current += 2\n\
    \            }\n        }\n        result = result :+ current\n        return\
    \ result", "        val notes = music_string.split(\" \")\n        val beats =\
    \ new ListBuffer[Long]\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n       \
    \     else if (note == \".|\") beats += 1\n        }\n        beats.toList", " \
    \       val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        var beat = 0L\n        for (c <- music_string) {\n            if (c ==\
    \ 'o') {\n                beats += 4\n                beat += 4\n            }\
    \ else if (c == '|') {\n                if (beat % 2 == 0) {\n               \
    \     beats += 2\n                    beat += 2\n                } else {\n  \
    \                  beats += 1\n                    beat += 1\n               \
    \ }\n            } else if (c == '.') {\n                beats += 1\n        \
    \        beat += 1\n            }\n        }\n        beats.toList", "       \
    \ val notes = music_string.toList\n        val beats = ListBuffer[Long]()\n  \
    \      var i = 0\n        while (i < notes.length) {\n            if (notes(i)\
    \ == 'o') {\n                beats += 4\n                i += 1\n            }\
    \ else if (notes(i) == 'o' && notes(i + 1) == '|') {\n                beats +=\
    \ 2\n                i += 2\n            } else if (notes(i) == '.' && notes(i\
    \ + 1) == '|') {\n                beats += 1\n                i += 2\n       \
    \     }\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') result = 4 :: result\n            else if (music_string(i) == '.') result\
    \ = 1 :: result\n        }\n        result.reverse", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => beats += 4\n                case 'o' | '|' => beats += 2\n          \
    \      case '.' | '|' => beats += 1\n                case _ =>\n            }\n\
    \        }\n        beats.toList", "        var result = List[Long]()\n      \
    \  for (i <- 0 until music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                result = 4 :: result\n            } else if (music_string(i)\
    \ == '.') {\n                result = 1 :: result\n            } else if (music_string(i)\
    \ == '|') {\n                result = 2 :: result\n            }\n        }\n\
    \        result.reverse", "        val notes = music_string.split(\" \")\n   \
    \     val beats = new ListBuffer[Long]\n        for (note <- notes) {\n      \
    \      if (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"\
    o\")) beats += 4\n            else if (note.contains(\".|\")) beats += 1\n   \
    \     }\n        beats.toList", "        val beats = ListBuffer[Long]()\n    \
    \    for (i <- 0 until music_string.length) {\n            music_string(i) match\
    \ {\n                case 'o' => beats += 4\n                case 'o' => beats\
    \ += 2\n                case '.' => beats += 1\n            }\n        }\n   \
    \     beats.toList", "        val beats = ArrayBuffer[Long]()\n        var i =\
    \ 0\n        while (i < music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                beats += 4\n                i += 1\n            }\
    \ else if (music_string(i) == '.') {\n                beats += 1\n           \
    \     i += 2\n            } else {\n                beats += 2\n             \
    \   i += 2\n            }\n        }\n        beats.toList", "        val notes\
    \ = music_string.split(\" \")\n        var result = List[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") result = 4 :: result\n   \
    \         else if (note == \"o|\") result = 2 :: result\n            else if (note\
    \ == \".|\") result = 1 :: result\n        }\n        result.reverse", "     \
    \   var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                result = result\
    \ :+ 4\n                i += 1\n            } else if (music_string(i) == '.')\
    \ {\n                result = result :+ 1\n                i += 2\n          \
    \  } else {\n                result = result :+ 2\n                i += 2\n  \
    \          }\n        }\n        return result", "        val beats = ArrayBuffer[Long]()\n\
    \        var beat = 0L\n        for (c <- music_string) {\n            if (c ==\
    \ 'o') {\n                beats += 4\n                beat += 4\n            }\
    \ else if (c == 'o' && music_string(music_string.indexOf(c) + 1) == '|') {\n \
    \               beats += 2\n                beat += 2\n            } else if (c\
    \ == '.' && music_string(music_string.indexOf(c) + 1) == '|') {\n            \
    \    beats += 1\n                beat += 1\n            }\n        }\n       \
    \ beats.toList", "        val notes = music_string.split(\" \")\n        val beats\
    \ = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n       \
    \     else if (note == \".|\") beats += 1\n        }\n        beats.toList", " \
    \       val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        var current_beat = 0L\n        for (c <- music_string) {\n          \
    \  if (c == 'o') {\n                beats += current_beat\n                current_beat\
    \ += 4\n            } else if (c == 'o' || c == '|') {\n                beats\
    \ += current_beat\n                current_beat += 2\n            } else if (c\
    \ == '.' || c == '|') {\n                beats += current_beat\n             \
    \   current_beat += 1\n            }\n        }\n        beats.toList", "    \
    \    val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            val c = music_string(i)\n            if (c == 'o') beats += 4\n\
    \            else if (c == '.') beats += 1\n            else if (c == '|') beats\
    \ += 0\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                result = result :+ 4\n         \
    \       i += 1\n            } else if (music_string(i) == 'o' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 2\n                i += 2\n\
    \            } else if (music_string(i) == '.' && music_string(i + 1) == '|')\
    \ {\n                result = result :+ 1\n                i += 2\n          \
    \  }\n        }\n        return result", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => beats += 4\n                case 'o' => beats += 2\n                case\
    \ '.' => beats += 1\n            }\n        }\n        beats.toList", "      \
    \  val notes = music_string.split(\"\\\\s+\")\n        notes.map(note => {\n \
    \           if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        }).toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note.contains(\"o\")) {\n                beats += 4\n       \
    \     } else if (note.contains(\"|\")) {\n                beats += 2\n       \
    \     } else {\n                beats += 1\n            }\n        }\n       \
    \ beats.toList", "        val beats = ListBuffer[Long]()\n        var beat = 0L\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                beats += beat\n                beat = 0\n       \
    \     }\n            else if (music_string(i) == '|') beat += 1\n        }\n \
    \       beats.toList", "        val notes = music_string.split(\" \").toList\n\
    \        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n   \
    \         if (note == \"o\") beats += 4\n            else if (note == \"o|\")\
    \ beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"o\"\
    )) beats += 4\n            else if (note.contains(\".|\")) beats += 1\n      \
    \  }\n        beats.toList", "        val notes = music_string.split(\" \")\n\
    \        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n   \
    \         if (note.contains(\"o\")) {\n                beats += 4\n          \
    \  } else if (note.contains(\"o|\")) {\n                beats += 2\n         \
    \   } else if (note.contains(\".|\")) {\n                beats += 1\n        \
    \    }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \\\\s+\")\n        val result = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note == \"o\") result += 4\n            else if (note ==\
    \ \"o|\") result += 2\n            else if (note == \".|\") result += 1\n    \
    \    }\n        result.toList", "        val notes = music_string.split(\" \"\
    ).toList\n        val beats = notes.map(note => {\n            if (note.contains(\"\
    o|\")) 2\n            else if (note.contains(\"o\")) 4\n            else 1\n \
    \       })\n        beats", "        val beats = music_string.split(\"\\\\|\"\
    ).map(x => x.length).toList\n        beats", "        val notes = music_string.split(\"\
    \ \").toList\n        notes.map(note => {\n            if (note.contains(\"o|\"\
    )) 2\n            else if (note.contains(\"o\")) 4\n            else 1\n     \
    \   })", "        val beats = ListBuffer[Long]()\n        var beat_count = 0\n\
    \        for (c <- music_string) {\n            if (c == 'o') {\n            \
    \    beats += 4\n                beat_count += 4\n            } else if (c ==\
    \ '|') {\n                if (beat_count == 4) {\n                    beats(beats.length\
    \ - 1) = 2\n                    beat_count = 2\n                } else if (beat_count\
    \ == 2) {\n                    beats(beats.length - 1) = 1\n                 \
    \   beat_count = 1\n                } else {\n                    beats += 1\n\
    \                    beat_count = 1\n                }\n            } else if\
    \ (c == '.') {\n                beats += 1\n                beat_count = 1\n \
    \           }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val beats = ListBuffer[Long]()\n        var current_beat\
    \ = 0L\n        for (c <- music_string) {\n            if (c == 'o') {\n     \
    \           beats += current_beat\n                current_beat += 4\n       \
    \     } else if (c == 'o' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 2\n            } else if (c == '.' || c == '|')\
    \ {\n                beats += current_beat\n                current_beat += 1\n\
    \            }\n        }\n        beats.toList", "        // Write your code\
    \ here\n        val map = Map('o' -> 4, '.' -> 1, '|' -> 0)\n        music_string.split(\"\
    \\\\|\").map(x => x.map(map(_)).sum).toList", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            music_string(i)\
    \ match {\n                case 'o' => beats += 4\n                case 'o' =>\
    \ beats += 2\n                case '.' => beats += 1\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   val beats = new ListBuffer[Long]\n        for (note <- notes) {\n        \
    \    if (note.contains(\"o\")) {\n                beats += 4\n            } else\
    \ if (note.contains(\"|\")) {\n                beats += 2\n            } else\
    \ {\n                beats += 1\n            }\n        }\n        beats.toList",
  "        val map = Map('o' -> 4, 'o' -> 2, '.' -> 1)\n        music_string.split(\"\
    \ \").map(x => map(x.charAt(0))).toList", "        val beats = new ListBuffer[Long]\n\
    \        var current_beat = 0L\n        for (c <- music_string) {\n          \
    \  c match {\n                case 'o' => beats += 4L\n                case 'o'\
    \ | '|' => beats += 2L\n                case '.' | '|' => beats += 1L\n      \
    \          case _ =>\n            }\n        }\n        beats.toList", "     \
    \   val beats = new ListBuffer[Long]\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                beats += 4\n \
    \               i += 1\n            } else if (music_string(i) == 'o' && music_string(i\
    \ + 1) == '|') {\n                beats += 2\n                i += 2\n       \
    \     } else if (music_string(i) == '.' && music_string(i + 1) == '|') {\n   \
    \             beats += 1\n                i += 2\n            }\n        }\n \
    \       beats.toList", "        val beats = ListBuffer[Long]()\n        var current_beat\
    \ = 0L\n        for (c <- music_string) {\n            if (c == 'o') {\n     \
    \           beats += current_beat\n                current_beat += 4\n       \
    \     } else if (c == 'o' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 2\n            } else if (c == '.' || c == '|')\
    \ {\n                beats += current_beat\n                current_beat += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note.charAt(0) == 'o') {\n                if (note.length ==\
    \ 1) beats += 4\n                else beats += 2\n            }\n            else\
    \ beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        var currentBeat = 0L\n        for (c <- music_string) {\n           \
    \ if (c == 'o') {\n                beats += 4\n                currentBeat +=\
    \ 4\n            } else if (c == 'o' && currentBeat == 0) {\n                beats\
    \ += 4\n                currentBeat += 4\n            } else if (c == 'o' && currentBeat\
    \ != 0) {\n                beats += (4 - currentBeat)\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 4) {\n              \
    \  beats += 0\n                currentBeat = 0\n            } else if (c == 'o'\
    \ && currentBeat == 2) {\n                beats += 2\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 1) {\n              \
    \  beats += 3\n                currentBeat = 4\n            } else if (c == 'o'\
    \ && currentBeat == 3) {\n                beats += 1\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 5) {\n              \
    \  beats += -1\n                currentBeat = 4\n            } else if (c == 'o'\
    \ && currentBeat == 6) {\n                beats += -2\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 7) {\n              \
    \  beats += -3\n                currentBeat = 4\n            } else if (c == 'o'\
    \ && currentBeat == 8) {\n                beats += -4\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 9) {\n              \
    \  beats += -5\n                currentBeat = 4\n            } else if (c == 'o'\
    \ && currentBeat == 10) {\n                beats += -6\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 11) {\n             \
    \   beats += -7\n                currentBeat = 4\n            } else if (c ==\
    \ 'o' && currentBeat == 12) {\n                beats += -8\n                currentBeat\
    \ = 4\n            } else if (c == 'o' && currentBeat == 13) {\n             \
    \   beats += -9\n                currentBeat = 4\n            } else if (c ==\
    \ 'o' &&", "        val beats = ListBuffer[Long]()\n        var curr = 0L\n  \
    \      for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    cur", "   \
    \     val notes = music_string.split(\" \").toList\n        val beats = notes.map(note\
    \ => {\n            val len = note.length\n            if (len == 1) 4\n     \
    \       else if (len == 2) 2\n            else 1\n        })\n        beats",
  "        var result = List[Long]()\n        var count = 0\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        count += 4\n            } else if (music_string(i) == '|') {\n      \
    \          result = result :+ count\n                count = 0\n            }\
    \ else {\n                count += 1\n            }\n        }\n        result",
  "        val notes = music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        notes.map(x => x.length)", "        val beats = ListBuffer[Long]()\n\
    \        var current = 0L\n        for (c <- music_string) {\n            c match\
    \ {\n                case 'o' => beats += 4L\n                case 'o' => beats\
    \ += 2L\n                case '.' => beats += 1L\n                case '|' =>\
    \ current += beats.sum\n                case _ =>\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   var result = List[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") result = 4 :: result\n            else if (note == \"o|\") result\
    \ = 2 :: result\n            else if (note == \".|\") result = 1 :: result\n \
    \       }\n        result.reverse", "        // Your code here\n        val notes\
    \ = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"\
    o\")) beats += 4\n            else if (note.contains(\".|\")) beats += 1\n   \
    \     }\n        beats.toList", "        val notes = music_string.split(\" \"\
    ).toList\n        val beats = notes.map(note => {\n            if (note.contains(\"\
    o|\")) 2\n            else if (note.contains(\"o\")) 4\n            else 1\n \
    \       })\n        beats", "        val notes = music_string.split(\" \")\n \
    \       val beats = new ListBuffer[Long]\n        for (note <- notes) {\n    \
    \        if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \").toList\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        notes.map(note => {\n  \
    \          if (note == \"o\") 4\n            else if (note == \"o|\") 2\n    \
    \        else if (note == \".|\") 1\n            else 0\n        }).toList", " \
    \       val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        var result = List[Long]()\n        var current =\
    \ 0L\n        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                current += 4\n            } else if (music_string(i)\
    \ == '|') {\n                result = result :+ current\n                current\
    \ = 0\n            } else if (music_string(i) == '.') {\n                current\
    \ += 1\n            }\n        }\n        result = result :+ current\n       \
    \ return result", "        val notes = music_string.split(\" \").toList\n    \
    \    notes.map(note => {\n            val beats = note.count(c => c == '|')\n\
    \            if (beats == 0) 4\n            else if (beats == 1) 2\n         \
    \   else 1\n        })", "        val beats = new ListBuffer[Long]\n        var\
    \ current_beat = 0\n        for (i <- 0 until music_string.length) {\n       \
    \     val c = music_string(i)\n            if (c == 'o') {\n                beats\
    \ += current_beat\n                current_beat += 4\n            } else if (c\
    \ == 'o' && music_string(i + 1) == '|') {\n                beats += current_beat\n\
    \                current_beat += 2\n                i += 1\n            } else\
    \ if (c == '.' && music_string(i + 1) == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n                i += 1\n            }\n  \
    \      }\n        beats.toList", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note.length == 1) beats += 4\n            else if (note.length\
    \ == 2) beats += 2\n            else beats += 1\n        }\n        beats.toList",
  "        var result = List[Long]()\n        var current_beat = 0L\n        var current_note\
    \ = 0L\n        var current_note_duration = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                current_note_duration = 4\n\
    \            } else if (c == '|') {\n                current_note_duration = current_note_duration\
    \ / 2\n            } else if (c == '.') {\n                current_note_duration\
    \ = current_note_duration / 2\n            } else if (c == ' ') {\n          \
    \      current_note += current_note_duration\n            } else if (c == '\\\
    n') {\n                result = result :+ current_note\n                current_note\
    \ = 0\n            }\n        }\n        result = result :+ current_note\n   \
    \     return result", "        val beats = new ListBuffer[Long]\n        for (c\
    \ <- music_string) {\n            c match {\n                case 'o' => beats\
    \ += 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4L\n              \
    \  current_beat += 4L\n            } else if (c == '|') {\n                beats\
    \ += current_beat\n                current_beat = 0L\n            } else if (c\
    \ == '.') {\n                beats += 1L\n                current_beat += 1L\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        val beats = notes.map(note => {\n            if (note.contains(\"\
    o|\")) 2\n            else if (note.contains(\"o\")) 4\n            else 1\n \
    \       })\n        beats", "        val notes = music_string.split(\" \").toList\n\
    \        notes.map(note => {\n            if (note.contains(\"o|\")) 2\n     \
    \       else if (note.contains(\"o\")) 4\n            else 1\n        })", " \
    \       val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ArrayBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"o\"\
    )) beats += 4\n            else if (note.contains(\".|\")) beats += 1\n      \
    \  }\n        beats.toList", "        val notes = music_string.split(\" \")\n\
    \        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n     \
    \       if (note.contains(\"o\")) {\n                beats += 4\n            }\
    \ else if (note.contains(\"|\")) {\n                beats += 2\n            }\
    \ else {\n                beats += 1\n            }\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            music_string(i) match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val result = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") result += 4\n            else if (note == \"o|\"\
    ) result += 2\n            else if (note == \".|\") result += 1\n        }\n \
    \       result.toList", "        val notes = music_string.split(\" \").toList\n\
    \        notes.map(note => {\n            if (note.contains(\"o|\")) 2\n     \
    \       else if (note.contains(\"o\")) 4\n            else 1\n        })", " \
    \       val beats = ListBuffer[Long]()\n        var current_beat = 0L\n      \
    \  for (i <- 0 until music_string.length) {\n            val c = music_string(i)\n\
    \            if (c == 'o') {\n                beats += current_beat\n        \
    \        current_beat += 4\n            } else if (c == 'o' && music_string(i\
    \ + 1) == '|') {\n                beats += current_beat\n                current_beat\
    \ += 2\n                i += 1\n            } else if (c == '.' && music_string(i\
    \ + 1) == '|') {\n                beats += current_beat\n                current_beat\
    \ += 1\n                i += 1\n            }\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        var current_note = \"\"\n        for (c <- music_string) {\n        \
    \    if (c == '|') {\n                result = result :+ current_note.length\n\
    \                current_note = \"\"\n            } else {\n                current_note\
    \ = current_note + c\n            }\n        }\n        result = result :+ current_note.length\n\
    \        return result", "        val beats = ListBuffer[Long]()\n        var\
    \ beat = 0L\n        for (c <- music_string) {\n            c match {\n      \
    \          case 'o' => {\n                    beats += beat\n                \
    \    beat = 0\n                }\n                case 'o' | '|' => {\n      \
    \              beat += 1\n                }\n                case '.' => {\n \
    \                   beat += 1\n                }\n            }\n        }\n \
    \       beats.toList", "        val beats = ListBuffer[Long]()\n        for (c\
    \ <- music_string) {\n            c match {\n                case 'o' => beats\
    \ += 4\n                case 'o' | '|' => beats += 2\n                case '.'\
    \ | '|' => beats += 1\n                case _ =>\n            }\n        }\n \
    \       beats.toList", "        val notes = music_string.split(\" \")\n      \
    \  val beats = new ListBuffer[Long]\n        for (note <- notes) {\n         \
    \   if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                result = result\
    \ :+ 4\n                i += 1\n            } else if (music_string(i) == 'o'\
    \ && music_string(i + 1) == '|') {\n                result = result :+ 2\n   \
    \             i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => beats += 4\n                case 'o' | '|' => beats += 2\n          \
    \      case '.' | '|' => beats += 1\n                case _ =>\n            }\n\
    \        }\n        beats.toList", "        val notes = music_string.split(\"\\\
    \\s+\")\n        val beats = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    |\")) beats += 2\n            else beats += 1\n        }\n        beats.toList",
  "        var result = List[Long]()\n        var current = 0L\n        for (c <-\
    \ music_string) {\n            if (c == 'o') {\n                current += 4\n\
    \            } else if (c == '|') {\n                result = result :+ current\n\
    \                current = 0\n            } else if (c == '.') {\n           \
    \     current += 1\n            }\n        }\n        result", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            if (note == \"o\") beats += 4\n      \
    \      else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        var current_beat = 0L\n        for (c <- music_string) {\n          \
    \  c match {\n                case 'o' => {\n                    beats += current_beat\n\
    \                    current_beat += 4\n                }\n                case\
    \ 'o' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 2\n                }\n                case '.' | '|' => {\n\
    \                    beats += current_beat\n                    current_beat +=\
    \ 1\n                }\n                case _ => {\n                    // do\
    \ nothing\n                }\n            }\n        }\n        beats.toList",
  "        val beats = new ListBuffer[Long]\n        var beat_count = 0\n        for\
    \ (c <- music_string) {\n            if (c == 'o') {\n                beats +=\
    \ 4\n                beat_count += 4\n            } else if (c == '|') {\n   \
    \             if (beat_count == 0) {\n                    beats += 2\n       \
    \             beat_count += 2\n                } else {\n                    beat_count\
    \ = 0\n                }\n            } else if (c == '.') {\n               \
    \ beats += 1\n                beat_count += 1\n            }\n        }\n    \
    \    beats.toList", "        val beats = ListBuffer[Long]()\n        var beat\
    \ = 0L\n        for (c <- music_string) {\n            if (c == 'o') {\n     \
    \           beats += 4\n                beat += 4\n            } else if (c ==\
    \ '|') {\n                beats += beat\n                beat = 0\n          \
    \  } else if (c == '.') {\n                beat += 1\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   val beats = new ArrayBuffer[Long]\n        for (note <- notes) {\n       \
    \     if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \").toList\n        val beats = notes.map(note\
    \ => {\n            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })\n        beats", "        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        beats += current_beat\n                current_beat += 4\n          \
    \  } else if (music_string(i) == 'o' && music_string(i + 1) == '|') {\n      \
    \          beats += current_beat\n                current_beat += 2\n        \
    \        i += 1\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                beats += current_beat\n                current_beat\
    \ += 1\n                i += 1\n            }\n        }\n        beats.toList",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                result = result\
    \ :+ 4\n                i += 1\n            } else if (music_string(i) == 'o'\
    \ && music_string(i + 1) == '|') {\n                result = result :+ 2\n   \
    \             i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            if (c == 'o') beats += 4\n   \
    \         else if (c == '.') beats += 1\n            else if (c == '|') beats(beats.length\
    \ - 1) += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val result = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note == \"o\") result += 4\n            else if (note ==\
    \ \"o|\") result += 2\n            else if (note == \".|\") result += 1\n    \
    \    }\n        result.toList", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note.length == 1) beats += 4\n            else beats += note.length\
    \ - 1\n        }\n        beats.toList", "        var result : List[Long] = Nil\n\
    \        var current_note : Long = 0\n        for (c <- music_string) {\n    \
    \        c match {\n                case 'o' => current_note += 4\n          \
    \      case 'o' => current_note += 2\n                case '.' => current_note\
    \ += 1\n                case '|' => result = current_note :: result; current_note\
    \ = 0\n            }\n        }\n        result.reverse", "        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note.charAt(0) == 'o') {\n                if (note.length == 1)\
    \ beats += 4\n                else beats += 2\n            }\n            else\
    \ beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note.contains(\"o\")) {\n                beats += 4\n       \
    \     } else if (note.contains(\"o|\")) {\n                beats += 2\n      \
    \      } else if (note.contains(\".|\")) {\n                beats += 1\n     \
    \       }\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                result = result :+ 4\n         \
    \       i += 1\n            } else if (music_string(i) == 'o' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 2\n                i += 2\n\
    \            } else if (music_string(i) == '.' && music_string(i + 1) == '|')\
    \ {\n                result = result :+ 1\n                i += 2\n          \
    \  }\n        }\n        return result", "        val map = Map('o' -> 4, '|'\
    \ -> 2, '.' -> 1)\n        music_string.split(\" \").map(x => map(x.charAt(0))).toList",
  "        val notes = music_string.split(\" \").toList\n        notes.map(note =>\
    \ {\n            if (note.contains(\"o\")) {\n                if (note.contains(\"\
    |\")) 4 else 2\n            } else {\n                1\n            }\n     \
    \   })", "        val beats = ListBuffer[Long]()\n        var current_beat = 0\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => {\n                    beats += current_beat\n                    current_beat\
    \ = 0\n                }\n                case 'o' | '|' => {\n              \
    \      current_beat += 1\n                }\n                case '.' => {\n \
    \                   current_beat += 1\n                }\n                case\
    \ _ => {\n                    // Do nothing\n                }\n            }\n\
    \        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n \
    \       for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') beats += 4\n            else if (music_string(i) == '.') beats += 1\n\
    \        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        val beats = new ListBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note == \"o\") beats += 4\n            else if (note == \"\
    o|\") beats += 2\n            else if (note == \".|\") beats += 1\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \").toList\n\
    \        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n     \
    \       if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val music_string_list\
    \ = music_string.split(\" \").toList\n        val music_list = music_string_list.map(x\
    \ => x.replace(\"o\", \"o|\").replace(\".\", \"|.\"))\n        val music_list_length\
    \ = music_list.map(x => x.length)\n        val music_list_length_sum = music_list_length.foldLeft(0)(_\
    \ + _)\n        val music_list_length_sum_divided = music_list_length_sum / 4\n\
    \        val music_list_length_sum_divided_list = List.fill(music_list_length_sum_divided)(1)\n\
    \        val music_list_length_sum_divided_list_sum = music_list_length_sum_divided_list.foldLeft(0)(_\
    \ + _)\n        val music_list_length_sum_divided_list_sum_divided = music_list_length_sum_divided_list_sum\
    \ / music_list_length_sum_divided\n        val music_list_length_sum_divided_list_sum_divided_list\
    \ = List.fill(music_list_length_sum_divided)(music_list_length_sum_divided_list_sum_divided)\n\
    \        music_list_length_sum_divided_list_sum_divided_list", "        val notes\
    \ = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '|') beats += 2\n            else if (music_string(i) == '.') beats += 1\n\
    \        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        val beats = notes.map(note => {\n            if (note ==\
    \ \"o\") 4\n            else if (note == \"o|\") 2\n            else if (note\
    \ == \".|\") 1\n            else 0\n        })\n        beats", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            if (note == \"o\") beats += 4\n      \
    \      else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') beats += 4\n            else if (music_string(i) == '.') beats += 1\n\
    \        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = notes.map(note => {\n            if (note == \"o\"\
    ) 4\n            else if (note == \"o|\") 2\n            else if (note == \".|\"\
    ) 1\n            else 0\n        })\n        beats.toList", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            if (note == \"o\") beats += 4\n      \
    \      else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ArrayBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        val result = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") result += 4\n \
    \           else if (note == \"o|\") result += 2\n            else if (note ==\
    \ \".|\") result += 1\n        }\n        result.toList", "        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' => {\n                    beats += current_beat\n                    current_beat\
    \ += 1\n                }\n                case '|' => {\n                   \
    \ current_beat += 1\n                }\n            }\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        // TODO: Implement\
    \ this function\n        val beats = ListBuffer[Long]()\n        var i = 0\n \
    \       while (i < music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                beats += 4\n                i += 1\n            } else\
    \ if (music_string(i) == 'o' && music_string(i + 1) == '|') {\n              \
    \  beats += 2\n                i += 2\n            } else if (music_string(i)\
    \ == '.' && music_string(i + 1) == '|') {\n                beats += 1\n      \
    \          i += 2\n            }\n        }\n        beats.toList", "        //\
    \ Your code here\n        var result = List[Long]()\n        var count = 0\n \
    \       for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                result = result :+ 4\n                count += 4\n\
    \            }\n            else if (music_string(i) == '.') {\n             \
    \   result = result :+ 1\n                count += 1\n            }\n        \
    \    else if (music_string(i) == '|') {\n                if (music_string(i -\
    \ 1) == 'o') {\n                    result = result :+ 2\n                   \
    \ count += 2\n                }\n                else if (music_string(i - 1)\
    \ == '.') {\n                    result = result :+ 0\n                    count\
    \ += 0\n                }\n            }\n        }\n        result", "      \
    \  val notes = music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        var current_beat = 0L\n        for (c <- music_string) {\n          \
    \  if (c == 'o') {\n                beats += current_beat\n                current_beat\
    \ += 4\n            } else if (c == 'o' || c == '|') {\n                beats\
    \ += current_beat\n                current_beat += 2\n            } else if (c\
    \ == '.' || c == '|') {\n                beats += current_beat\n             \
    \   current_beat += 1\n            }\n        }\n        beats.toList", "    \
    \    val notes = music_string.split(\" \").toList\n        notes.map(note => {\n\
    \            if (note.contains(\"o\")) {\n                if (note.contains(\"\
    |\")) 4 else 2\n            } else {\n                1\n            }\n     \
    \   })", "        val notes = music_string.toList\n        val beats = ListBuffer[Long]()\n\
    \        var current_note = 0\n        for (note <- notes) {\n            if (note\
    \ == 'o') {\n                beats += 4\n                current_note = 0\n  \
    \          } else if (note == 'o' && current_note == 0) {\n                beats\
    \ += 2\n                current_note = 1\n            } else if (note == '.' &&\
    \ current_note == 1) {\n                beats += 1\n                current_note\
    \ = 2\n            } else if (note == '|' && current_note == 2) {\n          \
    \      current_note = 0\n            }\n        }\n        beats.toList", "  \
    \      val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note.contains(\"o\")) {\n    \
    \            beats += 4\n            } else if (note.contains(\"|\")) {\n    \
    \            beats += 2\n            } else {\n                beats += 1\n  \
    \          }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    |\")) beats += 2\n            else beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"\
    o\")) beats += 4\n            else if (note.contains(\".|\")) beats += 1\n   \
    \     }\n        beats.toList", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val beats = ListBuffer[Long]()\n        var beat\
    \ = 0L\n        for (c <- music_string) {\n            c match {\n           \
    \     case 'o' => {\n                    beats += beat\n                    beat\
    \ = 0\n                }\n                case 'o' | '|' => beat += 1\n      \
    \          case '.' => {\n                    beats += beat\n                \
    \    beat = 0\n                }\n                case _ =>\n            }\n \
    \       }\n        beats.toList", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = new ArrayBuffer[Long]\n        var current_beat = 0L\n    \
    \    for (i <- 0 until music_string.length) {\n            music_string(i) match\
    \ {\n                case 'o' => {\n                    beats += current_beat\n\
    \                    current_beat += 4\n                }\n                case\
    \ 'o' => {\n                    beats += current_beat\n                    current_beat\
    \ += 2\n                }\n                case '.' => {\n                   \
    \ beats += current_beat\n                    current_beat += 1\n             \
    \   }\n                case '|' => {\n                    current_beat += 1\n\
    \                }\n            }\n        }\n        beats.toList", "       \
    \ val beats = ListBuffer[Long]()\n        var current_beat = 0L\n        for (c\
    \ <- music_string) {\n            if (c == 'o') {\n                beats += current_beat\n\
    \                current_beat += 4\n            } else if (c == 'o' || c == '|')\
    \ {\n                beats += current_beat\n                current_beat += 2\n\
    \            } else if (c == '.' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n            }\n        }\n        beats.toList"]
stop_tokens:
- "\n    }\n"
