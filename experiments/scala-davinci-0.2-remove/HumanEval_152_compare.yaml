name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two arrays of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return an array of the same length denoting how\
  \ far off each guess was. If they have guessed correctly,\n    // the value is 0,\
  \ and if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    def compare(game : List[Long], guess : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ['        game.zip(guess).map(x => abs(x._1 - x._2))', "        val result\
    \ = new ListBuffer[Long]\n        for (i <- 0 until game.length) {\n         \
    \   result += abs(game(i) - guess(i))\n        }\n        result.toList", "  \
    \      var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       val result = new ListBuffer[Long]\n        for (i <- 0 until game.length)\
    \ {\n            result += abs(game(i) - guess(i))\n        }\n        result.toList",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) result = 0 :: result\n            else\
    \ result = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = abs(game(i) -\
    \ guess(i)) :: result\n        }\n        result.reverse", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  if (game(i) == guess(i)) result = 0 :: result\n            else result = abs(game(i)\
    \ - guess(i)) :: result\n        }\n        result.reverse", "        var result\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            if (game(i)\
    \ == guess(i)) result = 0 :: result\n            else result = abs(game(i) - guess(i))\
    \ :: result\n        }\n        result.reverse", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        val\
    \ result = new ListBuffer[Long]\n        for (i <- 0 until game.length) {\n  \
    \          result += abs(game(i) - guess(i))\n        }\n        result.toList",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            if (game(i) == guess(i)) result = 0 :: result\n\
    \            else result = abs(game(i) - guess(i)) :: result\n        }\n    \
    \    result.reverse", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            if (game(i) == guess(i)) result = 0 :: result\n\
    \            else result = abs(game(i) - guess(i)) :: result\n        }\n    \
    \    result.reverse", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            if (game(i) == guess(i)) result = 0 :: result\n\
    \            else result = abs(game(i) - guess(i)) :: result\n        }\n    \
    \    result.reverse", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", '        game.zip(guess).map(x => abs(x._1 -
    x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = abs(game(i) - guess(i)) :: result\n        }\n     \
    \   result.reverse", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            if (game(i) == guess(i)) result = 0 :: result\n\
    \            else result = abs(game(i) - guess(i)) :: result\n        }\n    \
    \    result.reverse", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        if (game.length == 0) return List()\n        return\
    \ (game.head - guess.head).abs :: compare(game.tail, guess.tail)", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until game.length) {\n            result += abs(game(i) - guess(i))\n\
    \        }\n        result.toList", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  if (game(i) == guess(i)) {\n                result = 0 :: result\n        \
    \    } else {\n                result = abs(game(i) - guess(i)) :: result\n  \
    \          }\n        }\n        result.reverse", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       val result = new ListBuffer[Long]\n        for (i <- 0 until game.length)\
    \ {\n            result += abs(game(i) - guess(i))\n        }\n        result.toList",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse", " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "  \
    \      var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", '        game.zip(guess).map(x => abs(x._1 -
    x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (game(i) == guess(i)) result = 0 :: result\n            else\
    \ result = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        return result",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (game(i) == guess(i))\
    \ result = 0 :: result\n            else result = abs(game(i) - guess(i)) :: result\n\
    \        }\n        result.reverse", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = abs(game(i) - guess(i)) :: result\n        }\n     \
    \   result.reverse", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (game(i) == guess(i))\
    \ result = 0 :: result\n            else result = abs(game(i) - guess(i)) :: result\n\
    \        }\n        result.reverse", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            if (game(i) == guess(i)) {\n                result\
    \ = 0 :: result\n            } else {\n                result = abs(game(i) -\
    \ guess(i)) :: result\n            }\n        }\n        result.reverse", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            if (game(i) == guess(i)) result = 0 :: result\n            else result\
    \ = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse", " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            if (game(i) == guess(i)) result = 0 :: result\n\
    \            else result = abs(game(i) - guess(i)) :: result\n        }\n    \
    \    result.reverse", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result"]
stop_tokens:
- "\n    }\n"
