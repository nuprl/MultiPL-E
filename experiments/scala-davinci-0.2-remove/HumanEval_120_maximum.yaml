name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n\
  \    // Example 2:\n    // Example 3:\n    // Note:\n    // 1. The length of the\
  \ array will be in the range of [1, 1000].\n    // 2. The elements in the array\
  \ will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def\
  \ maximum(arr : List[Long], k : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n   \
    \     for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.dequeueAll.toList", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val sorted =\
    \ arr.sorted\n        sorted.takeRight(k.toInt)", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val n = arr.length\n        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- 0 until n) {\n            if (pq.size < k) pq.enqueue(arr(i))\n\
    \            else if (arr(i) > pq.head) {\n                pq.dequeue\n      \
    \          pq.enqueue(arr(i))\n            }\n        }\n        pq.toList", " \
    \       val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ arr) {\n            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n\
    \        }\n        pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new mutable.PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr)\
    \ {\n            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n\
    \        }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (x <- arr) {\n         \
    \   pq.enqueue(x)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new Heap(arr)\n        val result = new ListBuffer[Long]\n        for (i <-\
    \ 0 until k.toInt) {\n            result += heap.pop\n        }\n        result.toList",
  "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ arr) {\n            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n\
    \        }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new Heap[Long](arr, (x : Long, y : Long)\
    \ => x < y)\n        var result = List[Long]()\n        for (i <- 0 until k.toInt)\
    \ {\n            result = heap.pop() :: result\n        }\n        result.reverse",
  "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ arr) {\n            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n\
    \        }\n        pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            heap.enqueue(x)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new Heap(k)\n        for (x\
    \ <- arr) {\n            heap.add(x)\n        }\n        heap.getList", "    \
    \    val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr)\
    \ {\n            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n    \
    \    }\n        pq.toList.sorted", "        var result = List[Long]()\n      \
    \  var heap = new Heap[Long]()\n        for (i <- arr) {\n            heap.add(i)\n\
    \            if (heap.size > k) heap.remove\n        }\n        while (heap.size\
    \ > 0) {\n            result = heap.remove :: result\n        }\n        result",
  "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ arr) {\n            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n\
    \        }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val sorted = arr.sorted\n        sorted.takeRight(k.toInt)",
  "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ arr) {\n            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n\
    \        }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            heap.enqueue(x)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val maxHeap\
    \ = new MaxHeap[Long](k.toInt)\n        for (x <- arr) {\n            if (maxHeap.size\
    \ < k) maxHeap.insert(x)\n            else if (x > maxHeap.peek) {\n         \
    \       maxHeap.remove\n                maxHeap.insert(x)\n            }\n   \
    \     }\n        maxHeap.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        var result = new ListBuffer[Long]\n\
    \        var maxHeap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for\
    \ (i <- 0 until k.toInt) maxHeap.enqueue(arr(i))\n        for (i <- k.toInt until\
    \ arr.length) {\n            if (arr(i) > maxHeap.head) {\n                maxHeap.dequeue\n\
    \                maxHeap.enqueue(arr(i))\n            }\n        }\n        while\
    \ (!maxHeap.isEmpty) result += maxHeap.dequeue\n        result.toList", "    \
    \    val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr)\
    \ {\n            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n    \
    \    }\n        pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (x <- arr) {\n         \
    \   pq.enqueue(x)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new Heap(arr, k)\n        heap.getMax()",
  "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <-\
    \ arr) {\n            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n\
    \        }\n        pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new Heap[Long]((a : Long, b\
    \ : Long) => a > b)\n        for (i <- 0 until k.toInt) heap.insert(arr(i))\n\
    \        for (i <- k.toInt until arr.length) {\n            if (arr(i) > heap.peek)\
    \ {\n                heap.pop\n                heap.insert(arr(i))\n         \
    \   }\n        }\n        heap.elements", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        if (k == 0) return List()\n        val\
    \ heap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n\
    \            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n  \
    \      }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(x => -x))\n        for (i <- arr) {\n\
    \            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n\
    \        pq.toList", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new mutable.PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr)\
    \ {\n            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n\
    \        }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (x <- arr) {\n         \
    \   pq.enqueue(x)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (num <- arr) {\n            heap.enqueue(num)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val heap\
    \ = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n   \
    \         heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n     \
    \   }\n        heap.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        arr.foreach(x => pq.enqueue(x))\n\
    \        var result = List[Long]()\n        for (i <- 0 until k.toInt) {\n   \
    \         result = pq.dequeue :: result\n        }\n        result.reverse", " \
    \       val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i\
    \ <- arr) {\n            heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n\
    \        }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        arr.foreach(x => {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        })\n        pq.toList.sorted", "        val heap =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n       \
    \ }\n        heap.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val heap = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   heap.enqueue(i)\n            if (heap.size > k) heap.dequeue\n        }\n\
    \        heap.toList.sorted", "        val maxHeap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            maxHeap.enqueue(i)\n            if (maxHeap.size\
    \ > k) maxHeap.dequeue\n        }\n        maxHeap.toList.sorted", "        val\
    \ pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n\
    \            pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n\
    \        pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        val pq =\
    \ new PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n     \
    \       pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n  \
    \      pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (x <- arr) {\n            pq.enqueue(x)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted", "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            pq.enqueue(i)\n            if (pq.size\
    \ > k) pq.dequeue\n        }\n        pq.toList.sorted", "        val pq = new\
    \ PriorityQueue[Long]()(Ordering.by(-_))\n        for (i <- arr) {\n         \
    \   pq.enqueue(i)\n            if (pq.size > k) pq.dequeue\n        }\n      \
    \  pq.toList.sorted"]
stop_tokens:
- "\n    }\n"
