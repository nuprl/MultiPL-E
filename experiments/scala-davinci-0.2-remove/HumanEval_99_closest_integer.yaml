name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // Note:\n \
  \   // Rounding away from zero means that if the given number is equidistant\n \
  \   // from two integers, the one you should return is the one that is the\n   \
  \ // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) == abs(number\
    \ - ceil)) {\n            if (number > 0) ceil.toLong else floor.toLong\n    \
    \    } else if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number > 0) ceil.toLong else floor.toLong\n        } else\
    \ if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val x = value.toDouble\n        val y = round(x)\n        val z = floor(x)\n\
    \        val a = ceil(x)\n        if (abs(x - y) < abs(x - z)) y.toLong\n    \
    \    else if (abs(x - y) < abs(x - a)) y.toLong\n        else if (abs(x - z) <\
    \ abs(x - a)) z.toLong\n        else a.toLong", "        val valueDouble = value.toDouble\n\
    \        val valueLong = value.toLong\n        if (valueDouble - valueLong < 0.5)\
    \ valueLong\n        else valueLong + 1", "        val d = value.toDouble\n  \
    \      val i = d.toLong\n        if (abs(d - i) > 0.5) i + signum(d) else i",
  "        val v = value.toDouble\n        val i = v.toLong\n        if (abs(v - i)\
    \ >= 0.5) i + (if (v > 0) 1 else -1) else i", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d\
    \ > 0) i + 1\n        else i - 1", "        val d = value.toDouble\n        if\
    \ (d > 0) ceil(d).toLong\n        else floor(d).toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil)) floor\
    \ else ceil", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ int = num.toLong\n        if (abs(num - int) == 0.5) {\n            if (num\
    \ > 0) int + 1 else int - 1\n        } else {\n            round(num)\n      \
    \  }", "        val num = value.toDouble\n        val floor = floor(num)\n   \
    \     val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil)) floor.toLong\
    \ else ceil.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val v = value.toDouble\n        val floor = v.floor\n        val ceil = v.ceil\n\
    \        if (abs(v - floor) == abs(v - ceil)) {\n            if (v > 0) ceil else\
    \ floor\n        } else if (abs(v - floor) < abs(v - ceil)) floor else ceil",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ == 0.5) {\n            if (d > 0) i + 1 else i - 1\n        } else {\n     \
    \       i\n        }", "        val number = BigDecimal(value)\n        val floor\
    \ = number.floor\n        val ceil = number.ceil\n        if (number - floor ==\
    \ ceil - number) {\n            if (number >= 0) ceil else floor\n        } else\
    \ if (number - floor < ceil - number) floor else ceil", "        val n = value.toDouble\n\
    \        val m = round(n)\n        if (abs(n - m) == 0.5) {\n            if (n\
    \ > 0) m + 1 else m - 1\n        } else m", "        val x = value.toDouble\n\
    \        val y = x.round\n        if (x - y >= 0.5) y + 1 else y", "        val\
    \ num = value.toDouble\n        if (num > 0) {\n            if (num - num.toLong\
    \ < 0.5) num.toLong else num.toLong + 1\n        } else {\n            if (num\
    \ - num.toLong > -0.5) num.toLong else num.toLong - 1\n        }", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil)) floor\
    \ else ceil", "        val num = value.toDouble\n        if (num > 0) {\n    \
    \        ceil(num).toLong\n        } else {\n            floor(num).toLong\n \
    \       }", "        val v = value.toDouble\n        if (v < 0) {\n          \
    \  val v1 = ceil(v)\n            val v2 = floor(v)\n            if (abs(v - v1)\
    \ < abs(v - v2)) v1.toLong else v2.toLong\n        } else {\n            val v1\
    \ = floor(v)\n            val v2 = ceil(v)\n            if (abs(v - v1) < abs(v\
    \ - v2)) v1.toLong else v2.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong\n        else floor(d).toLong", "        val\
    \ num = value.toDouble\n        if (num < 0) {\n            val n = ceil(num)\n\
    \            if (abs(n - num) == 0.5) {\n                return n.toLong\n   \
    \         }\n            return floor(num).toLong\n        }\n        val n =\
    \ floor(num)\n        if (abs(n - num) == 0.5) {\n            return n.toLong\n\
    \        }\n        return ceil(num).toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num >= 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val x = value.toDouble\n \
    \       val y = round(x)\n        val z = floor(x)\n        val w = ceil(x)\n\
    \        if (abs(x - y) < abs(x - z)) y.toLong\n        else if (abs(x - y) <\
    \ abs(x - w)) y.toLong\n        else if (abs(x - z) < abs(x - w)) z.toLong\n \
    \       else w.toLong", "        val d = value.toDouble\n        if (d < 0) {\n\
    \            val d1 = ceil(d)\n            val d2 = floor(d)\n            if (d1\
    \ - d < d - d2) d1.toLong else d2.toLong\n        } else {\n            val d1\
    \ = floor(d)\n            val d2 = ceil(d)\n            if (d2 - d < d - d1) d2.toLong\
    \ else d1.toLong\n        }", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(d -\
    \ floor) < abs(d - ceil)) floor.toLong else ceil.toLong", "        val number\
    \ = value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) == abs(number - ceil)) {\n            if (number\
    \ > 0) ceil.toLong else floor.toLong\n        } else if (abs(number - floor) <\
    \ abs(number - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor\
    \ - d) == abs(ceil - d)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - d) < abs(ceil - d)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val x = value.toDouble\n \
    \       val y = round(x)\n        if (abs(x - y) == 0.5) {\n            if (x\
    \ > 0) y + 1 else y - 1\n        } else y", "        val n = value.toDouble\n\
    \        if (n > 0) {\n            if (n - n.toLong < 0.5) n.toLong else n.toLong\
    \ + 1\n        } else {\n            if (n - n.toLong > -0.5) n.toLong else n.toLong\
    \ - 1\n        }", "        val num = value.toDouble\n        if (num > 0) {\n\
    \            if (num - num.toLong < 0.5) num.toLong else num.toLong + 1\n    \
    \    } else {\n            if (num - num.toLong > -0.5) num.toLong else num.toLong\
    \ - 1\n        }", "        val v = value.toDouble\n        val i = v.toLong\n\
    \        if (v - i < 0.5) i else i + 1", "        val num = value.toDouble\n \
    \       if (num > 0) {\n            val floor = num.floor\n            if (num\
    \ - floor < 0.5) floor.toLong else floor.toLong + 1\n        } else {\n      \
    \      val ceil = num.ceil\n            if (ceil - num < 0.5) ceil.toLong else\
    \ ceil.toLong - 1\n        }", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n        } else\
    \ if (abs(num - floor) < abs(num - ceil)) floor else ceil", "        val n = value.toDouble\n\
    \        val a = floor(n).toLong\n        val b = ceil(n).toLong\n        if (abs(n\
    \ - a) < abs(n - b)) a else b", "        val v = value.toDouble\n        val floor\
    \ = v.floor\n        val ceil = v.ceil\n        if (abs(v - floor) == abs(v -\
    \ ceil)) {\n            if (floor > 0) floor else ceil\n        } else if (abs(v\
    \ - floor) < abs(v - ceil)) floor else ceil", "        val d = value.toDouble\n\
    \        val i = value.toLong\n        if (abs(d - i) < 0.5) i\n        else if\
    \ (d > 0) i + 1\n        else i - 1", "        val num = value.toDouble\n    \
    \    val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n          \
    \  if (num > 0) ceil.toLong else floor.toLong\n        } else if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num = BigDecimal(value)\n\
    \        val floor = num.floor\n        val ceil = num.ceil\n        if (num -\
    \ floor > ceil - num) ceil.toLong else floor.toLong", "        val number = BigDecimal(value)\n\
    \        val floor = number.floor\n        val ceil = number.ceil\n        if\
    \ (number - floor == ceil - number) {\n            if (number > 0) ceil else floor\n\
    \        } else if (number - floor < ceil - number) floor else ceil", "      \
    \  val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number >= 0) ceil.toLong else floor.toLong\n        } else\
    \ if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val x = value.toDouble\n        val y = x.toLong\n        if (x - y > 0.5)\
    \ y + 1\n        else if (x - y < -0.5) y - 1\n        else y", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (num - floor < ceil - num) floor.toLong else ceil.toLong", "     \
    \   val n = value.toDouble\n        if (n - n.floor < 0.5) n.floor.toLong\n  \
    \      else n.ceil.toLong", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) ==\
    \ abs(num - ceil)) {\n            if (num >= 0) ceil else floor\n        } else\
    \ if (abs(num - floor) < abs(num - ceil)) floor else ceil", "        val x = value.toDouble\n\
    \        val y = round(x)\n        if (y > x) y - 1 else y", "        val num\
    \ = value.toDouble\n        val floor = num.floor\n        val ceil = num.ceil\n\
    \        if (num - floor == ceil - num) {\n            if (floor >= 0) ceil else\
    \ floor\n        } else if (num - floor < ceil - num) floor else ceil", "    \
    \    val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil)) floor.toLong\
    \ else ceil.toLong", "        val number = value.toDouble\n        if (number\
    \ > 0) {\n            ceil(number).toLong\n        } else {\n            floor(number).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i\n        else if (d > 0) i + 1\n        else i - 1",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number > 0) ceil else floor\n        } else if (abs(number\
    \ - floor) < abs(number - ceil)) floor else ceil", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d\
    \ > 0) i + 1\n        else i - 1", "        val d = value.toDouble\n        val\
    \ floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor - d) < abs(ceil\
    \ - d)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n  \
    \      val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val x =\
    \ value.toDouble\n        val y = x.toLong\n        if (abs(x - y) < 0.5) y\n\
    \        else if (x > 0) y + 1\n        else y - 1", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = num.floor\n        val ceil = num.ceil\n\
    \        if (abs(floor - num) < abs(ceil - num)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n          \
    \  if (num > 0) ceil.toLong else floor.toLong\n        } else if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val valueDouble\
    \ = value.toDouble\n        val valueInt = value.toInt\n        if (valueDouble\
    \ - valueInt == 0.5) {\n            if (valueInt > 0) valueInt + 1 else valueInt\
    \ - 1\n        } else {\n            round(valueDouble)\n        }", "       \
    \ val num = value.toDouble\n        val floor = floor(num)\n        val ceil =\
    \ ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n            if\
    \ (num > 0) ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil))\
    \ floor else ceil", "        val n = value.toDouble\n        val c = round(n)\n\
    \        val f = floor(n)\n        val ci = ceil(n)\n        if (abs(c - n) <\
    \ abs(f - n)) c.toLong\n        else if (abs(c - n) > abs(ci - n)) ci.toLong\n\
    \        else if (c > 0) ci.toLong\n        else f.toLong", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (num - floor < ceil - num) floor.toLong else ceil.toLong", "     \
    \   val x = value.toDouble\n        val y = round(x)\n        val z = floor(x)\n\
    \        val w = ceil(x)\n        if (abs(x - y) < abs(x - z)) y.toLong\n    \
    \    else if (abs(x - y) < abs(x - w)) y.toLong\n        else if (abs(x - z) <\
    \ abs(x - w)) z.toLong\n        else w.toLong", "        val num = value.toDouble\n\
    \        val floor = math.floor(num)\n        val ceil = math.ceil(num)\n    \
    \    if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong\
    \ else floor.toLong\n        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong\
    \ else ceil.toLong", "        val n = value.toDouble\n        val a = floor(n)\n\
    \        val b = ceil(n)\n        if (abs(n - a) <= abs(n - b)) a.toLong else\
    \ b.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = BigDecimal(value)\n     \
    \   val floor = num.floor\n        val ceil = num.ceil\n        if (floor == ceil)\
    \ floor.toLong\n        else if (num - floor > ceil - num) ceil.toLong\n     \
    \   else floor.toLong", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num >= 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number > 0) ceil else floor\n        } else if (abs(number\
    \ - floor) < abs(number - ceil)) floor else ceil", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i\n\
    \        else if (d > 0) i + 1\n        else i - 1", "        val num = value.toDouble\n\
    \        if (num > 0) {\n            if (num - num.toLong < 0.5) num.toLong else\
    \ num.toLong + 1\n        } else {\n            if (num - num.toLong > -0.5) num.toLong\
    \ else num.toLong - 1\n        }", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d > 0) i + 1\n\
    \        else i - 1", "        val num = value.toDouble\n        val int = num.toLong\n\
    \        if (num - int >= 0.5) int + 1\n        else int", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val n =\
    \ BigDecimal(value)\n        val floor = n.floor\n        val ceil = n.ceil\n\
    \        if (n - floor == ceil - n) {\n            if (n > 0) ceil else floor\n\
    \        } else if (n - floor < ceil - n) floor else ceil", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val x = value.toDouble\n \
    \       val y = round(x)\n        val z = floor(x)\n        val w = ceil(x)\n\
    \        if (abs(x - y) < abs(x - z)) y.toLong\n        else if (abs(x - y) <\
    \ abs(x - w)) y.toLong\n        else if (abs(x - z) < abs(x - w)) z.toLong\n \
    \       else w.toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i\n        else if (d > 0) i + 1\n        else\
    \ i - 1", "        val n = value.toDouble\n        val n1 = floor(n)\n       \
    \ val n2 = ceil(n)\n        if (abs(n - n1) == abs(n - n2)) {\n            if\
    \ (n > 0) n2 else n1\n        } else if (abs(n - n1) < abs(n - n2)) n1 else n2",
  "        val d = value.toDouble\n        val f = floor(d)\n        val c = ceil(d)\n\
    \        if (abs(d - f) == abs(d - c)) {\n            if (d > 0) c else f\n  \
    \      } else if (abs(d - f) < abs(d - c)) f else c", "        val num = value.toDouble\n\
    \        val int = num.toLong\n        if (num - int >= 0.5) int + 1\n       \
    \ else int", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) ==\
    \ 0.5) {\n            if (d > 0) i + 1 else i - 1\n        } else {\n        \
    \    i\n        }", "        val number = value.toDouble\n        val floor =\
    \ floor(number)\n        val ceil = ceil(number)\n        val diff1 = abs(number\
    \ - floor)\n        val diff2 = abs(number - ceil)\n        if (diff1 < diff2)\
    \ floor.toLong else ceil.toLong", "        val x = value.toDouble\n        val\
    \ y = round(x)\n        val z = floor(x)\n        val w = ceil(x)\n        if\
    \ (abs(x - y) < abs(x - z)) y.toLong\n        else if (abs(x - y) < abs(x - w))\
    \ y.toLong\n        else if (abs(x - z) < abs(x - w)) z.toLong\n        else w.toLong",
  "        val d = value.toDouble\n        if (d < 0) {\n            val d2 = ceil(d)\n\
    \            if (d2 - d == 0.5) {\n                d2.toLong - 1\n           \
    \ } else {\n                d2.toLong\n            }\n        } else {\n     \
    \       val d2 = floor(d)\n            if (d - d2 == 0.5) {\n                d2.toLong\
    \ + 1\n            } else {\n                d2.toLong\n            }\n      \
    \  }", "        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) < abs(number\
    \ - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = num.floor\n        val ceil = num.ceil\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val number = value.toDouble\n        val floor = floor(number)\n       \
    \ val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = num.floor\n        val ceil = num.ceil\n        if (abs(num - floor)\
    \ == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n        } else\
    \ if (abs(num - floor) < abs(num - ceil)) floor else ceil", "        val n = value.toDouble\n\
    \        val floor = math.floor(n)\n        val ceil = math.ceil(n)\n        if\
    \ (abs(floor - n) == abs(ceil - n)) {\n            if (floor >= 0) floor.toLong\
    \ else ceil.toLong\n        } else if (abs(floor - n) < abs(ceil - n)) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        val l = d.toLong\n\
    \        if (abs(d - l) >= 0.5) l + signum(d)\n        else l", "        val v\
    \ = value.toDouble\n        val floor = floor(v)\n        val ceil = ceil(v)\n\
    \        if (abs(v - floor) == abs(v - ceil)) {\n            if (v >= 0) ceil\
    \ else floor\n        } else if (abs(v - floor) < abs(v - ceil)) floor else ceil",
  "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\n        else\
    \ floor(d).toLong", "        val number = value.toDouble\n        val floor =\
    \ floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ == abs(number - ceil)) {\n            if (number > 0) ceil else floor\n    \
    \    } else if (abs(number - floor) < abs(number - ceil)) floor else ceil", " \
    \       val num = value.toDouble\n        val floor = floor(num)\n        val\
    \ ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n     \
    \       if (num > 0) ceil.toLong else floor.toLong\n        } else if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i\n\
    \        else if (d > 0) i + 1\n        else i - 1", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) == abs(number - ceil)) {\n            if (number > 0) ceil.toLong\
    \ else floor.toLong\n        } else if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ int = num.toLong\n        if (num - int >= 0.5) int + 1\n        else int",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number > 0) ceil.toLong else floor.toLong\n        } else\
    \ if (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n          \
    \  if (num > 0) ceil else floor\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor else ceil", "        val valueDouble = value.toDouble\n     \
    \   val floor = floor(valueDouble)\n        val ceil = ceil(valueDouble)\n   \
    \     if (abs(floor - valueDouble) == abs(ceil - valueDouble)) {\n           \
    \ if (floor < 0) ceil.toLong else floor.toLong\n        } else if (abs(floor -\
    \ valueDouble) < abs(ceil - valueDouble)) {\n            floor.toLong\n      \
    \  } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val v = value.toDouble\n        val floor = floor(v)\n        val ceil =\
    \ ceil(v)\n        if (abs(v - floor) < abs(v - ceil)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i\n        else if (d > 0) i + 1\n        else i - 1", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num >= 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(d -\
    \ floor) < abs(d - ceil)) floor.toLong else ceil.toLong", "        val doubleValue\
    \ = value.toDouble\n        val floor = floor(doubleValue).toLong\n        val\
    \ ceil = ceil(doubleValue).toLong\n        if (abs(doubleValue - floor) < abs(doubleValue\
    \ - ceil)) floor else ceil", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (floor\
    \ == ceil) floor.toLong\n        else if (num - floor < ceil - num) floor.toLong\n\
    \        else ceil.toLong", "        val v = value.toDouble\n        val x = round(v)\n\
    \        val y = floor(v)\n        val z = ceil(v)\n        if (abs(v - x) < abs(v\
    \ - y)) x.toLong\n        else if (abs(v - x) < abs(v - z)) x.toLong\n       \
    \ else if (abs(v - y) < abs(v - z)) y.toLong\n        else z.toLong", "      \
    \  val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil)) floor.toLong\
    \ else ceil.toLong", "        val num = BigDecimal(value)\n        val floor =\
    \ num.floor\n        val ceil = num.ceil\n        if (floor == ceil) floor.toLong\n\
    \        else if (abs(num - floor) > abs(num - ceil)) ceil.toLong\n        else\
    \ floor.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val num =\
    \ value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) == abs(number - ceil))\
    \ {\n            if (number > 0) ceil else floor\n        } else if (abs(number\
    \ - floor) < abs(number - ceil)) floor else ceil", "        val d = value.toDouble\n\
    \        if (d < 0) {\n            val d1 = ceil(d)\n            val d2 = floor(d)\n\
    \            if (d1 - d < d - d2) d1.toLong else d2.toLong\n        } else {\n\
    \            val d1 = floor(d)\n            val d2 = ceil(d)\n            if (d2\
    \ - d < d - d1) d2.toLong else d1.toLong\n        }", "        val v = value.toDouble\n\
    \        val floor = v.floor\n        val ceil = v.ceil\n        if (abs(v - floor)\
    \ == abs(v - ceil)) {\n            if (v > 0) ceil else floor\n        } else\
    \ if (abs(v - floor) < abs(v - ceil)) floor else ceil", "        val (intPart,\
    \ fracPart) = value.split(\"\\\\.\").map(_.toLong) match {\n            case Array(intPart,\
    \ fracPart) => (intPart, fracPart)\n            case Array(intPart) => (intPart,\
    \ 0)\n        }\n        if (fracPart == 0) return intPart\n        if (fracPart\
    \ >= 5) return intPart + 1\n        return intPart", "        val x = value.toDouble\n\
    \        val y = round(x)\n        if (abs(x - y) == 0.5) {\n            if (x\
    \ > 0) y + 1 else y - 1\n        } else y", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil))\n            if (num > 0) ceil\
    \ else floor\n        else if (abs(num - floor) < abs(num - ceil)) floor else\
    \ ceil", "        val v = value.toDouble\n        val v1 = floor(v)\n        val\
    \ v2 = ceil(v)\n        if (abs(v - v1) == abs(v - v2)) {\n            if (v >\
    \ 0) v2 else v1\n        } else if (abs(v - v1) < abs(v - v2)) v1 else v2", " \
    \       val num = value.toDouble\n        val floor = floor(num)\n        val\
    \ ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n     \
    \       if (num >= 0) ceil.toLong else floor.toLong\n        } else if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val v =\
    \ value.toDouble\n        val i = v.toLong\n        if (v - i >= 0.5) i + 1 else\
    \ i", "        val v = value.toDouble\n        val c = ceil(v)\n        val f\
    \ = floor(v)\n        if (abs(v - c) == abs(v - f)) {\n            if (v > 0)\
    \ c.toLong else f.toLong\n        } else if (abs(v - c) < abs(v - f)) c.toLong\
    \ else f.toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (d - i < 0.5) i else i + 1", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val d = value.toDouble\n        val floor = d.floor\n        val ceil\
    \ = d.ceil\n        if (abs(d - floor) == abs(d - ceil)) {\n            if (floor\
    \ < 0) ceil else floor\n        } else if (abs(d - floor) < abs(d - ceil)) floor\
    \ else ceil", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = num.floor\n        val ceil = num.ceil\n        if (abs(floor - num)\
    \ == abs(ceil - num)) {\n            if (floor < 0) floor else ceil\n        }\
    \ else if (abs(floor - num) < abs(ceil - num)) floor else ceil", "        val\
    \ d = value.toDouble\n        if (d < 0) {\n            val d1 = ceil(d)\n   \
    \         val d2 = floor(d)\n            if (d1 - d > d - d2) d2 else d1\n   \
    \     } else {\n            val d1 = floor(d)\n            val d2 = ceil(d)\n\
    \            if (d2 - d > d - d1) d1 else d2\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d\
    \ > 0) i + 1\n        else i - 1", "        val number = value.toDouble\n    \
    \    val floor = floor(number)\n        val ceil = ceil(number)\n        if (abs(number\
    \ - floor) == abs(number - ceil)) {\n            if (number >= 0) ceil.toLong\
    \ else floor.toLong\n        } else if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val number = value.toDouble\n     \
    \   val floor = floor(number)\n        val ceil = ceil(number)\n        if (abs(number\
    \ - floor) == abs(number - ceil)) {\n            if (number > 0) ceil.toLong else\
    \ floor.toLong\n        } else if (abs(number - floor) < abs(number - ceil)) floor.toLong\
    \ else ceil.toLong", "        val n = value.toDouble\n        val floor = math.floor(n)\n\
    \        val ceil = math.ceil(n)\n        if (abs(n - floor) < abs(n - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = BigDecimal(value)\n     \
    \   val floor = num.floor\n        val ceil = num.ceil\n        if (floor == ceil)\
    \ floor.toLong\n        else if (num - floor > ceil - num) ceil.toLong\n     \
    \   else floor.toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i\n        else if (d > 0) i + 1\n        else\
    \ i - 1", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val num = value.toDouble\n        if (num - num.toLong >= 0.5) num.toLong\
    \ + 1\n        else num.toLong", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = BigDecimal(value)\n        if (num.abs == num) {\n           \
    \ num.toLong\n        } else {\n            (num - 1).toLong\n        }", "  \
    \      val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = num.floor\n        val ceil = num.ceil\n        if (abs(num - floor)\
    \ == abs(num - ceil)) {\n            if (num >= 0) ceil else floor\n        }\
    \ else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "        val\
    \ number = value.toDouble\n        val floor = floor(number)\n        val ceil\
    \ = ceil(number)\n        if (abs(number - floor) == abs(number - ceil)) {\n \
    \           if (number >= 0) ceil else floor\n        } else if (abs(number -\
    \ floor) < abs(number - ceil)) floor else ceil", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val v = value.toDouble\n        val floor = floor(v)\n        val ceil\
    \ = ceil(v)\n        if (abs(floor - v) == abs(ceil - v)) {\n            if (floor\
    \ < 0) floor else ceil\n        } else if (abs(floor - v) < abs(ceil - v)) floor\
    \ else ceil", "        val d = value.toDouble\n        val i = d.toLong\n    \
    \    if (abs(d - i) == 0.5) {\n            if (d > 0) i + 1 else i - 1\n     \
    \   } else {\n            i\n        }", "        val d = value.toDouble\n   \
    \     val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(d - floor)\
    \ < abs(d - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        if (num - num.toLong >= 0.5) num.toLong + 1\n    \
    \    else num.toLong", "        val num = value.toDouble\n        if (num > 0)\
    \ {\n            if (num - num.toLong < 0.5) num.toLong else num.toLong + 1\n\
    \        } else {\n            if (num - num.toLong > -0.5) num.toLong else num.toLong\
    \ - 1\n        }", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i\n        else if (d > 0) i + 1\n        else\
    \ i - 1", "        val num = value.toDouble\n        if (num > 0) {\n        \
    \    val floor = floor(num)\n            if (num - floor < 0.5) floor.toLong else\
    \ ceil(num).toLong\n        } else {\n            val ceil = ceil(num)\n     \
    \       if (ceil - num < 0.5) ceil.toLong else floor(num).toLong\n        }",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        if\
    \ (num > 0) {\n            ceil(num).toLong\n        } else {\n            floor(num).toLong\n\
    \        }", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil else floor\n        } else if (abs(num - floor)\
    \ < abs(num - ceil)) floor else ceil", "        val num = value.toDouble\n   \
    \     val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num >= 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val v = value.toDouble\n        val i = v.toLong\n        if (abs(v - i)\
    \ < 0.5) i\n        else if (v > 0) i + 1\n        else i - 1", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val i = d.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d\
    \ > 0) i + 1\n        else i - 1", "        val n = value.toDouble\n        val\
    \ floor = math.floor(n)\n        val ceil = math.ceil(n)\n        if (n - floor\
    \ >= ceil - n) ceil.toLong else floor.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) < abs(num - ceil)) floor.toLong else\
    \ ceil.toLong", "        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) < abs(number\
    \ - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(num - floor) < abs(num - ceil)) floor.toLong else\
    \ ceil.toLong", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil else floor\n        } else if (abs(num - floor)\
    \ < abs(num - ceil)) floor else ceil", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val num = value.toDouble\n        val floor = floor(num)\n        val\
    \ ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil)) {\n     \
    \       if (num > 0) ceil.toLong else floor.toLong\n        } else if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        if (num > 0) {\n            val floor = floor(num)\n\
    \            if (num - floor < 0.5) floor.toLong else ceil(num).toLong\n     \
    \   } else {\n            val ceil = ceil(num)\n            if (num - ceil < 0.5)\
    \ ceil.toLong else floor(num).toLong\n        }", "        val d = value.toDouble\n\
    \        val floor = d.floor\n        val ceil = d.ceil\n        if (abs(d - floor)\
    \ == abs(d - ceil)) {\n            if (d > 0) ceil else floor\n        } else\
    \ if (abs(d - floor) < abs(d - ceil)) floor else ceil", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n        } else\
    \ if (abs(num - floor) < abs(num - ceil)) floor else ceil", "        val x = value.toDouble\n\
    \        val y = round(x)\n        if (y - x == 0.5) {\n            if (x < 0)\
    \ y.toLong - 1 else y.toLong + 1\n        } else y.toLong", "        val (intPart,\
    \ fracPart) = value.splitAt(value.indexOf('.'))\n        val intPartAsInt = intPart.toInt\n\
    \        val fracPartAsDouble = fracPart.toDouble\n        if (fracPartAsDouble\
    \ < 0.5) intPartAsInt\n        else if (fracPartAsDouble > 0.5) intPartAsInt +\
    \ 1\n        else if (intPartAsInt > 0) intPartAsInt + 1\n        else intPartAsInt\
    \ - 1", "        val x = value.toDouble\n        val y = round(x)\n        if\
    \ (x - y > 0.5) y + 1 else if (x - y < -0.5) y - 1 else y", "        val number\
    \ = value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(number - floor) == abs(number - ceil)) {\n            if (number\
    \ > 0) ceil.toLong else floor.toLong\n        } else if (abs(number - floor) <\
    \ abs(number - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d\
    \ > 0) i + 1\n        else i - 1", "        val number = value.toDouble\n    \
    \    val floor = floor(number)\n        val ceil = ceil(number)\n        if (abs(number\
    \ - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", "        val\
    \ num = value.toDouble\n        val int = num.toLong\n        if (num - int ==\
    \ 0.5) {\n            if (num > 0) int + 1 else int - 1\n        } else if (num\
    \ - int > 0.5) {\n            int + 1\n        } else {\n            int\n   \
    \     }", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        val\
    \ i = value.toLong\n        if (abs(d - i) < 0.5) i\n        else if (d > 0) i\
    \ + 1\n        else i - 1", "        val n = value.toDouble\n        val floor\
    \ = math.floor(n)\n        val ceil = math.ceil(n)\n        if (n - floor < ceil\
    \ - n) floor.toLong else ceil.toLong", "        val d = value.toDouble\n     \
    \   val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor -\
    \ d) == abs(ceil - d)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - d) < abs(ceil - d)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) > abs(num - ceil)) ceil.toLong else floor.toLong"]
stop_tokens:
- "\n    }\n"
