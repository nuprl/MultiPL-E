name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    def matchParens(lst : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 =\
    \ s1 + s2\n        val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n       \
    \ else if (isGood(s4)) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1Count = s1.count(c => c == '(')\n    \
    \    val s2Count = s2.count(c => c == '(')\n        if (s1Count == s2Count) {\n\
    \            val s = s1 + s2\n            val count = s.count(c => c == '(')\n\
    \            if (count % 2 == 0) {\n                var stack = new Stack[Char]\n\
    \                for (c <- s) {\n                    if (c == '(') stack.push(c)\n\
    \                    else if (stack.isEmpty) return \"No\"\n                 \
    \   else stack.pop\n                }\n                if (stack.isEmpty) \"Yes\"\
    \ else \"No\"\n            } else \"No\"\n        } else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        if (s1.length == 0 && s2.length ==\
    \ 0) return \"Yes\"\n        if (s1.length == 0) {\n            if (s2.count(_\
    \ == '(') == s2.count(_ == ')')) return \"Yes\"\n            else return \"No\"\
    \n        }\n        if (s2.length == 0) {\n            if (s1.count(_ == '(')\
    \ == s1.count(_ == ')')) return \"Yes\"\n            else return \"No\"\n    \
    \    }\n        if (s1.count(_ == '(') == s1.count(_ == ')')) {\n            if\
    \ (s2.count(_ == '(') == s2.count(_ == ')')) return \"Yes\"\n            else\
    \ return \"No\"\n        }\n        if (s2.count(_ == '(') == s2.count(_ == ')'))\
    \ {\n            if (s1.count(_ == '(') == s1.count(_ == ')')) return \"Yes\"\n\
    \            else return \"No\"\n        }\n        if (s1.count(_ == '(') ==\
    \ s2.count(_ == ')')) {\n            if (s2.count(_ == '(') == s1.count(_ == ')'))\
    \ return \"Yes\"\n            else return \"No\"\n        }\n        if (s2.count(_\
    \ == '(') == s1.count(_ == ')')) {\n            if (s1.count(_ == '(') == s2.count(_\
    \ == ')')) return \"Yes\"\n            else return \"No\"\n        }\n       \
    \ \"No\"", "        val s = lst.foldLeft(\"\")((a, b) => a + b)\n        if (s.count(_\
    \ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst1c = lst1.count(_ == '(')\n\
    \        val lst2c = lst2.count(_ == '(')\n        val lst1o = lst1.count(_ ==\
    \ ')')\n        val lst2o = lst2.count(_ == ')')\n        if (lst1c == lst1o &&\
    \ lst2c == lst2o) \"Yes\"\n        else if (lst1c == lst1o && lst2c > lst2o) \"\
    Yes\"\n        else if (lst1c > lst1o && lst2c == lst2o) \"Yes\"\n        else\
    \ if (lst1c > lst1o && lst2c > lst2o) \"Yes\"\n        else \"No\"", "       \
    \ val s = lst.mkString\n        if (s.count(_ == '(') == s.count(_ == ')')) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1Count = s1.count(_ == '(')\n        val s2Count = s2.count(_ == '(')\n\
    \        val s1Open = s1.count(_ == ')')\n        val s2Open = s2.count(_ == ')')\n\
    \        if (s1Count == s2Open && s2Count == s1Open) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n        val (c1, c2) = (s1.count(_\
    \ == '('), s2.count(_ == '('))\n        val (d1, d2) = (s1.count(_ == ')'), s2.count(_\
    \ == ')'))\n        if (c1 == d1 && c2 == d2) \"Yes\"\n        else if (c1 ==\
    \ d1 && c2 != d2) {\n            val (c, d) = if (c2 > d2) (c2, d2) else (d2,\
    \ c2)\n            if (c - d == 1) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (c1 != d1 && c2 == d2) {\n            val (c, d) = if (c1 > d1)\
    \ (c1, d1) else (d1, c1)\n            if (c - d == 1) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else {\n            val (c1, d1) = if (c1 > d1) (c1,\
    \ d1) else (d1, c1)\n            val (c2, d2) = if (c2 > d2) (c2, d2) else (d2,\
    \ c2)\n            if (c1 - d1 == 1 && c2 - d2 == 1) \"Yes\"\n            else\
    \ \"No\"\n        }", "        val s = lst.reduce(_ + _)\n        val stack =\
    \ new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1count = s1.count(c => c == '(')\n\
    \        val s2count = s2.count(c => c == '(')\n        val s1open = s1.count(c\
    \ => c == '(')\n        val s2open = s2.count(c => c == '(')\n        val s1close\
    \ = s1.count(c => c == ')')\n        val s2close = s2.count(c => c == ')')\n \
    \       if (s1count == s2count && s1open == s2close && s2open == s1close) \"Yes\"\
    \ else \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n        val (c1, c2)\
    \ = (s1.count(_ == '('), s2.count(_ == '('))\n        val (d1, d2) = (s1.count(_\
    \ == ')'), s2.count(_ == ')'))\n        if (c1 + c2 == d1 + d2) \"Yes\"\n    \
    \    else if (c1 + c2 - d1 - d2 == 2) \"Yes\"\n        else \"No\"", "       \
    \ val str1 = lst(0)\n        val str2 = lst(1)\n        val str1Count = str1.count(_\
    \ == '(')\n        val str2Count = str2.count(_ == '(')\n        val str1Open\
    \ = str1.count(_ == ')')\n        val str2Open = str2.count(_ == ')')\n      \
    \  if (str1Count == str2Open && str2Count == str1Open) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        def isGood(s\
    \ : String) : Boolean = {\n            var count = 0\n            for (i <- 0\
    \ until s.length) {\n                if (s(i) == '(') count += 1\n           \
    \     else count -= 1\n                if (count < 0) return false\n         \
    \   }\n            return count == 0\n        }\n        if (isGood(s1 + s2))\
    \ return \"Yes\"\n        if (isGood(s2 + s1)) return \"Yes\"\n        return\
    \ \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        val stack = new\
    \ Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n    \
    \    val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n    \
    \    val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\
    \n        else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o\
    \ && s2c == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n \
    \       else \"No\"", "        val s = lst.foldLeft(\"\")((a, b) => a + b)\n \
    \       if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val (s1, s2) = (lst(0),\
    \ lst(1))\n        val (c1, c2) = (s1.count(_ == '('), s2.count(_ == '('))\n \
    \       val (d1, d2) = (s1.count(_ == ')'), s2.count(_ == ')'))\n        if (c1\
    \ == d1 && c2 == d2) \"Yes\"\n        else if (c1 == d1 && c2 != d2) \"No\"\n\
    \        else if (c1 != d1 && c2 == d2) \"No\"\n        else if (c1 > d1 && c2\
    \ < d2) \"Yes\"\n        else if (c1 < d1 && c2 > d2) \"Yes\"\n        else \"\
    No\"", "        val (a, b) = (lst(0), lst(1))\n        val (a1, a2) = (a.count(_\
    \ == '('), a.count(_ == ')'))\n        val (b1, b2) = (b.count(_ == '('), b.count(_\
    \ == ')'))\n        if (a1 == a2 && b1 == b2) \"Yes\"\n        else if (a1 ==\
    \ a2 && b1 > b2) {\n            if (a1 + b1 - b2 == a2) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else if (a1 > a2 && b1 == b2) {\n            if (a1\
    \ - a2 + b1 == b2) \"Yes\"\n            else \"No\"\n        }\n        else if\
    \ (a1 > a2 && b1 > b2) {\n            if (a1 - a2 + b1 - b2 == a2 + b2) \"Yes\"\
    \n            else \"No\"\n        }\n        else \"No\"", "        var s = lst.mkString\n\
    \        var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s1l = s1.length\n        val s2l = s2.length\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) {\n            return \"Yes\"\n       \
    \ }\n        if (s1c == s1o) {\n            if (s2c > s2o) {\n               \
    \ if (s2c - s2o <= s1c) {\n                    return \"Yes\"\n              \
    \  }\n            } else {\n                if (s2o - s2c <= s1o) {\n        \
    \            return \"Yes\"\n                }\n            }\n        }\n   \
    \     if (s2c == s2o) {\n            if (s1c > s1o) {\n                if (s1c\
    \ - s1o <= s2c) {\n                    return \"Yes\"\n                }\n   \
    \         } else {\n                if (s1o - s1c <= s2o) {\n                \
    \    return \"Yes\"\n                }\n            }\n        }\n        return\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        if (s.count(_ == '(') != s.count(_ == ')')) return \"No\"\n\
    \        var c = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == '(') c += 1\n            else c -= 1\n            if (c < 0) return \"No\"\
    \n        }\n        return \"Yes\"", "        val lst1 = lst(0).toList\n    \
    \    val lst2 = lst(1).toList\n        val lst1c = lst1.count(_ == '(')\n    \
    \    val lst2c = lst2.count(_ == '(')\n        val lst1o = lst1.count(_ == ')')\n\
    \        val lst2o = lst2.count(_ == ')')\n        if (lst1c == lst1o && lst2c\
    \ == lst2o) {\n            if (lst1c == lst2o && lst2c == lst1o) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) return \"Yes\"\n\
    \        if (s1c == s1o && s2c > s2o) return \"Yes\"\n        if (s1c > s1o &&\
    \ s2c == s2o) return \"Yes\"\n        if (s1c > s1o && s2c > s2o) return \"Yes\"\
    \n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n       \
    \ val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\")((x, y) => x + y)\n\
    \        if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') {\n                stack.push(c)\n      \
    \      } else {\n                if (stack.isEmpty) return \"No\"\n          \
    \      stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1_parens = s1.filter(c => c == '(' || c == ')')\n        val s2_parens = s2.filter(c\
    \ => c == '(' || c == ')')\n        val s1_parens_count = s1_parens.count(c =>\
    \ c == '(')\n        val s2_parens_count = s2_parens.count(c => c == '(')\n  \
    \      if (s1_parens_count != s2_parens_count) return \"No\"\n        val s1_parens_open\
    \ = s1_parens.count(c => c == '(')\n        val s2_parens_open = s2_parens.count(c\
    \ => c == '(')\n        val s1_parens_close = s1_parens.count(c => c == ')')\n\
    \        val s2_parens_close = s2_parens.count(c => c == ')')\n        if (s1_parens_open\
    \ > s2_parens_open) return \"No\"\n        if (s1_parens_close > s2_parens_close)\
    \ return \"No\"\n        return \"Yes\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst3 = lst1 ++ lst2\n        if\
    \ (lst3.count(_ == '(') == lst3.count(_ == ')')) \"Yes\" else \"No\"", "     \
    \   if (lst.length != 2) return \"No\"\n        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        if (s1.length % 2 != 0 || s2.length % 2 != 0) return \"No\"\
    \n        val s1open = s1.count(_ == '(')\n        val s1close = s1.count(_ ==\
    \ ')')\n        val s2open = s2.count(_ == '(')\n        val s2close = s2.count(_\
    \ == ')')\n        if (s1open != s1close || s2open != s2close) return \"No\"\n\
    \        if (s1open == s2open && s1close == s2close) return \"Yes\"\n        if\
    \ (s1open == s2close && s1close == s2open) return \"Yes\"\n        \"No\"", " \
    \       val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst1_count = lst1.count(x => x == '(')\n        val lst2_count = lst2.count(x\
    \ => x == '(')\n        val lst1_count_close = lst1.count(x => x == ')')\n   \
    \     val lst2_count_close = lst2.count(x => x == ')')\n        if (lst1_count\
    \ == lst1_count_close && lst2_count == lst2_count_close) {\n            \"Yes\"\
    \n        } else if (lst1_count == lst1_count_close && lst2_count != lst2_count_close)\
    \ {\n            if (lst2_count > lst2_count_close) {\n                \"Yes\"\
    \n            } else {\n                \"No\"\n            }\n        } else\
    \ if (lst1_count != lst1_count_close && lst2_count == lst2_count_close) {\n  \
    \          if (lst1_count > lst1_count_close) {\n                \"Yes\"\n   \
    \         } else {\n                \"No\"\n            }\n        } else {\n\
    \            \"No\"\n        }", "        val s = lst.reduceLeft(_ + _)\n    \
    \    if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val (l1, l2) = (lst(0),\
    \ lst(1))\n        def isGood(s : String) : Boolean = {\n            var count\
    \ = 0\n            for (c <- s) {\n                if (c == '(') count += 1\n\
    \                else count -= 1\n                if (count < 0) return false\n\
    \            }\n            return count == 0\n        }\n        if (isGood(l1\
    \ + l2) || isGood(l2 + l1)) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.reduceLeft(_\
    \ + _)\n        if (s.count(_ == '(') != s.count(_ == ')')) \"No\"\n        else\
    \ {\n            val stack = new Stack[Char]\n            for (c <- s) {\n   \
    \             if (c == '(') stack.push(c)\n                else if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n            if\
    \ (stack.isEmpty) \"Yes\" else \"No\"\n        }", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n        val\
    \ s2Count = s2.count(_ == '(')\n        val s1Open = s1.count(_ == ')')\n    \
    \    val s2Open = s2.count(_ == ')')\n        if (s1Count == s2Open && s2Count\
    \ == s1Open) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 =\
    \ lst(1)\n        val s1Count = s1.count(_ == '(')\n        val s2Count = s2.count(_\
    \ == '(')\n        if (s1Count == s2Count) \"Yes\"\n        else if (s1Count ==\
    \ s2Count + 1) {\n            if (s1.count(_ == ')') == 1) \"Yes\"\n         \
    \   else \"No\"\n        }\n        else if (s2Count == s1Count + 1) {\n     \
    \       if (s2.count(_ == ')') == 1) \"Yes\"\n            else \"No\"\n      \
    \  }\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s = lst.foldLeft(\"\")(_ + _)\n        val s2 = lst.reverse.foldLeft(\"\
    \")(_ + _)\n        if (isGood(s) || isGood(s2)) \"Yes\" else \"No\"", "     \
    \   val str1 = lst(0)\n        val str2 = lst(1)\n        val str1Count = str1.count(_\
    \ == '(')\n        val str2Count = str2.count(_ == '(')\n        if (str1Count\
    \ == str2Count) return \"Yes\"\n        else if (str1Count == str2.count(_ ==\
    \ ')')) return \"Yes\"\n        else if (str2Count == str1.count(_ == ')')) return\
    \ \"Yes\"\n        else return \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        val c = s.count(_ == '(')\n        val d = s.count(_ == ')')\n\
    \        if (c == d) \"Yes\" else \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n\
    \        val (c1, c2) = (s1.count(c => c == '('), s2.count(c => c == '('))\n \
    \       val (d1, d2) = (s1.count(c => c == ')'), s2.count(c => c == ')'))\n  \
    \      if (c1 == d1 && c2 == d2) \"Yes\"\n        else if (c1 == d1 && c2 < d2)\
    \ \"Yes\"\n        else if (c1 < d1 && c2 == d2) \"Yes\"\n        else if (c1\
    \ < d1 && c2 < d2) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n        val\
    \ s2_count = s2.count(_ == '(')\n        val s1_open = s1.count(_ == ')')\n  \
    \      val s2_open = s2.count(_ == ')')\n        if (s1_count == s1_open && s2_count\
    \ == s2_open) {\n            if (s1_count == s2_open || s2_count == s1_open) {\n\
    \                \"Yes\"\n            } else {\n                \"No\"\n     \
    \       }\n        } else {\n            \"No\"\n        }", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n        if (s3.count(_\
    \ == '(') != s3.count(_ == ')')) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s3) {\n            if (c == '(') stack.push(c)\n          \
    \  else {\n                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        var s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.mkString\n        if (s.length % 2 == 1) return \"No\"\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val lst1\
    \ = lst(0).toList\n        val lst2 = lst(1).toList\n        val lst3 = lst1 ++\
    \ lst2\n        val lst4 = lst3.filter(x => x == '(' || x == ')')\n        val\
    \ lst5 = lst4.map(x => if (x == '(') 1 else -1)\n        val lst6 = lst5.scanLeft(0)(_\
    \ + _)\n        val lst7 = lst6.filter(x => x < 0)\n        if (lst7.isEmpty)\
    \ \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n        val lst2 =\
    \ lst(1).toList\n        val lst1c = lst1.count(_ == '(')\n        val lst2c =\
    \ lst2.count(_ == '(')\n        val lst1o = lst1.count(_ == ')')\n        val\
    \ lst2o = lst2.count(_ == ')')\n        if (lst1c == lst1o && lst2c == lst2o)\
    \ {\n            val lst3 = lst1 ++ lst2\n            val lst3c = lst3.count(_\
    \ == '(')\n            val lst3o = lst3.count(_ == ')')\n            if (lst3c\
    \ == lst3o) \"Yes\" else \"No\"\n        } else if (lst1c == lst1o) {\n      \
    \      val lst3 = lst1 ++ lst2\n            val lst3c = lst3.count(_ == '(')\n\
    \            val lst3o = lst3.count(_ == ')')\n            if (lst3c == lst3o)\
    \ \"Yes\" else \"No\"\n        } else if (lst2c == lst2o) {\n            val lst3\
    \ = lst2 ++ lst1\n            val lst3c = lst3.count(_ == '(')\n            val\
    \ lst3o = lst3.count(_ == ')')\n            if (lst3c == lst3o) \"Yes\" else \"\
    No\"\n        } else \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n     \
    \   val (c1, c2) = (s1.count(_ == '('), s2.count(_ == '('))\n        val (o1,\
    \ o2) = (s1.count(_ == ')'), s2.count(_ == ')'))\n        if (c1 == o1 && c2 ==\
    \ o2) \"Yes\"\n        else if (c1 == o1 && c2 > o2) \"Yes\"\n        else if\
    \ (c1 > o1 && c2 == o2) \"Yes\"\n        else if (c1 > o1 && c2 > o2) \"Yes\"\n\
    \        else \"No\"", "        val s = lst.foldLeft(\"\")((a, b) => a + b)\n\
    \        var count = 0\n        for (c <- s) {\n            if (c == '(') count\
    \ += 1\n            else if (c == ')') count -= 1\n            if (count < 0)\
    \ return \"No\"\n        }\n        if (count == 0) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     var stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst3 = lst1 ++ lst2\n        val\
    \ lst4 = lst3.filter(x => x == '(' || x == ')')\n        val lst5 = lst4.foldLeft(0)((acc,\
    \ x) => if (x == '(') acc + 1 else acc - 1)\n        if (lst5 == 0) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) {\n            val s = s1 + s2\n            val c = s.count(_\
    \ == '(')\n            val o = s.count(_ == ')')\n            if (c == o) \"Yes\"\
    \ else \"No\"\n        } else if (s1c == s1o && s2c > s2o) {\n            val\
    \ s = s1 + s2\n            val c = s.count(_ == '(')\n            val o = s.count(_\
    \ == ')')\n            if (c > o) \"Yes\" else \"No\"\n        } else if (s1c\
    \ > s1o && s2c == s2o) {\n            val s = s2 + s1\n            val c = s.count(_\
    \ == '(')\n            val o = s.count(_ == ')')\n            if (c > o) \"Yes\"\
    \ else \"No\"\n        } else {\n            \"No\"\n        }", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        if (s1.length == 0) {\n      \
    \      if (s2.length == 0) \"Yes\"\n            else if (s2.count(_ == '(') ==\
    \ s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n        else\
    \ if (s2.length == 0) {\n            if (s1.count(_ == '(') == s1.count(_ == ')'))\
    \ \"Yes\"\n            else \"No\"\n        }\n        else {\n            val\
    \ s1l = s1.count(_ == '(')\n            val s1r = s1.count(_ == ')')\n       \
    \     val s2l = s2.count(_ == '(')\n            val s2r = s2.count(_ == ')')\n\
    \            if (s1l == s1r && s2l == s2r) \"Yes\"\n            else if (s1l ==\
    \ s1r) {\n                if (s2l > s2r) \"Yes\"\n                else \"No\"\n\
    \            }\n            else if (s2l == s2r) {\n                if (s1l >\
    \ s1r) \"Yes\"\n                else \"No\"\n            }\n            else {\n\
    \                if (s1l > s1r) {\n                    if (s2l > s2r) \"Yes\"\n\
    \                    else \"No\"\n                }\n                else {\n\
    \                    if (s2l > s2r) \"No\"\n                    else \"Yes\"\n\
    \                }\n            }\n        }", "        val s = lst.foldLeft(\"\
    \")((str, s) => str + s)\n        val s2 = s.replaceAll(\"\\\\(\\\\)\", \"\")\n\
    \        if (s2.length == 0) \"Yes\"\n        else if (s2.length % 2 == 1) \"\
    No\"\n        else {\n            val s3 = s2.replaceAll(\"\\\\(\", \"\").replaceAll(\"\
    \\\\)\", \"\")\n            if (s3.length == 0) \"Yes\"\n            else \"No\"\
    \n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s\
    \ = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n   \
    \         if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        val s1\
    \ = s.filter(_ == '(')\n        val s2 = s.filter(_ == ')')\n        if (s1.length\
    \ == s2.length) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s = s1 + s2\n        if (s.count(_ == '(') != s.count(_\
    \ == ')')) return \"No\"\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(x => x == '(' || x == ')')\n\
    \        val lst5 = lst4.map(x => if (x == '(') 1 else -1)\n        val lst6 =\
    \ lst5.scanLeft(0)(_ + _)\n        val lst7 = lst6.filter(x => x < 0)\n      \
    \  if (lst7.length == 0) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst3 = lst1 ++ lst2\n        val\
    \ lst4 = lst3.filter(x => x == '(' || x == ')')\n        val lst5 = lst4.foldLeft(0)((acc,\
    \ x) => if (x == '(') acc + 1 else acc - 1)\n        if (lst5 == 0) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        def isGood(s\
    \ : String) : Boolean = {\n            var cnt = 0\n            for (c <- s) {\n\
    \                if (c == '(') cnt += 1\n                else cnt -= 1\n     \
    \           if (cnt < 0) return false\n            }\n            return cnt ==\
    \ 0\n        }\n        if (isGood(s1) && isGood(s2)) return \"Yes\"\n       \
    \ if (isGood(s1 + s2)) return \"Yes\"\n        if (isGood(s2 + s1)) return \"\
    Yes\"\n        return \"No\"", "        val l = lst(0)\n        val r = lst(1)\n\
    \        val lc = l.count(_ == '(')\n        val rc = r.count(_ == ')')\n    \
    \    val lop = l.count(_ == ')')\n        val rop = r.count(_ == '(')\n      \
    \  if (lc == rc && lop == rop) \"Yes\"\n        else if (lc > rc && lop < rop)\
    \ \"Yes\"\n        else if (lc < rc && lop > rop) \"Yes\"\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        if (s1.length\
    \ == 0 && s2.length == 0) return \"Yes\"\n        if (s1.length == 0) {\n    \
    \        if (s2.count(_ == '(') == s2.count(_ == ')')) return \"Yes\"\n      \
    \      else return \"No\"\n        }\n        if (s2.length == 0) {\n        \
    \    if (s1.count(_ == '(') == s1.count(_ == ')')) return \"Yes\"\n          \
    \  else return \"No\"\n        }\n        if (s1.count(_ == '(') == s1.count(_\
    \ == ')')) return \"Yes\"\n        if (s2.count(_ == '(') == s2.count(_ == ')'))\
    \ return \"Yes\"\n        val s1open = s1.count(_ == '(')\n        val s1close\
    \ = s1.count(_ == ')')\n        val s2open = s2.count(_ == '(')\n        val s2close\
    \ = s2.count(_ == ')')\n        if (s1open == s1close) {\n            if (s2open\
    \ == s2close) return \"Yes\"\n            else return \"No\"\n        }\n    \
    \    if (s2open == s2close) return \"No\"\n        if (s1open > s1close) {\n \
    \           if (s2open > s2close) return \"No\"\n            else {\n        \
    \        if (s1open - s1close == s2close - s2open) return \"Yes\"\n          \
    \      else return \"No\"\n            }\n        }\n        else {\n        \
    \    if (s2open > s2close) {\n                if (s1close - s1open == s2open -\
    \ s2close) return \"Yes\"\n                else return \"No\"\n            }\n\
    \            else return \"No\"\n        }", "        val s1 = lst(0)\n      \
    \  val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        if (lst.size != 2) return \"No\"\n        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) return\
    \ \"Yes\"\n        if (s1c == s2o && s2c == s1o) return \"Yes\"\n        return\
    \ \"No\"", "        val s = lst.reduce(_ + _)\n        if (s.count(_ == '(') !=\
    \ s.count(_ == ')')) \"No\"\n        else {\n            var c = 0\n         \
    \   for (i <- 0 until s.length) {\n                if (s(i) == '(') c += 1\n \
    \               else c -= 1\n                if (c < 0) return \"No\"\n      \
    \      }\n            \"Yes\"\n        }", "        val (a, b) = (lst(0), lst(1))\n\
    \        val (a1, a2) = (a.count(_ == '('), a.count(_ == ')'))\n        val (b1,\
    \ b2) = (b.count(_ == '('), b.count(_ == ')'))\n        if (a1 == a2 && b1 ==\
    \ b2) \"Yes\"\n        else if (a1 == a2 && b1 > b2) {\n            if (b1 - b2\
    \ == a2) \"Yes\"\n            else \"No\"\n        }\n        else if (a1 > a2\
    \ && b1 == b2) {\n            if (a1 - a2 == b2) \"Yes\"\n            else \"\
    No\"\n        }\n        else if (a1 > a2 && b1 > b2) {\n            if (a1 -\
    \ a2 == b1 - b2) \"Yes\"\n            else \"No\"\n        }\n        else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 +\
    \ s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n          \
    \  if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        val s2 = s.replaceAll(\"\\\\(\\\\)\", \"\")\n        if (s2.length\
    \ == 0) \"Yes\"\n        else if (s2.length % 2 == 1) \"No\"\n        else {\n\
    \            val s3 = s2.replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\", \"\"\
    )\n            if (s3.length == 0) \"Yes\"\n            else \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1p = s1.count(_\
    \ == '(')\n        val s1n = s1.count(_ == ')')\n        val s2p = s2.count(_\
    \ == '(')\n        val s2n = s2.count(_ == ')')\n        if (s1p == s1n && s2p\
    \ == s2n) {\n            if (s1p + s2p == s1n + s2n) return \"Yes\"\n        \
    \    else return \"No\"\n        }\n        else if (s1p == s1n) {\n         \
    \   if (s1p + s2p == s1n + s2n) return \"Yes\"\n            else return \"No\"\
    \n        }\n        else if (s2p == s2n) {\n            if (s1p + s2p == s1n\
    \ + s2n) return \"Yes\"\n            else return \"No\"\n        }\n        else\
    \ return \"No\"", "        val s = lst.foldLeft(\"\")((a, b) => a + b)\n     \
    \   if (s.count(_ == '(') != s.count(_ == ')')) return \"No\"\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.reduceLeft(_ + _)\n        if (s.length % 2 == 1) \"No\"\n        else {\n\
    \            val stack = new Stack[Char]\n            for (c <- s) {\n       \
    \         if (c == '(') stack.push(c)\n                else if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n            if\
    \ (stack.isEmpty) \"Yes\" else \"No\"\n        }", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c\
    \ = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o\
    \ = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n      \
    \  else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else\
    \ \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        val s1 = s.filter(_\
    \ == '(')\n        val s2 = s.filter(_ == ')')\n        if (s1.length == s2.length)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n  \
    \      val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n  \
    \      if (s1c == s1o && s2c == s2o) {\n            \"Yes\"\n        } else if\
    \ (s1c == s1o && s2c > s2o) {\n            if (s2c - s2o == 1) \"Yes\" else \"\
    No\"\n        } else if (s1c > s1o && s2c == s2o) {\n            if (s1c - s1o\
    \ == 1) \"Yes\" else \"No\"\n        } else if (s1c > s1o && s2c > s2o) {\n  \
    \          if (s1c - s1o == 1 && s2c - s2o == 1) \"Yes\" else \"No\"\n       \
    \ } else {\n            \"No\"\n        }", "        val s1 = lst(0)\n       \
    \ val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_\
    \ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ == s1o && s2c > s2o) {\n            if (s2c - s2o <= s1c) \"Yes\"\n        \
    \    else \"No\"\n        }\n        else if (s1c > s1o && s2c == s2o) {\n   \
    \         if (s1c - s1o <= s2c) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1c > s1o && s2c > s2o) {\n            if (s1c - s1o <= s2c\
    \ && s2c - s2o <= s1c) \"Yes\"\n            else \"No\"\n        }\n        else\
    \ \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n        val (c1, c2) = (s1.count(_\
    \ == '('), s2.count(_ == '('))\n        val (d1, d2) = (s1.count(_ == ')'), s2.count(_\
    \ == ')'))\n        if (c1 == d1 && c2 == d2) \"Yes\"\n        else if (c1 ==\
    \ d1 && c2 > d2) \"Yes\"\n        else if (c1 > d1 && c2 == d2) \"Yes\"\n    \
    \    else if (c1 > d1 && c2 > d2) \"Yes\"\n        else \"No\"", "        val\
    \ s = lst.mkString\n        if (s.length % 2 == 1) return \"No\"\n        val\
    \ stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n    \
    \    val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n    \
    \    val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\
    \n        else if (s1c == s1o && s2c > s2o) {\n            if (s2c - s2o <= s1c)\
    \ \"Yes\"\n            else \"No\"\n        }\n        else if (s1c > s1o && s2c\
    \ == s2o) {\n            if (s1c - s1o <= s2c) \"Yes\"\n            else \"No\"\
    \n        }\n        else if (s1c > s1o && s2c > s2o) {\n            if (s1c -\
    \ s1o <= s2c && s2c - s2o <= s1c) \"Yes\"\n            else \"No\"\n        }\n\
    \        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n   \
    \     val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n        val\
    \ (c1, c2) = (s1.count(_ == '('), s2.count(_ == '('))\n        val (d1, d2) =\
    \ (s1.count(_ == ')'), s2.count(_ == ')'))\n        if (c1 + c2 == d1 + d2) \"\
    Yes\"\n        else if (c1 + c2 - d1 - d2 == 2) {\n            if (c1 == d1 +\
    \ 1 && c2 == d2) \"Yes\"\n            else if (c2 == d2 + 1 && c1 == d1) \"Yes\"\
    \n            else \"No\"\n        }\n        else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n\
    \        val s2Count = s2.count(_ == '(')\n        val s1Open = s1.count(_ ==\
    \ ')')\n        val s2Open = s2.count(_ == ')')\n        if (s1Count == s2Open\
    \ && s2Count == s1Open) \"Yes\" else \"No\"", "        val s1 = lst(0)\n     \
    \   val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.mkString\n\
    \        val s1 = s.filter(_ == '(')\n        val s2 = s.filter(_ == ')')\n  \
    \      if (s1.length == s2.length) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst1Count = lst1.count(x => x ==\
    \ '(')\n        val lst2Count = lst2.count(x => x == '(')\n        if (lst1Count\
    \ == lst2Count) \"Yes\"\n        else if (lst1Count == lst2.count(x => x == ')'))\
    \ \"Yes\"\n        else if (lst2Count == lst1.count(x => x == ')')) \"Yes\"\n\
    \        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n   \
    \     val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c == s1o && s2c < s2o) \"No\"\n        else\
    \ if (s1c < s1o && s2c == s2o) \"No\"\n        else if (s1c < s1o && s2c < s2o)\
    \ \"No\"\n        else \"Yes\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                stack.pop\n    \
    \        }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "    \
    \    def check(s : String) : Boolean = {\n            var count = 0\n        \
    \    for (c <- s) {\n                if (c == '(') count += 1\n              \
    \  else count -= 1\n                if (count < 0) return false\n            }\n\
    \            return count == 0\n        }\n        if (lst.forall(check)) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1Count = s1.count(c => c == '(')\n        val s2Count = s2.count(c => c ==\
    \ '(')\n        if (s1Count == s2Count) \"Yes\"\n        else if (s1Count == s2.count(c\
    \ => c == ')')) \"Yes\"\n        else if (s2Count == s1.count(c => c == ')'))\
    \ \"Yes\"\n        else \"No\"", "        var stack = new Stack[Char]\n      \
    \  for (s <- lst) {\n            for (c <- s) {\n                if (c == '(')\
    \ stack.push(c)\n                else {\n                    if (stack.isEmpty)\
    \ return \"No\"\n                    else stack.pop\n                }\n     \
    \       }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n      \
    \  val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n         \
    \   else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) {\n            if\
    \ (s2c - s2o <= s1c) \"Yes\"\n            else \"No\"\n        }\n        else\
    \ if (s1c > s1o && s2c == s2o) {\n            if (s1c - s1o <= s2c) \"Yes\"\n\
    \            else \"No\"\n        }\n        else if (s1c > s1o && s2c > s2o)\
    \ {\n            if (s1c - s1o + s2c - s2o <= s1c + s2c) \"Yes\"\n           \
    \ else \"No\"\n        }\n        else \"No\"", "        val (s1, s2) = (lst(0),\
    \ lst(1))\n        val (c1, c2) = (s1.count(_ == '('), s2.count(_ == '('))\n \
    \       val (d1, d2) = (s1.count(_ == ')'), s2.count(_ == ')'))\n        if (c1\
    \ == d1 && c2 == d2) \"Yes\"\n        else if (c1 == d1 && c2 > d2) \"Yes\"\n\
    \        else if (c1 > d1 && c2 == d2) \"Yes\"\n        else if (c1 > d1 && c2\
    \ > d2) \"Yes\"\n        else \"No\"", "        val s = lst.foldLeft(\"\")((a,\
    \ b) => a + b)\n        val stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1Count = s1.count(_ == '(')\n        val s2Count = s2.count(_ == '(')\n\
    \        if (s1Count == s2Count) \"Yes\"\n        else if (s1Count == s2Count\
    \ + 1) {\n            if (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n\
    \            else \"No\"\n        }\n        else if (s2Count == s1Count + 1)\
    \ {\n            if (s2.count(_ == ')') == s1.count(_ == ')')) \"Yes\"\n     \
    \       else \"No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ ==\
    \ ')')\n        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_\
    \ == ')')\n        if (s1_open == s1_close && s2_open == s2_close) {\n       \
    \     val s1_open_close = s1.scanLeft(0)((acc, c) => if (c == '(') acc + 1 else\
    \ acc - 1).tail\n            val s2_open_close = s2.scanLeft(0)((acc, c) => if\
    \ (c == '(') acc + 1 else acc - 1).tail\n            val s1_min = s1_open_close.min\n\
    \            val s2_min = s2_open_close.min\n            val s1_open_close_min\
    \ = s1_open_close.map(_ - s1_min)\n            val s2_open_close_min = s2_open_close.map(_\
    \ - s2_min)\n            val s1_open_close_min_max = s1_open_close_min.max\n \
    \           val s2_open_close_min_max = s2_open_close_min.max\n            if\
    \ (s1_open_close_min_max <= 0 && s2_open_close_min_max <= 0) \"Yes\"\n       \
    \     else if (s1_open_close_min_max >= 0 && s2_open_close_min_max >= 0) \"Yes\"\
    \n            else \"No\"\n        } else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1Count = s1.count(c => c == '(')\n    \
    \    val s2Count = s2.count(c => c == '(')\n        if (s1Count == s2Count) \"\
    Yes\"\n        else if (s1Count == s2.count(c => c == ')')) \"Yes\"\n        else\
    \ if (s2Count == s1.count(c => c == ')')) \"Yes\"\n        else \"No\"", "   \
    \     val s1 = lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_\
    \ == '(')\n        val s2Count = s2.count(_ == '(')\n        val s1Open = s1.count(_\
    \ == ')')\n        val s2Open = s2.count(_ == ')')\n        if (s1Count == s2Open\
    \ && s2Count == s1Open) \"Yes\" else \"No\"", "        val s1 = lst(0)\n     \
    \   val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s3 = s1 + s2\n        val s4 = s2 + s1\n        if (isGood(s3)) \"\
    Yes\"\n        else if (isGood(s4)) \"Yes\"\n        else \"No\"", "        val\
    \ s = lst.mkString\n        if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        if (s1c\
    \ == s2c) return \"Yes\"\n        if (s1c > s2c) {\n            val diff = s1c\
    \ - s2c\n            if (s1.count(_ == ')') >= diff) return \"Yes\"\n        }\
    \ else {\n            val diff = s2c - s1c\n            if (s2.count(_ == ')')\
    \ >= diff) return \"Yes\"\n        }\n        return \"No\"", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n        if (s3.length\
    \ % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n        for (c\
    \ <- s3) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        val\
    \ s1 = s.filter(_ == '(')\n        val s2 = s.filter(_ == ')')\n        if (s1.length\
    \ == s2.length) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n   \
    \     for (c <- s) {\n            if (c == '(') stack.push(c)\n            else\
    \ if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        if (s.length % 2 == 1) return \"No\"\n        val stack =\
    \ new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.reduceLeft(_ + _)\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n  \
    \      if (s1c == s2c) \"Yes\"\n        else if (s1c == s2c + 1) {\n         \
    \   if (s1.count(_ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"\
    No\"\n        }\n        else if (s2c == s1c + 1) {\n            if (s2.count(_\
    \ == ')') == s1.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n\
    \        else \"No\"", "        val s = lst.reduceLeft(_ + _)\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n\
    \        val s2Count = s2.count(_ == '(')\n        if (s1Count == s2Count) \"\
    Yes\"\n        else if (s1Count == s2Count + 1) {\n            if (s1.count(_\
    \ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s2Count == s1Count + 1) {\n            if (s2.count(_ == ')')\
    \ == s1.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n       \
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        var count = 0\n        for (c <- s) {\n            if (c\
    \ == '(') count += 1\n            else count -= 1\n            if (count < 0)\
    \ return \"No\"\n        }\n        if (count == 0) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        def isGood(s : String)\
    \ : Boolean = {\n            var count = 0\n            for (c <- s) {\n     \
    \           if (c == '(') count += 1\n                else if (c == ')') count\
    \ -= 1\n                if (count < 0) return false\n            }\n         \
    \   return count == 0\n        }\n        if (isGood(s1 + s2)) return \"Yes\"\n\
    \        else if (isGood(s2 + s1)) return \"Yes\"\n        else return \"No\"",
  "        val (a, b) = (lst(0), lst(1))\n        val (a1, a2) = (a.count(_ == '('),\
    \ a.count(_ == ')'))\n        val (b1, b2) = (b.count(_ == '('), b.count(_ ==\
    \ ')'))\n        if (a1 == a2 && b1 == b2) \"Yes\"\n        else if (a1 == a2\
    \ && b1 > b2) \"Yes\"\n        else if (a1 > a2 && b1 == b2) \"Yes\"\n       \
    \ else if (a1 > a2 && b1 > b2 && a1 - a2 == b1 - b2) \"Yes\"\n        else \"\
    No\"", "        val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n \
    \       val lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(x => x == '('\
    \ || x == ')')\n        val lst5 = lst4.map(x => if (x == '(') 1 else -1)\n  \
    \      val lst6 = lst5.scanLeft(0)(_ + _)\n        val lst7 = lst6.filter(x =>\
    \ x < 0)\n        if (lst7.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        def check(s : String) : Boolean = {\n      \
    \      var count = 0\n            for (c <- s) {\n                if (c == '(')\
    \ count += 1\n                else count -= 1\n                if (count < 0)\
    \ return false\n            }\n            return count == 0\n        }\n    \
    \    if (check(s1) && check(s2)) return \"Yes\"\n        if (check(s1 + s2)) return\
    \ \"Yes\"\n        if (check(s2 + s1)) return \"Yes\"\n        return \"No\"",
  "        def matchParens(lst : List[String], stack : List[Char]) : Boolean = {\n\
    \            if (lst.isEmpty) return stack.isEmpty\n            if (lst.head ==\
    \ \"(\") return matchParens(lst.tail, lst.head :: stack)\n            if (lst.head\
    \ == \")\") {\n                if (stack.isEmpty) return false\n             \
    \   if (stack.head == '(') return matchParens(lst.tail, stack.tail)\n        \
    \        return false\n            }\n            return false\n        }\n  \
    \      if (matchParens(lst.head.toList, Nil) && matchParens(lst.tail.head.toList,\
    \ Nil)) return \"Yes\"\n        return \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val s1_close\
    \ = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n        val\
    \ s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open ==\
    \ s2_close) {\n            if (s1_open == s2_close) return \"Yes\"\n         \
    \   else return \"No\"\n        }\n        else {\n            if (s1_open ==\
    \ s1_close) {\n                if (s1_open == s2_close) return \"Yes\"\n     \
    \           else return \"No\"\n            }\n            else {\n          \
    \      if (s1_open == s2_close) return \"Yes\"\n                else return \"\
    No\"\n            }\n        }", "        val s = lst.mkString\n        val s1\
    \ = s.filter(c => c == '(')\n        val s2 = s.filter(c => c == ')')\n      \
    \  if (s1.length == s2.length) \"Yes\" else \"No\"", "        val (a, b) = (lst(0),\
    \ lst(1))\n        val (a1, a2) = (a.count(_ == '('), a.count(_ == ')'))\n   \
    \     val (b1, b2) = (b.count(_ == '('), b.count(_ == ')'))\n        if (a1 ==\
    \ a2 && b1 == b2) \"Yes\"\n        else if (a1 == a2) {\n            if (b1 >\
    \ b2) {\n                if (b1 - b2 == a1) \"Yes\"\n                else \"No\"\
    \n            }\n            else \"No\"\n        }\n        else if (b1 == b2)\
    \ {\n            if (a1 > a2) {\n                if (a1 - a2 == b1) \"Yes\"\n\
    \                else \"No\"\n            }\n            else \"No\"\n       \
    \ }\n        else \"No\"", "        val lst1 = lst(0).toList\n        val lst2\
    \ = lst(1).toList\n        var lst3 = List[Char]()\n        var lst4 = List[Char]()\n\
    \        var lst5 = List[Char]()\n        var lst6 = List[Char]()\n        var\
    \ lst7 = List[Char]()\n        var lst8 = List[Char]()\n        var lst9 = List[Char]()\n\
    \        var lst10 = List[Char]()\n        var lst11 = List[Char]()\n        var\
    \ lst12 = List[Char]()\n        var lst13 = List[Char]()\n        var lst14 =\
    \ List[Char]()\n        var lst15 = List[Char]()\n        var lst16 = List[Char]()\n\
    \        var lst17 = List[Char]()\n        var lst18 = List[Char]()\n        var\
    \ lst19 = List[Char]()\n        var lst20 = List[Char]()\n        var lst21 =\
    \ List[Char]()\n        var lst22 = List[Char]()\n        var lst23 = List[Char]()\n\
    \        var lst24 = List[Char]()\n        var lst25 = List[Char]()\n        var\
    \ lst26 = List[Char]()\n        var lst27 = List[Char]()\n        var lst28 =\
    \ List[Char]()\n        var lst29 = List[Char]()\n        var lst30 = List[Char]()\n\
    \        var lst31 = List[Char]()\n        var lst32 = List[Char]()\n        var\
    \ lst33 = List[Char]()\n        var lst34 = List[Char]()\n        var lst35 =\
    \ List[Char]()\n        var lst36 = List[Char]()\n        var lst37 = List[Char]()\n\
    \        var lst38 = List[Char]()\n        var lst39 = List[Char]()\n        var\
    \ lst40 = List[Char]()\n        var lst41 = List[Char]()\n        var lst42 =\
    \ List[Char]()\n        var l", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1Count = s1.count(_ == '(')\n        val s2Count = s2.count(_ ==\
    \ '(')\n        val s1Open = s1.count(_ == ')')\n        val s2Open = s2.count(_\
    \ == ')')\n        if (s1Count == s2Open && s2Count == s1Open) \"Yes\" else \"\
    No\"", "        val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n \
    \       val lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(x => x == '('\
    \ || x == ')')\n        val lst5 = lst4.map(x => if (x == '(') 1 else -1)\n  \
    \      val lst6 = lst5.scanLeft(0)(_ + _)\n        val lst7 = lst6.filter(x =>\
    \ x < 0)\n        if (lst7.isEmpty) \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        val stack = new Stack[Char]\n        for (c <- s) {\n    \
    \        if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  def isGood(s : String) : Boolean = {\n            var count = 0\n         \
    \   for (c <- s) {\n                if (c == '(') count += 1\n               \
    \ else count -= 1\n                if (count < 0) return false\n            }\n\
    \            return count == 0\n        }\n        if (isGood(s1 + s2)) return\
    \ \"Yes\"\n        if (isGood(s2 + s1)) return \"Yes\"\n        return \"No\"",
  "        val s = lst.foldLeft(\"\")((s, t) => s + t)\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst1Count = lst1.count(_ == '(')\n\
    \        val lst2Count = lst2.count(_ == '(')\n        val lst1Open = lst1.count(_\
    \ == '(')\n        val lst2Open = lst2.count(_ == '(')\n        val lst1Close\
    \ = lst1.count(_ == ')')\n        val lst2Close = lst2.count(_ == ')')\n     \
    \   if (lst1Count == lst2Count) {\n            if (lst1Open == lst2Open && lst1Close\
    \ == lst2Close) \"Yes\"\n            else \"No\"\n        }\n        else if (lst1Count\
    \ > lst2Count) {\n            if (lst1Open > lst2Open && lst1Close > lst2Close)\
    \ \"Yes\"\n            else \"No\"\n        }\n        else {\n            if\
    \ (lst1Open < lst2Open && lst1Close < lst2Close) \"Yes\"\n            else \"\
    No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s1_good = isGood(s1)\n        val s2_good = isGood(s2)\n        if (s1_good\
    \ && s2_good) {\n            return \"Yes\"\n        }\n        if (s1_good) {\n\
    \            return \"No\"\n        }\n        if (s2_good) {\n            return\
    \ \"No\"\n        }\n        if (s1.length == 0 || s2.length == 0) {\n       \
    \     return \"No\"\n        }\n        if (s1.length == 1 && s2.length == 1)\
    \ {\n            return \"No\"\n        }\n        if (s1.length == 1) {\n   \
    \         return matchParens(List(s2, s1))\n        }\n        if (s2.length ==\
    \ 1) {\n            return matchParens(List(s1, s2))\n        }\n        if (s1.length\
    \ == 2 && s2.length == 2) {\n            return \"No\"\n        }\n        if\
    \ (s1.length == 2) {\n            return matchParens(List(s2, s1))\n        }\n\
    \        if (s2.length == 2) {\n            return matchParens(List(s1, s2))\n\
    \        }\n        if (s1.length == 3 && s2.length == 3) {\n            return\
    \ \"No\"\n        }\n        if (s1.length == 3) {\n            return matchParens(List(s2,\
    \ s1))\n        }\n        if (s2.length == 3) {\n            return matchParens(List(s1,\
    \ s2))\n        }\n        if (s1.length == 4 && s2.length == 4) {\n         \
    \   return \"No\"\n        }\n        if (s1.length == 4) {\n            return\
    \ matchParens(List(s2, s1))\n        }\n        if (s2.length == 4) {\n      \
    \      return matchParens(List(s1, s2))\n        }\n        if (s1.length == 5\
    \ && s", "        val s = lst.foldLeft(\"\")((acc, x) => acc + x)\n        var\
    \ stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n\
    \        var stack = new Stack[Char]\n        for (i <- 0 until n) {\n       \
    \     val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst1Count = lst1.count(_ == '(')\n        val lst2Count = lst2.count(_ == '(')\n\
    \        val lst1Balance = lst1.foldLeft(0)((acc, x) => if (x == '(') acc + 1\
    \ else acc - 1)\n        val lst2Balance = lst2.foldLeft(0)((acc, x) => if (x\
    \ == '(') acc + 1 else acc - 1)\n        if (lst1Balance == 0 && lst2Balance ==\
    \ 0) \"Yes\"\n        else if (lst1Balance > 0 && lst2Balance > 0) \"No\"\n  \
    \      else if (lst1Balance < 0 && lst2Balance < 0) \"No\"\n        else if (lst1Balance\
    \ > 0 && lst2Balance < 0) {\n            if (lst1Balance == -lst2Balance) \"Yes\"\
    \n            else \"No\"\n        }\n        else if (lst1Balance < 0 && lst2Balance\
    \ > 0) {\n            if (lst2Balance == -lst1Balance) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else \"No\"", "        val s = lst.foldLeft(\"\"\
    )(_ + _)\n        val stack = new Stack[Char]\n        for (c <- s) {\n      \
    \      if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        var stack = new Stack[Char]\n        var good = true\n\
    \        for (s <- lst) {\n            for (c <- s) {\n                if (c ==\
    \ '(') {\n                    stack.push(c)\n                } else {\n      \
    \              if (stack.isEmpty) {\n                        good = false\n  \
    \                  } else {\n                        stack.pop\n             \
    \       }\n                }\n            }\n        }\n        if (good && stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ ==\
    \ ')')\n        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_\
    \ == ')')\n        if (s1_open == s1_close && s2_open == s2_close) \"Yes\"\n \
    \       else if (s1_open == s1_close && s2_open > s2_close) {\n            if\
    \ (s2_open - s2_close <= s1_open) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1_open == s1_close && s2_open < s2_close) {\n            if\
    \ (s2_close - s2_open <= s1_open) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1_open > s1_close && s2_open == s2_close) {\n            if\
    \ (s1_open - s1_close <= s2_open) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1_open < s1_close && s2_open == s2_close) {\n            if\
    \ (s1_close - s1_open <= s2_open) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1_open > s1_close && s2_open > s2_close) {\n            if\
    \ (s1_open - s1_close + s2_open - s2_close <= s1_open + s2_open) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ < s2_close) {\n            if (s1_open - s1_close + s2_close - s2_open <= s1_open\
    \ + s2_open) \"Yes\"\n            else \"No\"\n        }\n        else if (s1_open\
    \ < s1_close && s2_open > s2_", "        val l1 = lst(0).toList\n        val l2\
    \ = lst(1).toList\n        val s1 = l1.foldLeft(0)((acc, x) => if (x == '(') acc\
    \ + 1 else acc - 1)\n        val s2 = l2.foldLeft(0)((acc, x) => if (x == '(')\
    \ acc + 1 else acc - 1)\n        if (s1 == 0 && s2 == 0) \"Yes\"\n        else\
    \ if (s1 == 0 && s2 < 0) \"No\"\n        else if (s1 > 0 && s2 == 0) \"No\"\n\
    \        else if (s1 > 0 && s2 < 0) \"Yes\"\n        else if (s1 < 0 && s2 ==\
    \ 0) \"Yes\"\n        else if (s1 < 0 && s2 > 0) \"No\"\n        else \"Yes\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) return \"Yes\"\n        if (s1c == s1o) {\n            if (s2c > s2o)\
    \ {\n                if (s2c - s2o == 1) return \"Yes\"\n                else\
    \ return \"No\"\n            }\n            else {\n                if (s2o -\
    \ s2c == 1) return \"Yes\"\n                else return \"No\"\n            }\n\
    \        }\n        else if (s2c == s2o) {\n            if (s1c > s1o) {\n   \
    \             if (s1c - s1o == 1) return \"Yes\"\n                else return\
    \ \"No\"\n            }\n            else {\n                if (s1o - s1c ==\
    \ 1) return \"Yes\"\n                else return \"No\"\n            }\n     \
    \   }\n        else if (s1c > s1o) {\n            if (s2c > s2o) {\n         \
    \       if (s1c - s1o == 1 && s2c - s2o == 1) return \"Yes\"\n               \
    \ else return \"No\"\n            }\n            else {\n                if (s1c\
    \ - s1o == 1 && s2o - s2c == 1) return \"Yes\"\n                else return \"\
    No\"\n            }\n        }\n        else {\n            if (s2c > s2o) {\n\
    \                if (s1o - s1c == 1 && s2c - s2o == 1) return \"Yes\"\n      \
    \          else return \"No\"\n            }\n            else {\n           \
    \     if (s1o - s1c == 1 && s2o - s2c == 1) return \"Yes\"\n                else\
    \ return \"No\"\n            }\n        }", "        val s = lst.mkString\n  \
    \      if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", "   \
    \     val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst3 = lst1 ++ lst2\n        val lst4 = lst3.filter(x => x == '(' || x == ')')\n\
    \        val lst5 = lst4.foldLeft(0)((acc, x) => if (x == '(') acc + 1 else acc\
    \ - 1)\n        if (lst5 == 0) \"Yes\" else \"No\"", "        val s = lst.mkString\n\
    \        if (s.count(_ == '(') == s.count(_ == ')')) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') {\n                stack.push(c)\n            } else {\n           \
    \     if (stack.isEmpty) return \"No\"\n                stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"\
    Yes\"\n        else if (s1c == s1o && s2c > s2o) {\n            if (s2c - s2o\
    \ <= s1c) \"Yes\"\n            else \"No\"\n        }\n        else if (s1c >\
    \ s1o && s2c == s2o) {\n            if (s1c - s1o <= s2c) \"Yes\"\n          \
    \  else \"No\"\n        }\n        else if (s1c > s1o && s2c > s2o) {\n      \
    \      if (s1c - s1o <= s2c && s2c - s2o <= s1c) \"Yes\"\n            else \"\
    No\"\n        }\n        else \"No\"", "        val s = lst.mkString\n       \
    \ val s1 = s.filter(_ == '(')\n        val s2 = s.filter(_ == ')')\n        if\
    \ (s1.length == s2.length) \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst3 = lst1 ++ lst2\n        val\
    \ lst4 = lst3.filter(x => x == '(' || x == ')')\n        val lst5 = lst4.map(x\
    \ => if (x == '(') 1 else -1)\n        val lst6 = lst5.scanLeft(0)(_ + _)\n  \
    \      val lst7 = lst6.filter(x => x < 0)\n        if (lst7.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) \"\
    Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c > s2o) {\n            if (s1c - s1o == s2c - s2o) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else \"No\"", "        val s = lst.foldLeft(\"\
    \")(_ + _)\n        val s1 = s.filter(_ == '(')\n        val s2 = s.filter(_ ==\
    \ ')')\n        if (s1.length == s2.length) \"Yes\" else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) return\
    \ \"Yes\"\n        if (s1c == s1o) {\n            val s2o2 = s2o - s1c\n     \
    \       if (s2o2 % 2 == 0) return \"Yes\"\n        }\n        if (s2c == s2o)\
    \ {\n            val s1o2 = s1o - s2c\n            if (s1o2 % 2 == 0) return \"\
    Yes\"\n        }\n        return \"No\"", "        if (lst.length == 1) {\n  \
    \          val s = lst.head\n            if (s.length % 2 == 0) {\n          \
    \      val n = s.length / 2\n                val s1 = s.substring(0, n)\n    \
    \            val s2 = s.substring(n)\n                if (s1.count(_ == '(') ==\
    \ s1.count(_ == ')')) \"Yes\" else \"No\"\n            } else \"No\"\n       \
    \ } else {\n            val s1 = lst.head\n            val s2 = lst.tail.head\n\
    \            val n = s1.length\n            val m = s2.length\n            val\
    \ s = s1 + s2\n            if (s.length % 2 == 0) {\n                val k = s.length\
    \ / 2\n                val s1 = s.substring(0, k)\n                val s2 = s.substring(k)\n\
    \                if (s1.count(_ == '(') == s1.count(_ == ')')) \"Yes\" else \"\
    No\"\n            } else \"No\"\n        }", "        val s1 = lst(0)\n      \
    \  val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n        val s2Count\
    \ = s2.count(_ == '(')\n        val s1Balance = s1.foldLeft(0)((acc, c) => if\
    \ (c == '(') acc + 1 else acc - 1)\n        val s2Balance = s2.foldLeft(0)((acc,\
    \ c) => if (c == '(') acc + 1 else acc - 1)\n        if (s1Balance == 0 && s2Balance\
    \ == 0) {\n            if (s1Count == s2Count) \"Yes\"\n            else \"No\"\
    \n        } else if (s1Balance == 0) {\n            if (s1Count + s2Balance ==\
    \ s2Count) \"Yes\"\n            else \"No\"\n        } else if (s2Balance == 0)\
    \ {\n            if (s2Count + s1Balance == s1Count) \"Yes\"\n            else\
    \ \"No\"\n        } else if (s1Balance + s2Balance == 0) {\n            if (s1Count\
    \ == s2Count) \"Yes\"\n            else \"No\"\n        } else {\n           \
    \ \"No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n    \
    \    val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n    \
    \    val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n    \
    \    if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o && s2c\
    \ > s2o) {\n            if (s2c - s2o <= s1c) \"Yes\"\n            else \"No\"\
    \n        }\n        else if (s1c > s1o && s2c == s2o) {\n            if (s1c\
    \ - s1o <= s2c) \"Yes\"\n            else \"No\"\n        }\n        else if (s1c\
    \ > s1o && s2c > s2o) {\n            if (s1c - s1o <= s2c && s2c - s2o <= s1c)\
    \ \"Yes\"\n            else \"No\"\n        }\n        else \"No\"", "       \
    \ val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var\
    \ count = 0\n        for (c <- s) {\n            if (c == '(') count += 1\n  \
    \          else count -= 1\n            if (count < 0) return \"No\"\n       \
    \ }\n        if (count == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n        val\
    \ s2Count = s2.count(_ == '(')\n        val s1Open = s1.count(_ == ')')\n    \
    \    val s2Open = s2.count(_ == ')')\n        if (s1Count == s2Open && s2Count\
    \ == s1Open) \"Yes\" else \"No\"", "        val s = lst.mkString\n        val\
    \ n = s.length\n        val dp = Array.fill(n + 1)(0)\n        for (i <- 0 until\
    \ n) {\n            if (s(i) == '(') dp(i + 1) = dp(i) + 1\n            else dp(i\
    \ + 1) = dp(i) - 1\n        }\n        if (dp.min < 0) return \"No\"\n       \
    \ for (i <- 0 until n) {\n            if (s(i) == '(') {\n                if (dp(i)\
    \ - 1 < 0) return \"No\"\n            }\n            else {\n                if\
    \ (dp(i) < 0) return \"No\"\n            }\n        }\n        return \"Yes\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) {\n            if (s1c == s2o) \"Yes\"\n            else \"No\"\n  \
    \      } else if (s1c == s1o) {\n            if (s1c == s2o) \"Yes\"\n       \
    \     else \"No\"\n        } else if (s2c == s2o) {\n            if (s2c == s1o)\
    \ \"Yes\"\n            else \"No\"\n        } else \"No\"", "        val (open,\
    \ close) = lst.map(x => x.count(_ == '(') - x.count(_ == ')')).partition(_ > 0)\n\
    \        if (open.sum == close.sum) \"Yes\" else \"No\"", "        val (a, b)\
    \ = (lst(0), lst(1))\n        val (a1, a2) = (a.count(_ == '('), a.count(_ ==\
    \ ')'))\n        val (b1, b2) = (b.count(_ == '('), b.count(_ == ')'))\n     \
    \   if (a1 == a2 && b1 == b2) \"Yes\"\n        else if (a1 == a2 && b1 > b2) \"\
    Yes\"\n        else if (a1 > a2 && b1 == b2) \"Yes\"\n        else if (a1 > a2\
    \ && b1 > b2 && abs(a1 - a2) == abs(b1 - b2)) \"Yes\"\n        else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s = lst.foldLeft(\"\")((acc, x) => acc + x)\n        if\
    \ (s.count(_ == '(') != s.count(_ == ')')) return \"No\"\n        val stack =\
    \ new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1_good = isGood(s1)\n        val s2_good = isGood(s2)\n        if (s1_good\
    \ && s2_good) return \"Yes\"\n        if (s1_good) return matchParens(List(s2,\
    \ s1))\n        if (s2_good) return matchParens(List(s1, s2))\n        val s1_open\
    \ = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n        val\
    \ s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ == ')')\n  \
    \      if (s1_open == s1_close && s2_open == s2_close) return \"Yes\"\n      \
    \  if (s1_open == s1_close) return matchParens(List(s2, s1))\n        if (s2_open\
    \ == s2_close) return matchParens(List(s1, s2))\n        val s1_open_close = s1_open\
    \ - s1_close\n        val s2_open_close = s2_open - s2_close\n        if (s1_open_close\
    \ == s2_open_close) return \"Yes\"\n        if (s1_open_close == 0) return matchParens(List(s2,\
    \ s1))\n        if (s2_open_close == 0) return matchParens(List(s1, s2))\n   \
    \     if (s1_open_close > 0 && s2_open_close > 0) return \"Yes\"\n        if (s1_open_close\
    \ < 0 && s2_open_close < 0) return \"Yes\"\n        return \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.mkString\n        val stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n        val lst2 =\
    \ lst(1).toList\n        val lst1Count = lst1.count(x => x == '(')\n        val\
    \ lst2Count = lst2.count(x => x == '(')\n        if (lst1Count == lst2Count) \"\
    Yes\"\n        else if (lst1Count == lst2.count(x => x == ')')) \"Yes\"\n    \
    \    else if (lst2Count == lst1.count(x => x == ')')) \"Yes\"\n        else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 +\
    \ s2\n        val stack = new Stack[Char]\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\
    \n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val lst1 = lst(0).toList\n        val lst2 =\
    \ lst(1).toList\n        val lst1c = lst1.count(_ == '(')\n        val lst2c =\
    \ lst2.count(_ == '(')\n        val lst1o = lst1.count(_ == ')')\n        val\
    \ lst2o = lst2.count(_ == ')')\n        if (lst1c == lst1o && lst2c == lst2o)\
    \ {\n            if (lst1c == lst2o) \"Yes\"\n            else \"No\"\n      \
    \  } else if (lst1c == lst1o) {\n            if (lst1c == lst2o) \"Yes\"\n   \
    \         else \"No\"\n        } else if (lst2c == lst2o) {\n            if (lst2c\
    \ == lst1o) \"Yes\"\n            else \"No\"\n        } else \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n       \
    \ val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n         \
    \   else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_good = isGood(s1)\n\
    \        val s2_good = isGood(s2)\n        if (s1_good && s2_good) return \"Yes\"\
    \n        if (s1_good) return \"Yes\"\n        if (s2_good) return \"Yes\"\n \
    \       if (s1.length == 0 || s2.length == 0) return \"Yes\"\n        if (s1.length\
    \ == 1 && s2.length == 1) return \"No\"\n        if (s1.length == 1) {\n     \
    \       if (s2.length == 2) {\n                if (s1 == \"(\" && s2 == \"()\"\
    ) return \"Yes\"\n                if (s1 == \")\" && s2 == \")(\") return \"Yes\"\
    \n                return \"No\"\n            }\n            if (s1 == \"(\" &&\
    \ s2.charAt(0) == '(') return \"Yes\"\n            if (s1 == \")\" && s2.charAt(s2.length\
    \ - 1) == ')') return \"Yes\"\n            return \"No\"\n        }\n        if\
    \ (s2.length == 1) {\n            if (s1.length == 2) {\n                if (s2\
    \ == \"(\" && s1 == \"()\") return \"Yes\"\n                if (s2 == \")\" &&\
    \ s1 == \")(\") return \"Yes\"\n                return \"No\"\n            }\n\
    \            if (s2 == \"(\" && s1.charAt(0) == '(') return \"Yes\"\n        \
    \    if (s2 == \")\" && s1.charAt(s1.length - 1) == ')') return \"Yes\"\n    \
    \        return \"No\"\n        }\n        if (s1.charAt(0) == '(' && s2.charAt(0)\
    \ == '(') return \"Yes\"\n        if (s1.charAt(0) == '(' && s2.charAt(s2.length\
    \ - 1) == ')') return \"Yes\"\n        if (s1.charAt(s1.length - 1) == ')' &&\
    \ s2.charAt(", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n \
    \           if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1Count = s1.count(c => c == '(')\n        val s2Count = s2.count(c =>\
    \ c == '(')\n        val s1Left = s1.count(c => c == '(') - s1.count(c => c ==\
    \ ')')\n        val s2Left = s2.count(c => c == '(') - s2.count(c => c == ')')\n\
    \        if (s1Left == 0 && s2Left == 0) \"Yes\"\n        else if (s1Left == 0\
    \ && s2Left > 0) {\n            if (s2Left % 2 == 0) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else if (s1Left > 0 && s2Left == 0) {\n         \
    \   if (s1Left % 2 == 0) \"Yes\"\n            else \"No\"\n        }\n       \
    \ else if (s1Left > 0 && s2Left > 0) {\n            if (s1Left % 2 == 0 && s2Left\
    \ % 2 == 0) \"Yes\"\n            else if (s1Left % 2 == 0 && s2Left % 2 != 0)\
    \ \"No\"\n            else if (s1Left % 2 != 0 && s2Left % 2 == 0) \"No\"\n  \
    \          else if (s1Left % 2 != 0 && s2Left % 2 != 0) \"Yes\"\n            else\
    \ \"No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s1_good = isGood(s1)\n        val s2_good = isGood(s2)\n\
    \        if (s1_good && s2_good) \"Yes\"\n        else if (s1_good) {\n      \
    \      if (isGood(s1 + s2)) \"Yes\"\n            else if (isGood(s2 + s1)) \"\
    Yes\"\n            else \"No\"\n        }\n        else if (s2_good) {\n     \
    \       if (isGood(s1 + s2)) \"Yes\"\n            else if (isGood(s2 + s1)) \"\
    Yes\"\n            else \"No\"\n        }\n        else \"No\"", "        val\
    \ s = lst.mkString\n        val n = s.length\n        var cnt = 0\n        for\
    \ (i <- 0 until n) {\n            if (s(i) == '(') cnt += 1\n            else\
    \ cnt -= 1\n            if (cnt < 0) return \"No\"\n        }\n        if (cnt\
    \ == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1_count = s1.count(_ == '(')\n        val s2_count = s2.count(_\
    \ == '(')\n        val s1_count_close = s1.count(_ == ')')\n        val s2_count_close\
    \ = s2.count(_ == ')')\n        if (s1_count == s1_count_close && s2_count ==\
    \ s2_count_close) {\n            val s1_count_open = s1.count(_ == '(')\n    \
    \        val s2_count_open = s2.count(_ == '(')\n            if (s1_count_open\
    \ == s2_count_open) \"Yes\"\n            else if (s1_count_open > s2_count_open)\
    \ {\n                val diff = s1_count_open - s2_count_open\n              \
    \  if (diff % 2 == 0) \"Yes\"\n                else \"No\"\n            }\n  \
    \          else {\n                val diff = s2_count_open - s1_count_open\n\
    \                if (diff % 2 == 0) \"Yes\"\n                else \"No\"\n   \
    \         }\n        }\n        else \"No\"", "        val lst1 = lst(0).toList\n\
    \        val lst2 = lst(1).toList\n        val lst3 = lst1 ++ lst2\n        val\
    \ lst4 = lst3.filter(x => x == '(' || x == ')')\n        val lst5 = lst4.foldLeft(0)((acc,\
    \ x) => if (x == '(') acc + 1 else acc - 1)\n        if (lst5 == 0) \"Yes\" else\
    \ \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        val s1 = s.filter(_\
    \ == '(')\n        val s2 = s.filter(_ == ')')\n        if (s1.length == s2.length)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0).toList\n        val s2 = lst(1).toList\n\
    \        val s = s1 ++ s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (isGood(s3)) return \"Yes\"\n        if (isGood(s4))\
    \ return \"Yes\"\n        return \"No\"", "        def check(s : String) : Boolean\
    \ = {\n            var count = 0\n            for (c <- s) {\n               \
    \ if (c == '(') count += 1\n                else if (c == ')') count -= 1\n  \
    \              if (count < 0) return false\n            }\n            return\
    \ count == 0\n        }\n        if (check(lst(0)) && check(lst(1))) return \"\
    Yes\"\n        else if (check(lst(0) + lst(1))) return \"Yes\"\n        else if\
    \ (check(lst(1) + lst(0))) return \"Yes\"\n        else return \"No\"", "    \
    \    val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ ==\
    \ '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ ==\
    \ ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c ==\
    \ s2o) \"Yes\"\n        else if (s1c == s1o && s2c < s2o) \"No\"\n        else\
    \ if (s1c < s1o && s2c == s2o) \"No\"\n        else if (s1c < s1o && s2c < s2o)\
    \ \"No\"\n        else if (s1c > s1o && s2c > s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c < s2o) \"Yes\"\n        else if (s1c < s1o && s2c > s2o) \"Yes\"\
    \n        else \"No\"", "        val s = lst.mkString\n        val n = s.length\n\
    \        val dp = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n        \
    \    if (s(i - 1) == '(') dp(i) = dp(i - 1) + 1\n            else dp(i) = dp(i\
    \ - 1) - 1\n        }\n        if (dp.min < 0) return \"No\"\n        val dp2\
    \ = Array.fill(n + 1)(0)\n        for (i <- n - 1 to 0 by -1) {\n            if\
    \ (s(i) == ')') dp2(i) = dp2(i + 1) + 1\n            else dp2(i) = dp2(i + 1)\
    \ - 1\n        }\n        if (dp2.min < 0) return \"No\"\n        return \"Yes\"",
  "        val s = lst.foldLeft(\"\")(_ + _)\n        var count = 0\n        for (c\
    \ <- s) {\n            if (c == '(') count += 1\n            else if (c == ')')\
    \ count -= 1\n            if (count < 0) return \"No\"\n        }\n        if\
    \ (count == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s1_count = s1.count(_ == '(')\n        val s2_count =\
    \ s2.count(_ == '(')\n        val s1_count_ = s1.count(_ == ')')\n        val\
    \ s2_count_ = s2.count(_ == ')')\n        if (s1_count == s1_count_ && s2_count\
    \ == s2_count_) {\n            if (s1_count == s2_count_) \"Yes\"\n          \
    \  else \"No\"\n        }\n        else if (s1_count == s1_count_) {\n       \
    \     if (s1_count == s2_count) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s2_count == s2_count_) {\n            if (s2_count == s1_count_)\
    \ \"Yes\"\n            else \"No\"\n        }\n        else \"No\"", "       \
    \ val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"\
    Yes\"\n        else if (s1c == s1o && s2c < s2o) \"No\"\n        else if (s1c\
    \ < s1o && s2c == s2o) \"No\"\n        else if (s1c < s1o && s2c < s2o) \"No\"\
    \n        else \"Yes\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n \
    \       val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n \
    \       val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n \
    \       if (s1c == s1o && s2c == s2o) {\n            if (s1c == s2o) \"Yes\"\n\
    \            else \"No\"\n        } else if (s1c == s1o) {\n            if (s1c\
    \ == s2o) \"Yes\"\n            else \"No\"\n        } else if (s2c == s2o) {\n\
    \            if (s2c == s1o) \"Yes\"\n            else \"No\"\n        } else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val lst1 = lst(0).toList\n        val lst2 = lst(1).toList\n        val\
    \ lst1Count = lst1.count(_ == '(')\n        val lst2Count = lst2.count(_ == '(')\n\
    \        if (lst1Count == lst2Count) \"Yes\"\n        else if (lst1Count > lst2Count)\
    \ {\n            val diff = lst1Count - lst2Count\n            if (diff % 2 ==\
    \ 0) \"Yes\"\n            else \"No\"\n        }\n        else {\n           \
    \ val diff = lst2Count - lst1Count\n            if (diff % 2 == 0) \"Yes\"\n \
    \           else \"No\"\n        }", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_\
    \ == ')')\n        if (s1c == s1o && s2c == s2o) {\n            val s = s1 + s2\n\
    \            val c = s.count(_ == '(')\n            val o = s.count(_ == ')')\n\
    \            if (c == o) \"Yes\" else \"No\"\n        } else if (s1c == s1o) {\n\
    \            val s = s1 + s2\n            val c = s.count(_ == '(')\n        \
    \    val o = s.count(_ == ')')\n            if (c == o) \"Yes\" else \"No\"\n\
    \        } else if (s2c == s2o) {\n            val s = s2 + s1\n            val\
    \ c = s.count(_ == '(')\n            val o = s.count(_ == ')')\n            if\
    \ (c == o) \"Yes\" else \"No\"\n        } else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_good = isGood(s1)\n        val s2_good\
    \ = isGood(s2)\n        if (s1_good && s2_good) return \"Yes\"\n        if (s1_good)\
    \ return matchParens(List(s2, s1))\n        val s1_open = s1.count(_ == '(')\n\
    \        val s1_close = s1.count(_ == ')')\n        if (s1_open == s1_close) return\
    \ \"No\"\n        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_\
    \ == ')')\n        if (s1_open > s1_close) {\n            if (s2_open < s2_close)\
    \ return \"No\"\n            val s2_open_diff = s2_open - s1_open\n          \
    \  val s2_close_diff = s2_close - s1_close\n            if (s2_open_diff < s2_close_diff)\
    \ return \"No\"\n            val s2_open_new = s2_open - s2_close_diff\n     \
    \       val s2_close_new = s2_close - s2_open_diff\n            val s2_new = s2.filter(c\
    \ => c == '(' || c == ')' && s2_open_new > 0 || s2_close_new > 0)\n          \
    \  return matchParens(List(s1, s2_new))\n        } else {\n            if (s2_open\
    \ > s2_close) return \"No\"\n            val s1_open_diff = s1_open - s2_open\n\
    \            val s1_close_diff = s1_close - s2_close\n            if (s1_open_diff\
    \ < s1_close_diff) return \"No\"\n            val s1_open_new = s1_open - s1_close_diff\n\
    \            val s1_close_new = s1_close - s1_open_diff\n            val s1_new\
    \ = s1.filter(c", "        val s1 = lst(0)\n        val s2 = lst(1)\n        var\
    \ s = \"\"\n        var count = 0\n        for (i <- 0 until s1.length) {\n  \
    \          s += s1(i)\n            if (s1(i) == '(') count += 1\n            else\
    \ count -= 1\n        }\n        for (i <- 0 until s2.length) {\n            s\
    \ += s2(i)\n            if (s2(i) == '(') count += 1\n            else count -=\
    \ 1\n        }\n        if (count == 0) \"Yes\" else \"No\""]
stop_tokens:
- "\n    }\n"
