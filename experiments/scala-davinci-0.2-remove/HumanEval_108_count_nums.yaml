name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ['        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.toList.map(x => x.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', "        def sumDigits(x : Long) : Long = {\n            var sum\
    \ = 0L\n            var y = abs(x)\n            while (y > 0) {\n            \
    \    sum += y % 10\n                y /= 10\n            }\n            if (x\
    \ < 0) sum += 1\n            sum\n        }\n        arr.filter(sumDigits(_) >\
    \ 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.count(x => x.toString.map(_.asDigit).sum > 0)', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.map(x => x.abs.toString.map(_.asDigit).sum).filter(_ > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', "        var count = 0\n        for (i <- arr) {\n            var\
    \ sum = 0\n            var j = i\n            if (j < 0) j = -j\n            while\
    \ (j > 0) {\n                sum += j % 10\n                j /= 10\n        \
    \    }\n            if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.count(x
    => x.toString.map(_.asDigit).sum > 0)', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.map(x => x.abs.toString.map(_.asDigit).sum).filter(_ > 0).size', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', "        val sum = arr.map(x =>\
    \ x.abs.toString.map(_.asDigit).sum).filter(_ > 0).length\n        sum", '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', "        def sumDigits(n : Long) : Long = {\n            var sum\
    \ = 0L\n            var m = abs(n)\n            while (m > 0) {\n            \
    \    sum += m % 10\n                m /= 10\n            }\n            if (n\
    \ < 0) sum += 1\n            sum\n        }\n        arr.filter(sumDigits(_) >\
    \ 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', "        def\
    \ sumDigits(num : Long) : Long = {\n            var sum = 0L\n            var\
    \ n = num\n            while (n != 0) {\n                sum += abs(n % 10)\n\
    \                n /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.map(x => x.abs.toString.map(_.asDigit).sum).filter(_
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  "        var sum = 0\n        for (i <- arr) {\n            var n = i\n        \
    \    if (n < 0) n = -n\n            var s = 0\n            while (n > 0) {\n \
    \               s += n % 10\n                n /= 10\n            }\n        \
    \    if (s > 0) sum += 1\n        }\n        sum", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', "        def sumDigits(n : Long) : Long = {\n            var sum\
    \ = 0L\n            var nn = n\n            while (nn != 0) {\n              \
    \  sum += abs(nn % 10)\n                nn /= 10\n            }\n            sum\n\
    \        }\n        arr.filter(sumDigits(_) > 0).length", "        var count =\
    \ 0\n        for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', "        def\
    \ sumDigits(n : Long) : Long = {\n            var sum = 0L\n            var m\
    \ = abs(n)\n            while (m > 0) {\n                sum += m % 10\n     \
    \           m /= 10\n            }\n            if (n < 0) -sum else sum\n   \
    \     }\n        arr.map(sumDigits).filter(_ > 0).length", '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.map(x => x.abs.toString.map(_.asDigit).sum).filter(_
    > 0).size', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', "        var count = 0\n      \
    \  for (i <- arr) {\n            var sum = 0\n            var n = i\n        \
    \    if (n < 0) n = -n\n            while (n > 0) {\n                sum += n\
    \ % 10\n                n /= 10\n            }\n            if (sum > 0) count\
    \ += 1\n        }\n        count", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  "        var count = 0\n        for (i <- arr) {\n            if (i < 0) {\n   \
    \             if (i.toString.tail.map(_.asDigit).sum + i.toString.head.asDigit\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = n\n            while (m != 0) {\n                sum += abs(m % 10)\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', "        def\
    \ sumDigits(n : Long) : Long = {\n            if (n < 0) -n else n\n        }\n\
    \        arr.map(sumDigits).filter(_ > 0).size", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', "        def\
    \ sumDigits(n : Long) : Long = {\n            var sum = 0L\n            var m\
    \ = n\n            while (m != 0) {\n                sum += m % 10\n         \
    \       m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.map(x
    => if (x < 0) -x else x).map(x => x.toString.map(_.asDigit).sum).filter(_ > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.map(sumDigits).filter(_\
    \ > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = n\n            while (m != 0) {\n                sum += abs(m % 10)\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.map(x => x.abs.toString.map(_.asDigit).sum).filter(_
    > 0).size', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', "        def\
    \ sumDigits(n : Long) : Long = {\n            var sum = 0L\n            var m\
    \ = n\n            while (m != 0) {\n                sum += m % 10\n         \
    \       m /= 10\n            }\n            sum\n        }\n        arr.filter(n\
    \ => sumDigits(n) > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', "        def sumDigits(n : Long) : Long = {\n            var sum\
    \ = 0L\n            var m = n\n            while (m != 0) {\n                sum\
    \ += abs(m % 10)\n                m /= 10\n            }\n            sum\n  \
    \      }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', "        def sumDigits(n : Long)\
    \ : Long = {\n            var sum = 0L\n            var m = n\n            while\
    \ (m != 0) {\n                sum += abs(m % 10)\n                m /= 10\n  \
    \          }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0L\n        \
    \    var m = n\n            while (m != 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(n\
    \ => sumDigits(n) > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', "        val sumDigits = (x : Long) => x.toString.map(_.asDigit).sum\n\
    \        arr.filter(x => sumDigits(x) > 0).length", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.map(x => x.abs.toString.map(_.asDigit).sum).filter(_
    > 0).size', "        val sumOfDigits = arr.map(x => x.abs.toString.map(_.asDigit).sum)\n\
    \        sumOfDigits.count(_ > 0)", '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x
    => x.toString.map(_.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(_.asDigit).sum
    > 0).length']
stop_tokens:
- "\n    }\n"
