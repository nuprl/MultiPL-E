name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    def median(l : List[Long])\
  \ : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        val m = n / 2\n        if (n % 2\
    \ == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n     \
    \   if (n % 2 == 0)\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else\n\
    \            l(n / 2)", "        val n = l.length\n        val sorted = l.sorted\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n   \
    \     else sorted(n / 2).toFloat", "        val n = l.length\n        if (n %\
    \ 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val\
    \ n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n   \
    \     else l(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val n = l.length\n        val m = n / 2\n        if\
    \ (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val n = l.length\n        val sorted = l.sorted\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n   \
    \     else sorted(n / 2).toFloat", "        val sorted = l.sorted\n        if\
    \ (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length /\
    \ 2).toFloat\n        }", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length /\
    \ 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val n = l.length\n        val m = n / 2\n        if (n %\
    \ 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n   \
    \     val sorted = l.sorted\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat", "        val n =\
    \ l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n       \
    \ else l(n / 2)", "        val sorted = l.sortWith(_ < _)\n        if (sorted.length\
    \ % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2\n        else sorted(sorted.length / 2).toFloat", "        val sorted =\
    \ l.sortWith(_ < _)\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val n = l.length\n  \
    \      if (n % 2 == 0) {\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n     \
    \   } else {\n            l(n / 2)\n        }", "        val sorted = l.sortWith(_\
    \ < _)\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2)\
    \ + sorted(n / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat", "   \
    \     val sorted = l.sortWith(_ < _)\n        val n = sorted.length\n        if\
    \ (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        else sorted(n\
    \ / 2).toFloat", "        val sorted = l.sortWith(_ < _)\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n   \
    \     else sorted(n / 2).toFloat", "        val n = l.length\n        val (lower,\
    \ upper) = l.sortWith(_<_).splitAt(n / 2)\n        if (n % 2 == 0) (lower.last\
    \ + upper.head) / 2.0f else upper.head", "        val n = l.length\n        if\
    \ (n % 2 == 0) {\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else\
    \ {\n            l(n / 2)\n        }", "        val sorted = l.sortWith(_ < _)\n\
    \        val length = sorted.length\n        if (length % 2 == 0) {\n        \
    \    (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(length / 2).toFloat\n        }", "        val n = l.length\n\
    \        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n /\
    \ 2)", "        val sorted = l.sorted\n        val len = sorted.length\n     \
    \   if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n  \
    \      else sorted(len / 2).toFloat", "        val n = l.length\n        if (n\
    \ == 0) return 0\n        val (lower, upper) = l.sortWith(_<_).splitAt(n / 2)\n\
    \        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head", " \
    \       val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else\
    \ sorted(len / 2).toFloat", "        val n = l.length\n        val m = n / 2\n\
    \        if (n % 2 == 0) (l(m) + l(m - 1)) / 2.0f else l(m)", "        val n =\
    \ l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) /\
    \ 2.0f else l(m)", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2\
    \ - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        if (l.size % 2 ==\
    \ 0) {\n            (l(l.size / 2) + l(l.size / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            l(l.size / 2).toFloat\n        }", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val n = l.length\n        if (n % 2 == 0) {\n            (l(n\
    \ / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n / 2)\n      \
    \  }", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else\
    \ sorted(len / 2).toFloat", "        val n = l.length\n        val m = n / 2\n\
    \        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length /\
    \ 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        else sorted(len / 2).toFloat", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else\
    \ sorted(len / 2).toFloat", "        val n = l.length\n        val m = n / 2\n\
    \        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n =\
    \ l.length\n        val m = l.sorted\n        if (n % 2 == 0) (m(n / 2) + m(n\
    \ / 2 - 1)) / 2.0f\n        else m(n / 2)", "        val n = l.length\n      \
    \  val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n     \
    \   } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m))\
    \ / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 == 0) (l(n /\
    \ 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        if\
    \ (n % 2 == 0) {\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else\
    \ {\n            l(n / 2)\n        }", "        val n = l.length\n        if (n\
    \ % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "      \
    \  val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n /\
    \ 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        if (n % 2 == 0) {\n            (l(n / 2 - 1)\
    \ + l(n / 2)) / 2.0f\n        } else {\n            l(n / 2)\n        }", "  \
    \      val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m)\
    \ + l(m - 1)) / 2.0f else l(m)", "        val n = l.length\n        val m = n\
    \ / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val\
    \ n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n   \
    \     else l(n / 2)", "        val n = l.length\n        if (n % 2 == 0) (l(n\
    \ / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val sorted = l.sorted\n        val len = sorted.length\n   \
    \     if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        else sorted(len / 2).toFloat", "        val n = l.length\n        if\
    \ (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "   \
    \     val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        val m = n /\
    \ 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val\
    \ n = l.length\n        if (n % 2 == 0) {\n            (l(n / 2 - 1) + l(n / 2))\
    \ / 2\n        } else {\n            l(n / 2)\n        }", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n\
    \ / 2)) / 2.0f\n        else l(n / 2)", "        val sorted = l.sorted\n     \
    \   val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n /\
    \ 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val n = l.length\n   \
    \     val sorted = l.sorted\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m))\
    \ / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 == 0) {\n  \
    \          (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n\
    \ / 2)\n        }", "        val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n        val n\
    \ = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1))\
    \ / 2.0f\n        else sorted(n / 2)", "        val n = l.length\n        if (n\
    \ % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "      \
    \  val n = l.length\n        if (n == 0)\n            return 0\n        val sorted\
    \ = l.sorted\n        if (n % 2 == 0)\n            (sorted(n / 2) + sorted(n /\
    \ 2 - 1)).toFloat / 2\n        else\n            sorted(n / 2).toFloat", "   \
    \     val sorted = l.sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n        else sorted(sorted.length\
    \ / 2)", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n\
    \        else l(n / 2)", "        val n = l.length\n        val m = n / 2\n  \
    \      if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n   \
    \     val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat", "        val sorted\
    \ = l.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n      \
    \      sorted(sorted.length / 2).toFloat\n        }", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val sorted = l.sorted\n        val n = sorted.length\n     \
    \   if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n\
    \ / 2)", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n\
    \ / 2)) / 2.0f\n        else l(n / 2)", "        val sorted = l.sorted\n     \
    \   if (sorted.length % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length\
    \ / 2 - 1)) / 2.0f\n        else sorted(sorted.length / 2)", "        val n =\
    \ l.length\n        if (n % 2 == 0) {\n            val m = n / 2\n           \
    \ (l(m - 1) + l(m)) / 2.0f\n        } else {\n            l(n / 2)\n        }",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n\
    \        else l(n / 2)", "        val n = l.length\n        if (n % 2 == 0) {\n\
    \            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n\
    \ / 2)\n        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        else sorted(len / 2).toFloat", "        val sorted = l.sorted\n     \
    \   val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat", "        val n\
    \ = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m) + l(m - 1))\
    \ / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 == 0) {\n  \
    \          (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n\
    \ / 2)\n        }", "        val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n        val n\
    \ = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1))\
    \ / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n      \
    \  val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n   \
    \     else l(n / 2)", "        val n = l.length\n        val m = n / 2\n     \
    \   if (n % 2 == 0) (l(m) + l(m - 1)) / 2.0f else l(m)", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n\
    \            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n     \
    \   }", "        val n = l.length\n        if (n % 2 == 0) {\n            (l(n\
    \ / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n / 2)\n      \
    \  }", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n\
    \ / 2)) / 2.0f\n        else l(n / 2)", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      if (l.length % 2 == 0) {\n            (l(l.length / 2) + l(l.length / 2\
    \ - 1)).toFloat / 2\n        } else {\n            l(l.length / 2).toFloat\n \
    \       }", "        val sorted = l.sorted\n        val n = sorted.length\n  \
    \      if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val n = l.length\n        if (n % 2 == 0) {\n     \
    \       (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n /\
    \ 2)\n        }", "        val n = l.length\n        if (n % 2 == 0) {\n     \
    \       (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n            l(n /\
    \ 2)\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        if (n % 2 == 0) {\n            (l(n / 2 - 1)\
    \ + l(n / 2)) / 2.0f\n        } else {\n            l(n / 2)\n        }", "  \
    \      val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n        val n\
    \ = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1))\
    \ / 2.0f\n        else sorted(n / 2)", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 ==\
    \ 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val n\
    \ = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n / 2)\n  \
    \      if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head", "  \
    \      val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n\
    \        else l(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n\
    \        else l(n / 2)", "        val n = l.length\n        if (n % 2 == 0) (l(n\
    \ / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n\
    \        else sorted(sorted.length / 2)", "        val n = l.length\n        val\
    \ m = l.sorted\n        if (n % 2 == 0) (m(n / 2) + m(n / 2 - 1)) / 2.0f\n   \
    \     else m(n / 2)", "        val n = l.length\n        val m = n / 2\n     \
    \   if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted =\
    \ l.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n      \
    \      sorted(sorted.length / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val n = l.length\n \
    \       val (lower, upper) = l.sortWith(_<_).splitAt(n / 2)\n        if (n % 2\
    \ == 0) (lower.last + upper.head) / 2.0f else upper.head", "        val n = l.length\n\
    \        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n /\
    \ 2)", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n   \
    \     val len = sorted.length\n        if (len % 2 == 0) (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat", "        val sorted\
    \ = l.sortWith(_ < _)\n        val n = sorted.length\n        if (n % 2 == 0)\
    \ (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sortWith(_ < _)\n    \
    \    val length = sorted.length\n        if (length % 2 == 0)\n            (sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2\n        else\n            sorted(length\
    \ / 2).toFloat", "        val sorted = l.sortWith(_ < _)\n        if (sorted.length\
    \ % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length /\
    \ 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val n = l.length\n        val m = n / 2\n        if (n %\
    \ 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n   \
    \     val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)",
  "        val sorted = l.sorted\n        if (sorted.length % 2 == 0)\n          \
    \  (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n \
    \       else\n            sorted(sorted.length / 2).toFloat", "        val n =\
    \ l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n       \
    \ else l(n / 2)", "        val n = l.length\n        val m = n / 2\n        if\
    \ (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val sorted = l.sorted\n        val n = sorted.length\n     \
    \   if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m - 1)\
    \ + l(m)) / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 == 0)\
    \ {\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else {\n        \
    \    l(n / 2)\n        }", "        val n = l.length\n        if (n % 2 == 0)\
    \ {\n            val a = l(n / 2 - 1)\n            val b = l(n / 2)\n        \
    \    (a + b).toFloat / 2\n        } else {\n            l(n / 2).toFloat\n   \
    \     }", "        val n = l.length\n        val m = n / 2\n        if (n % 2\
    \ == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n     \
    \   val sorted = l.sorted\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n /\
    \ 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted = l.sorted\n   \
    \     val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val n = l.length\n \
    \       val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 ==\
    \ 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val n\
    \ = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n     \
    \   else l(n / 2)", "        val sorted = l.sorted\n        val size = sorted.size\n\
    \        if (size % 2 == 0) (sorted(size / 2) + sorted(size / 2 - 1)) / 2.0f\n\
    \        else sorted(size / 2)", "        val n = l.length\n        if (n == 0)\
    \ return 0\n        val sorted = l.sorted\n        if (n % 2 == 0) (sorted(n /\
    \ 2) + sorted(n / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n /\
    \ 2)", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n\
    \ / 2)) / 2.0f\n        else l(n / 2)", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n        \
    \    val a = sorted(sorted.length / 2 - 1)\n            val b = sorted(sorted.length\
    \ / 2)\n            (a + b).toFloat / 2\n        } else {\n            sorted(sorted.length\
    \ / 2).toFloat\n        }", "        val n = l.length\n        val m = n / 2\n\
    \        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        if (sorted.length % 2 == 0) (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n        else sorted(sorted.length\
    \ / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n     \
    \   if (n % 2 == 0) (sorted(n / 2) + sorted(n / 2 - 1)) / 2.0f\n        else sorted(n\
    \ / 2)", "        val n = l.length\n        if (n % 2 == 0) {\n            val\
    \ m = n / 2\n            (l(m - 1) + l(m)) / 2.0f\n        } else {\n        \
    \    l(n / 2)\n        }", "        val n = l.length\n        val m = n / 2\n\
    \        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat",
  "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n\
    \        else l(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0)\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        else\n            sorted(n / 2).toFloat", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else\
    \ l(m)", "        val n = l.length\n        val m = n / 2\n        if (n % 2 ==\
    \ 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        val\
    \ m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "  \
    \      val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 ==\
    \ 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val n\
    \ = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m))\
    \ / 2.0f else l(m)", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)) / 2.0f\n\
    \        else sorted(sorted.length / 2)", "        val sorted = l.sorted\n   \
    \     val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)) / 2.0f\n        else sorted(n / 2)", "        val n = l.length\n \
    \       val m = n / 2\n        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)",
  "        val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        val m = l.sorted\n\
    \        if (n % 2 == 0) (m(n / 2) + m(n / 2 - 1)) / 2.0f\n        else m(n /\
    \ 2)", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n\
    \ / 2)) / 2.0f\n        else l(n / 2)", "        val sorted = l.sorted\n     \
    \   if (sorted.length % 2 == 0) (sorted(sorted.length / 2) + sorted(sorted.length\
    \ / 2 - 1)) / 2.0f\n        else sorted(sorted.length / 2)", "        val n =\
    \ l.length\n        if (n % 2 == 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n       \
    \ else l(n / 2)", "        val n = l.length\n        if (n % 2 == 0) (l(n / 2\
    \ - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)", "        val n = l.length\n\
    \        val sorted = l.sorted\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val n = l.length\n        val m = n / 2\n\
    \        if (n % 2 == 0) (l(m - 1) + l(m)) / 2.0f else l(m)", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) (l(m -\
    \ 1) + l(m)) / 2.0f else l(m)", "        val n = l.length\n        if (n % 2 ==\
    \ 0) (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        else l(n / 2)"]
stop_tokens:
- "\n    }\n"
