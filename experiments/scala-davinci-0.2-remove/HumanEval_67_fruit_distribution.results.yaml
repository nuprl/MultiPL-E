language: scala
name: HumanEval_67_fruit_distribution
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(1).toLong\n\
    \        val mangoes = n - apples - oranges\n        mangoes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpo79b0khy.scala:13)\n\
    \tat Problem$.main(tmpo79b0khy.scala:18)\n\tat Problem.main(tmpo79b0khy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - (a + o)\n        if (m < 0) -1 else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp6g8tq9rk.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp6g8tq9rk.scala:11)\n\
    \tat Problem$.main(tmp6g8tq9rk.scala:18)\n\tat Problem.main(tmp6g8tq9rk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(1).toLong\n\
    \        val totalFruits = apples + oranges\n        n - totalFruits\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpnzz4i3hi.scala:13)\n\
    \tat Problem$.main(tmpnzz4i3hi.scala:18)\n\tat Problem.main(tmpnzz4i3hi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val total = arr.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpktee73zz.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpktee73zz.scala:11)\n\
    \tat Problem$.main(tmpktee73zz.scala:17)\n\tat Problem.main(tmpktee73zz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val x = s.split(\"\
    \ \")\n        val a = x(0).toLong\n        val o = x(1).toLong\n        val m\
    \ = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp8y0m_iiu.scala:13)\n\
    \tat Problem$.main(tmp8y0m_iiu.scala:18)\n\tat Problem.main(tmp8y0m_iiu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        d\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5sb7aey5.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5sb7aey5.scala:11)\n\
    \tat Problem$.main(tmp5sb7aey5.scala:18)\n\tat Problem.main(tmp5sb7aey5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        if (m < 0) -1 else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpgkub828s.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpgkub828s.scala:11)\n\
    \tat Problem$.main(tmpgkub828s.scala:18)\n\tat Problem.main(tmpgkub828s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        return d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpsmtxt1gw.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpsmtxt1gw.scala:11)\n\
    \tat Problem$.main(tmpsmtxt1gw.scala:18)\n\tat Problem.main(tmpsmtxt1gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val oranges = a(0)\n        val apples = a(1)\n \
    \       n - oranges - apples\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpqyzqv0z6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpqyzqv0z6.scala:11)\n\
    \tat Problem$.main(tmpqyzqv0z6.scala:17)\n\tat Problem.main(tmpqyzqv0z6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        return z\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmph3_ws7ep.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmph3_ws7ep.scala:11)\n\
    \tat Problem$.main(tmph3_ws7ep.scala:18)\n\tat Problem.main(tmph3_ws7ep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        // Write your code\
    \ here\n        val a = s.split(\" \").map(_.toLong)\n        val b = n - a.sum\n\
    \        b\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp3_qvqx6a.scala:12)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp3_qvqx6a.scala:12)\n\
    \tat Problem$.main(tmp3_qvqx6a.scala:17)\n\tat Problem.main(tmp3_qvqx6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp35ryd04e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp35ryd04e.scala:11)\n\
    \tat Problem$.main(tmp35ryd04e.scala:18)\n\tat Problem.main(tmp35ryd04e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        val m = n -\
    \ a - o\n        return m\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmptejdg_2u.scala:12)\n\
    \tat Problem$.main(tmptejdg_2u.scala:17)\n\tat Problem.main(tmptejdg_2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        if (m < 0) -1 else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpgkub828s.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpgkub828s.scala:11)\n\
    \tat Problem$.main(tmpgkub828s.scala:18)\n\tat Problem.main(tmpgkub828s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val numOfApples = a(0)\n        val numOfOranges\
    \ = a(1)\n        val numOfMangoes = n - numOfApples - numOfOranges\n        numOfMangoes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp97xsvtvi.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp97xsvtvi.scala:11)\n\
    \tat Problem$.main(tmp97xsvtvi.scala:18)\n\tat Problem.main(tmp97xsvtvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(a, o) => (a, o)\n  \
    \      }\n        val m = n - a - o\n        if (m < 0) -1 else m\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp7p1g2k4o.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp7p1g2k4o.scala:11)\n\
    \tat Problem$.main(tmp7p1g2k4o.scala:18)\n\tat Problem.main(tmp7p1g2k4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val (a, o) = (arr(0), arr(1))\n        val total\
    \ = a + o\n        val mango = n - total\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpqi452a5p.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpqi452a5p.scala:11)\n\
    \tat Problem$.main(tmpqi452a5p.scala:18)\n\tat Problem.main(tmpqi452a5p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val l = s.length\n\
    \        var a = 0\n        var o = 0\n        for (i <- 0 until l) {\n      \
    \      if (s(i) == 'a') a += 1\n            else if (s(i) == 'o') o += 1\n   \
    \     }\n        n - (a + o)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf90jws0n.scala:21)\n\tat Problem.main(tmpf90jws0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    A\").map(_.length)\n        val o = s.split(\"O\").map(_.length)\n        val\
    \ m = s.split(\"M\").map(_.length)\n        val ao = a.zip(o).map(x => x._1 +\
    \ x._2)\n        val aom = ao.zip(m).map(x => x._1 + x._2)\n        val aom_sorted\
    \ = aom.sorted\n        val aom_sorted_reverse = aom_sorted.reverse\n        val\
    \ aom_sorted_reverse_sum = aom_sorted_reverse.sum\n        val aom_sorted_reverse_sum_diff\
    \ = n - aom_sorted_reverse_sum\n        val aom_sorted_reverse_sum_diff_div =\
    \ aom_sorted_reverse_sum_diff / aom_sorted_reverse.length\n        val aom_sorted_reverse_sum_diff_div_mod\
    \ = aom_sorted_reverse_sum_diff_div % aom_sorted_reverse.length\n        val aom_sorted_reverse_sum_diff_div_mod_sum\
    \ = aom_sorted_reverse_sum_diff_div + aom_sorted_reverse_sum_diff_div_mod\n  \
    \      return aom_sorted_reverse_sum_diff_div_mod_sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r95sx7e.scala:26)\n\tat Problem.main(tmp0r95sx7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val numApples = fruits(0).toLong\n        val numOranges = fruits(1).toLong\n\
    \        val numMangoes = n - numApples - numOranges\n        numMangoes\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5\
    \ apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp8j0m60ak.scala:13)\n\
    \tat Problem$.main(tmp8j0m60ak.scala:18)\n\tat Problem.main(tmp8j0m60ak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val sum = a.sum\n        val total = n - sum\n  \
    \      total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpg811k499.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpg811k499.scala:11)\n\
    \tat Problem$.main(tmpg811k499.scala:17)\n\tat Problem.main(tmpg811k499.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp35ryd04e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp35ryd04e.scala:11)\n\
    \tat Problem$.main(tmp35ryd04e.scala:18)\n\tat Problem.main(tmp35ryd04e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, b) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(x, y) => (x, y)\n  \
    \      }\n        val total = a + b\n        val mango = n - total\n        mango\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpads8z002.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpads8z002.scala:11)\n\
    \tat Problem$.main(tmpads8z002.scala:19)\n\tat Problem.main(tmpads8z002.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        d\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5sb7aey5.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5sb7aey5.scala:11)\n\
    \tat Problem$.main(tmp5sb7aey5.scala:18)\n\tat Problem.main(tmp5sb7aey5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp35ryd04e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp35ryd04e.scala:11)\n\
    \tat Problem$.main(tmp35ryd04e.scala:18)\n\tat Problem.main(tmp35ryd04e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = n - a.sum\n        b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpd50w0kkz.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpd50w0kkz.scala:11)\n\
    \tat Problem$.main(tmpd50w0kkz.scala:16)\n\tat Problem.main(tmpd50w0kkz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(x => x.toLong)\n        val b = a.sum\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpa2ttm0mv.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpa2ttm0mv.scala:11)\n\
    \tat Problem$.main(tmpa2ttm0mv.scala:16)\n\tat Problem.main(tmpa2ttm0mv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        n - b\
    \ - c\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp9zocr5wh.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp9zocr5wh.scala:11)\n\
    \tat Problem$.main(tmp9zocr5wh.scala:17)\n\tat Problem.main(tmp9zocr5wh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        val total = nums.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_ncubqen.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_ncubqen.scala:11)\n\
    \tat Problem$.main(tmp_ncubqen.scala:17)\n\tat Problem.main(tmp_ncubqen.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(1).toLong\n\
    \        val total = apples + oranges\n        n - total\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpanq0s333.scala:13)\n\
    \tat Problem$.main(tmpanq0s333.scala:18)\n\tat Problem.main(tmpanq0s333.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        // Write your code\
    \ here\n        val nums = s.split(\" \").map(_.toLong)\n        val a = nums(0)\n\
    \        val o = nums(1)\n        val m = n - a - o\n        m\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpcazq_gee.scala:12)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpcazq_gee.scala:12)\n\
    \tat Problem$.main(tmpcazq_gee.scala:19)\n\tat Problem.main(tmpcazq_gee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val total = arr.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpktee73zz.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpktee73zz.scala:11)\n\
    \tat Problem$.main(tmpktee73zz.scala:17)\n\tat Problem.main(tmpktee73zz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val total = s.split(\"\
    \ \").map(_.toLong).sum\n        n - total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpu72x69rn.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpu72x69rn.scala:11)\n\
    \tat Problem$.main(tmpu72x69rn.scala:15)\n\tat Problem.main(tmpu72x69rn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        d\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5sb7aey5.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5sb7aey5.scala:11)\n\
    \tat Problem$.main(tmp5sb7aey5.scala:18)\n\tat Problem.main(tmp5sb7aey5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(x => x.toLong)\n        val b = a.sum\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpa2ttm0mv.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpa2ttm0mv.scala:11)\n\
    \tat Problem$.main(tmpa2ttm0mv.scala:16)\n\tat Problem.main(tmpa2ttm0mv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(1).toLong\n\
    \        val mangoes = n - apples - oranges\n        mangoes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpo79b0khy.scala:13)\n\
    \tat Problem$.main(tmpo79b0khy.scala:18)\n\tat Problem.main(tmpo79b0khy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, b) = s.split(\"\
    \ \").map(_.toLong).toList match {case List(x, y) => (x, y)}\n        val c =\
    \ n - a - b\n        if (c < 0) -1 else c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp3t61oxyz.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp3t61oxyz.scala:11)\n\
    \tat Problem$.main(tmp3t61oxyz.scala:16)\n\tat Problem.main(tmp3t61oxyz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        return d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpsmtxt1gw.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpsmtxt1gw.scala:11)\n\
    \tat Problem$.main(tmpsmtxt1gw.scala:18)\n\tat Problem.main(tmpsmtxt1gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val a = fruits(0).toLong\n        val o = fruits(1).toLong\n  \
    \      val m = n - a - o\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp84pol0lv.scala:13)\n\
    \tat Problem$.main(tmp84pol0lv.scala:18)\n\tat Problem.main(tmp84pol0lv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val sum = a.sum\n        val num = n - sum\n    \
    \    num\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpgyeedgh6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpgyeedgh6.scala:11)\n\
    \tat Problem$.main(tmpgyeedgh6.scala:17)\n\tat Problem.main(tmpgyeedgh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruit = s.split(\"\
    \ \")\n        val apple = fruit(0).toLong\n        val orange = fruit(1).toLong\n\
    \        n - apple - orange\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpxx8b0lgr.scala:13)\n\
    \tat Problem$.main(tmpxx8b0lgr.scala:17)\n\tat Problem.main(tmpxx8b0lgr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val apples = s.count(_\
    \ == 'A')\n        val oranges = s.count(_ == 'O')\n        n - apples - oranges\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbcrj5ix.scala:16)\n\tat Problem.main(tmpwbcrj5ix.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    A\").length - 1\n        val o = s.split(\"O\").length - 1\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndrwhoe5.scala:16)\n\tat Problem.main(tmpndrwhoe5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(x, y) => (x, y)\n  \
    \      }\n        val m = n - a - o\n        if (m < 0) -1 else m\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp8eoo07lb.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8eoo07lb.scala:11)\n\
    \tat Problem$.main(tmp8eoo07lb.scala:18)\n\tat Problem.main(tmp8eoo07lb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = n - a.sum\n        if (b < 0) -1 else b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpywulhskf.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpywulhskf.scala:11)\n\
    \tat Problem$.main(tmpywulhskf.scala:16)\n\tat Problem.main(tmpywulhskf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val oranges = a(0)\n        val apples = a(1)\n \
    \       val mangoes = n - oranges - apples\n        mangoes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpas1v0lqp.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpas1v0lqp.scala:11)\n\
    \tat Problem$.main(tmpas1v0lqp.scala:18)\n\tat Problem.main(tmpas1v0lqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val total = a.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpj5s4gf4_.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpj5s4gf4_.scala:11)\n\
    \tat Problem$.main(tmpj5s4gf4_.scala:17)\n\tat Problem.main(tmpj5s4gf4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val l = s.split(\"\
    \ \").map(_.toLong)\n        n - l(0) - l(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_b_t_h3c.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_b_t_h3c.scala:11)\n\
    \tat Problem$.main(tmp_b_t_h3c.scala:15)\n\tat Problem.main(tmp_b_t_h3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp35ryd04e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp35ryd04e.scala:11)\n\
    \tat Problem$.main(tmp35ryd04e.scala:18)\n\tat Problem.main(tmp35ryd04e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        val total = nums.sum\n        n - total\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprg693_xp.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprg693_xp.scala:11)\n\
    \tat Problem$.main(tmprg693_xp.scala:16)\n\tat Problem.main(tmprg693_xp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(x => x.toLong)\n        val b = a.sum\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpa2ttm0mv.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpa2ttm0mv.scala:11)\n\
    \tat Problem$.main(tmpa2ttm0mv.scala:16)\n\tat Problem.main(tmpa2ttm0mv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        var a = 0\n    \
    \    var o = 0\n        for (i <- 0 until s.length) {\n            if (s(i) ==\
    \ 'a') a += 1\n            else if (s(i) == 'o') o += 1\n        }\n        n\
    \ - a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxgbyn8wv.scala:20)\n\tat Problem.main(tmpxgbyn8wv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val sum = a.sum\n        n - sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpbzcjdxvn.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpbzcjdxvn.scala:11)\n\
    \tat Problem$.main(tmpbzcjdxvn.scala:16)\n\tat Problem.main(tmpbzcjdxvn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val total = a.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpj5s4gf4_.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpj5s4gf4_.scala:11)\n\
    \tat Problem$.main(tmpj5s4gf4_.scala:17)\n\tat Problem.main(tmpj5s4gf4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp35ryd04e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp35ryd04e.scala:11)\n\
    \tat Problem$.main(tmp35ryd04e.scala:18)\n\tat Problem.main(tmp35ryd04e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        return d\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp35ryd04e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp35ryd04e.scala:11)\n\
    \tat Problem$.main(tmp35ryd04e.scala:18)\n\tat Problem.main(tmp35ryd04e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        if (m < 0) -1 else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpgkub828s.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpgkub828s.scala:11)\n\
    \tat Problem$.main(tmpgkub828s.scala:18)\n\tat Problem.main(tmpgkub828s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        (n\
    \ - a - o)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp8hvh7qmi.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8hvh7qmi.scala:11)\n\
    \tat Problem$.main(tmp8hvh7qmi.scala:17)\n\tat Problem.main(tmp8hvh7qmi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(a, o) => (a, o)\n  \
    \      }\n        n - a - o\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5zgdch8e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5zgdch8e.scala:11)\n\
    \tat Problem$.main(tmp5zgdch8e.scala:17)\n\tat Problem.main(tmp5zgdch8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val sum = arr.sum\n        val num = n - sum\n  \
    \      if (num < 0) -1 else num\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmphmuqyo75.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmphmuqyo75.scala:11)\n\
    \tat Problem$.main(tmphmuqyo75.scala:17)\n\tat Problem.main(tmphmuqyo75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        n - (b\
    \ + c)\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkywazjst.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpkywazjst.scala:11)\n\
    \tat Problem$.main(tmpkywazjst.scala:17)\n\tat Problem.main(tmpkywazjst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val total = s.split(\"\
    \ \").map(_.toLong).sum\n        n - total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpu72x69rn.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpu72x69rn.scala:11)\n\
    \tat Problem$.main(tmpu72x69rn.scala:15)\n\tat Problem.main(tmpu72x69rn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    A\").map(_.length).sum\n        val o = s.split(\"O\").map(_.length).sum\n   \
    \     n - a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvc_9t0__.scala:16)\n\tat Problem.main(tmpvc_9t0__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    A\").map(_.length).sum\n        val o = s.split(\"O\").map(_.length).sum\n   \
    \     n - a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvc_9t0__.scala:16)\n\tat Problem.main(tmpvc_9t0__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        d\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5sb7aey5.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5sb7aey5.scala:11)\n\
    \tat Problem$.main(tmp5sb7aey5.scala:18)\n\tat Problem.main(tmp5sb7aey5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(1).toLong\n\
    \        val total = apples + oranges\n        if (total > n) {\n            return\
    \ 0\n        }\n        n - total\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpbwf3t_8d.scala:13)\n\
    \tat Problem$.main(tmpbwf3t_8d.scala:21)\n\tat Problem.main(tmpbwf3t_8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.count(_\
    \ == 'A')\n        val o = s.count(_ == 'O')\n        n - a - o\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1lgeexki.scala:16)\n\tat Problem.main(tmp1lgeexki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruit = s.split(\"\
    \ \")\n        val apple = fruit(0).toLong\n        val orange = fruit(1).toLong\n\
    \        val mango = n - apple - orange\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmplct17xl2.scala:13)\n\
    \tat Problem$.main(tmplct17xl2.scala:18)\n\tat Problem.main(tmplct17xl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        if (m < 0) -1 else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpgkub828s.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpgkub828s.scala:11)\n\
    \tat Problem$.main(tmpgkub828s.scala:18)\n\tat Problem.main(tmpgkub828s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    A\").length - 1\n        val o = s.split(\"O\").length - 1\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndrwhoe5.scala:16)\n\tat Problem.main(tmpndrwhoe5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, b) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(x, y) => (x, y)\n  \
    \      }\n        val c = n - a - b\n        if (c < 0) -1 else c\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp60vg0xg4.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp60vg0xg4.scala:11)\n\
    \tat Problem$.main(tmp60vg0xg4.scala:18)\n\tat Problem.main(tmp60vg0xg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val l = s.split(\"\
    \ \")\n        val a = l(0).toLong\n        val o = l(1).toLong\n        n - a\
    \ - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpqgbvonxk.scala:13)\n\
    \tat Problem$.main(tmpqgbvonxk.scala:17)\n\tat Problem.main(tmpqgbvonxk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        n - b\
    \ - c\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp9zocr5wh.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp9zocr5wh.scala:11)\n\
    \tat Problem$.main(tmp9zocr5wh.scala:17)\n\tat Problem.main(tmp9zocr5wh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val sum = a.sum\n        val num = n - sum\n    \
    \    if (num < 0) -1 else num\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp0ecl6h98.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp0ecl6h98.scala:11)\n\
    \tat Problem$.main(tmp0ecl6h98.scala:17)\n\tat Problem.main(tmp0ecl6h98.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val l = s.length\n\
    \        val dp = Array.ofDim[Long](l + 1, l + 1)\n        dp(0)(0) = 1\n    \
    \    for (i <- 1 to l) {\n            dp(i)(0) = dp(i - 1)(0) * 10 % n\n     \
    \       dp(0)(i) = dp(0)(i - 1) * 10 % n\n        }\n        for (i <- 1 to l;\
    \ j <- 1 to l) {\n            dp(i)(j) = dp(i - 1)(j) + dp(i)(j - 1) - dp(i -\
    \ 1)(j - 1) + dp(i - 1)(j - 1) * (s(i - 1) - '0')\n            dp(i)(j) %= n\n\
    \        }\n        dp(l)(l)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplvyfz4lv.scala:26)\n\tat Problem.main(tmplvyfz4lv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        n - a(0) - a(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpce6xfvvs.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpce6xfvvs.scala:11)\n\
    \tat Problem$.main(tmpce6xfvvs.scala:15)\n\tat Problem.main(tmpce6xfvvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(x, y) => (x, y)\n  \
    \      }\n        n - a - o\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpuhudw47h.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpuhudw47h.scala:11)\n\
    \tat Problem$.main(tmpuhudw47h.scala:17)\n\tat Problem.main(tmpuhudw47h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(x, y) => (x, y)\n  \
    \      }\n        val m = n - a - o\n        if (m < 0) -1 else m\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp8eoo07lb.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp8eoo07lb.scala:11)\n\
    \tat Problem$.main(tmp8eoo07lb.scala:18)\n\tat Problem.main(tmp8eoo07lb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val x = a(0)\n        val y = a(1)\n        val z\
    \ = n - x - y\n        z\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_4qblzu6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_4qblzu6.scala:11)\n\
    \tat Problem$.main(tmp_4qblzu6.scala:18)\n\tat Problem.main(tmp_4qblzu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        n - arr.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpnm0uqc_3.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpnm0uqc_3.scala:11)\n\
    \tat Problem$.main(tmpnm0uqc_3.scala:15)\n\tat Problem.main(tmpnm0uqc_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val x = s.split(\"\
    \ \").map(_.toLong)\n        val a = x(0)\n        val o = x(1)\n        val m\
    \ = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp29a44412.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp29a44412.scala:11)\n\
    \tat Problem$.main(tmp29a44412.scala:18)\n\tat Problem.main(tmp29a44412.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val s1 = s.split(\"\
    \ \")\n        val a = s1(0).toLong\n        val o = s1(1).toLong\n        n -\
    \ a - o\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp6tfdf2cp.scala:13)\n\
    \tat Problem$.main(tmp6tfdf2cp.scala:17)\n\tat Problem.main(tmp6tfdf2cp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - (a + o)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp64reuclu.scala:12)\n\
    \tat Problem$.main(tmp64reuclu.scala:16)\n\tat Problem.main(tmp64reuclu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        val (a, o) = (nums(0), nums(1))\n        val m =\
    \ n - a - o\n        if (m < 0) -1 else m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpqypidlm6.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpqypidlm6.scala:11)\n\
    \tat Problem$.main(tmpqypidlm6.scala:17)\n\tat Problem.main(tmpqypidlm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val total = a.sum\n        if (total > n) return\
    \ 0\n        n - total\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp_om70och.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp_om70och.scala:11)\n\
    \tat Problem$.main(tmp_om70och.scala:17)\n\tat Problem.main(tmp_om70och.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(a, o) => (a, o)\n  \
    \      }\n        val m = (n - a - o)\n        if (m < 0) -1 else m\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
    \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
    \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples\
    \ and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples\
    \ and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples\
    \ and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpy33vrgsj.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpy33vrgsj.scala:11)\n\
    \tat Problem$.main(tmpy33vrgsj.scala:18)\n\tat Problem.main(tmpy33vrgsj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        val c = n - b\n    \
    \    c\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf6i_ox4u.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf6i_ox4u.scala:11)\n\
    \tat Problem$.main(tmpf6i_ox4u.scala:17)\n\tat Problem.main(tmpf6i_ox4u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruit = s.split(\"\
    \ \")\n        val apple = fruit(0).toLong\n        val orange = fruit(1).toLong\n\
    \        val mango = n - apple - orange\n        mango\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and 6 oranges\"\
    ), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and 1 oranges\"\
    ), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"),\
    \ (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"),\
    \ (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"\
    ), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"\
    ), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmplct17xl2.scala:13)\n\
    \tat Problem$.main(tmplct17xl2.scala:18)\n\tat Problem.main(tmplct17xl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - (b + c)\n        return d\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpsmtxt1gw.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpsmtxt1gw.scala:11)\n\
    \tat Problem$.main(tmpsmtxt1gw.scala:18)\n\tat Problem.main(tmpsmtxt1gw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val sum = arr.sum\n        val m = n - sum\n    \
    \    if (m < 0) -1 else m\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp2eid_b04.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp2eid_b04.scala:11)\n\
    \tat Problem$.main(tmp2eid_b04.scala:17)\n\tat Problem.main(tmp2eid_b04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val (a, o) = s.split(\"\
    \ \").map(_.toLong).toList match {\n            case List(a, o) => (a, o)\n  \
    \      }\n        n - a - o\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n \
    \   assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp5zgdch8e.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmp5zgdch8e.scala:11)\n\
    \tat Problem$.main(tmp5zgdch8e.scala:17)\n\tat Problem.main(tmp5zgdch8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0) + a(1)\n        n - b\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmprf7e54wt.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmprf7e54wt.scala:11)\n\
    \tat Problem$.main(tmprf7e54wt.scala:16)\n\tat Problem.main(tmprf7e54wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val a = arr(0)\n        val o = arr(1)\n        val\
    \ m = n - a - o\n        m\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n  \
    \  assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmplf4f2k7a.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmplf4f2k7a.scala:11)\n\
    \tat Problem$.main(tmplf4f2k7a.scala:18)\n\tat Problem.main(tmplf4f2k7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \")(0).toLong\n        val o = s.split(\" \")(1).toLong\n        n - a - o\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmpihszi1he.scala:12)\n\
    \tat Problem$.main(tmpihszi1he.scala:16)\n\tat Problem.main(tmpihszi1he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val arr = s.split(\"\
    \ \").map(_.toLong)\n        val sum = arr.sum\n        n - sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples and\
    \ 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples and\
    \ 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
    \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and\
    \ 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and\
    \ 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpjatunpjl.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpjatunpjl.scala:11)\n\
    \tat Problem$.main(tmpjatunpjl.scala:16)\n\tat Problem.main(tmpjatunpjl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val total = a.sum\n        val mango = n - total\n\
    \        mango\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpj5s4gf4_.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpj5s4gf4_.scala:11)\n\
    \tat Problem$.main(tmpj5s4gf4_.scala:17)\n\tat Problem.main(tmpj5s4gf4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val fruits = s.split(\"\
    \ \")\n        val a = fruits(0).toLong\n        val o = fruits(1).toLong\n  \
    \      val m = n - a - o\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fruitDistribution((\"5 apples and 6 oranges\"), (19l)) == (8l));\n\
    \    assert(fruitDistribution((\"5 apples and 6 oranges\"), (21l)) == (10l));\n\
    \    assert(fruitDistribution((\"0 apples and 1 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"1 apples and 0 oranges\"), (3l)) == (2l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100l)) == (95l));\n\
    \    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5l)) == (0l));\n\
    \    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120l)) == (19l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.fruitDistribution(tmp84pol0lv.scala:13)\n\
    \tat Problem$.main(tmp84pol0lv.scala:18)\n\tat Problem.main(tmp84pol0lv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // In this task, you will be given a string that represents a number\
    \ of apples and oranges \n    // that are distributed in a basket of fruit this\
    \ basket contains \n    // apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    // the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    // in the basket return\
    \ the number of the mango fruits in the basket.\n    // for examble:\n    def\
    \ fruitDistribution(s : String, n : Long) : Long = {\n        val a = s.split(\"\
    \ \").map(_.toLong)\n        val b = a(0)\n        val c = a(1)\n        val d\
    \ = n - b - c\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"\
    5 apples and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"\
    0 apples and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1\
    \ apples and 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2\
    \ apples and 3 oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"\
    2 apples and 3 oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1\
    \ apples and 100 oranges\"), (120l)) == (19l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"apples\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpf41mgf88.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fruitDistribution(tmpf41mgf88.scala:11)\n\
    \tat Problem$.main(tmpf41mgf88.scala:18)\n\tat Problem.main(tmpf41mgf88.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979654
