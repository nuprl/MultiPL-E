name: HumanEval_162_string_to_md5
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string 'text', return its md5 hash equivalent string.\n    // If\
  \ 'text' is an empty string, return None.\n    def stringToMd5(text : String) :\
  \ Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello\
  \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
  \")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
  ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  ));\n    }\n\n}\n"
completions: ["        if (text.isEmpty) None\n        else {\n            val md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest =\
    \ md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val md = java.security.MessageDigest.getInstance(\"MD5\")\n     \
    \       val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(text.getBytes.map(\"\
    %02x\".format(_)).mkString)", "        if (text.length == 0) {\n            None\n\
    \        } else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val hexString\
    \ = new StringBuffer\n            for (i <- 0 until digest.length) {\n       \
    \         val hex = Integer.toHexString(0xFF & digest(i))\n                if\
    \ (hex.length == 1) hexString.append('0')\n                hexString.append(hex)\n\
    \            }\n            Some(hexString.toString)\n        }", "        if\
    \ (text.isEmpty) {\n            None\n        } else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length == 0) return None\n        val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n        md.update(text.getBytes)\n\
    \        Some(md.digest.map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"\
    ){_ + _})", "        if (text.length == 0) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map { \"\
    %02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map { \"\
    %02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      md.update(text.getBytes)\n        val digest = md.digest\n        val sb\
    \ = new StringBuilder\n        for (b <- digest) sb.append(String.format(\"%02x\"\
    , Byte.box(b)))\n        Some(sb.toString)", "        if (text.isEmpty) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            Some(md.digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        Some(hashText)", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) {\n            None\n        } else\
    \ {\n            val md = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \           val digest = md.digest(text.getBytes)\n            val bigInt = new\
    \ java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.length == 0) None\n\
    \        else Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\"\
    ).digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\"\
    ){_ + _})", "        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) None\n        else {\n          \
    \  val md = java.security.MessageDigest.getInstance(\"MD5\")\n            val\
    \ digest = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length == 0) {\n            None\n        } else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes)\n\
    \            val digest = md.digest\n            val hexString = new StringBuffer\n\
    \            for (i <- 0 until digest.length) {\n                val hex = Integer.toHexString(0xFF\
    \ & digest(i))\n                if (hex.length == 1) hexString.append('0')\n \
    \               hexString.append(hex)\n            }\n            Some(hexString.toString)\n\
    \        }", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.length == 0)\
    \ return None\n        val md5 = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n        val digest = md5.digest(text.getBytes())\n        Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        val digest = md.digest\n   \
    \     val sb = new StringBuilder\n        for (i <- 0 until digest.length) {\n\
    \            sb.append(Integer.toString((digest(i) & 0xff) + 0x100, 16).substring(1))\n\
    \        }\n        Some(sb.toString)", "        if (text.isEmpty) None\n    \
    \    else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            val digest = md.digest\n\
    \            val hexString = new StringBuffer\n            for (i <- 0 until digest.length)\
    \ {\n                val hex = Integer.toHexString(0xFF & digest(i))\n       \
    \         if (hex.length == 1) hexString.append('0')\n                hexString.append(hex)\n\
    \            }\n            Some(hexString.toString)\n        }", "        if\
    \ (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            Some(bigInt.toString(16))\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length == 0) None\n        else {\n\
    \            val md = java.security.MessageDigest.getInstance(\"MD5\")\n     \
    \       val digest = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val hexString =\
    \ new StringBuffer\n        for (i <- 0 until digest.length) {\n            val\
    \ hex = Integer.toHexString(0xFF & digest(i))\n            if (hex.length == 1)\
    \ hexString.append('0')\n            hexString.append(hex)\n        }\n      \
    \  Some(hexString.toString)", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val digest = md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1,\
    \ digest)\n        val hashText = bigInt.toString(16)\n        Some(hashText)",
  "        if (text.isEmpty) {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) return None\n        val md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest = md.digest(text.getBytes)\n\
    \        val bigInt = new java.math.BigInteger(1, digest)\n        val hashText\
    \ = bigInt.toString(16)\n        Some(hashText)", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) {\n            None\n        } else {\n\
    \            val md = java.security.MessageDigest.getInstance(\"MD5\")\n     \
    \       md.update(text.getBytes)\n            Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(BigInt(1, MessageDigest.getInstance(\"MD5\").digest(text.getBytes)).toString(16))",
  "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(text.getBytes.map(\"\
    %02x\".format(_)).mkString)", "        if (text.length == 0) None\n        else\
    \ {\n            val md = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \           md.update(text.getBytes)\n            Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashedString = bigInt.toString(16)\n\
    \        Some(hashedString)", "        if (text.isEmpty) None\n        else {\n\
    \            val md = java.security.MessageDigest.getInstance(\"MD5\")\n     \
    \       val digest = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            Some(md.digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length == 0) {\n            None\n        } else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            md.update(text.getBytes)\n\
    \            Some(md.digest.map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) None\n        else {\n   \
    \         val md = java.security.MessageDigest.getInstance(\"MD5\")\n        \
    \    val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF &\
    \ _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if\
    \ (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val digest = md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1,\
    \ digest)\n        val hashText = bigInt.toString(16)\n        return Some(hashText)",
  "        if (text.length == 0) return None\n        return Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.isEmpty) None\n\
    \        else Some(BigInt(1, MessageDigest.getInstance(\"MD5\").digest(text.getBytes)).toString(16))",
  "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        // Now we need to zero pad it if you actually want the full 32 chars.\n\
    \        while (hashText.length < 32) {\n            hashText = \"0\" + hashText\n\
    \        }\n        return Some(hashText)", "        if (text.isEmpty) None\n\
    \        else Some(MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length == 0) return None\n        val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest =\
    \ md.digest(text.getBytes)\n        val hexString = new StringBuffer()\n     \
    \   for (i <- 0 until digest.length) {\n            val hex = Integer.toHexString(0xFF\
    \ & digest(i))\n            if (hex.length == 1) hexString.append('0')\n     \
    \       hexString.append(hex)\n        }\n        return Some(hexString.toString)",
  "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        val digest = md.digest\n   \
    \     val hex = digest.map(\"%02x\".format(_)).mkString\n        Some(hex)", " \
    \       if (text.isEmpty) {\n            None\n        } else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.length == 0) {\n            None\n        } else\
    \ {\n            Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        val digest = md.digest\n   \
    \     val sb = new StringBuilder\n        for (i <- 0 until digest.length) {\n\
    \            sb.append(Integer.toString((digest(i) & 0xff) + 0x100, 16).substring(1))\n\
    \        }\n        Some(sb.toString)", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val digest = md.digest(text.getBytes)\n        Some(digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val digest = md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1,\
    \ digest)\n        val hashText = bigInt.toString(16)\n        while (hashText.length\
    \ < 32) hashText = \"0\" + hashText\n        return Some(hashText)", "       \
    \ if (text.isEmpty) None\n        else Some(text.getBytes.map(\"%02x\".format(_)).mkString)",
  "        if (text.length == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.length == 0) return None\n        val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest =\
    \ md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1, digest)\n\
    \        val hashText = bigInt.toString(16)\n        Some(hashText)", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) {\n            None\n        } else\
    \ {\n            val md = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \           val digest = md.digest(text.getBytes)\n            val bigInt = new\
    \ java.math.BigInteger(1, digest)\n            val hashtext = bigInt.toString(16)\n\
    \            Some(hashtext)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length == 0) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map { \"\
    %02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        // Now we need to zero pad it if you actually want the full 32 chars.\n\
    \        while (hashText.length < 32) {\n            hashText = \"0\" + hashText\n\
    \        }\n        return Some(hashText)", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) {\n            None\n        } else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) {\n      \
    \      None\n        } else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val hexString\
    \ = new StringBuffer\n            for (i <- 0 until digest.length) {\n       \
    \         val hex = Integer.toHexString(0xFF & digest(i))\n                if\
    \ (hex.length == 1) hexString.append('0')\n                hexString.append(hex)\n\
    \            }\n            Some(hexString.toString)\n        }", "        if\
    \ (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map { \"\
    %02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        return Some(hashText)", "        if (text.length == 0) return None\n\
    \        val md = java.security.MessageDigest.getInstance(\"MD5\")\n        md.update(text.getBytes)\n\
    \        val digest = md.digest\n        val sb = new StringBuilder\n        for\
    \ (b <- digest) sb.append(String.format(\"%02x\", Byte.box(b)))\n        return\
    \ Some(sb.toString)", "        if (text.length == 0) return None\n        val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n        val digest =\
    \ md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1, digest)\n\
    \        val hashtext = bigInt.toString(16)\n        Some(hashtext)", "      \
    \  if (text.length == 0) {\n            None\n        } else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      val digest = md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1,\
    \ digest)\n        val hashText = bigInt.toString(16)\n        while (hashText.length\
    \ < 32) {\n            hashText = \"0\" + hashText\n        }\n        return\
    \ Some(hashText)", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            md.update(text.getBytes)\n            Some(md.digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        return Some(hashText)", "        if (text.isEmpty) None\n        else\
    \ Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ return None\n        val md = java.security.MessageDigest.getInstance(\"MD5\"\
    )\n        val digest = md.digest(text.getBytes)\n        val bigInt = new java.math.BigInteger(1,\
    \ digest)\n        val hashText = bigInt.toString(16)\n        return Some(hashText)",
  "        if (text.length == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        return Some(hashText)", "        if (text.isEmpty) None\n        else\
    \ Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) {\n            None\n        } else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) {\n      \
    \      None\n        } else {\n            Some(BigInt(1, MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) {\n\
    \            None\n        } else {\n            val md5 = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val hexString\
    \ = new StringBuffer\n            for (i <- 0 until digest.length) {\n       \
    \         val hex = Integer.toHexString(0xFF & digest(i))\n                if\
    \ (hex.length == 1) hexString.append('0')\n                hexString.append(hex)\n\
    \            }\n            Some(hexString.toString)\n        }", "        if\
    \ (text.isEmpty) {\n            None\n        } else {\n            Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})\n        }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) {\n            None\n        } else\
    \ {\n            val md = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \           val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        // Now we need to zero pad it if you actually want the full 32 chars.\n\
    \        while (hashText.length < 32) {\n            hashText = \"0\" + hashText\n\
    \        }\n        return Some(hashText)", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(BigInt(1, MessageDigest.getInstance(\"MD5\").digest(text.getBytes)).toString(16))",
  "        if (text.isEmpty) None\n        else Some(text.getBytes.map(\"%02x\".format(_)).mkString)",
  "        if (text.length == 0) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        // Now we need to zero pad it if you actually want the full 32 chars.\n\
    \        while (hashText.length < 32) {\n            hashText = \"0\" + hashText\n\
    \        }\n        return Some(hashText)", "        if (text.length == 0) return\
    \ None\n        val md = java.security.MessageDigest.getInstance(\"MD5\")\n  \
    \      md.update(text.getBytes)\n        val digest = md.digest\n        val sb\
    \ = new StringBuilder\n        for (b <- digest) sb.append(String.format(\"%02x\"\
    , Byte.box(b)))\n        Some(sb.toString)", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) {\n            None\n        } else\
    \ {\n            Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.length == 0) {\n            None\n        } else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        return Some(hashText)", "        if (text.isEmpty) None\n        else\
    \ Some(BigInt(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes)).toString(16))",
  "        if (text.length == 0) {\n            None\n        } else {\n         \
    \   val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n            val\
    \ digest = md5.digest(text.getBytes)\n            val hexString = new StringBuffer\n\
    \            for (i <- 0 until digest.length) {\n                hexString.append(Integer.toHexString(0xFF\
    \ & digest(i)))\n            }\n            Some(hexString.toString)\n       \
    \ }", "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        Some(hashText)", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) {\n            None\n        } else\
    \ {\n            val md = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \           val digest = md.digest(text.getBytes)\n            val bigInt = new\
    \ java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.length == 0) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes(\"UTF-8\"))\n       \
    \     Some(digest.map(\"%02x\".format(_)).mkString)\n        }", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        md.update(text.getBytes)\n        Some(md.digest.map(0xFF & _).map\
    \ { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(text.getBytes.map(\"\
    %02x\".format(_)).mkString)", "        if (text.length == 0) return None\n   \
    \     val md = java.security.MessageDigest.getInstance(\"MD5\")\n        md.update(text.getBytes)\n\
    \        val digest = md.digest\n        val hexString = new StringBuffer\n  \
    \      for (i <- 0 until digest.length) {\n            hexString.append(Integer.toHexString(0xFF\
    \ & digest(i)))\n        }\n        return Some(hexString.toString)", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.length == 0) None\n        else {\n          \
    \  val md = java.security.MessageDigest.getInstance(\"MD5\")\n            val\
    \ digest = md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) None\n        else {\n            val\
    \ md = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest\
    \ = md.digest(text.getBytes)\n            Some(digest.map(0xFF & _).map { \"%02x\"\
    .format(_) }.foldLeft(\"\"){_ + _})\n        }", "        if (text.isEmpty) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            val bigInt\
    \ = new java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.length == 0) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(text.getBytes.map(\"%02x\".format(_)).mkString)",
  "        if (text.isEmpty) None\n        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) {\n            None\n        } else {\n            val md\
    \ = java.security.MessageDigest.getInstance(\"MD5\")\n            val digest =\
    \ md.digest(text.getBytes)\n            val bigInt = new java.math.BigInteger(1,\
    \ digest)\n            val hashText = bigInt.toString(16)\n            Some(hashText)\n\
    \        }", "        if (text.isEmpty) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        Some(hashText)", "        if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})", "        if (text.isEmpty) None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.isEmpty) None\n\
    \        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashText = bigInt.toString(16)\n\
    \        return Some(hashText)", "        if (text.isEmpty) None\n        else\
    \ {\n            val md = java.security.MessageDigest.getInstance(\"MD5\")\n \
    \           val digest = md.digest(text.getBytes)\n            val bigInt = new\
    \ java.math.BigInteger(1, digest)\n            val hashText = bigInt.toString(16)\n\
    \            Some(hashText)\n        }", "        if (text.isEmpty) None\n   \
    \     else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.length\
    \ == 0) return None\n        val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n        val digest = md.digest(text.getBytes)\n        val bigInt = new\
    \ java.math.BigInteger(1, digest)\n        val hashtext = bigInt.toString(16)\n\
    \        return Some(hashtext)", "        if (text.isEmpty) None\n        else\
    \ Some(java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes).map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})", "        if (text.isEmpty)\
    \ None\n        else Some(BigInt(1, java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes)).toString(16))", "        if (text.length == 0) None\n\
    \        else {\n            val md = java.security.MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md.digest(text.getBytes)\n            Some(digest.map(0xFF\
    \ & _).map { \"%02x\".format(_) }.foldLeft(\"\"){_ + _})\n        }", "      \
    \  if (text.isEmpty) None\n        else Some(java.security.MessageDigest.getInstance(\"\
    MD5\").digest(text.getBytes).map(0xFF & _).map { \"%02x\".format(_) }.foldLeft(\"\
    \"){_ + _})"]
stop_tokens:
- "\n    }\n"
