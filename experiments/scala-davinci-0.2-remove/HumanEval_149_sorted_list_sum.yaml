name: HumanEval_149_sorted_list_sum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings as a parameter,\n    //\
  \ deletes the strings that have odd lengths from it,\n    // and returns the resulted\
  \ list with a sorted order,\n    // The list is always a list of strings and never\
  \ an array of numbers,\n    // and it may contain duplicates.\n    // The order\
  \ of the list should be ascending by length of each word, and you\n    // should\
  \ return the list sorted by that rule.\n    // If two words have the same length,\
  \ sort the list alphabetically.\n    // The function should return a list of strings\
  \ in sorted order.\n    // You may assume that all words will have the same length.\n\
  \    // For example:\n    def sortedListSum(lst : List[String]) : List[String] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
  aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
  school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"\
  ))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n\
  \    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"\
  abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"\
  au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
  , \"bbbb\"))));\n    }\n\n}\n"
completions: ['        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length
    < y.length)', "        val lst2 = lst.filter(x => x.length % 2 == 0)\n       \
    \ lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x => x.length
    % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sorted', '        lst.filter(x
    => x.length % 2 == 0).sortWith((a, b) => a.length < b.length)', '        lst.filter(s
    => s.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(s => s.length % 2 == 0).sortWith((s1,
    s2) => s1.length < s2.length || (s1.length == s2.length && s1 < s2))', "     \
    \   val lst2 = lst.filter(x => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.length < y.length)\n        lst3", '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        lst.filter(_.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        lst.filter(x => x.length % 2 ==
    0).sortWith((x, y) => x.length < y.length)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted',
  "        var lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith(_.length\
    \ < _.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) =>
    x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x < y)', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', "        val lst2 = lst.filter(s => s.length\
    \ % 2 == 0)\n        lst2.sortWith((a, b) => a.length < b.length || (a.length\
    \ == b.length && a < b))", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        lst.filter(x => x.length % 2 ==
    0).sortWith((x, y) => x.length < y.length || (x.length == y.length && x < y))',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sorted', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x < y)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', "        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith(_.length < _.length)", '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith(_.length
    < _.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length
    < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted', "        var\
    \ lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length\
    \ < y.length || (x.length == y.length && x < y))", '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length && x
    < y))', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length
    < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted', "        val\
    \ lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length\
    \ < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) =>
    x.length < y.length)', "        val lst2 = lst.filter(x => x.length % 2 == 0)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.length < y.length)\n        lst3",
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', "        var result = List[String]()\n        for\
    \ (i <- lst) {\n            if (i.length % 2 == 0) {\n                result =\
    \ result :+ i\n            }\n        }\n        result.sortWith(_.length < _.length)",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((a, b) => a.length < b.length
    || (a.length == b.length && a < b))', '        lst.filter(x => x.length % 2 ==
    0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length
    < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sorted',
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", "        val lst2 = lst.filter(x => x.length %\
    \ 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length
    && x < y))', "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', "        val lst2 = lst.filter(x => x.length % 2\
    \ == 0)\n        lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length
    && x < y))', '        lst.filter(x => x.length % 2 == 0).sorted', "        val\
    \ lst1 = lst.filter(x => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.length < y.length)\n        lst2", '        lst.filter(x => x.length
    % 2 == 0).sortWith(_.length < _.length)', '        lst.filter(x => x.length %
    2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) =>
    x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', "        val lst2\
    \ = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length\
    \ < y.length)", "        val lst2 = lst.filter(x => x.length % 2 == 0)\n     \
    \   val lst3 = lst2.sortWith((x, y) => x.length < y.length)\n        lst3", " \
    \       val lst1 = lst.filter(x => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.length < y.length)\n        lst2", '        lst.filter(x => x.length
    % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y)
    => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sorted', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sorted', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x < y)', '        lst.filter(x => x.length % 2 ==
    0).sortWith((x, y) => x.length < y.length)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)",
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", "        val lst2 = lst.filter(x => x.length %\
    \ 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', "        val lst2\
    \ = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length\
    \ < y.length || (x.length == y.length && x < y))", '        lst.filter(x => x.length
    % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y)
    => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length
    && x < y))', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length
    < y.length)', "        val lst2 = lst.filter(x => x.length % 2 == 0)\n       \
    \ lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x => x.length
    % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y)
    => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', "        var lst2 = lst.filter(x => x.length % 2\
    \ == 0)\n        lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sortWith(_.length < _.length)', '        lst.filter(x =>
    x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sorted',
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        return lst.filter(x => x.length
    % 2 == 0).sorted', "        val lst2 = lst.filter(x => x.length % 2 == 0)\n  \
    \      val lst3 = lst2.sortWith((x, y) => x.length < y.length)\n        lst3",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        lst.filter(x => x.length % 2 ==
    0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length && x
    < y))', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length
    < y.length)', '        lst.filter(_.length % 2 == 0).sortWith((a, b) => a.length
    < b.length || (a.length == b.length && a < b))', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3", "        val lst2 = lst.filter(x => x.length % 2 ==\
    \ 0)\n        lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        lst.filter(_.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", "        val lst2 = lst.filter(x => x.length %\
    \ 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sorted',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  "        // lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n\
    \        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length\
    \ || (x.length == y.length && x < y))", "        val lst1 = lst.filter(x => x.length\
    \ % 2 == 0)\n        lst1.sortWith((x, y) => x.length < y.length)", '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2\
    \ = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length\
    \ < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) =>
    x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x < y)', "        var lst2 = lst.filter(x => x.length % 2 == 0)\n      \
    \  lst2.sortWith((x, y) => x.length < y.length)", '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length
    || (x.length == y.length && x < y))', '        lst.filter(x => x.length % 2 ==
    0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x => x.length
    % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x, y)
    => x.length < y.length)', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sorted', '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length || (x.length == y.length && x < y))', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2\
    \ = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith(_.length < _.length)",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sorted', "        val lst2 = lst.map(x\
    \ => (x, x.length)).filter(x => x._2 % 2 == 0).sortBy(x => (x._2, x._1))\n   \
    \     lst2.map(x => x._1)", '        lst.filter(_.length % 2 == 0).sorted', '        lst.filter(_.length
    % 2 == 0).sortWith(_.length < _.length)', '        lst.filter(x => x.length %
    2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)",
  '        lst.filter(x => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)',
  '        lst.filter(x => x.length % 2 == 0).sorted', '        lst.filter(x => x.length
    % 2 == 0).sortWith(_.length < _.length)']
stop_tokens:
- "\n    }\n"
