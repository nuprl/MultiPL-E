language: scala
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var l = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) l = l :+ m\n          \
    \  m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = l :+ 1\n \
    \       l.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else 3 * cur + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodqljae2.scala:26)\n\tat Problem.main(tmpodqljae2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupxhyawd.scala:24)\n\tat Problem.main(tmpupxhyawd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var cur =\
    \ n\n        while (cur != 1) {\n            if (cur % 2 == 1) list = list :+\
    \ cur\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n\
    \        list = list :+ 1\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpja6in08v.scala:26)\n\tat Problem.main(tmpja6in08v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n        var\
    \ m = n\n        while (m != 1) {\n            if (m % 2 == 1) result += m\n \
    \           m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ += 1\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkw3mjs99.scala:26)\n\tat Problem.main(tmpkw3mjs99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupxhyawd.scala:24)\n\tat Problem.main(tmpupxhyawd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        val collatz = new HashMap[Long, List[Long]]\n\
    \        def collatzSeq(n : Long) : List[Long] = {\n            if (collatz.contains(n))\
    \ collatz(n)\n            else {\n                val next = if (n % 2 == 0) n\
    \ / 2 else 3 * n + 1\n                val seq = n :: collatzSeq(next)\n      \
    \          collatz(n) = seq\n                seq\n            }\n        }\n \
    \       collatzSeq(n).filter(_ % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\
    \tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:18)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmp9y8pvvcs.scala:21)\n\tat Problem$.collatzSeq$1(tmp9y8pvvcs.scal"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var curr\
    \ = n\n        while (curr != 1) {\n            if (curr % 2 == 1) result = curr\
    \ :: result\n            curr = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n\
    \        }\n        result = 1 :: result\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else {\n        \
    \        val next = if (n % 2 == 0) n / 2 else 3 * n + 1\n                getOddCollatz(next,\
    \ if (n % 2 == 1) n :: acc else acc)\n            }\n        }\n        getOddCollatz(n,\
    \ List()).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4e5gkk0a.scala:26)\n\tat Problem.main(tmp4e5gkk0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            if (num % 2 == 1) result = num\
    \ :: result\n            num = if (num % 2 == 0) num / 2 else num * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6anl_ayn.scala:26)\n\tat Problem.main(tmp6anl_ayn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            collatz = current :: collatz\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x\
    \ => x % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var num =\
    \ n\n        while (num != 1) {\n            if (num % 2 == 1) list = list :+\
    \ num\n            num = if (num % 2 == 0) num / 2 else 3 * num + 1\n        }\n\
    \        list = list :+ 1\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbop0q__u.scala:26)\n\tat Problem.main(tmpbop0q__u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcixigmol.scala:24)\n\tat Problem.main(tmpcixigmol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            collatz = current :: collatz\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x\
    \ => x % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3z21yn2.scala:26)\n\tat Problem.main(tmpc3z21yn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ntk3kcz.scala:25)\n\tat Problem.main(tmp6ntk3kcz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var temp\
    \ = n\n        while (temp != 1) {\n            collatz = temp :: collatz\n  \
    \          if (temp % 2 == 0) temp /= 2\n            else temp = 3 * temp + 1\n\
    \        }\n        collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpujh8_hio.scala:27)\n\tat Problem.main(tmpujh8_hio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var x\
    \ = n\n        while (x != 1) {\n            collatz = x :: collatz\n        \
    \    if (x % 2 == 0) x /= 2\n            else x = 3 * x + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        if (n == 1) return List(1)\n        var list\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        list = list :+ 1\n        list.sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def loop(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 1) acc\n            else if (n % 2 == 0) loop(n /\
    \ 2, acc)\n            else loop(3 * n + 1, n :: acc)\n        }\n        loop(n,\
    \ List(1)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82eocx2i.scala:24)\n\tat Problem.main(tmp82eocx2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) {\n         \
    \       result = result :+ cur\n            }\n            cur = if (cur % 2 ==\
    \ 0) cur / 2 else cur * 3 + 1\n        }\n        result = result :+ 1\n     \
    \   result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n      \
    \  var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result +=\
    \ m\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n       \
    \ result += 1\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ri7b7_r.scala:26)\n\tat Problem.main(tmp1ri7b7_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var lst = List[Long]()\n        var num =\
    \ n\n        while (num != 1) {\n            if (num % 2 == 1) lst = num :: lst\n\
    \            num = if (num % 2 == 0) num / 2 else num * 3 + 1\n        }\n   \
    \     lst = 1 :: lst\n        lst.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbnw_9_u8.scala:26)\n\tat Problem.main(tmpbnw_9_u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var m = n\n        while (m != 1) {\n            collatz += m\n          \
    \  if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n       \
    \ collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgudqh5l6.scala:27)\n\tat Problem.main(tmpgudqh5l6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5zpv6v1.scala:27)\n\tat Problem.main(tmpn5zpv6v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomuwxl23.scala:24)\n\tat Problem.main(tmpomuwxl23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else 3 * cur + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodqljae2.scala:26)\n\tat Problem.main(tmpodqljae2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcktdmg6a.scala:24)\n\tat Problem.main(tmpcktdmg6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var l = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) l = l :+ m\n          \
    \  m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = l :+ 1\n \
    \       l.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            collatz = current :: collatz\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x\
    \ => x % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var num = n\n        while (num != 1) {\n            collatz += num\n    \
    \        if (num % 2 == 0) num /= 2\n            else num = 3 * num + 1\n    \
    \    }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuu5qfzcy.scala:27)\n\tat Problem.main(tmpuu5qfzcy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var x\
    \ = n\n        while (x != 1) {\n            collatz = x :: collatz\n        \
    \    if (x % 2 == 0) x /= 2\n            else x = 3 * x + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp319mupdb.scala:27)\n\tat Problem.main(tmp319mupdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def collatz(n : Long) : List[Long] = {\n \
    \           if (n == 1) List(1)\n            else if (n % 2 == 0) n :: collatz(n\
    \ / 2)\n            else n :: collatz(3 * n + 1)\n        }\n        collatz(n).filter(_\
    \ % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, list : List[Long])\
    \ : List[Long] = {\n            if (n == 1) list\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, list)\n            else getOddCollatz(3 * n + 1, n ::\
    \ list)\n        }\n        getOddCollatz(n, List()).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps7qd1yg0.scala:24)\n\tat Problem.main(tmps7qd1yg0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var current = n\n        while (current != 1) {\n            collatz += current\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz += 1\n        collatz.filter(_ % 2\
    \ == 1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2jbxn4n.scala:27)\n\tat Problem.main(tmpj2jbxn4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else 3 * cur + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodqljae2.scala:26)\n\tat Problem.main(tmpodqljae2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else 3 * cur + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodqljae2.scala:26)\n\tat Problem.main(tmpodqljae2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            collatz = cur :: collatz\n    \
    \        if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n    \
    \    }\n        collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            collatz = current :: collatz\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x\
    \ => x % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5zpv6v1.scala:27)\n\tat Problem.main(tmpn5zpv6v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcktdmg6a.scala:24)\n\tat Problem.main(tmpcktdmg6a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            if (num % 2 == 1) result = num\
    \ :: result\n            num = if (num % 2 == 0) num / 2 else 3 * num + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2v7db8uc.scala:26)\n\tat Problem.main(tmp2v7db8uc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            result = result :+ current\n\
    \            if (current % 2 == 0) current /= 2\n            else current = current\
    \ * 3 + 1\n        }\n        result = result :+ 1\n        result.filter(_ %\
    \ 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomuwxl23.scala:24)\n\tat Problem.main(tmpomuwxl23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n        var\
    \ current = n\n        while (current != 1) {\n            if (current % 2 ==\
    \ 1) result += current\n            current = if (current % 2 == 0) current /\
    \ 2 else 3 * current + 1\n        }\n        result += 1\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd407jv57.scala:26)\n\tat Problem.main(tmpd407jv57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5zpv6v1.scala:27)\n\tat Problem.main(tmpn5zpv6v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var num = n\n        while (num != 1) {\n            collatz += num\n    \
    \        if (num % 2 == 0) num /= 2\n            else num = 3 * num + 1\n    \
    \    }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuu5qfzcy.scala:27)\n\tat Problem.main(tmpuu5qfzcy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var current = n\n        while (current != 1) {\n            collatz += current\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz += 1\n        collatz.toList.filter(x\
    \ => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp431w8h6n.scala:27)\n\tat Problem.main(tmp431w8h6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupxhyawd.scala:24)\n\tat Problem.main(tmpupxhyawd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var x = n\n        while (x != 1) {\n            collatz += x\n          \
    \  if (x % 2 == 0) x /= 2\n            else x = 3 * x + 1\n        }\n       \
    \ collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_wgzma9.scala:27)\n\tat Problem.main(tmpg_wgzma9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n\
    \            m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeb1hln8n.scala:26)\n\tat Problem.main(tmpeb1hln8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var i = n\n        while (i != 1) {\n            collatz += i\n          \
    \  if (i % 2 == 0) i /= 2\n            else i = 3 * i + 1\n        }\n       \
    \ collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqtxxvl2.scala:27)\n\tat Problem.main(tmpdqtxxvl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            collatz = cur :: collatz\n    \
    \        if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n    \
    \    }\n        collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def helper(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 1) acc\n            else if (n % 2 == 0) helper(n\
    \ / 2, acc)\n            else helper(3 * n + 1, n :: acc)\n        }\n       \
    \ helper(n, List()).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpur_4pzi3.scala:24)\n\tat Problem.main(tmpur_4pzi3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        if (n == 1) return List(1)\n        var result\
    \ = List[Long]()\n        var cur = n\n        while (cur != 1) {\n          \
    \  if (cur % 2 == 1) result = cur :: result\n            cur = if (cur % 2 ==\
    \ 0) cur / 2 else 3 * cur + 1\n        }\n        result = 1 :: result\n     \
    \   result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n      \
    \  var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result +=\
    \ m\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n       \
    \ result += 1\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ri7b7_r.scala:26)\n\tat Problem.main(tmp1ri7b7_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) collatz\
    \ = current :: collatz\n            current = if (current % 2 == 0) current /\
    \ 2 else 3 * current + 1\n        }\n        collatz = 1 :: collatz\n        collatz.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7trye8o7.scala:26)\n\tat Problem.main(tmp7trye8o7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        val collatz = new HashMap[Long, List[Long]]\n\
    \        def getCollatz(n : Long) : List[Long] = {\n            if (collatz.contains(n))\
    \ collatz(n)\n            else {\n                val result = if (n == 1) List(1)\
    \ else if (n % 2 == 0) n :: getCollatz(n / 2) else n :: getCollatz(3 * n + 1)\n\
    \                collatz(n) = result\n                result\n            }\n\
    \        }\n        getCollatz(n).filter(x => x % 2 == 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9nuviav.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                collatz(n) =\
    \ result\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e[1m\e[31mInt\e[0m\e\
    [1m\e[31m \e[0m\e[1m\e[31m|\e[0m\e[1m\e[31m \e[0mLong]\e[1m\e[31m)\e[0m\n\e[31m\
    \   |\e[0m                             Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr9nuviav.scala:22:16 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                result\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31mInt\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m|\e[0m\e[1m\e[31m \e[0mLong]\e[1m\e\
    [31m)\e[0m\n\e[31m   |\e[0m                Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            if (x % 2 == 1) list = list :+ x\n    \
    \        x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3ed5f3i.scala:26)\n\tat Problem.main(tmpc3ed5f3i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def collatz(n : Long) : List[Long] = {\n \
    \           if (n == 1) List(1)\n            else if (n % 2 == 0) n :: collatz(n\
    \ / 2)\n            else n :: collatz(3 * n + 1)\n        }\n        collatz(n).filter(_\
    \ % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var l = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            if (x % 2 == 1) l = x :: l\n          \
    \  x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        l = 1 :: l\n \
    \       l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvv8u9zxv.scala:26)\n\tat Problem.main(tmpvv8u9zxv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var cur = n\n        while (cur != 1) {\n            collatz += cur\n    \
    \        if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n    \
    \    }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6k48kql6.scala:27)\n\tat Problem.main(tmp6k48kql6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupxhyawd.scala:24)\n\tat Problem.main(tmpupxhyawd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, list : List[Long])\
    \ : List[Long] = {\n            if (n == 1) list\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, list)\n            else getOddCollatz(3 * n + 1, n ::\
    \ list)\n        }\n        getOddCollatz(n, List()).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps7qd1yg0.scala:24)\n\tat Problem.main(tmps7qd1yg0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n      \
    \  var current = n\n        while (current != 1) {\n            if (current %\
    \ 2 == 1) result += current\n            current = if (current % 2 == 0) current\
    \ / 2 else current * 3 + 1\n        }\n        result += 1\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6q_4iitf.scala:26)\n\tat Problem.main(tmp6q_4iitf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var cur = n\n        while (cur != 1) {\n            collatz += cur\n    \
    \        if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n    \
    \    }\n        collatz += 1\n        collatz.toList.filter(_ % 2 == 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8nknax7.scala:27)\n\tat Problem.main(tmpe8nknax7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var current = n\n        while (current != 1) {\n            collatz += current\n\
    \            if (current % 2 == 0) current /= 2\n            else current = 3\
    \ * current + 1\n        }\n        collatz += 1\n        collatz.filter(_ % 2\
    \ == 1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2jbxn4n.scala:27)\n\tat Problem.main(tmpj2jbxn4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            result = m :: result\n            if\
    \ (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result.filter(_ % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0bso2ger.scala:26)\n\tat Problem.main(tmp0bso2ger.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = new ListBuffer[Long]\n     \
    \   var m = n\n        while (m != 1) {\n            collatz += m\n          \
    \  if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n       \
    \ collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgudqh5l6.scala:27)\n\tat Problem.main(tmpgudqh5l6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupxhyawd.scala:24)\n\tat Problem.main(tmpupxhyawd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) list\
    \ = list :+ current\n            current = if (current % 2 == 0) current / 2 else\
    \ current * 3 + 1\n        }\n        list = list :+ 1\n        list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2s78hmg.scala:26)\n\tat Problem.main(tmpj2s78hmg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) {\n                acc\n         \
    \   } else {\n                val next = if (n % 2 == 0) n / 2 else 3 * n + 1\n\
    \                if (next % 2 == 1) getOddCollatzHelper(next, next :: acc) else\
    \ getOddCollatzHelper(next, acc)\n            }\n        }\n        getOddCollatzHelper(n,\
    \ List(n)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9342u7jf.scala:27)\n\tat Problem.main(tmp9342u7jf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(x => x % 2 == 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpopmi6wmx.scala:27)\n\tat Problem.main(tmpopmi6wmx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1muwkaq.scala:26)\n\tat Problem.main(tmpc1muwkaq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var curr\
    \ = n\n        while (curr != 1) {\n            if (curr % 2 == 1) result = curr\
    \ :: result\n            curr = if (curr % 2 == 0) curr / 2 else 3 * curr + 1\n\
    \        }\n        result.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fvxwg40.scala:25)\n\tat Problem.main(tmp3fvxwg40.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            result = m :: result\n            if\
    \ (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5v35dci.scala:26)\n\tat Problem.main(tmpu5v35dci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5zpv6v1.scala:27)\n\tat Problem.main(tmpn5zpv6v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, lst : List[Long])\
    \ : List[Long] = {\n            if (n == 1) lst\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, lst)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: lst)\n        }\n        getOddCollatzHelper(n, List()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxf2nli58.scala:24)\n\tat Problem.main(tmpxf2nli58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            if (x % 2 == 1) list = list :+ x\n    \
    \        x = if (x % 2 == 0) x / 2 else x * 3 + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mjl427x.scala:26)\n\tat Problem.main(tmp9mjl427x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        val collatz = new HashMap[Long, List[Long]]\n\
    \        def collatzSeq(n : Long) : List[Long] = {\n            if (collatz.contains(n))\
    \ collatz(n)\n            else {\n                val next = if (n % 2 == 0) n\
    \ / 2 else 3 * n + 1\n                val seq = next :: collatzSeq(next)\n   \
    \             collatz += (n -> seq)\n                seq\n            }\n    \
    \    }\n        collatzSeq(n).filter(_ % 2 == 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\
    \tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:18)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\tat Problem$.collatzSeq$1(tmpdia6z_8h.scala:21)\n\
    \tat "
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        1 ::\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9q_y06zw.scala:25)\n\tat Problem.main(tmp9q_y06zw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1muwkaq.scala:26)\n\tat Problem.main(tmpc1muwkaq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qbtaaez.scala:26)\n\tat Problem.main(tmp1qbtaaez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcixigmol.scala:24)\n\tat Problem.main(tmpcixigmol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            collatz = cur :: collatz\n    \
    \        if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n    \
    \    }\n        collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def collatz(n : Long) : List[Long] = {\n \
    \           if (n == 1) List(1)\n            else if (n % 2 == 0) n :: collatz(n\
    \ / 2)\n            else n :: collatz(3 * n + 1)\n        }\n        collatz(n).filter(_\
    \ % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var lst = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) lst ::= m\n           \
    \ m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        lst ::= 1\n   \
    \     lst.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89koupry.scala:26)\n\tat Problem.main(tmp89koupry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatzHelper(n : Long, lst : List[Long])\
    \ : List[Long] = {\n            if (n == 1) lst\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, lst)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: lst)\n        }\n        getOddCollatzHelper(n, List()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplg8yczjk.scala:24)\n\tat Problem.main(tmplg8yczjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz = m :: collatz\n        \
    \    if (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n     \
    \   collatz = 1 :: collatz\n        collatz.filter(x => x % 2 == 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpopmi6wmx.scala:27)\n\tat Problem.main(tmpopmi6wmx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        if (n == 1) return List(1)\n        var list\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        list = list :+ 1\n        list.sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        if (n == 1) return List(1)\n        var list\
    \ = List[Long]()\n        var x = n\n        while (x != 1) {\n            if\
    \ (x % 2 == 1) list = list :+ x\n            x = if (x % 2 == 0) x / 2 else 3\
    \ * x + 1\n        }\n        list = list :+ 1\n        list.sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var seq = List[Long]()\n        var cur =\
    \ n\n        while (cur != 1) {\n            seq = cur :: seq\n            if\
    \ (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n        }\n   \
    \     seq = 1 :: seq\n        seq.filter(x => x % 2 == 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnklap456.scala:27)\n\tat Problem.main(tmpnklap456.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomuwxl23.scala:24)\n\tat Problem.main(tmpomuwxl23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        1 ::\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5p_s6zc3.scala:25)\n\tat Problem.main(tmp5p_s6zc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpjffsyp.scala:26)\n\tat Problem.main(tmpxpjffsyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            if (num % 2 == 1) result = num\
    \ :: result\n            num = if (num % 2 == 0) num / 2 else 3 * num + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2v7db8uc.scala:26)\n\tat Problem.main(tmp2v7db8uc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85bw8r7a.scala:26)\n\tat Problem.main(tmp85bw8r7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var collatz = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aqemgsb.scala:26)\n\tat Problem.main(tmp1aqemgsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var curr\
    \ = n\n        while (curr != 1) {\n            if (curr % 2 == 1) result = curr\
    \ :: result\n            curr = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n\
    \        }\n        result = 1 :: result\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2rbrhqr.scala:26)\n\tat Problem.main(tmpb2rbrhqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    def getOddCollatz(n\
    \ : Long) : List[Long] = {\n        var lst = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            if (x % 2 == 1) lst = x :: lst\n      \
    \      x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        lst = 1 ::\
    \ lst\n        lst.reverse\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv3pnw3r2.scala:26)\n\tat Problem.main(tmpv3pnw3r2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009134
