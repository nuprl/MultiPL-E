name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) result(x) += 1\n            else result(x)\
    \ = 1\n        })\n        result", "        val result = Map[String,Long]()\n\
    \        val testList = test.split(\" \").toList\n        testList.foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val result = Map[String,Long]()\n        val letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = Map[String,Long]()\n        val letters = test.split(\" \")\n     \
    \   for (letter <- letters) {\n            if (result.contains(letter)) {\n  \
    \              result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val letters = test.split(\" \")\n        val letterCount = letters.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = letterCount.values.max\n        letterCount.filter(_._2\
    \ == maxCount)", "        val result = new HashMap[String,Long]\n        val testArray\
    \ = test.split(\" \")\n        val max = testArray.map(x => testArray.count(_\
    \ == x)).max\n        testArray.foreach(x => if (testArray.count(_ == x) == max)\
    \ result += (x -> max))\n        result", "        var result = Map[String,Long]()\n\
    \        for (c <- test) {\n            if (result.contains(c.toString)) {\n \
    \               result(c.toString) += 1\n            } else {\n              \
    \  result += (c.toString -> 1)\n            }\n        }\n        result", " \
    \       val words = test.split(\" \")\n        val wordCounts = words.groupBy(word\
    \ => word).mapValues(_.length)\n        wordCounts", "        val result = new\
    \ HashMap[String,Long]\n        for (c <- test) {\n            val count = result.getOrElse(c.toString,\
    \ 0L)\n            result.put(c.toString, count + 1)\n        }\n        result",
  "        val hist = test.split(\" \").groupBy(x => x).map(x => (x._1, x._2.length.toLong))\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val result = Map[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val result = new HashMap[String,Long]\n        for\
    \ (c <- test) {\n            val count = result.getOrElse(c.toString, 0L)\n  \
    \          result.put(c.toString, count + 1)\n        }\n        result", "  \
    \      val result = Map[String,Long]()\n        val letters = test.split(\" \"\
    )\n        letters.foreach(letter => {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        })\n        result", "        val\
    \ hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n    \
    \    val max = hist.values.max\n        hist.filter(_._2 == max)", "        val\
    \ testArray = test.split(\" \")\n        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- testArray) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram", " \
    \       val result = Map[String,Long]()\n        val letters = test.split(\" \"\
    )\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ hist = test.groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result",
  "        val letters = test.split(\" \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", '        test.split("
    ").groupBy(identity).mapValues(_.length.toLong)', "        val words = test.split(\"\
    \ \")\n        val hist = words.groupBy(identity).mapValues(_.length)\n      \
    \  val max = hist.values.max\n        hist.filter(_._2 == max)", "        var\
    \ map = Map[String,Long]()\n        for (c <- test) {\n            val count =\
    \ map.getOrElse(c.toString, 0)\n            map += (c.toString -> (count + 1))\n\
    \        }\n        return map", "        val result = new HashMap[String,Long]\n\
    \        test.toLowerCase.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val hist = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val hist = Map[String,Long]()\n \
    \       for (c <- test) {\n            val count = hist.getOrElse(c.toString,\
    \ 0)\n            hist(c.toString) = count + 1\n        }\n        hist", "  \
    \      val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n    \
    \    val max = hist.values.max\n        hist.filter(x => x._2 == max)", "    \
    \    val result = new HashMap[String,Long]\n        for (c <- test) {\n      \
    \      val count = result.getOrElse(c.toString, 0L)\n            result.put(c.toString,\
    \ count + 1)\n        }\n        result", "        val result = new HashMap[String,Long]()\n\
    \        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        for ((letter,count) <-\
    \ letterCounts) {\n            if (count == maxCount) result += (letter -> count)\n\
    \        }\n        result", "        val hist = test.groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n     \
    \   val max = hist.values.max\n        hist.filter(x => x._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n     \
    \   val max = hist.values.max\n        hist.filter(x => x._2 == max)", "     \
    \   val hist = test.groupBy(identity).mapValues(_.length.toLong)\n        val\
    \ max = hist.values.max\n        hist.filter(_._2 == max)", "        val result\
    \ = new HashMap[String,Long]\n        test.split(\" \").foreach(x => {\n     \
    \       if (result.contains(x)) result(x) += 1\n            else result(x) = 1\n\
    \        })\n        result", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result",
  "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = Map[String,Long]()\n        val letters = test.split(\" \")\n\
    \        for (letter <- letters) {\n            if (result.contains(letter)) {\n\
    \                result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        val hist = test.groupBy(x\
    \ => x).mapValues(_.length)\n        val max = hist.values.max\n        hist.filter(x\
    \ => x._2 == max)", "        val result = Map[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)", " \
    \       val histogram = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = histogram.values.max\n        histogram.filter(_._2 == max)",
  "        val result = new HashMap[String,Long]\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        val result = Map[String,Long]()\n  \
    \      test.split(\" \").foreach(x => {\n            if (result.contains(x)) {\n\
    \                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val result = new HashMap[String,Long]\n\
    \        for (c <- test) {\n            val count = result.getOrElse(c.toString,\
    \ 0L)\n            result.put(c.toString, count + 1)\n        }\n        result",
  "        val letters = test.split(\" \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) result(x) += 1\n            else result(x)\
    \ = 1\n        })\n        result", "        val result = new HashMap[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result",
  "        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val max = testMap.values.max\n        testMap.filter(_._2 == max)", '        test.split("
    ").groupBy(x => x).mapValues(_.length)', "        val hist = Map[String,Long]()\n\
    \        for (c <- test) {\n            val count = hist.getOrElse(c.toString,\
    \ 0)\n            hist += (c.toString -> (count + 1))\n        }\n        hist",
  "        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val result = Map[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   var hist = Map[String,Long]()\n        for (c <- test) {\n            if (hist.contains(c.toString))\
    \ {\n                hist(c.toString) += 1\n            } else {\n           \
    \     hist(c.toString) = 1\n            }\n        }\n        var max = hist.values.max\n\
    \        var maxKeys = hist.filter(x => x._2 == max).keys\n        var result\
    \ = Map[String,Long]()\n        for (k <- maxKeys) {\n            result(k) =\
    \ max\n        }\n        return result", '        test.split(" ").groupBy(identity).mapValues(_.length.toLong)',
  "        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)", '        test.split("
    ").groupBy(identity).mapValues(_.length.toLong)', "        val result = Map[String,Long]()\n\
    \        for (c <- test) {\n            val count = result.getOrElse(c.toString,\
    \ 0)\n            result(c.toString) = count + 1\n        }\n        result",
  "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n  \
    \      val max = hist.values.max\n        hist.filter(_._2 == max)", "       \
    \ val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)", "        val hist\
    \ = test.split(\" \").groupBy(identity).mapValues(_.length)\n        val max =\
    \ hist.values.max\n        hist.filter(_._2 == max)", "        val hist = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length.toLong)\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val hist = test.split(\" \"\
    ).groupBy(x => x).map(x => (x._1, x._2.length.toLong))\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val hist = test.split(\" \"\
    ).groupBy(x => x).mapValues(x => x.length.toLong)\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val result = test.split(\" \"\
    ).groupBy(x => x).mapValues(_.length)\n        val max = result.values.max\n \
    \       result.filter(x => x._2 == max)", "        var result = Map[String,Long]()\n\
    \        var max = 0\n        for (c <- test) {\n            val count = result.getOrElse(c.toString,\
    \ 0) + 1\n            result += (c.toString -> count)\n            if (count >\
    \ max) max = count\n        }\n        result.filter(x => x._2 == max)", "   \
    \     val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val hist = test.groupBy(identity).mapValues(_.length.toLong)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)", "        val hist\
    \ = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n      \
    \  val max = hist.values.max\n        hist.filter(x => x._2 == max)", "      \
    \  val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val m = Map[String,Long]()\n        for (c <- test) {\n            val\
    \ s = c.toString\n            if (m.contains(s)) m(s) += 1\n            else m(s)\
    \ = 1\n        }\n        m", "        val testArray = test.split(\" \")\n   \
    \     val map = Map[String,Long]()\n        for (i <- 0 until testArray.length)\
    \ {\n            val key = testArray(i)\n            if (map.contains(key)) {\n\
    \                val count = map(key)\n                map(key) = count + 1\n\
    \            } else {\n                map(key) = 1\n            }\n        }\n\
    \        map", '        test.split(" ").groupBy(identity).mapValues(_.length.toLong)',
  "        val result = Map[String,Long]()\n        for (c <- test) {\n          \
    \  val count = result.getOrElse(c.toString, 0)\n            result += (c.toString\
    \ -> (count + 1))\n        }\n        result", "        val hist = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length.toLong)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val hist = test.split(\" \").groupBy(x\
    \ => x).mapValues(_.length)\n        val max = hist.values.max\n        hist.filter(x\
    \ => x._2 == max)", "        val result = new HashMap[String,Long]\n        test.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = Map[String,Long]()\n        for (c <- test) {\n            val\
    \ count = result.getOrElse(c.toString, 0)\n            result(c.toString) = count\
    \ + 1\n        }\n        result", "        val result = Map[String,Long]()\n\
    \        val testArray = test.split(\" \")\n        for (letter <- testArray)\
    \ {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        val hist = test.split(\" \").groupBy(x\
    \ => x).mapValues(x => x.length.toLong)\n        val max = hist.values.max\n \
    \       hist.filter(x => x._2 == max)", "        val letters = test.split(\" \"\
    )\n        val map = Map[String,Long]()\n        for (letter <- letters) {\n \
    \           if (map.contains(letter)) {\n                map(letter) += 1\n  \
    \          } else {\n                map(letter) = 1\n            }\n        }\n\
    \        map", "        val hist = test.groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   var hist = Map[String,Long]()\n        for (c <- test) {\n            val\
    \ count = hist.getOrElse(c.toString, 0)\n            hist += (c.toString -> (count\
    \ + 1))\n        }\n        hist", "        val hist = test.groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val result = Map[String,Long]()\n        val letters = test.split(\" \"\
    )\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = Map[String,Long]()\n        val letters = test.split(\" \")\n     \
    \   for (letter <- letters) {\n            if (result.contains(letter)) {\n  \
    \              result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        val result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val letters = test.split(\"\
    \ \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val letters = test.split(\" \")\n        val histogram = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = histogram.values.max\n        histogram.filter(x => x._2 ==\
    \ max)", "        val hist = test.groupBy(identity).mapValues(_.length)\n    \
    \    val max = hist.values.max\n        hist.filter(_._2 == max)", "        val\
    \ result = new HashMap[String,Long]\n        test.split(\" \").foreach(x => {\n\
    \            val count = result.getOrElse(x, 0)\n            result.put(x, count\
    \ + 1)\n        })\n        result", "        val result = new HashMap[String,Long]\n\
    \        val words = test.split(\" \")\n        for (word <- words) {\n      \
    \      if (result.contains(word)) {\n                result(word) += 1\n     \
    \       } else {\n                result(word) = 1\n            }\n        }\n\
    \        result", '        test.split(" ").groupBy(identity).mapValues(_.length.toLong)',
  "        val result = Map[String,Long]()\n        val letters = test.split(\" \"\
    )\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n    \
    \    val max = hist.values.max\n        hist.filter(_._2 == max)", "        val\
    \ hist = test.groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val result = new HashMap[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val hist = test.split(\"\
    \ \").groupBy(x => x).mapValues(x => x.length.toLong)\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val map = Map[String,Long]()\n\
    \        for (c <- test) {\n            val count = map.getOrElse(c.toString,\
    \ 0)\n            map += (c.toString -> (count + 1))\n        }\n        map",
  "        val words = test.split(\" \")\n        val map = Map[String,Long]()\n \
    \       for (word <- words) {\n            if (map.contains(word)) {\n       \
    \         map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val hist = test.split(\" \"\
    ).groupBy(x => x).mapValues(x => x.length)\n        val max = hist.values.max\n\
    \        return hist.filter(x => x._2 == max)", "        val counts = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length)\n        val max = counts.values.max\n\
    \        counts.filter(_._2 == max)", "        val testArray = test.split(\" \"\
    )\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n   \
    \     val max = testMap.values.max\n        testMap.filter(_._2 == max)", "  \
    \      val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val hist = test.split(\" \").groupBy(x => x).mapValues(x\
    \ => x.length)\n        val max = hist.values.max\n        hist.filter(x => x._2\
    \ == max)", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", '        test.split("
    ").groupBy(identity).mapValues(_.length.toLong)', "        val result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val hist = test.groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n     \
    \   val max = hist.values.max\n        hist.filter(_._2 == max)", "        val\
    \ letters = test.split(\" \")\n        val map = Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            if (map.contains(letter)) {\n           \
    \     map(letter) += 1\n            } else {\n                map(letter) = 1\n\
    \            }\n        }\n        map", "        val words = test.split(\" \"\
    )\n        val hist = words.groupBy(identity).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(_._2 == max)", "        val hist\
    \ = test.groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val result = new HashMap[String,Long]()\n\
    \        for (c <- test) {\n            val count = result.getOrElse(c.toString,\
    \ 0)\n            result.put(c.toString, count + 1)\n        }\n        result",
  "        val hist = test.groupBy(identity).mapValues(_.length)\n        val max\
    \ = hist.values.max\n        hist.filter(_._2 == max)", "        var result =\
    \ Map[String,Long]()\n        for (c <- test) {\n            if (result.contains(c.toString))\
    \ result(c.toString) += 1\n            else result += (c.toString -> 1)\n    \
    \    }\n        result", "        val hist = test.groupBy(c => c.toString).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n   \
    \     val max = hist.values.max\n        hist.filter(x => x._2 == max)", "   \
    \     val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n    \
    \    val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)", "        val counts\
    \ = test.split(\" \").groupBy(identity).mapValues(_.length)\n        val max =\
    \ counts.values.max\n        counts.filter(_._2 == max)", "        val result\
    \ = Map[String,Long]()\n        test.split(\" \").foreach(x => result(x) = result.getOrElse(x,\
    \ 0) + 1)\n        result", "        val result = Map[String,Long]()\n       \
    \ test.split(\" \").foreach(x => {\n            if (result.contains(x)) {\n  \
    \              result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val hist = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length)\n        val max = hist.maxBy(_._2)._2\n\
    \        hist.filter(_._2 == max)", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        var result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result",
  "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val testList = test.split(\" \").toList\n        val testMap = testList.groupBy(identity).mapValues(_.size)\n\
    \        val max = testMap.values.max\n        testMap.filter(_._2 == max)", " \
    \       val result = new HashMap[String,Long]\n        val testArray = test.split(\"\
    \ \")\n        testArray.foreach(x => {\n            if (result.contains(x)) {\n\
    \                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val result = new HashMap[String,Long]\n\
    \        val testArray = test.split(\" \")\n        for (i <- 0 until testArray.length)\
    \ {\n            val letter = testArray(i)\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = Map[String,Long]()\n        for (c <- test) {\n            val count\
    \ = result.getOrElse(c.toString, 0)\n            result(c.toString) = count +\
    \ 1\n        }\n        result", "        val map = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = map.values.max\n        map.filter(_._2 == max)", '        test.split("
    ").groupBy(identity).mapValues(_.length.toLong)', "        val hist = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val testArray = test.split(\"\
    \ \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val max = testMap.maxBy(_._2)._2\n        testMap.filter(_._2 == max)",
  "        val hist = test.groupBy(identity).mapValues(_.length)\n        val max\
    \ = hist.values.max\n        hist.filter(_._2 == max)", "        val hist = test.split(\"\
    \ \").groupBy(identity).mapValues(_.length.toLong)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(x => x._2 == max)", "       \
    \ val hist = test.groupBy(x => x).mapValues(_.length.toLong)\n        val max\
    \ = hist.values.max\n        hist.filter(x => x._2 == max)", "        val hist\
    \ = test.split(\" \").groupBy(identity).mapValues(_.length)\n        val max =\
    \ hist.values.max\n        hist.filter(x => x._2 == max)", "        val hist =\
    \ test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n       \
    \ val max = hist.maxBy(x => x._2)._2\n        hist.filter(x => x._2 == max)",
  "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n  \
    \      val max = hist.values.max\n        hist.filter(_._2 == max)", "       \
    \ val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val hist = test.groupBy(x => x).map(x => (x._1.toString,\
    \ x._2.length.toLong))\n        val max = hist.values.max\n        hist.filter(x\
    \ => x._2 == max)", "        val testArray = test.split(\" \")\n        val testMap\
    \ = testArray.groupBy(identity).mapValues(_.length)\n        val maxValue = testMap.values.max\n\
    \        val maxKeys = testMap.filter(_._2 == maxValue).keys\n        val maxMap\
    \ = maxKeys.map(x => (x, maxValue)).toMap\n        return maxMap", "        val\
    \ testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKeys = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxKeysString = maxKeys.mkString(\" \")\n   \
    \     Map(maxKeysString -> maxValue)", "        val hist = test.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.groupBy(identity).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(_._2 == max)", "        val hist = test.groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.groupBy(x => x).mapValues(_.length)\n        val max = hist.values.max\n\
    \        hist.filter(x => x._2 == max)", "        val hist = test.groupBy(c =>\
    \ c.toString).mapValues(_.length)\n        val max = hist.values.max\n       \
    \ hist.filter(_._2 == max)", "        val result = Map[String,Long]()\n      \
    \  val testArray = test.split(\" \")\n        for (i <- 0 until testArray.length)\
    \ {\n            if (result.contains(testArray(i))) {\n                result(testArray(i))\
    \ += 1\n            } else {\n                result(testArray(i)) = 1\n     \
    \       }\n        }\n        result", "        val result = new HashMap[String,Long]()\n\
    \        val testArray = test.split(\" \")\n        for (i <- 0 until testArray.length)\
    \ {\n            if (result.contains(testArray(i))) {\n                result(testArray(i))\
    \ += 1\n            } else {\n                result(testArray(i)) = 1\n     \
    \       }\n        }\n        result", "        val testArr = test.split(\" \"\
    )\n        val testMap = testArr.groupBy(identity).mapValues(_.length)\n     \
    \   val maxVal = testMap.values.max\n        testMap.filter(_._2 == maxVal)",
  '        test.split(" ").groupBy(identity).mapValues(_.length.toLong)', "      \
    \  val histogram = test.split(\" \").groupBy(x => x).mapValues(_.length)\n   \
    \     val max = histogram.values.max\n        histogram.filter(_._2 == max)",
  "        val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val testArray = test.split(\" \")\n        val testMap\
    \ = testArray.groupBy(identity).mapValues(_.length)\n        val max = testMap.values.max\n\
    \        testMap.filter(_._2 == max)", "        val testArray = test.split(\"\
    \ \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = testMap.values.max\n        testMap.filter(_._2 == maxCount)",
  "        val map = test.groupBy(x => x).mapValues(_.length)\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val result = Map[String,Long]()\n\
    \        for (c <- test) {\n            val count = result.getOrElse(c.toString,\
    \ 0)\n            result += (c.toString -> (count + 1))\n        }\n        result",
  "        val hist = test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n\
    \        val max = hist.maxBy(x => x._2)._2\n        hist.filter(x => x._2 ==\
    \ max)", "        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKey = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxKeyArray = maxKey.toArray\n        val maxKeyString\
    \ = maxKeyArray.mkString(\" \")\n        val maxKeyMap = Map(maxKeyString -> maxValue)\n\
    \        return maxKeyMap", "        val hist = test.groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val hist = test.groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val result = new HashMap[String,Long]\n        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        for ((k,v) <- counts) {\n        \
    \    if (v == max) result += (k -> v)\n        }\n        result", "        val\
    \ result = new HashMap[String,Long]\n        val testArray = test.split(\" \"\
    )\n        for (i <- 0 until testArray.length) {\n            if (result.contains(testArray(i)))\
    \ {\n                result(testArray(i)) += 1\n            } else {\n       \
    \         result(testArray(i)) = 1\n            }\n        }\n        result",
  '        test.split(" ").groupBy(x => x).mapValues(_.length)', "        var result\
    \ = Map[String,Long]()\n        test.toCharArray.foreach(x => {\n            if\
    \ (result.contains(x.toString)) result(x.toString) += 1 else result(x.toString)\
    \ = 1\n        })\n        result", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result",
  "        val result = new HashMap[String,Long]\n        for (c <- test) {\n    \
    \        if (result.contains(c.toString)) result(c.toString) += 1\n          \
    \  else result(c.toString) = 1\n        }\n        result", "        val result\
    \ = Map[String,Long]()\n        val words = test.split(\" \")\n        for (word\
    \ <- words) {\n            val count = result.getOrElse(word, 0)\n           \
    \ result += (word -> (count + 1))\n        }\n        result", "        val hist\
    \ = test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n     \
    \   val max = hist.values.max\n        hist.filter(x => x._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(x\
    \ => x._2 == maxCount)", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)", "     \
    \   val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n       \
    \ val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)", "        val\
    \ hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n    \
    \    val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)", "     \
    \   val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result", "        val list = test.split(\" \").toList\n        val map\
    \ = list.groupBy(identity).mapValues(_.size)\n        val max = map.values.max\n\
    \        map.filter(_._2 == max)", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)", " \
    \       val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKeys = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxMap = maxKeys.map(x => (x,maxValue)).toMap\n\
    \        return maxMap", "        val result = new HashMap[String,Long]\n    \
    \    val testArray = test.split(\" \")\n        for (i <- 0 until testArray.length)\
    \ {\n            if (result.contains(testArray(i))) {\n                result(testArray(i))\
    \ += 1\n            } else {\n                result(testArray(i)) = 1\n     \
    \       }\n        }\n        result", "        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)", " \
    \       val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       val hist = test.groupBy(x => x).mapValues(_.length)\n        val max =\
    \ hist.values.max\n        hist.filter(_._2 == max)", "        val result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result"]
stop_tokens:
- "\n    }\n"
