name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    def splitWords(txt : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.filter(_.isLetter)\n      \
    \          val odds = letters.filter(c => letters.indexOf(c) % 2 == 0)\n     \
    \           Right(odds.length)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 1).length\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     val odd = txt.toLowerCase.map(c => ord(c) % 2 == 1).count(b => b)\n    \
    \        Right(odd)\n        }", "        if (txt.contains(\" \")) {\n       \
    \     Left(txt.split(\" \").toList)\n        } else if (txt.contains(\",\")) {\n\
    \            Left(txt.split(\",\").toList)\n        } else {\n            Right(txt.toLowerCase.map(c\
    \ => ord(c) % 2).filter(x => x == 1).length)\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 1).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 1).map(p => p._1 - 'a').sum)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n  \
    \          Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.split(\"\"\
    )\n                var count = 0\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) >= 'a' && letters(i) <= 'z') {\n     \
    \                   if ((letters(i).toInt - 'a'.toInt) % 2 == 1) count += 1\n\
    \                    }\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.filter(_.isLower)\n   \
    \             val odd = letters.map(c => (c - 'a') % 2 == 1).count(b => b)\n \
    \               Right(odd)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val chars = txt.toLowerCase.toCharArray\n\
    \                var count = 0L\n                for (i <- 0 until chars.length)\
    \ {\n                    if (chars(i) - 'a' % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toList.filter(x => x.isLower && x.toInt %\
    \ 2 == 1).length)", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.toList\n                val\
    \ odds = letters.filter(x => x.toInt % 2 == 1)\n                Right(odds.length)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(x => x - 'a').filter(_ % 2 == 1).size)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toList\n                val odds = letters.filter(c => (c -\
    \ 'a') % 2 == 0)\n                Right(odds.length)\n            }\n        }",
  "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n        else if\
    \ (txt.contains(\",\")) Left(txt.split(\",\").toList)\n        else Right(txt.toLowerCase.map(x\
    \ => ord(x) - ord('a')).filter(x => x % 2 == 1).size)", "        val words = txt.split(\"\
    \\\\s+\").toList\n        if (words.length > 1) Left(words)\n        else {\n\
    \            val chars = txt.split(\",\").toList\n            if (chars.length\
    \ > 1) Left(chars)\n            else {\n                val odds = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(_ == 1).length\n   \
    \             Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                var count = 0\n   \
    \             for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(c => c >= 'a' && c <= 'z')\n                val odds = letters.filter(c\
    \ => (c - 'a') % 2 == 0)\n                Right(odds.length)\n            }\n\
    \        }", "        if (txt.contains(\" \")) Left(txt.split(\" \").toList)\n\
    \        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n       \
    \ else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1).map(x => x.toLong - 'a').sum)", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n  \
    \          val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.filter(c => c >= 'a' &&\
    \ c <= 'z')\n                val odds = letters.filter(c => (c - 'a') % 2 == 0)\n\
    \                Right(odds.length)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.filter(x => x - 'a' >= 0 && x\
    \ - 'a' <= 25).zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1 - 'a').sum)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.size > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.size\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toCharArray.map(c => ord(c) - ord('a'))\n                Right(letters.filter(i\
    \ => i % 2 == 1).size)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                var count = 0\n   \
    \             for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\").toList\n        if (words.size > 1) Left(words)\n        else {\n  \
    \          val chars = txt.split(\",\").toList\n            if (chars.size > 1)\
    \ Left(chars)\n            else {\n                val count = txt.toLowerCase.toList.map(c\
    \ => ord(c) - ord('a')).filter(i => i % 2 == 1).size\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toList\n  \
    \              val odds = letters.filter(c => (c - 'a') % 2 == 0)\n          \
    \      Right(odds.length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.size > 1) {\n            Left(words.toList)\n   \
    \     } else {\n            val commas = txt.split(\",\")\n            if (commas.size\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.count(c => c >= 'a' && c <= 'z' && (c - 'a') % 2 == 0))\n \
    \           }\n        }", "        val words = txt.split(\"\\\\s+\")\n      \
    \  if (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.filter(_.isLetter)\n\
    \                Right(letters.zipWithIndex.filter(x => x._2 % 2 == 0).map(x =>\
    \ x._1 - 'a').sum)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toCharArray.filter(c => c >= 'a' && c <= 'z').map(c\
    \ => c - 'a').filter(i => i % 2 == 1).length)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.filter(c => c >= 'a' && c <= 'z')\n                Right(letters.zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.split(\"\")\n                Right(letters.zipWithIndex.filter(x\
    \ => x._2 % 2 == 1).map(x => x._1).map(x => x.charAt(0) - 'a').sum)\n        \
    \    }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val count = txt.filter(c => c.isLower && (c - 'a') % 2 ==\
    \ 0).length\n                Right(count)\n            }\n        }", "      \
    \  val words = txt.split(\"\\\\s+\").toList\n        if (words.length > 1)\n \
    \           Left(words)\n        else {\n            val letters = txt.split(\"\
    ,\").toList\n            if (letters.length > 1)\n                Right(letters.map(x\
    \ => x.toLowerCase.toList.map(y => y.toLong - 'a')).flatten.filter(x => x % 2\
    \ == 1).length)\n            else\n                Right(txt.toLowerCase.toList.map(x\
    \ => x.toLong - 'a').filter(x => x % 2 == 1).length)\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.filter(c => c >= 'a' && c <= 'z')\n                val odds\
    \ = letters.filter(c => (c - 'a') % 2 == 0)\n                Right(odds.length)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(c => ord(c) - ord('a')).filter(i => i\
    \ % 2 == 1).length)", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 1).map(p => p._1\
    \ - 'a').sum)\n            }\n        }", "        val words = txt.split(\"\\\\\
    s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.filter(_.isLower)\n   \
    \             Right(letters.map(c => (c - 'a') % 2).count(_ == 1))\n         \
    \   }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.toList\n                var\
    \ count = 0L\n                for (i <- 0 until letters.length) {\n          \
    \          if (letters(i) >= 'a' && letters(i) <= 'z') {\n                   \
    \     if ((letters(i) - 'a') % 2 == 1) count += 1\n                    }\n   \
    \             }\n                Right(count)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odd = txt.filter(c\
    \ => c.isLower && c.toInt % 2 == 1).length\n                Right(odd)\n     \
    \       }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(_ == 1).length\n   \
    \             Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toLong - 'a').sum)", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(c => c >= 'a' && c <= 'z')\n                Right(letters.map(c =>\
    \ c - 'a').filter(i => i % 2 == 0).length)\n            }\n        }", "     \
    \   val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(_.isLower)\n                Right(letters.map(c => (c - 'a') % 2).filter(_\
    \ == 1).length)\n            }\n        }", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n  \
    \          val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.split(\"\"\
    )\n                var count = 0\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) >= 'a' && letters(i) <= 'z') {\n     \
    \                   if ((letters(i).toInt - 'a'.toInt) % 2 == 1) count += 1\n\
    \                    }\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) Left(chars.toList)\n \
    \           else {\n                val count = txt.filter(c => c.isLower && c.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toList\n                Right(letters.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x >= 'a' && x <= 'z'))\n       \
    \     }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val chars = txt.toCharArray\n           \
    \     var count = 0\n                for (i <- 0 until chars.length) {\n     \
    \               if (chars(i) >= 'a' && chars(i) <= 'z' && (chars(i) - 'a') % 2\
    \ == 1) count += 1\n                }\n                Right(count)\n        \
    \    }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.map(c => (c - 'a')\
    \ % 2).filter(_ == 1).length)\n            }\n        }", "        val words =\
    \ txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n       \
    \ else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (c <- txt) {\n                    if (c >= 'a' && c <= 'z'\
    \ && (c - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1.toLong - ord('a')).sum)", "        val words = txt.split(\" \")\n  \
    \      if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ numbers = txt.split(\",\")\n            if (numbers.length > 1) Right(numbers.map(_.toLong).sum)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.filter(_.isLower)\n   \
    \             val count = letters.map(c => (c - 'a') % 2).count(_ == 1)\n    \
    \            Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.toLowerCase.toList\n\
    \                val odds = letters.filter(c => (c - 'a') % 2 == 0)\n        \
    \        Right(odds.length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val odds = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2 == 1).count(b => b)\n      \
    \          Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.toLowerCase.toCharArray\n\
    \                var count = 0\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) - 'a' % 2 == 1) count += 1\n         \
    \       }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odds = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').groupBy(c => c).filter(p => p._2.length % 2 == 1).keys.size\n\
    \                Right(odds)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odd = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(odd)\n   \
    \         }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c.isLower && (c\
    \ - 'a') % 2 == 0).length\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val chars = txt.toLowerCase.toCharArray\n               \
    \ var count = 0L\n                for (i <- 0 until chars.length) {\n        \
    \            if (chars(i) - 'a' % 2 == 1) count += 1\n                }\n    \
    \            Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val odds = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(odds)\n  \
    \          }\n        }", "        val words = txt.split(\"\\\\s+\")\n       \
    \ if (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.toLowerCase.filter(c => c\
    \ >= 'a' && c <= 'z').map(c => (c - 'a') % 2 == 1).count(b => b)\n           \
    \     Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z')\n                Right(letters.zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n            }\n        }", "  \
    \      val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var sum = 0L\n\
    \                for (i <- 0 until txt.length) {\n                    val c =\
    \ txt(i)\n                    if (c >= 'a' && c <= 'z') {\n                  \
    \      val ord = c - 'a'\n                        if (ord % 2 == 1) sum += 1\n\
    \                    }\n                }\n                Right(sum)\n      \
    \      }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val chars = txt.toCharArray\n                var count =\
    \ 0\n                for (i <- 0 until chars.length) {\n                    if\
    \ (chars(i) >= 'a' && chars(i) <= 'z' && (chars(i) - 'a') % 2 == 1) count += 1\n\
    \                }\n                Right(count)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(c => c >= 'a' && c <= 'z')\n                val odd = letters.filter(c\
    \ => (c - 'a') % 2 == 0)\n                Right(odd.length)\n            }\n \
    \       }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val odds = txt.filter(c => c.isLower && (c - 'a') % 2 ==\
    \ 0).length\n                Right(odds)\n            }\n        }", "       \
    \ val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val odd = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(odd)\n   \
    \         }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toList\n  \
    \              val odds = letters.filter(c => (c - 'a') % 2 == 0)\n          \
    \      Right(odds.length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        val count = txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ (c - 'a') % 2).count(_ == 1)\n                Right(count)\n            }\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.filter(_.isLower)\n                Right(letters.map(c\
    \ => ord(c) - ord('a')).filter(_ % 2 == 1).length)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val chars = txt.toLowerCase.toCharArray\n\
    \                var count = 0\n                for (i <- 0 until chars.length)\
    \ {\n                    if (chars(i) >= 'a' && chars(i) <= 'z' && (chars(i) -\
    \ 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var sum = 0L\n                for (i <- 0\
    \ until txt.length) {\n                    val c = txt(i)\n                  \
    \  if (c >= 'a' && c <= 'z') {\n                        val n = c - 'a'\n    \
    \                    if (n % 2 == 1) sum += n\n                    }\n       \
    \         }\n                Right(sum)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.filter(c => c >= 'a' && c <= 'z')\n                val odd =\
    \ letters.filter(c => (c - 'a') % 2 == 0)\n                Right(odd.length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val count = txt.toLowerCase.filter(c => c\
    \ >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1.toLong - ord('a')).sum)", "        val words = txt.split(\" \")\n  \
    \      if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val count = txt.filter(c => c.isLower).map(c\
    \ => (c - 'a') % 2).count(_ == 1)\n                Right(count)\n            }\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val chars = txt.toLowerCase.toCharArray\n               \
    \ var count = 0\n                for (i <- 0 until chars.length) {\n         \
    \           if (chars(i) >= 'a' && chars(i) <= 'z' && (chars(i) - 'a') % 2 ==\
    \ 1) count += 1\n                }\n                Right(count)\n           \
    \ }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.toList\n                val\
    \ odds = letters.filter(c => (c - 'a') % 2 == 0)\n                Right(odds.length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c >= 'a' && c\
    \ <= 'z' && (c - 'a') % 2 == 0).length\n                Right(odds)\n        \
    \    }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                var count = 0\n                for (c <- txt) {\n       \
    \             if (c >= 'a' && c <= 'z' && (c - 'a') % 2 == 0) count += 1\n   \
    \             }\n                Right(count)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val chars = txt.toCharArray\n\
    \                var count = 0\n                for (i <- 0 until chars.length)\
    \ {\n                    if (chars(i) >= 'a' && chars(i) <= 'z' && (chars(i) -\
    \ 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toList.filter(c => c.isLower && c.toInt % 2 == 1).length)",
  "        val words = txt.split(\"\\\\s+\").toList\n        if (words.length > 1)\
    \ Left(words)\n        else {\n            val letters = txt.split(\",\").toList\n\
    \            if (letters.length > 1) Right(letters.map(x => x.length).sum)\n \
    \           else Right(letters.map(x => x.length).sum)\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toList\n                val odd = letters.filter(x => (x.toInt\
    \ - ord('a')) % 2 == 1)\n                Right(odd.length)\n            }\n  \
    \      }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.map(x => (x\
    \ - 'a')).filter(x => x % 2 == 1).length)\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.toLowerCase.split(\"\
    \")\n                val odds = letters.filter(x => x.charAt(0) - 'a' % 2 == 1)\n\
    \                Right(odds.length.toLong)\n            }\n        }", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (c <- txt) {\n                    if (c >= 'a' && c <= 'z'\
    \ && (c - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.toLowerCase.filter(c => c\
    \ >= 'a' && c <= 'z').map(c => (c - 'a') % 2 == 1).count(b => b)\n           \
    \     Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                var count = 0\n   \
    \             for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    val c =\
    \ txt(i)\n                    if (c >= 'a' && c <= 'z' && (i + 1) % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.map(c => (c - 'a') % 2 == 1).count(b\
    \ => b)\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.filter(c => c >= 'a' && c <= 'z')\n                Right(letters.zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n            }\n        }", "  \
    \      val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toList\n                val odds = letters.filter(x => x.toInt\
    \ - ord('a') % 2 == 1)\n                Right(odds.length)\n            }\n  \
    \      }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.toList\n                val\
    \ odds = letters.filter(c => (c - 'a') % 2 == 0)\n                Right(odds.length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1.toInt - ord('a')).sum)", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n  \
    \          val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z')\n                Right(letters.zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odds = txt.filter(c\
    \ => c >= 'a' && c <= 'z' && (c - 'a') % 2 == 0).length\n                Right(odds)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odd = txt.filter(c => c.isLower && c.toInt\
    \ % 2 == 1).length\n                Right(odd)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.filter(c => c >= 'a' && c <= 'z')\n                val odd =\
    \ letters.map(c => ord(c) % 2 == 1).count(b => b)\n                Right(odd)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.split(\"\")\n         \
    \       var count = 0\n                for (i <- 0 until letters.length) {\n \
    \                   if (letters(i).toLowerCase.charAt(0) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val count = txt.filter(c => c >= 'a' && c <= 'z').foldLeft(0L)((c,\
    \ x) => c + (if (x - 'a' % 2 == 0) 1 else 0))\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toCharArray\n\
    \                var count = 0\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) >= 'a' && letters(i) <= 'z' && (letters(i)\
    \ - 'a') % 2 == 1) {\n                        count += 1\n                   \
    \ }\n                }\n                Right(count)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odds = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(odds)\n  \
    \          }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) Left(chars.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toList.filter(c => c >= 'a' && c\
    \ <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.split(\"\"\
    )\n                var count = 0L\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i).charAt(0) - 'a' % 2 == 1) count += 1\n\
    \                }\n                Right(count)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toList\n                val odds = letters.zipWithIndex.filter(x\
    \ => x._2 % 2 == 1).map(_._1)\n                Right(odds.length)\n          \
    \  }\n        }", "        val words = txt.split(\"\\\\s+\").toList\n        if\
    \ (words.length > 1) Left(words)\n        else {\n            val chars = txt.split(\"\
    ,\").toList\n            if (chars.length > 1) Left(chars)\n            else {\n\
    \                val count = txt.toLowerCase.toList.filter(c => (c - 'a') % 2\
    \ == 0).length\n                Right(count)\n            }\n        }", "   \
    \     val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var odd = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z') {\n                        if ((txt(i) - 'a') % 2 ==\
    \ 1) odd += 1\n                    }\n                }\n                Right(odd)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.filter(c =>\
    \ c >= 'a' && c <= 'z')\n                val odds = letters.map(c => c - 'a').filter(i\
    \ => i % 2 == 1).length\n                Right(odds)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\").toList\n        if (words.length > 1)\
    \ Left(words)\n        else {\n            val commas = txt.split(\",\").toList\n\
    \            if (commas.length > 1) Left(commas)\n            else {\n       \
    \         val letters = txt.filter(_.isLetter).map(_.toLower)\n              \
    \  if (letters.length > 0) Right(letters.map(c => ord(c) - ord('a')).filter(_\
    \ % 2 == 1).length)\n                else Right(0)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.split(\"\")\n                var count = 0\n                for (i <- 0\
    \ until letters.length) {\n                    if (letters(i).toLowerCase() ==\
    \ letters(i)) {\n                        if (letters(i).toInt - 'a'.toInt % 2\
    \ == 1) count += 1\n                    }\n                }\n               \
    \ Right(count)\n            }\n        }", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n  \
    \          val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.filter(c => c >= 'a' &&\
    \ c <= 'z')\n                val odds = letters.map(c => (c - 'a') % 2 == 1).count(b\
    \ => b)\n                Right(odds)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (c <- txt) {\n                    if (c >= 'a' && c <= 'z'\
    \ && (c - 'a') % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var odd = 0\n                for (c <- txt)\
    \ {\n                    if (c >= 'a' && c <= 'z') {\n                       \
    \ if ((c - 'a') % 2 == 0) odd += 1\n                    }\n                }\n\
    \                Right(odd)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.filter(c\
    \ => c >= 'a' && c <= 'z')\n                Right(letters.map(c => (c - 'a') %\
    \ 2).filter(i => i == 1).length)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(_.isLower)\n                val odds = letters.map(c => ord(c) %\
    \ 2 == 1).count(b => b)\n                Right(odds)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.filter(c => c >= 'a' && c <= 'z')\n                Right(letters.map(c\
    \ => ord(c) - ord('a')).filter(i => i % 2 == 1).length)\n            }\n     \
    \   }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toList.map(x => x.toInt - ord('a'))\n                Right(letters.filter(x\
    \ => x % 2 == 1).length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.toLowerCase.toList\n\
    \                val odds = letters.filter(c => (c - 'a') % 2 == 0)\n        \
    \        Right(odds.length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                var count = 0\n   \
    \             for (c <- txt) {\n                    if (c >= 'a' && c <= 'z' &&\
    \ (c - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.split(\"\"\
    )\n                var count = 0\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) >= 'a' && letters(i) <= 'z') {\n     \
    \                   if ((letters(i).toInt - 'a'.toInt) % 2 == 1) count += 1\n\
    \                    }\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (c <-\
    \ txt) {\n                    if (c >= 'a' && c <= 'z' && (c - 'a') % 2 == 1)\
    \ count += 1\n                }\n                Right(count)\n            }\n\
    \        }", "        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.split(\"\")\n             \
    \   val odds = letters.filter(x => x.toInt % 2 == 1)\n                Right(odds.length.toLong)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.map(x => ord(x) - ord('a')).filter(x => x\
    \ % 2 == 1).size)", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\").toList\n  \
    \      if (words.length > 1) Left(words)\n        else {\n            val chars\
    \ = txt.split(\",\").toList\n            if (chars.length > 1) Left(chars)\n \
    \           else {\n                val count = txt.toLowerCase.filter(c => c\
    \ >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.filter(c =>\
    \ c >= 'a' && c <= 'z')\n                val odds = letters.map(c => (c - 'a')\
    \ % 2 == 1).count(b => b)\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.filter(_.isLetter)\n      \
    \          Right(letters.zipWithIndex.count(x => x._2 % 2 == 0 && x._1.toInt -\
    \ ord('a') % 2 == 1).toLong)\n            }\n        }", "        val words =\
    \ txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n       \
    \ else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toCharArray.map(x => ord(x) - ord('a'))\n                Right(letters.filter(x\
    \ => x % 2 == 1).length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val count = txt.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 1).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odds = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2 == 1).count(b => b)\n      \
    \          Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val count = txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => ord(c) % 2).count(_ == 1)\n              \
    \  Right(count)\n            }\n        }", "        val words = txt.split(\"\\\
    \\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n  \
    \          val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toList.filter(c => c >=\
    \ 'a' && c <= 'z')\n                val odds = letters.filter(c => (c - 'a') %\
    \ 2 == 0)\n                Right(odds.length)\n            }\n        }", "  \
    \      val words = txt.split(\"\\\\s+\")\n        if (words.length > 1)\n    \
    \        Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1)\n                Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (c <-\
    \ txt) {\n                    if (c >= 'a' && c <= 'z' && (c - 'a') % 2 == 1)\n\
    \                        count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c.isLower && (c\
    \ - 'a') % 2 == 0).length\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.filter(c => c >= 'a' && c <=\
    \ 'z')\n                Right(letters.zipWithIndex.filter(p => p._2 % 2 == 0).map(p\
    \ => p._1 - 'a').sum)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val odds = txt.filter(c\
    \ => c >= 'a' && c <= 'z' && (c - 'a') % 2 == 0).length\n                Right(odds)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c.isLower && (c\
    \ - 'a') % 2 == 0).length\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val count = txt.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ (c - 'a') % 2).count(_ == 1)\n                Right(count)\n            }\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val count = txt.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ ord(c) % 2).sum\n                Right(count)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) Left(chars.toList)\n            else {\n                val count = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n           \
    \     Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val count = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val odds = txt.filter(c => c >= 'a' && c <= 'z' && (c - 'a')\
    \ % 2 == 0).length\n                Right(odds)\n            }\n        }", " \
    \       val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odds = txt.filter(c\
    \ => c.isLower && c.toInt % 2 == 1).length\n                Right(odds)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c >= 'a' && c\
    \ <= 'z' && (c - 'a') % 2 == 0).length\n                Right(odds)\n        \
    \    }\n        }", "        val words = txt.split(\"\\\\s+\").toList\n      \
    \  if (words.length > 1) Left(words)\n        else {\n            val chars =\
    \ txt.split(\",\").toList\n            if (chars.length > 1) Left(chars)\n   \
    \         else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => (c - 'a') % 2 == 0).length\n                Right(count)\n            }\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.filter(c => c >= 'a' && c <=\
    \ 'z')\n                Right(letters.zipWithIndex.filter(p => p._2 % 2 == 0).map(p\
    \ => p._1 - 'a').sum)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val count = txt.filter(c => c.isLower).map(c\
    \ => (c - 'a')).filter(i => i % 2 == 1).length\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\").toList\n\
    \        if (words.length > 1) Left(words)\n        else {\n            val chars\
    \ = txt.split(\",\").toList\n            if (chars.length > 1) Left(chars)\n \
    \           else {\n                val odds = txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 1).length\n        \
    \        Right(odds)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 1).map(x\
    \ => x._1.toInt - 'a'.toInt).sum)\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val odd = txt.filter(c\
    \ => c.isLower && c.toInt % 2 == 1).length\n                Right(odd)\n     \
    \       }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.toLowerCase.filter(c => c\
    \ >= 'a' && c <= 'z').filter(c => (c - 'a') % 2 == 0).length\n               \
    \ Right(odds)\n            }\n        }", "        val words = txt.split(\"\\\\\
    s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c.isLower && (c\
    \ - 'a') % 2 == 0).length\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.toList\n                val\
    \ oddLetters = letters.filter(c => (c - 'a') % 2 == 0)\n                Right(oddLetters.length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c.isLower && (c\
    \ - 'a') % 2 == 0).length\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val odds = txt.filter(c => c.isLower && (c - 'a') % 2 ==\
    \ 0).length\n                Right(odds)\n            }\n        }", "       \
    \ val words = txt.split(\"\\\\s+\").toList\n        if (words.length > 1) Left(words)\n\
    \        else {\n            val commas = txt.split(\",\").toList\n          \
    \  if (commas.length > 1) Left(commas)\n            else {\n                val\
    \ letters = txt.toLowerCase.split(\"\").toList\n                val odds = letters.filter(x\
    \ => x.toInt >= 97 && x.toInt <= 122 && x.toInt % 2 == 1)\n                Right(odds.length.toLong)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val odds = txt.filter(c => c.isLower && (c\
    \ - 'a') % 2 == 0).length\n                Right(odds)\n            }\n      \
    \  }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toCharArray\n                var count = 0L\n              \
    \  for (i <- 0 until letters.length) {\n                    if (letters(i) - 'a'\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\").toList\n  \
    \      if (words.length > 1) Left(words)\n        else {\n            val chars\
    \ = txt.split(\",\").toList\n            if (chars.length > 1) Left(chars)\n \
    \           else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(c => c >= 'a' && c <= 'z')\n                Right(letters.map(c =>\
    \ (c - 'a') % 2).filter(b => b == 1).length)\n            }\n        }", "   \
    \     val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val count = txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1)\n           \
    \     Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.filter(_.isLower)\n\
    \                val odd = letters.map(c => ord(c) % 2 == 1).count(b => b)\n \
    \               Right(odd)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.filter(c\
    \ => c >= 'a' && c <= 'z')\n                Right(letters.map(c => (c - 'a') %\
    \ 2).count(c => c == 1))\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.toLowerCase.toList\n\
    \                val odds = letters.filter(c => c >= 'a' && c <= 'z' && (c - 'a')\
    \ % 2 == 0)\n                Right(odds.length)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.toLowerCase.toList\n                val odds = letters.filter(x => (x.toInt\
    \ - ord('a')) % 2 == 1)\n                Right(odds.length)\n            }\n \
    \       }", "        val splitOnWhitespace = txt.split(\"\\\\s+\")\n        if\
    \ (splitOnWhitespace.length > 1) Left(splitOnWhitespace.toList)\n        else\
    \ {\n            val splitOnComma = txt.split(\",\")\n            if (splitOnComma.length\
    \ > 1) Left(splitOnComma.toList)\n            else {\n                val count\
    \ = txt.toLowerCase.toList.map(c => ord(c) - ord('a')).filter(i => i % 2 == 1).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(_.isLower)\n                Right(letters.map(c => ord(c) - ord('a')).filter(_\
    \ % 2 == 1).length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                var count = 0\n   \
    \             for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0L\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val chars = txt.toCharArray\n\
    \                var count = 0L\n                for (c <- chars) {\n        \
    \            val ord = c.toInt - 'a'.toInt\n                    if (ord >= 0 &&\
    \ ord <= 25 && ord % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.split(\"\")\n         \
    \       var count = 0\n                for (i <- 0 until letters.length) {\n \
    \                   if (letters(i).matches(\"[a-z]\")) {\n                   \
    \     if (letters(i).charAt(0) - 'a' % 2 == 1) count += 1\n                  \
    \  }\n                }\n                Right(count)\n            }\n       \
    \ }", "        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val odds = txt.toList.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(odds)\n  \
    \          }\n        }", "        val words = txt.split(\"\\\\s+\")\n       \
    \ if (words.length > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val chars = txt.toLowerCase.toCharArray\n\
    \                var count = 0L\n                for (i <- 0 until chars.length)\
    \ {\n                    if (chars(i) - 'a' % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                val letters =\
    \ txt.filter(_.isLower)\n                Right(letters.map(c => (c - 'a') % 2).count(_\
    \ == 1))\n            }\n        }", "        val words = txt.split(\" \")\n \
    \       if (words.length > 1) Left(words.toList)\n        else {\n           \
    \ val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toCharArray\n\
    \                var count = 0\n                for (i <- 0 until letters.length)\
    \ {\n                    if (letters(i) >= 'a' && letters(i) <= 'z') {\n     \
    \                   if ((letters(i) - 'a') % 2 == 1) count += 1\n            \
    \        }\n                }\n                Right(count)\n            }\n \
    \       }", "        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) Left(commas.toList)\n            else\
    \ {\n                val letters = txt.toLowerCase.toList\n                val\
    \ odds = letters.filter(c => (c - 'a') % 2 == 0)\n                Right(odds.length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ {\n                Left(commas.toList)\n            } else {\n             \
    \   val odds = txt.filter(c => c.isLower && (c - 'a') % 2 == 0).length\n     \
    \           Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toList\n  \
    \              val odds = letters.filter(x => x.toInt % 2 == 1)\n            \
    \    Right(odds.length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val oddLetters = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(oddLetters)\n\
    \            }\n        }", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toList.map(x => x.toLong - 'a').filter(x => x % 2 == 1).size)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) Left(commas.toList)\n            else {\n                var count = 0\n\
    \                for (c <- txt) {\n                    if (c >= 'a' && c <= 'z'\
    \ && (c - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ {\n                Left(commas.toList)\n            } else {\n             \
    \   val odds = txt.filter(c => c.isLower && (c - 'a') % 2 == 0).length\n     \
    \           Right(odds)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val count = txt.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        val words = txt.split(\"\\\\s+\")\n      \
    \  if (words.size > 1) Left(words.toList)\n        else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.size > 1) Left(commas.toList)\n \
    \           else {\n                val letters = txt.toLowerCase.toList\n   \
    \             Right(letters.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).count(x\
    \ => x.isLetter))\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ Left(commas.toList)\n            else {\n                val letters = txt.filter(_.isLower)\n\
    \                Right(letters.map(c => (c - 'a') % 2).filter(_ == 1).length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ chars = txt.split(\",\")\n            if (chars.length > 1) Left(chars.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ commas = txt.split(\",\")\n            if (commas.length > 1) Left(commas.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toCharArray.map(c\
    \ => ord(c) - ord('a'))\n                Right(letters.filter(i => i % 2 == 1).length)\n\
    \            }\n        }"]
stop_tokens:
- "\n    }\n"
