name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a\
  \ : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = new ArrayBuffer[Long]\n    \
    \    for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i + 1 until\
    \ primes.length) {\n                for (k <- j + 1 until primes.length) {\n \
    \                   if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Long]\n      \
    \  var temp = a\n        for (p <- primes) {\n            if (temp % p == 0) {\n\
    \                factors += p\n                temp /= p\n            }\n    \
    \    }\n        factors.length == 3", "        var result = false\n        for\
    \ (i <- 2 to 100) {\n            if (a % i == 0) {\n                var b = a\
    \ / i\n                for (j <- 2 to 100) {\n                    if (b % j ==\
    \ 0) {\n                        var c = b / j\n                        if (isPrime(c))\
    \ {\n                            result = true\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        result",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.foreach(p => if (a %\
    \ p == 0) return true)\n        false", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j <- i\
    \ until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        if (a ==\
    \ 1) return false\n        var b = a\n        var c = 0\n        while (b % 2\
    \ == 0) {\n            b /= 2\n            c += 1\n        }\n        if (c >=\
    \ 3) return true\n        for (i <- 3 to sqrt(a).toInt by 2) {\n            c\
    \ = 0\n            while (b % i == 0) {\n                b /= i\n            \
    \    c += 1\n            }\n            if (c >= 3) return true\n        }\n \
    \       if (b >= 3) return true\n        return false", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n      \
    \      for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Long]\n\
    \        var x = a\n        for (i <- 0 to primes.length - 1) {\n            while\
    \ (x % primes(i) == 0) {\n                factors += primes(i)\n             \
    \   x /= primes(i)\n            }\n        }\n        if (factors.length == 3)\
    \ true else false", "        if (a == 1) return false\n        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i +\
    \ 1 until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n        for\
    \ (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = ArrayBuffer[Long]()\n     \
    \   for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        primes.foreach(p => if (a % p == 0) {\n   \
    \         val b = a / p\n            primes.foreach(q => if (b % q == 0) {\n \
    \               val c = b / q\n                if (primes.contains(c)) return\
    \ true\n            })\n        })\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i +\
    \ 1 until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n        if (primeFactors.length\
    \ == 3) true else false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        if (a == 1) return false\n \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        return false", "        val primes = ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primes2 = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var i =\
    \ 0\n        while (i < primes.length) {\n            if (a % primes(i) == 0)\
    \ {\n                val b = a / primes(i)\n                var j = 0\n      \
    \          while (j < primes2.length) {\n                    if (b % primes2(j)\
    \ == 0) {\n                        val c = b / primes2(j)\n                  \
    \      if (primes.contains(c)) return true\n                    }\n          \
    \          j += 1\n                }\n            }\n            i += 1\n    \
    \    }\n        false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        if (a == 1)\
    \ return false\n        var n = a\n        var i = 2\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                n /= i\n                if (n\
    \ == 1) return true\n                if (isPrime(n)) return true\n           \
    \     if (isPrime(i)) return true\n            }\n            i += 1\n       \
    \ }\n        return false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2L to sqrt(a).toLong) {\n            if (isPrime(i)) {\n        \
    \        primes += i\n            }\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) {\n                        return true\n                 \
    \   }\n                }\n            }\n        }\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val primesMap = primes.zipWithIndex.toMap\n        val primesArray =\
    \ primes.toArray\n        def isPrime(a : Long) : Boolean = {\n            if\
    \ (a == 1) return false\n            if (a == 2) return true\n            if (a\
    \ % 2 == 0) return false\n            val limit = sqrt(a).toLong\n           \
    \ for (i <- 3 to limit by 2) {\n                if (a % i == 0) return false\n\
    \            }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (a == 1) return true\n\
    \            if (a == 2) return true\n            if (a == 3) return true\n  \
    \          if (a == 5) return true\n            if (a == 7) return true\n    \
    \        if (a == 11) return true\n            if (a == 13) return true\n    \
    \        if (a == 17) return true\n            if (a == 19) return true\n    \
    \        if (a == 23) return true\n            if (a == 29) return true\n    \
    \        if (a == 31) return true\n            if (a == 37) return true\n    \
    \        if (a == 41) return true\n            if (a == 43) return true\n    \
    \        if (a == 47) return true\n            if (a == 53) return true\n    \
    \        if (a == 59) return true\n            if (a == 61) return true\n    \
    \        if (a == 67) return true\n            if (a == 71) return true\n    \
    \        if (a == 73) return true\n            if (a == 79) return true\n    \
    \        if (a == 83) return true\n            if (a == 89) return true\n    \
    \        if (a == 97) return true\n            if (primes.isEmpty) return false\n\
    \            val p = primes.head\n            if (a % p == 0) {\n            \
    \    if (is", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = new ArrayBuffer[Long]\n        var i = 0\n        var n = a\n        while\
    \ (n > 1) {\n            if (n % primes(i) == 0) {\n                factors +=\
    \ primes(i)\n                n /= primes(i)\n            }\n            else i\
    \ += 1\n        }\n        if (factors.length == 3) true else false", "      \
    \  var b = a\n        var c = 2\n        var d = 0\n        var e = 0\n      \
    \  var f = 0\n        while (b > 1) {\n            if (b % c == 0) {\n       \
    \         b = b / c\n                if (d == 0) {\n                    d = c\n\
    \                } else if (e == 0) {\n                    e = c\n           \
    \     } else if (f == 0) {\n                    f = c\n                }\n   \
    \         } else {\n                c += 1\n            }\n        }\n       \
    \ if (d != 0 && e != 0 && f != 0) {\n            return true\n        } else {\n\
    \            return false\n        }", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        for (i <- 0 until primes.length) {\n            for (j <- i + 1\
    \ until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n            if (a % i\
    \ == 0) {\n                for (j <- primes) {\n                    if (a % j\
    \ == 0 && i != j) {\n                        for (k <- primes) {\n           \
    \                 if (a % k == 0 && i != k && j != k) {\n                    \
    \            if (a == i * j * k) return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        false", "        val primes = ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        var i = 0\n        while (i < primes.length && a % primes(i)\
    \ != 0) {\n            i += 1\n        }\n        if (i == primes.length) return\
    \ false\n        val first = primes(i)\n        var j = 0\n        while (j <\
    \ primes.length && a % primes(j) != 0) {\n            j += 1\n        }\n    \
    \    if (j == primes.length) return false\n        val second = primes(j)\n  \
    \      var k = 0\n        while (k < primes.length && a % primes(k) != 0) {\n\
    \            k += 1\n        }\n        if (k == primes.length) return false\n\
    \        val third = primes(k)\n        return a == first * second * third", " \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        def isPrime(x : Long) : Boolean = {\n   \
    \         if (x < 2) return false\n            if (x == 2) return true\n     \
    \       if (x % 2 == 0) return false\n            for (i <- 3 to sqrt(x).toInt\
    \ by 2) {\n                if (x % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2 to sqrt(a).toInt) {\n    \
    \        if (a % i == 0) {\n                if (isPrime(i) && isPrime(a / i))\
    \ {\n                    if (isPrime(a / (i * (a / i)))) return true\n       \
    \         }\n            }\n        }\n        return false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Long]\n      \
    \  var num = a\n        for (p <- primes) {\n            while (num % p == 0)\
    \ {\n                factors += p\n                num /= p\n            }\n \
    \       }\n        if (num > 1) factors += num\n        if (factors.length ==\
    \ 3) true else false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val factors = new ListBuffer[Long]\n        var i = 0\n        var n = a\n\
    \        while (n > 1) {\n            if (n % primes(i) == 0) {\n            \
    \    factors += primes(i)\n                n /= primes(i)\n            }\n   \
    \         else i += 1\n        }\n        if (factors.size == 3) true else false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val factors = new ListBuffer[Long]\n        var aa = a\n        for (prime\
    \ <- primes) {\n            while (aa % prime == 0) {\n                factors\
    \ += prime\n                aa /= prime\n            }\n        }\n        factors.length\
    \ == 3", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n   \
    \     while (i < primes.length) {\n            if (a % primes(i) == 0) {\n   \
    \             val b = a / primes(i)\n                var j = 0\n             \
    \   while (j < primes.length) {\n                    if (b % primes(j) == 0) {\n\
    \                        val c = b / primes(j)\n                        var k\
    \ = 0\n                        while (k < primes.length) {\n                 \
    \           if (c % primes(k) == 0) {\n                                val d =\
    \ c / primes(k)\n                                if (d == 1) return true\n   \
    \                         }\n                            k += 1\n            \
    \            }\n                    }\n                    j += 1\n          \
    \      }\n            }\n            i += 1\n        }\n        false", "    \
    \    val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ArrayBuffer[Long]\n\
    \        var i = 0\n        while (a > 1) {\n            if (a % primes(i) ==\
    \ 0) {\n                factors += primes(i)\n                a /= primes(i)\n\
    \            }\n            else i += 1\n        }\n        if (factors.length\
    \ == 3) true else false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val factors = new ArrayBuffer[Long]\n        var i = 0\n        var n = a\n\
    \        while (i < primes.length && n > 1) {\n            if (n % primes(i) ==\
    \ 0) {\n                factors += primes(i)\n                n /= primes(i)\n\
    \            }\n            else i += 1\n        }\n        if (n > 1) return\
    \ false\n        if (factors.length == 3) return true\n        return false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        for (i <- primes) {\n\
    \            for (j <- primes) {\n                for (k <- primes) {\n      \
    \              if (i * j * k == a) return true\n                }\n          \
    \  }\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n \
    \       for (i <- 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n \
    \       }\n        for (i <- 0 until primes.length) {\n            for (j <- i\
    \ until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        val primesSet = primes.toSet\n        def isMultiply(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (primes.isEmpty)\
    \ false\n            else if (a % primes.head == 0) {\n                if (a /\
    \ primes.head == 1) true\n                else if (primesSet.contains(a / primes.head))\
    \ true\n                else isMultiply(a / primes.head, primes)\n           \
    \ }\n            else isMultiply(a, primes.tail)\n        }\n        isMultiply(a,\
    \ primes.toList)", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val\
    \ primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length == 3",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length;\
    \ j <- i until primes.length; k <- j until primes.length) {\n            if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n        }\n        false", "    \
    \    var result = false\n        var primes = List[Long]()\n        for (i <-\
    \ 2L to a) {\n            if (isPrime(i)) {\n                primes = i :: primes\n\
    \            }\n        }\n        primes = primes.reverse\n        for (i <-\
    \ 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length - 1)\
    \ {\n                for (k <- j + 1 to primes.length - 1) {\n               \
    \     if (primes(i) * primes(j) * primes(k) == a) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        result", "        val primes = ArrayBuffer[Long]()\n        for (i <-\
    \ 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n        }\n      \
    \  for (i <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        var primes = new ArrayBuffer[Long]()\n\
    \        for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        return false", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sqrtA = sqrt(a).toInt\n\
    \        for (i <- primes) {\n            if (i > sqrtA) return false\n      \
    \      if (a % i == 0) {\n                val b = a / i\n                for (j\
    \ <- primes) {\n                    if (j > sqrt(b)) return false\n          \
    \          if (b % j == 0) {\n                        val c = b / j\n        \
    \                if (primes.contains(c)) return true\n                    }\n\
    \                }\n            }\n        }\n        false", "        var result\
    \ = false\n        var primes = List[Long]()\n        for (i <- 2L to a) {\n \
    \           if (isPrime(i)) primes = i :: primes\n        }\n        for (i <-\
    \ primes) {\n            for (j <- primes) {\n                for (k <- primes)\
    \ {\n                    if (i * j * k == a) result = true\n                }\n\
    \            }\n        }\n        result", "        val primes = ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primes2 = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  var result = false\n        for (i <- 0 until primes.length) {\n          \
    \  if (a % primes(i) == 0) {\n                for (j <- 0 until primes2.length)\
    \ {\n                    if (a % primes2(j) == 0) {\n                        for\
    \ (k <- 0 until primes.length) {\n                            if (a % primes(k)\
    \ == 0) {\n                                result = true\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        result", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        var result = false\n        for (i <- primes)\
    \ {\n            if (a % i == 0) {\n                result = true\n          \
    \      for (j <- primes) {\n                    if (a % j == 0 && i != j) {\n\
    \                        result = false\n                        for (k <- primes)\
    \ {\n                            if (a % k == 0 && i != k && j != k) {\n     \
    \                           result = true\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n        result", "        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val factors = new ArrayBuffer[Long]\n        var i = 0\n      \
    \  while (i < primes.length && a > 1) {\n            if (a % primes(i) == 0) {\n\
    \                factors += primes(i)\n                a /= primes(i)\n      \
    \      }\n            else i += 1\n        }\n        factors.length == 3", " \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n    \
    \        if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        for (i <- primes) {\n \
    \           for (j <- primes) {\n                for (k <- primes) {\n       \
    \             if (i * j * k == a) return true\n                }\n           \
    \ }\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n  \
    \      for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n       \
    \ }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        primes.exists(a % _ == 0)", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        primes.foreach(p => if (a % p == 0) {\n   \
    \         val b = a / p\n            primes.foreach(q => if (b % q == 0) {\n \
    \               val c = b / q\n                if (primes.contains(c)) return\
    \ true\n            })\n        })\n        false", "        var result = false\n\
    \        var primes = new ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n\
    \            if (isPrime(i)) {\n                primes += i\n            }\n \
    \       }\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a == 1) return false\n            if (a == 2)\
    \ return true\n            for (i <- 2 to sqrt(a).toInt) {\n                if\
    \ (a % i == 0) return false\n            }\n            return true\n        }\n\
    \        for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n    \
    \            if (isPrime(i) && isPrime(a / i)) {\n                    for (j <-\
    \ 2 to sqrt(a / i).toInt) {\n                        if ((a / i) % j == 0) {\n\
    \                            if (isPrime(j) && isPrime((a / i) / j)) return true\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        val primesSet = primes.toSet\n        for (i <- primes) {\n   \
    \         for (j <- primes) {\n                for (k <- primes) {\n         \
    \           if (i * j * k == a) return true\n                }\n            }\n\
    \        }\n        false", "        var result = false\n        val primes =\
    \ getPrimes(a)\n        for (i <- 0 until primes.length) {\n            for (j\
    \ <- i + 1 until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n     \
    \                   result = true\n                        return result\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n      \
    \  }\n        val primes2 = primes.toArray\n        for (i <- 0 until primes2.length)\
    \ {\n            for (j <- i + 1 until primes2.length) {\n                for\
    \ (k <- j + 1 until primes2.length) {\n                    if (primes2(i) * primes2(j)\
    \ * primes2(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- primes) {\n            if (a % i == 0) {\n                for (j <- primes)\
    \ {\n                    if (a % j == 0 && i != j) {\n                       \
    \ for (k <- primes) {\n                            if (a % k == 0 && i != k &&\
    \ j != k) {\n                                if (a == i * j * k) return true\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        false", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        val primeFactors = ArrayBuffer[Long]()\n\
    \        for (i <- primes) {\n            if (a % i == 0) primeFactors += i\n\
    \        }\n        if (primeFactors.length == 3) true else false", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2L to sqrt(a).toLong) {\n            if (a % i == 0) {\n        \
    \        if (isPrime(i)) primes += i\n                if (isPrime(a / i)) primes\
    \ += a / i\n            }\n        }\n        primes.size == 3", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        for (i <- primes) {\n\
    \            for (j <- primes) {\n                for (k <- primes) {\n      \
    \              if (i * j * k == a) return true\n                }\n          \
    \  }\n        }\n        false", "        var primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        var primes2 = primes.filter(x => a % x == 0)\n        var primes3 = primes2.filter(x\
    \ => primes2.contains(a / x))\n        if (primes3.length == 3) true else false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n < 2) false\n            else if (n == 2) true\n            else !(2 to (sqrt(n).toInt\
    \ + 1)).exists(x => n % x == 0)\n        }\n        val primes = (2 to 100).filter(isPrime(_))\n\
    \        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        if (a == 1) return false\n        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        val primes2 = primes.clone\n        for (p <-\
    \ primes) {\n            if (a % p == 0) {\n                val b = a / p\n  \
    \              for (p2 <- primes2) {\n                    if (b % p2 == 0) {\n\
    \                        val c = b / p2\n                        if (isPrime(c))\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeFactors = new ArrayBuffer[Int]\n        var aa = a\n        for (i\
    \ <- 0 until primes.length) {\n            while (aa % primes(i) == 0) {\n   \
    \             primeFactors += primes(i)\n                aa /= primes(i)\n   \
    \         }\n        }\n        if (aa != 1) return false\n        if (primeFactors.length\
    \ != 3) return false\n        return true", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        var i = 0\n        while (i < primes.length) {\n          \
    \  if (a % primes(i) == 0) {\n                val b = a / primes(i)\n        \
    \        var j = 0\n                while (j < primes.length) {\n            \
    \        if (b % primes(j) == 0) {\n                        val c = b / primes(j)\n\
    \                        var k = 0\n                        while (k < primes.length)\
    \ {\n                            if (c % primes(k) == 0) {\n                 \
    \               if (c / primes(k) == 1) return true\n                        \
    \    }\n                            k += 1\n                        }\n      \
    \              }\n                    j += 1\n                }\n            }\n\
    \            i += 1\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        var b = a\n        var i = 0\n        while\
    \ (b != 1 && i < primes.length) {\n            if (b % primes(i) == 0) {\n   \
    \             b /= primes(i)\n            } else {\n                i += 1\n \
    \           }\n        }\n        b == 1", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        false", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n         \
    \   if (a % i == 0) {\n                for (j <- primes) {\n                 \
    \   if (i != j && a % j == 0) {\n                        for (k <- primes) {\n\
    \                            if (i != k && j != k && a % k == 0) {\n         \
    \                       if (a == i * j * k) return true\n                    \
    \        }\n                        }\n                    }\n               \
    \ }\n            }\n        }\n        false", "        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a == 1) return false\n            if (a == 2)\
    \ return true\n            if (a % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0) return false\n \
    \           }\n            return true\n        }\n        for (i <- 2 to sqrt(a).toInt)\
    \ {\n            if (a % i == 0) {\n                if (isPrime(i) && isPrime(a\
    \ / i)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        for (i <- primes) {\n            if (a % i == 0) {\n          \
    \      for (j <- primes) {\n                    if (a % j == 0 && i != j) {\n\
    \                        for (k <- primes) {\n                            if (a\
    \ % k == 0 && i != k && j != k) {\n                                if (a == i\
    \ * j * k) return true\n                            }\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     false", "        def isPrime(a : Long) : Boolean = {\n            if (a\
    \ == 1) false\n            else if (a < 4) true\n            else if (a % 2 ==\
    \ 0) false\n            else if (a < 9) true\n            else if (a % 3 == 0)\
    \ false\n            else {\n                val r = floor(sqrt(a)).toLong\n \
    \               var f = 5L\n                while (f <= r) {\n               \
    \     if (a % f == 0) return false\n                    if (a % (f + 2) == 0)\
    \ return false\n                    f += 6\n                }\n              \
    \  true\n            }\n        }\n        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 1L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val\
    \ primesSet2 = primesSet.map(x => x * x)\n        val primesSet3 = primesSet.map(x\
    \ => x * x * x)\n        if (primesSet.contains(a)) return true\n        for (i\
    \ <- primesSet) {\n            if (a % i == 0) {\n                if (primesSet2.contains(a\
    \ / i)) return true\n                if (primesSet3.contains(a / i)) return true\n\
    \            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primeSet = primes.toSet\n        val primeList\
    \ = primes.toList\n        def isPrime(a : Long) : Boolean = {\n            if\
    \ (a < 2) return false\n            if (a == 2) return true\n            if (a\
    \ % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt by 2) {\n \
    \               if (a % i == 0) return false\n            }\n            return\
    \ true\n        }\n        def isMultiplyPrime(a : Long, primes : List[Long])\
    \ : Boolean = {\n            if (a == 1) return true\n            if (primes.isEmpty)\
    \ return false\n            val p = primes.head\n            if (a % p == 0) return\
    \ isMultiplyPrime(a / p, primes)\n            else return isMultiplyPrime(a, primes.tail)\n\
    \        }\n        return isMultiplyPrime(a, primeList)", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n == 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        if (a == 1)\
    \ return false\n        if (a == 2) return true\n        if (a % 2 == 0) return\
    \ false\n        for (i <- 3 to sqrt(a).toInt by 2) {\n            if (a % i ==\
    \ 0) {\n                if (isPrime(i) && isPrime(a / i)) return true\n      \
    \      }\n        }\n        return false", "        var result = false\n    \
    \    for (i <- 2L to a) {\n            if (a % i == 0) {\n                var\
    \ b = a / i\n                for (j <- 2L to b) {\n                    if (b %\
    \ j == 0) {\n                        var c = b / j\n                        if\
    \ (isPrime(i) && isPrime(j) && isPrime(c)) {\n                            result\
    \ = true\n                        }\n                    }\n                }\n\
    \            }\n        }\n        result", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- primes; j <- primes; k <- primes) {\n           \
    \ if (i * j * k == a) return true\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n            if (a % i\
    \ == 0) {\n                for (j <- primes) {\n                    if (a % j\
    \ == 0 && i != j) {\n                        for (k <- primes) {\n           \
    \                 if (a % k == 0 && i != k && j != k) {\n                    \
    \            if (a == i * j * k) return true\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        var i = 2L\n        while (i <= a) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                if (a % i == 0) {\n            \
    \        val b = a / i\n                    if (isPrime(b)) {\n              \
    \          val c = b / i\n                        if (isPrime(c)) {\n        \
    \                    return true\n                        }\n                \
    \    }\n                }\n            }\n            i += 1\n        }\n    \
    \    false", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to\
    \ a.toInt) {\n            if (isPrime(i)) primes += i\n        }\n        val\
    \ primes2 = primes.map(x => x * x)\n        val primes3 = primes.map(x => x *\
    \ x * x)\n        val primes4 = primes.map(x => x * x * x * x)\n        val primes5\
    \ = primes.map(x => x * x * x * x * x)\n        val primes6 = primes.map(x =>\
    \ x * x * x * x * x * x)\n        val primes7 = primes.map(x => x * x * x * x\
    \ * x * x * x)\n        val primes8 = primes.map(x => x * x * x * x * x * x *\
    \ x * x)\n        val primes9 = primes.map(x => x * x * x * x * x * x * x * x\
    \ * x)\n        val primes10 = primes.map(x => x * x * x * x * x * x * x * x *\
    \ x * x)\n        val primes11 = primes.map(x => x * x * x * x * x * x * x * x\
    \ * x * x * x)\n        val primes12 = primes.map(x => x * x * x * x * x * x *\
    \ x * x * x * x * x * x)\n        val primes13 = primes.map(x => x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x)\n        val primes14 = primes.map(x =>\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x)\n        val primes15\
    \ = primes.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x)\n\
    \        val primes16 = primes.map(x => x * x * x * x * x * x * x * x * x * x\
    \ * x *", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        if (a == 1) return false\n        var b =\
    \ a\n        var c = 2\n        while (b != 1) {\n            if (b % c == 0)\
    \ {\n                if (c == 2 || c == 3 || c == 5 || c == 7 || c == 11 || c\
    \ == 13 || c == 17 || c == 19 || c == 23 || c == 29 || c == 31 || c == 37 || c\
    \ == 41 || c == 43 || c == 47 || c == 53 || c == 59 || c == 61 || c == 67 || c\
    \ == 71 || c == 73 || c == 79 || c == 83 || c == 89 || c == 97) {\n          \
    \          b /= c\n                } else {\n                    return false\n\
    \                }\n            } else {\n                c += 1\n           \
    \ }\n        }\n        return true", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i +\
    \ 1 until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Long]\n      \
    \  var n = a\n        var i = 0\n        while (n != 1) {\n            if (n %\
    \ primes(i) == 0) {\n                factors += primes(i)\n                n /=\
    \ primes(i)\n            }\n            else i += 1\n        }\n        factors.length\
    \ == 3", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val factors = new ArrayBuffer[Long]\n        var i = 0\n        while (i\
    \ < primes.length && a > 1) {\n            if (a % primes(i) == 0) {\n       \
    \         factors += primes(i)\n                a /= primes(i)\n            }\n\
    \            else i += 1\n        }\n        if (a > 1) factors += a\n       \
    \ if (factors.length == 3) true\n        else false", "        if (a == 1) return\
    \ false\n        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- primes)\
    \ {\n            for (j <- primes) {\n                for (k <- primes) {\n  \
    \                  if (i * j * k == a) return true\n                }\n      \
    \      }\n        }\n        return false", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n < 2) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2 to sqrt(a).toInt) {\n    \
    \        if (a % i == 0) {\n                if (isPrime(i) && isPrime(a / i))\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n        return false", "        val primes = ArrayBuffer[Long]()\n    \
    \    for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = ArrayBuffer[Long]()\n        var temp\
    \ = a\n        for (i <- 0 until primes.length) {\n            while (temp % primes(i)\
    \ == 0) {\n                factors += primes(i)\n                temp /= primes(i)\n\
    \            }\n        }\n        if (factors.length == 3) true else false",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val primesMap = primes.zipWithIndex.toMap\n        def isPrime(a : Long)\
    \ : Boolean = primesSet.contains(a)\n        def isMultiplyPrime(a : Long, primes\
    \ : List[Long]) : Boolean = {\n            if (a == 1) true\n            else\
    \ if (isPrime(a)) true\n            else {\n                val prime = primes.head\n\
    \                if (a % prime == 0) isMultiplyPrime(a / prime, primes)\n    \
    \            else isMultiplyPrime(a, primes.tail)\n            }\n        }\n\
    \        isMultiplyPrime(a, primes)", "        var prime = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        var primeSet = Set(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n\
    \        for (i <- 0 to prime.length - 1) {\n            if (a % prime(i) == 0)\
    \ {\n                var b = a / prime(i)\n                if (primeSet.contains(b))\
    \ {\n                    result = true\n                }\n            }\n   \
    \     }\n        result", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n      \
    \      for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        var primes\
    \ = new ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        var result = false\n        for (i <- 0 until\
    \ primes.length; j <- i + 1 until primes.length; k <- j + 1 until primes.length)\
    \ {\n            if (primes(i) * primes(j) * primes(k) == a) result = true\n \
    \       }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        var b = a\n        var c = 2\n\
    \        while (b > 1) {\n            while (b % c == 0) {\n                b\
    \ /= c\n                if (b == 1) return true\n            }\n            c\
    \ += 1\n        }\n        false", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n\
    \        }\n        val primes2 = primes.map(x => x * x)\n        val primes3\
    \ = primes.map(x => x * x * x)\n        val primes4 = primes.map(x => x * x *\
    \ x * x)\n        val primes5 = primes.map(x => x * x * x * x * x)\n        val\
    \ primes6 = primes.map(x => x * x * x * x * x * x)\n        val primes7 = primes.map(x\
    \ => x * x * x * x * x * x * x)\n        val primes8 = primes.map(x => x * x *\
    \ x * x * x * x * x * x)\n        val primes9 = primes.map(x => x * x * x * x\
    \ * x * x * x * x * x)\n        val primes10 = primes.map(x => x * x * x * x *\
    \ x * x * x * x * x * x)\n        val primes11 = primes.map(x => x * x * x * x\
    \ * x * x * x * x * x * x * x)\n        val primes12 = primes.map(x => x * x *\
    \ x * x * x * x * x * x * x * x * x * x)\n        val primes13 = primes.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x)\n        val primes14\
    \ = primes.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x)\n \
    \       val primes15 = primes.map(x => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x)\n        val primes16 = primes.map(x => x * x * x * x * x\
    \ * x * x * x * x * x * x *", "        val primes = Array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val factors = ArrayBuffer[Long]()\n        var i = 0\n        var aa\
    \ = a\n        while (aa > 1) {\n            if (aa % primes(i) == 0) {\n    \
    \            factors += primes(i)\n                aa /= primes(i)\n         \
    \   }\n            else i += 1\n        }\n        if (factors.length == 3) true\
    \ else false", "        var result = false\n        var primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                        return result\n\
    \                    }\n                }\n            }\n        }\n        result",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = ArrayBuffer[Long]()\n        for (i <-\
    \ 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n        }\n      \
    \  for (i <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            val\
    \ limit = sqrt(n).toLong\n            for (i <- 3 to limit by 2) {\n         \
    \       if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        def isMultiplyPrime(a : Long, primes : Array[Long]) : Boolean\
    \ = {\n            if (a == 1) return true\n            for (i <- 0 until primes.length)\
    \ {\n                if (a % primes(i) == 0) {\n                    if (isMultiplyPrime(a\
    \ / primes(i), primes)) return true\n                }\n            }\n      \
    \      return false\n        }\n        isMultiplyPrime(a, primes)", "       \
    \ var result = false\n        var primes = new ArrayBuffer[Long]()\n        var\
    \ i = 2\n        while (i <= a) {\n            if (isPrime(i)) {\n           \
    \     primes += i\n                if (a % i == 0) {\n                    result\
    \ = true\n                    a /= i\n                }\n            }\n     \
    \       i += 1\n        }\n        result && primes.length == 3", "        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n     \
    \   val primeList = primes.toList\n        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 1) false\n            else if (n < 4) true\n           \
    \ else if (n % 2 == 0) false\n            else if (n < 9) true\n            else\
    \ if (n % 3 == 0) false\n            else {\n                val r = floor(sqrt(n)).toInt\n\
    \                var f = 5\n                while (f <= r) {\n               \
    \     if (n % f == 0) return false\n                    if (n % (f + 2) == 0)\
    \ return false\n                    f += 6\n                }\n              \
    \  true\n            }\n        }\n        def isMultiplyPrime(a : Long, primes\
    \ : List[Int]) : Boolean = {\n            if (primes.isEmpty) false\n        \
    \    else if (a == 1) true\n            else if (a % primes.head == 0) isMultiplyPrime(a\
    \ / primes.head, primes)\n            else isMultiplyPrime(a, primes.tail)\n \
    \       }\n        isMultiplyPrime(a, primeList)", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n           \
    \     if (isPrime(i) && isPrime(a / i)) {\n                    return true\n \
    \               }\n            }\n        }\n        return false", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val primesMap = primes.zipWithIndex.toMap\n        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a < 2) return false\n            if (a == 2)\
    \ return true\n            if (a % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0) return false\n \
    \           }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (a == 1) return true\n\
    \            if (primes.isEmpty) return false\n            if (a % primes.head\
    \ == 0) return isMultiplyPrime(a / primes.head, primes)\n            return isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        return isMultiplyPrime(a, primes)", "     \
    \   val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n        \
    \    if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- 0 until primes.length) {\n            for (j <- i until primes.length) {\n\
    \                for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "      val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      val\
    \ primeFactors = primes.filter(p => a % p == 0)\n      if (primeFactors.length\
    \ == 3) true else false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        if (a == 1) return false\n \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        return false", "        var primes = new ArrayBuffer[Long]()\n\
    \        for (i <- 2 to a.toInt) {\n            if (isPrime(i)) primes += i\n\
    \        }\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       var result = false\n        var primes = new ArrayBuffer[Long]()\n   \
    \     var i = 2\n        while (i <= a) {\n            if (isPrime(i)) {\n   \
    \             primes += i\n                if (a % i == 0) {\n               \
    \     a /= i\n                    if (a == 1) result = true\n                }\n\
    \            }\n            i += 1\n        }\n        result", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to a.toInt) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        def isPrime(a : Long) : Boolean = {\n   \
    \         if (a == 1) return false\n            if (a == 2) return true\n    \
    \        if (a % 2 == 0) return false\n            val sqrt = sqrt(a).toLong\n\
    \            for (i <- 3 to sqrt by 2) {\n                if (a % i == 0) return\
    \ false\n            }\n            return true\n        }\n        if (a == 1)\
    \ return false\n        if (a == 2) return true\n        if (a % 2 == 0) return\
    \ false\n        val sqrt = sqrt(a).toLong\n        for (i <- 3 to sqrt by 2)\
    \ {\n            if (a % i == 0) {\n                if (isPrime(i) && isPrime(a\
    \ / i)) return true\n            }\n        }\n        return false", "      \
    \  def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            for (i <- 2L to sqrt(n).toLong)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        for (i <- 2L to sqrt(a).toLong) {\n        \
    \    if (a % i == 0) {\n                val b = a / i\n                if (isPrime(i)\
    \ && isPrime(b)) return true\n            }\n        }\n        return false",
  "        if (a == 1) return false\n        var b = a\n        var c = 2\n      \
    \  while (b != 1) {\n            if (b % c == 0) {\n                b /= c\n \
    \               if (isPrime(c)) {\n                    if (isPrime(b)) return\
    \ true\n                }\n                else return false\n            }\n\
    \            else c += 1\n        }\n        return false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        var result\
    \ = false\n        var primeList = List[Long]()\n        for (i <- 2 to 100) {\n\
    \            if (isPrime(i)) {\n                primeList = i :: primeList\n \
    \           }\n        }\n        for (i <- primeList) {\n            for (j <-\
    \ primeList) {\n                for (k <- primeList) {\n                    if\
    \ (i * j * k == a) {\n                        result = true\n                \
    \    }\n                }\n            }\n        }\n        return result", " \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n    \
    \        if (isPrime(i)) primes += i\n        }\n        val factors = ArrayBuffer[Long]()\n\
    \        for (i <- primes) {\n            if (a % i == 0) factors += i\n     \
    \   }\n        if (factors.size == 3) true else false", "        val primes =\
    \ Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val primesList\
    \ = primes.toList\n        val primesListLength = primesList.length\n        def\
    \ isPrime(a : Long) : Boolean = {\n            if (a == 1) return false\n    \
    \        if (a == 2) return true\n            if (a % 2 == 0) return false\n \
    \           val limit = sqrt(a).toInt\n            for (i <- 3 to limit by 2)\
    \ {\n                if (a % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def findPrime(a : Long) : Long = {\n       \
    \     if (a == 1) return 1\n            if (a == 2) return 2\n            if (a\
    \ % 2 == 0) return 2\n            val limit = sqrt(a).toInt\n            for (i\
    \ <- 3 to limit by 2) {\n                if (a % i == 0) return i\n          \
    \  }\n            return a\n        }\n        def findPrime2(a : Long) : Long\
    \ = {\n            if (a == 1) return 1\n            if (a == 2) return 2\n  \
    \          if (a % 2 == 0) return 2\n            val limit = sqrt(a).toInt\n \
    \           for (i <- 3 to limit by 2) {\n                if (a % i == 0) return\
    \ i\n            }\n            return a\n        }\n        def findPrime3(a\
    \ : Long) : Long = {\n            if (a == 1) return 1\n            if (a == 2)\
    \ return 2\n            if (a % 2 == 0) return 2\n            val limit = sqrt(a).toInt\n\
    \            for (i <- 3 to limit by 2) {\n                if (a % i == 0) return\
    \ i\n            }\n            return a\n        }\n        def findPrime4(a\
    \ : Long) : Long = {\n            if (a == 1) return 1\n            if (a == 2)\
    \ return 2\n            if (a % 2 ==", "        val primes = ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        var result = false\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) {\n                        result = true\n                    }\n    \
    \            }\n            }\n        }\n        result", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primeNumbers = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeNumbersSet\
    \ = primeNumbers.toSet\n        val primeNumbersList = primeNumbers.toList\n \
    \       def isPrime(a : Long) : Boolean = {\n            if (a == 1) return false\n\
    \            if (a == 2) return true\n            for (i <- 2 to sqrt(a).toInt)\
    \ {\n                if (a % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def isMultiplyPrime(a : Long, primeNumbers :\
    \ List[Int]) : Boolean = {\n            if (primeNumbers.isEmpty) return false\n\
    \            if (a == 1) return true\n            if (a % primeNumbers.head ==\
    \ 0) {\n                if (isMultiplyPrime(a / primeNumbers.head, primeNumbers))\
    \ return true\n            }\n            return isMultiplyPrime(a, primeNumbers.tail)\n\
    \        }\n        return isMultiplyPrime(a, primeNumbersList)", "        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = new ArrayBuffer[Int]\n\
    \        var b = a\n        for (i <- 0 until primes.length) {\n            while\
    \ (b % primes(i) == 0) {\n                primeFactors += primes(i)\n        \
    \        b /= primes(i)\n            }\n        }\n        if (b != 1) {\n   \
    \         return false\n        }\n        if (primeFactors.length != 3) {\n \
    \           return false\n        }\n        return true", "        val primes\
    \ = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes2 = ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primes3 = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i\
    \ <- 0 until primes.length) {\n            if (a % primes(i) == 0) {\n       \
    \         for (j <- 0 until primes2.length) {\n                    if (a / primes(i)\
    \ % primes2(j) == 0) {\n                        for (k <- 0 until primes3.length)\
    \ {\n                            if (a / primes(i) / primes2(j) % primes3(k) ==\
    \ 0) {\n                                return true\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length) {\n  \
    \          if (a % primes(i) == 0) {\n                var b = a / primes(i)\n\
    \                var j = 0\n                while (j < primes.length) {\n    \
    \                if (b % primes(j) == 0) {\n                        var c = b\
    \ / primes(j)\n                        var k = 0\n                        while\
    \ (k < primes.length) {\n                            if (c % primes(k) == 0) {\n\
    \                                if (c / primes(k) == 1) return true\n       \
    \                     }\n                            k += 1\n                \
    \        }\n                    }\n                    j += 1\n              \
    \  }\n            }\n            i += 1\n        }\n        false", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n    \
    \    val primesMap = primes.zipWithIndex.toMap\n        val primesArray = primes.toArray\n\
    \        val primesArrayLength = primesArray.length\n        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a == 1) return false\n            if (a == 2)\
    \ return true\n            if (a % 2 == 0) return false\n            val sqrt\
    \ = sqrt(a).toLong\n            for (i <- 3 to sqrt by 2) {\n                if\
    \ (a % i == 0) return false\n            }\n            return true\n        }\n\
    \        def isMultiplyPrime(a : Long, primes : Array[Int], primesLength : Int)\
    \ : Boolean = {\n            if (a == 1) return true\n            if (a == 2)\
    \ return true\n            if (a == 3) return true\n            if (a == 5) return\
    \ true\n            if (a == 7) return true\n            if (a == 11) return true\n\
    \            if (a == 13) return true\n            if (a == 17) return true\n\
    \            if (a == 19) return true\n            if (a == 23) return true\n\
    \            if (a == 29) return true\n            if (a == 31) return true\n\
    \            if (a == 37) return true\n            if (a == 41) return true\n\
    \            if (a == 43) return true\n            if (a == 47) return true\n\
    \            if (a == 53) return true\n            if (a == 59) return true\n\
    \            if (a == 61) return true\n            if (a == 67) return true\n\
    \            if (a == 71) return true\n            if (a == 73) return true\n\
    \            if (a == 79) return true\n            if (a == 83) return true\n\
    \            if (a == 89) return true\n            if (a == 97) return true\n\
    \            if (a % 2 == 0) return isMultiplyPrime", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n    \
    \    }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet\
    \ = primes.toSet\n        val factors = new ListBuffer[Long]\n        for (i <-\
    \ primes) {\n            if (a % i == 0) {\n                factors += i\n   \
    \             if (factors.size == 3) return true\n            }\n        }\n \
    \       false", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2L\
    \ to a) {\n            if (isPrime(i)) {\n                primes += i\n      \
    \      }\n        }\n        for (i <- 0 until primes.length) {\n            for\
    \ (j <- i + 1 until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n     \
    \                   return true\n                    }\n                }\n  \
    \          }\n        }\n        return false", "        var i = 2\n        var\
    \ b = a\n        var c = 0\n        while (i <= sqrt(a)) {\n            if (b\
    \ % i == 0) {\n                b /= i\n                c += 1\n            }\n\
    \            else i += 1\n        }\n        if (b != 1) c += 1\n        if (c\
    \ == 3) true else false", "        var primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  var i = 0\n        while (i < primes.length) {\n            if (a % primes(i)\
    \ == 0) {\n                var b = a / primes(i)\n                var j = 0\n\
    \                while (j < primes.length) {\n                    if (b % primes(j)\
    \ == 0) {\n                        var c = b / primes(j)\n                   \
    \     var k = 0\n                        while (k < primes.length) {\n       \
    \                     if (c % primes(k) == 0) {\n                            \
    \    return true\n                            }\n                            k\
    \ += 1\n                        }\n                    }\n                   \
    \ j += 1\n                }\n            }\n            i += 1\n        }\n  \
    \      return false", "        var b = a\n        var c = 0\n        while (b\
    \ % 2 == 0) {\n            b /= 2\n            c += 1\n        }\n        if (c\
    \ >= 3) return true\n        var i = 3\n        while (i <= sqrt(b)) {\n     \
    \       c = 0\n            while (b % i == 0) {\n                b /= i\n    \
    \            c += 1\n            }\n            if (c >= 3) return true\n    \
    \        i += 2\n        }\n        if (b >= 2 && b <= 100) return true\n    \
    \    return false", "        var result = false\n        var prime = 2\n     \
    \   while (prime < a) {\n            if (a % prime == 0) {\n                var\
    \ b = a / prime\n                var prime2 = 2\n                while (prime2\
    \ < b) {\n                    if (b % prime2 == 0) {\n                       \
    \ var c = b / prime2\n                        if (isPrime(c)) {\n            \
    \                result = true\n                            prime = a\n      \
    \                      prime2 = b\n                        }\n               \
    \     }\n                    prime2 += 1\n                }\n            }\n \
    \           prime += 1\n        }\n        result", "        var result = false\n\
    \        for (i <- 2 to 100) {\n            if (a % i == 0) {\n              \
    \  if (isPrime(i)) {\n                    for (j <- 2 to 100) {\n            \
    \            if (a % j == 0) {\n                            if (isPrime(j)) {\n\
    \                                for (k <- 2 to 100) {\n                     \
    \               if (a % k == 0) {\n                                        if\
    \ (isPrime(k)) {\n                                            if (i * j * k ==\
    \ a) {\n                                                result = true\n      \
    \                                      }\n                                   \
    \     }\n                                    }\n                             \
    \   }\n                            }\n                        }\n            \
    \        }\n                }\n            }\n        }\n        result", "  \
    \      val primes = ArrayBuffer[Long]()\n        for (i <- 2 to sqrt(a).toInt)\
    \ {\n            if (a % i == 0) {\n                if (isPrime(i)) primes +=\
    \ i\n                if (isPrime(a / i)) primes += a / i\n            }\n    \
    \    }\n        primes.length == 3", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        for (i <- 0 until primes.length) {\n            for (j <- i + 1\
    \ until primes.length) {\n                for (k <- j + 1 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n == 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ val sqrt = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n       \
    \         if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean\
    \ = {\n            if (primes.isEmpty) return false\n            val p = primes.head\n\
    \            if (a % p == 0) {\n                if (isPrime(a / p)) return true\n\
    \                else return isMultiplyPrime(a / p, primes)\n            }\n \
    \           else return isMultiplyPrime(a, primes.tail)\n        }\n        return\
    \ isMultiplyPrime(a, primes)", "        val primes = ArrayBuffer[Long]()\n   \
    \     for (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n       \
    \ }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        if (a == 1)\
    \ return false\n        val primes = ArrayBuffer[Long]()\n        for (i <- 2\
    \ to a.toInt) {\n            if (isPrime(i)) primes += i\n        }\n        for\
    \ (i <- primes) {\n            for (j <- primes) {\n                for (k <-\
    \ primes) {\n                    if (i * j * k == a) return true\n           \
    \     }\n            }\n        }\n        return false", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2L to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        for (i <- 0 until primes.length) {\n       \
    \     for (j <- i + 1 until primes.length) {\n                for (k <- j + 1\
    \ until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3L to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ math.sqrt(a).toLong\n        for (i <- 2L to sqrt) {\n            if (a % i\
    \ == 0) {\n                val b = a / i\n                if (isPrime(i) && isPrime(b))\
    \ return true\n            }\n        }\n        return false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length)\
    \ {\n            if (a % primes(i) == 0) {\n                val b = a / primes(i)\n\
    \                var j = 0\n                while (j < primes.length) {\n    \
    \                if (b % primes(j) == 0) {\n                        val c = b\
    \ / primes(j)\n                        var k = 0\n                        while\
    \ (k < primes.length) {\n                            if (c % primes(k) == 0) {\n\
    \                                if (c / primes(k) == 1) return true\n       \
    \                     }\n                            k += 1\n                \
    \        }\n                    }\n                    j += 1\n              \
    \  }\n            }\n            i += 1\n        }\n        false", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ArrayBuffer[Long]\n\
    \        var n = a\n        for (i <- primes) {\n            while (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \     }\n        factors.length == 3", "        if (a == 1) return false\n   \
    \     if (a == 2) return true\n        if (a % 2 == 0) return false\n        if\
    \ (a % 3 == 0) return false\n        if (a % 5 == 0) return false\n        if\
    \ (a % 7 == 0) return false\n        if (a % 11 == 0) return false\n        if\
    \ (a % 13 == 0) return false\n        if (a % 17 == 0) return false\n        if\
    \ (a % 19 == 0) return false\n        if (a % 23 == 0) return false\n        if\
    \ (a % 29 == 0) return false\n        if (a % 31 == 0) return false\n        if\
    \ (a % 37 == 0) return false\n        if (a % 41 == 0) return false\n        if\
    \ (a % 43 == 0) return false\n        if (a % 47 == 0) return false\n        if\
    \ (a % 53 == 0) return false\n        if (a % 59 == 0) return false\n        if\
    \ (a % 61 == 0) return false\n        if (a % 67 == 0) return false\n        if\
    \ (a % 71 == 0) return false\n        if (a % 73 == 0) return false\n        if\
    \ (a % 79 == 0) return false\n        if (a % 83 == 0) return false\n        if\
    \ (a % 89 == 0) return false\n        if (a % 97 == 0) return false\n        return\
    \ true", '        // Write your code here', "        val primes = Array(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        var i = 0\n        while (i < primes.length) {\n      \
    \      if (a % primes(i) == 0) {\n                val b = a / primes(i)\n    \
    \            var j = 0\n                while (j < primes.length) {\n        \
    \            if (b % primes(j) == 0) {\n                        val c = b / primes(j)\n\
    \                        var k = 0\n                        while (k < primes.length)\
    \ {\n                            if (c % primes(k) == 0) {\n                 \
    \               val d = c / primes(k)\n                                if (d ==\
    \ 1) return true\n                            }\n                            k\
    \ += 1\n                        }\n                    }\n                   \
    \ j += 1\n                }\n            }\n            i += 1\n        }\n  \
    \      false", "        val primes = ArrayBuffer[Long]()\n        var n = a\n\
    \        for (i <- 2 to sqrt(a).toInt) {\n            while (n % i == 0) {\n \
    \               primes += i\n                n /= i\n            }\n        }\n\
    \        if (n > 1) primes += n\n        if (primes.length == 3) true else false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n\
    \        def isPrime(a : Long) : Boolean = {\n            if (a <= 1) return false\n\
    \            if (a == 2) return true\n            if (a % 2 == 0) return false\n\
    \            val upper = sqrt(a).toLong\n            for (i <- 3 to upper by 2)\
    \ {\n                if (a % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def isMultiplyPrime(a : Long, primes : List[Long])\
    \ : Boolean = {\n            if (primes.isEmpty) return false\n            val\
    \ prime = primes.head\n            if (a % prime == 0) {\n                val\
    \ b = a / prime\n                if (isPrime(b)) return true\n               \
    \ else return isMultiplyPrime(b, primes)\n            }\n            else return\
    \ isMultiplyPrime(a, primes.tail)\n        }\n        return isMultiplyPrime(a,\
    \ primes)", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet\
    \ = primes.toSet\n        val primeFactors = primes.filter(a % _ == 0)\n     \
    \   if (primeFactors.length == 3) {\n            val product = primeFactors.foldLeft(1L)(_\
    \ * _)\n            if (product == a) true else false\n        } else false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeSet = primes.toSet\n\
    \        def isPrime(a : Long) : Boolean = {\n            if (a < 2) return false\n\
    \            if (a == 2) return true\n            if (a % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean = {\n         \
    \   if (a == 1) return true\n            if (primes.isEmpty) return false\n  \
    \          if (a % primes.head == 0) return isMultiplyPrime(a / primes.head, primes)\n\
    \            return isMultiplyPrime(a, primes.tail)\n        }\n        return\
    \ isMultiplyPrime(a, primes)", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val factors = primes.filter(a % _ == 0)\n        factors.size == 3",
  "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to sqrt(a).toInt)\
    \ {\n            if (a % i == 0) {\n                primes += i\n            \
    \    if (isPrime(a / i)) primes += a / i\n            }\n        }\n        primes.length\
    \ == 3", "        def isPrime(n : Long) : Boolean = {\n            if (n == 1)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        for (i <- 2 to sqrt(a).toInt) {\n            if (a % i ==\
    \ 0) {\n                if (isPrime(i) && isPrime(a / i)) {\n                \
    \    return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = ArrayBuffer[Long]()\n        for (i <- 2 to 100)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i + 1 until primes.length) {\n     \
    \           for (k <- j + 1 until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2L to a) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        val primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n\
    \        for (i <- 0 until primesSetSize) {\n            for (j <- i until primesSetSize)\
    \ {\n                for (k <- j until primesSetSize) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false", "        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j <- i\
    \ until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length)\
    \ {\n            if (a % primes(i) == 0) {\n                val b = a / primes(i)\n\
    \                if (primes.contains(b)) return true\n                var j =\
    \ 0\n                while (j < primes.length) {\n                    if (b %\
    \ primes(j) == 0) {\n                        val c = b / primes(j)\n         \
    \               if (primes.contains(c)) return true\n                    }\n \
    \                   j += 1\n                }\n            }\n            i +=\
    \ 1\n        }\n        false", "        val primes = Array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i until primes.length)\
    \ {\n                for (k <- j until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) return true\n                }\n  \
    \          }\n        }\n        false"]
stop_tokens:
- "\n    }\n"
