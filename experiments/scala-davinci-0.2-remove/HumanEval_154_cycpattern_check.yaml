name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n    def cycpatternCheck(a :\
  \ String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        val b2 = b + b\n        return b2.contains(a)", "        val\
    \ bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val\
    \ bs2 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val c = bs(0)\n         \
    \   for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n  \
    \          }\n            bs(bs.length - 1) = c\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            var j = 0\n       \
    \     while (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return\
    \ true\n        }\n        false", "        val bs = b + b\n        return bs.contains(a)",
  "        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        if (n < m) return false\n        val bb = b +\
    \ b\n        for (i <- 0 until n - m + 1) {\n            var j = 0\n         \
    \   while (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return\
    \ true\n        }\n        false", "        val bs = b.toCharArray\n        for\
    \ (i <- 0 until bs.length) {\n            val bs2 = bs.slice(i, bs.length) ++\
    \ bs.slice(0, i)\n            if (a.contains(bs2.mkString)) return true\n    \
    \    }\n        return false", "        val bs = b.toCharArray\n        for (i\
    \ <- 0 until bs.length) {\n            val bs2 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs2.mkString)) return true\n        }\n     \
    \   return false", "        if (a.length != b.length) return false\n        val\
    \ bb = b + b\n        return bb.contains(a)", "        val bb = b + b\n      \
    \  bb.contains(a)", "        if (a.length != b.length) return false\n        val\
    \ b2 = b + b\n        return b2.contains(a)", "        var b2 = b + b\n      \
    \  return b2.contains(a)", "        val bb = b + b\n        bb.contains(a)", " \
    \       val bb = b + b\n        return bb.contains(a)", "        val bs = b.toCharArray\n\
    \        val as = a.toCharArray\n        val n = bs.length\n        val m = as.length\n\
    \        val bmap = new HashMap[Char, Int]\n        val amap = new HashMap[Char,\
    \ Int]\n        for (i <- 0 until n) {\n            if (bmap.contains(bs(i)))\
    \ bmap(bs(i)) += 1\n            else bmap += (bs(i) -> 1)\n        }\n       \
    \ for (i <- 0 until m) {\n            if (amap.contains(as(i))) amap(as(i)) +=\
    \ 1\n            else amap += (as(i) -> 1)\n        }\n        if (bmap.size !=\
    \ amap.size) return false\n        for (i <- 0 until n) {\n            if (bmap.contains(bs(i))\
    \ && amap.contains(bs(i))) {\n                if (bmap(bs(i)) != amap(bs(i)))\
    \ return false\n            }\n            else return false\n        }\n    \
    \    for (i <- 0 until n) {\n            val temp = bs(0)\n            for (j\
    \ <- 0 until n - 1) bs(j) = bs(j + 1)\n            bs(n - 1) = temp\n        \
    \    var flag = true\n            for (j <- 0 until n) {\n                if (as(j)\
    \ != bs(j)) {\n                    flag = false\n                    break\n \
    \               }\n            }\n            if (flag) return true\n        }\n\
    \        false", "        val bb = b + b\n        bb.contains(a)", "        if\
    \ (a.length != b.length) return false\n        val bb = b + b\n        return\
    \ bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", "       \
    \ val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bs\
    \ = b + b\n        bs.contains(a)", "        val bs = b.size\n        val as =\
    \ a.size\n        val bb = b + b\n        for (i <- 0 until bs) {\n          \
    \  val sub = bb.substring(i, i + bs)\n            if (a.contains(sub)) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val s = b + b\n        for (i <- 0 until n - m + 1) {\n\
    \            var j = 0\n            while (j < m && a(i + j) == b(j)) j += 1\n\
    \            if (j == m) return true\n        }\n        false", "        val\
    \ bb = b + b\n        bb.contains(a)", "        val n = a.length\n        val\
    \ m = b.length\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n\
    \            var j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n\
    \            if (j == m) return true\n        }\n        false", "        val\
    \ bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val\
    \ bs2 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     bb.contains(a)", "        val n = a.length\n        val m = b.length\n \
    \       for (i <- 0 until n) {\n            val sub = a.substring(i, i + m)\n\
    \            if (sub == b) return true\n        }\n        return false", "  \
    \      val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val c = bs(0)\n            for (j <- 0 until bs.length - 1) {\n       \
    \         bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = c\n\
    \            if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        return bb.contains(a)", "        val\
    \ n = a.length\n        val m = b.length\n        val bb = b + b\n        for\
    \ (i <- 0 until n) {\n            var j = 0\n            while (j < m && a(i +\
    \ j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n      \
    \  false", "        val n = a.length\n        val m = b.length\n        if (n\
    \ < m) return false\n        val bb = b + b\n        for (i <- 0 until n - m +\
    \ 1) {\n            if (a.substring(i, i + m) == b) return true\n        }\n \
    \       return false", "        val n = a.length\n        val m = b.length\n \
    \       val bb = b + b\n        for (i <- 0 until n) {\n            var flag =\
    \ true\n            for (j <- 0 until m) {\n                if (a(i + j) != bb(j))\
    \ {\n                    flag = false\n                    break\n           \
    \     }\n            }\n            if (flag) return true\n        }\n       \
    \ return false", "        val bb = b + b\n        return a.r.findFirstIn(bb).isDefined",
  "        val bb = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n\
    \        val as = a.toCharArray\n        val bslen = bs.length\n        val aslen\
    \ = as.length\n        if (bslen > aslen) return false\n        for (i <- 0 until\
    \ bslen) {\n            var j = 0\n            while (j < bslen && bs(j) == as(i\
    \ + j)) j += 1\n            if (j == bslen) return true\n        }\n        return\
    \ false", "        val bs = b + b\n        return bs.contains(a)", "        val\
    \ bb = b + b\n        return bb.contains(a)", "        val n = a.length\n    \
    \    val m = b.length\n        if (n < m) return false\n        val bb = b + b\n\
    \        for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        if (a.length !=\
    \ b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        return bb.contains(a)", "        val b2 = b + b\n\
    \        return b2.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        for (i <- 0 until n) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val b2 = b + b\n        return\
    \ b2.contains(a)", "        val bb = b + b\n        return bb.contains(a)", " \
    \       val n = a.length\n        val m = b.length\n        if (n < m) return\
    \ false\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n    \
    \        if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val bs = b.toCharArray\n        val n = bs.length\n       \
    \ val as = a.toCharArray\n        val m = as.length\n        val kmp = new KMP(bs)\n\
    \        val kmp2 = new KMP(bs.reverse)\n        for (i <- 0 until n) {\n    \
    \        if (kmp.search(as, i) != -1) return true\n            if (kmp2.search(as,\
    \ i) != -1) return true\n        }\n        return false", "        val bs = b.size\n\
    \        val as = a.size\n        if (bs > as) return false\n        val bb =\
    \ b + b\n        for (i <- 0 until bs) {\n            if (bb.substring(i, i +\
    \ bs) == a.substring(0, bs)) return true\n        }\n        false", "       \
    \ val bb = b + b\n        return bb.contains(a)", "        val bb = b + b\n  \
    \      bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", "  \
    \      val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bb = b + b\n        return bb.contains(a)", "        val bb = b + b\n\
    \        return bb.contains(a)", "        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        return bb.contains(a)", "        if (a.length <\
    \ b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        return bb.contains(a)", "        val b2 = b + b\n\
    \        return b2.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        val s = b + b\n        for (i <- 0 until n - m + 1) {\n  \
    \          var j = 0\n            while (j < m && a(i + j) == b(j)) j += 1\n \
    \           if (j == m) return true\n        }\n        return false", "     \
    \   val bb = b + b\n        return bb.contains(a)", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bs = b + b\n        bs.contains(a)", "        val bb = b + b\n      \
    \  bb.contains(a)", "        val n = a.length\n        val m = b.length\n    \
    \    for (i <- 0 until n) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bb = b + b\n        return\
    \ bb.contains(a)", "        val bb = b + b\n        return bb.contains(a)", " \
    \       var bb = b + b\n        return bb.contains(a)", "        val bs = b.toCharArray\n\
    \        val as = a.toCharArray\n        for (i <- 0 until bs.length) {\n    \
    \        val bs1 = bs.slice(i, bs.length)\n            val bs2 = bs.slice(0, i)\n\
    \            val bs3 = bs1 ++ bs2\n            val b3 = bs3.mkString\n       \
    \     if (a.contains(b3)) return true\n        }\n        return false", "   \
    \     val bb = b + b\n        bb.contains(a)", "        val n = a.length\n   \
    \     val m = b.length\n        val bb = b + b\n        for (i <- 0 until n -\
    \ m + 1) {\n            var flag = true\n            for (j <- 0 until m) {\n\
    \                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        for (i <- 0 until n) {\n            val sub\
    \ = a.substring(i, i + m)\n            if (sub == b) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        for (i <- 0 until n) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n) {\n            var j = 0\n            while (j < m &&\
    \ a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n\
    \        false", "        val n = a.length\n        val m = b.length\n       \
    \ val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var j =\
    \ 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n            if (j\
    \ == m) return true\n        }\n        false", "        val bb = b + b\n    \
    \    return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        for (i <- 0 until n) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        false", "        val bs = b + b\n        return bs.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n            if\
    \ (j == m) return true\n        }\n        false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        for (i <- 0 until n) {\n      \
    \      if (a.substring(i, i + m) == b.substring(m - 1, m) + b.substring(0, m -\
    \ 1)) return true\n        }\n        return false", "        var b1 = b\n   \
    \     for (i <- 0 until b.length) {\n            if (a.contains(b1)) return true\n\
    \            b1 = b1.tail + b1.head\n        }\n        return false", "     \
    \   val bs = b + b\n        bs.contains(a)", "        val bb = b + b\n       \
    \ bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", "       \
    \ if (a.length < b.length) return false\n        val bb = b + b\n        return\
    \ bb.contains(a)", "        val n = a.length\n        val m = b.length\n     \
    \   val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n        for\
    \ (i <- 0 until bs.length) {\n            val bs2 = bs.slice(i, bs.length) ++\
    \ bs.slice(0, i)\n            if (a.contains(bs2.mkString)) return true\n    \
    \    }\n        return false", "        var bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        return bb.contains(a)", "        val bs = b + b\n\
    \        return bs.contains(a)", "        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bs\
    \ = b.toList\n        val bsl = bs.length\n        val as = a.toList\n       \
    \ val asl = as.length\n        val bs2 = bs ++ bs\n        val bs2l = bs2.length\n\
    \        for (i <- 0 until asl) {\n            var flag = true\n            for\
    \ (j <- 0 until bsl) {\n                if (as(i + j) != bs2(j)) {\n         \
    \           flag = false\n                    break\n                }\n     \
    \       }\n            if (flag) return true\n        }\n        return false",
  "        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val bb = b + b\n        for (i <- 0 until n)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val bb = b + b\n        return bb.contains(a)", " \
    \       val bb = b + b\n        return bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        if (bb.indexOf(a)\
    \ != -1) return true\n        return false", "        val bb = b + b\n       \
    \ return bb.contains(a)", "        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n\
    \        val bs2 = bs.clone\n        for (i <- 0 until bs.length) {\n        \
    \    val c = bs2(0)\n            for (j <- 0 until bs.length - 1) bs2(j) = bs2(j\
    \ + 1)\n            bs2(bs.length - 1) = c\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        if (a.length != b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bb = b + b\n        return bb.contains(a)", "        val bb = b + b\n\
    \        return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            var flag = true\n            for (j <- 0 until\
    \ m) {\n                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        return bb.contains(a)", "        val bs = b + b\n        return\
    \ bs.contains(a)", "        val bb = b + b\n        return bb.contains(a)", " \
    \       val bb = b + b\n        return bb.contains(a)", "        val bs = b.toList\n\
    \        val as = a.toList\n        val bslen = bs.length\n        val aslen =\
    \ as.length\n        for (i <- 0 until aslen) {\n            val sub = as.slice(i,\
    \ i + bslen)\n            if (sub == bs) return true\n        }\n        return\
    \ false", "        val bs = b + b\n        return bs.contains(a)", "        val\
    \ n = a.length\n        val m = b.length\n        val s = b + b\n        for (i\
    \ <- 0 until n - m + 1) {\n            var j = 0\n            while (j < m &&\
    \ a(i + j) == b(j)) j += 1\n            if (j == m) return true\n        }\n \
    \       return false", "        val n = a.length\n        val m = b.length\n \
    \       if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            var flag = true\n            for (j <- 0 until\
    \ m) {\n                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        val bb = b + b\n        for (i <- 0 until n)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val n = a.length\n        val m = b.length\n    \
    \    for (i <- 0 until n) {\n            var flag = true\n            for (j <-\
    \ 0 until m) {\n                if (a(i + j) != b(j)) {\n                    flag\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (flag) return true\n        }\n        false", "        val bb = b\
    \ + b\n        return bb.contains(a)", "        val bb = b + b\n        bb.contains(a)",
  "        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        if (n < m) return false\n        val bb = b +\
    \ b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i\
    \ + m) == b) return true\n        }\n        false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        for (i <-\
    \ 0 until n) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        val bs = b.toCharArray\n        for (i\
    \ <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs1.mkString)) return true\n        }\n     \
    \   return false", "        val bb = b + b\n        return bb.contains(a)", " \
    \       val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n     \
    \       val bs2 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val temp = bs(0)\n      \
    \      for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n\
    \            }\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val bs = b + b\n   \
    \     return bs.contains(a)", "        val bs = b.toCharArray\n        val as\
    \ = a.toCharArray\n        val bslen = bs.length\n        val aslen = as.length\n\
    \        val bs2 = bs ++ bs\n        val as2 = as ++ as\n        for (i <- 0 until\
    \ bslen) {\n            var flag = true\n            for (j <- 0 until bslen)\
    \ {\n                if (bs2(i + j) != as2(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            var flag\
    \ = true\n            for (j <- 0 until m) {\n                if (a(i + j) !=\
    \ bb(j)) {\n                    flag = false\n                    break\n    \
    \            }\n            }\n            if (flag) return true\n        }\n\
    \        return false", "        val bb = b + b\n        return bb.contains(a)",
  "        val b2 = b + b\n        return b2.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        for (i <- 0 until n) {\n            var flag\
    \ = true\n            for (j <- 0 until m) {\n                if (a(i + j) !=\
    \ b(j)) {\n                    flag = false\n                    break\n     \
    \           }\n            }\n            if (flag) return true\n        }\n \
    \       return false", "        val bb = b + b\n        return bb.contains(a)",
  "        if (a.length != b.length) return false\n        val bb = b + b\n      \
    \  return bb.contains(a)", "        val bs = b.size\n        val as = a.size\n\
    \        if (bs > as) return false\n        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var\
    \ j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n            if\
    \ (j == m) return true\n        }\n        false", "        val bs = b.toCharArray\n\
    \        val bs2 = bs.clone\n        for (i <- 0 until bs.length) {\n        \
    \    val c = bs2(0)\n            for (j <- 0 until bs.length - 1) {\n        \
    \        bs2(j) = bs2(j + 1)\n            }\n            bs2(bs.length - 1) =\
    \ c\n            if (a.contains(bs2.mkString)) return true\n        }\n      \
    \  return false", "        val bs = b.toCharArray\n        for (i <- 0 until bs.length)\
    \ {\n            val bs2 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n        \
    \    if (a.contains(bs2.mkString)) return true\n        }\n        return false",
  "        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bb = b + b\n        return bb.contains(a)",
  "        val bs = b + b\n        return bs.contains(a)", "        val bb = b + b\n\
    \        bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            var flag = true\n            for (j <- 0 until\
    \ m) {\n                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        false", "        if (a.length <\
    \ b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val bs = b.size\n        for (i <- 0 until bs) {\n            if (a.contains(b.substring(i,\
    \ bs) + b.substring(0, i))) return true\n        }\n        false", "        val\
    \ b2 = b + b\n        return b2.contains(a)", "        val b2 = b + b\n      \
    \  b2.contains(a)", "        val bb = b + b\n        return bb.contains(a)", " \
    \       val bs = b + b\n        bs.contains(a)", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            var j = 0\n       \
    \     while (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return\
    \ true\n        }\n        false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val tmp = bs(0)\n         \
    \   for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n  \
    \          }\n            bs(bs.length - 1) = tmp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bs = b.size\n        val\
    \ as = a.size\n        if (bs > as) return false\n        for (i <- 0 until as)\
    \ {\n            if (a.substring(i, i + bs) == b) return true\n        }\n   \
    \     return false", "        val bb = b + b\n        return bb.contains(a)",
  "        if (a.length != b.length) return false\n        val bb = b + b\n      \
    \  return bb.contains(a)", "        val bs = b.toCharArray\n        val as = a.toCharArray\n\
    \        val n = bs.length\n        val m = as.length\n        val bp = new Array[Int](n)\n\
    \        var i = 1\n        var j = 0\n        while (i < n) {\n            if\
    \ (bs(i) == bs(j)) {\n                bp(i) = j + 1\n                i += 1\n\
    \                j += 1\n            } else if (j == 0) {\n                bp(i)\
    \ = 0\n                i += 1\n            } else {\n                j = bp(j\
    \ - 1)\n            }\n        }\n        i = 0\n        j = 0\n        while\
    \ (i < m) {\n            if (as(i) == bs(j)) {\n                i += 1\n     \
    \           j += 1\n            } else if (j == 0) {\n                i += 1\n\
    \            } else {\n                j = bp(j - 1)\n            }\n        \
    \    if (j == n) {\n                return true\n            }\n        }\n  \
    \      var k = 0\n        while (k < n) {\n            i = 0\n            j =\
    \ k\n            while (i < m) {\n                if (as(i) == bs(j)) {\n    \
    \                i += 1\n                    j += 1\n                } else if\
    \ (j == k) {\n                    i += 1\n                } else {\n         \
    \           j = bp(j - 1)\n                }\n                if (j == n) {\n\
    \                    return true\n                }\n            }\n         \
    \   k += 1\n        }\n        false", "        val bs = b.size\n        val as\
    \ = a.size\n        if (bs > as) return false\n        val bs2 = bs * 2\n    \
    \    val b2 = b + b\n        for (i <- 0 until as) {\n            if (a.substring(i,\
    \ i + bs) == b) return true\n            if (i + bs2 <= as && a.substring(i, i\
    \ + bs2) == b2) return true\n        }\n        return false", "        val bs\
    \ = b + b\n        return bs.contains(a)", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bb = b + b\n        return bb.contains(a)", "        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val bs2 = bs.slice(i, bs.length)\
    \ ++ bs.slice(0, i)\n            if (a.contains(bs2.mkString)) return true\n \
    \       }\n        return false", "        if (a.length != b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ != b.length) return false\n        var bb = b + b\n        if (bb.contains(a))\
    \ return true\n        return false", "        val bs = b.toCharArray\n      \
    \  val bs2 = bs.clone\n        for (i <- 0 until bs.length) {\n            val\
    \ c = bs2(0)\n            for (j <- 0 until bs.length - 1) bs2(j) = bs2(j + 1)\n\
    \            bs2(bs.length - 1) = c\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length; val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val bs = b + b\n\
    \        bs.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        val s = b + b\n        for (i <- 0 until m) {\n          \
    \  val sub = s.substring(i, i + m)\n            if (a.contains(sub)) return true\n\
    \        }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        val bs = b.size\n        val as = a.size\n        val bb = b + b\n    \
    \    for (i <- 0 until bs) {\n            if (bb.substring(i, i + bs) == a) return\
    \ true\n        }\n        return false", "        if (a.length != b.length) return\
    \ false\n        val bb = b + b\n        return bb.contains(a)", "        if (a.length\
    \ != b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val bb = b + b\n        bb.contains(a)", "        val bb = b + b\n    \
    \    return bb.contains(a)", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val bs2 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs2.mkString)) return true\n        }\n     \
    \   return false", "        val n = a.length\n        val m = b.length\n     \
    \   if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        val bs = b + b\n        return bs.contains(a)",
  "        if (a.length != b.length) return false\n        var c = b + b\n       \
    \ return c.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            var j = 0\n            while (j < m && a(i +\
    \ j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n      \
    \  false", "        val bs = b.size\n        val as = a.size\n        if (bs >\
    \ as) return false\n        val bss = bs * bs\n        for (i <- 0 until bss)\
    \ {\n            val j = (i * i) % bss\n            if (a.contains(b.substring(i,\
    \ i + bs))) return true\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
