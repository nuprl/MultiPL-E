name: HumanEval_123_get_odd_collatz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a sorted list that has the odd numbers\
  \ in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n    // as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n    // previous term as follows: if the\
  \ previous term is even, the next term is one half of \n    // the previous term.\
  \ If the previous term is odd, the next term is 3 times the previous\n    // term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list\
  \ sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns\
  \ [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers\
  \ are only 1, and 5.\n    def getOddCollatz(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var l = List[Long]()\n        var m = n\n        while (m !=\
    \ 1) {\n            if (m % 2 == 1) l = l :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        l = l :+ 1\n        l.sorted", "  \
    \      var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else 3 * cur + 1\n        }\n        result = 1 :: result\n\
    \        result", "        def getOddCollatz(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 1) acc\n            else if (n % 2 == 0) getOddCollatz(n\
    \ / 2, acc)\n            else getOddCollatz(3 * n + 1, n :: acc)\n        }\n\
    \        getOddCollatz(n, List()).reverse", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else 3 * current + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result", "        var result =\
    \ List[Long]()\n        var m = n\n        while (m != 1) {\n            if (m\
    \ % 2 == 1) result = m :: result\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        result = 1 :: result\n        result", "       \
    \ var result = List[Long]()\n        var m = n\n        while (m != 1) {\n   \
    \         if (m % 2 == 1) result = m :: result\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else current * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse", "        var\
    \ list = List[Long]()\n        var cur = n\n        while (cur != 1) {\n     \
    \       if (cur % 2 == 1) list = list :+ cur\n            cur = if (cur % 2 ==\
    \ 0) cur / 2 else cur * 3 + 1\n        }\n        list = list :+ 1\n        list",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list", " \
    \       var result = ListBuffer[Long]()\n        var m = n\n        while (m !=\
    \ 1) {\n            if (m % 2 == 1) result += m\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result += 1\n        result.toList",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else 3 * current + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse", "        def\
    \ getOddCollatz(n : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 1) acc\n            else if (n % 2 == 0) getOddCollatz(n / 2, acc)\n    \
    \        else getOddCollatz(3 * n + 1, n :: acc)\n        }\n        getOddCollatz(n,\
    \ List()).reverse", "        val collatz = new HashMap[Long, List[Long]]\n   \
    \     def collatzSeq(n : Long) : List[Long] = {\n            if (collatz.contains(n))\
    \ collatz(n)\n            else {\n                val next = if (n % 2 == 0) n\
    \ / 2 else 3 * n + 1\n                val seq = n :: collatzSeq(next)\n      \
    \          collatz(n) = seq\n                seq\n            }\n        }\n \
    \       collatzSeq(n).filter(_ % 2 == 1)", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var curr = n\n        while (curr != 1) {\n            if (curr % 2 ==\
    \ 1) result = curr :: result\n            curr = if (curr % 2 == 0) curr / 2 else\
    \ curr * 3 + 1\n        }\n        result = 1 :: result\n        result.sorted",
  "        var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result", "        def getOddCollatz(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 1) acc\n            else {\n                val next\
    \ = if (n % 2 == 0) n / 2 else 3 * n + 1\n                getOddCollatz(next,\
    \ if (n % 2 == 1) n :: acc else acc)\n            }\n        }\n        getOddCollatz(n,\
    \ List()).reverse", "        var result = List[Long]()\n        var m = n\n  \
    \      while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var result = List[Long]()\n       \
    \ var num = n\n        while (num != 1) {\n            if (num % 2 == 1) result\
    \ = num :: result\n            num = if (num % 2 == 0) num / 2 else num * 3 +\
    \ 1\n        }\n        result = 1 :: result\n        result.reverse", "     \
    \   var result = List[Long]()\n        var m = n\n        while (m != 1) {\n \
    \           if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result", "        var collatz = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            collatz = current :: collatz\n  \
    \          if (current % 2 == 0) current /= 2\n            else current = 3 *\
    \ current + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x\
    \ => x % 2 == 1).sorted", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result", "        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else 3 *\
    \ current + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result", "        var list = List[Long]()\n        var num = n\n    \
    \    while (num != 1) {\n            if (num % 2 == 1) list = list :+ num\n  \
    \          num = if (num % 2 == 0) num / 2 else 3 * num + 1\n        }\n     \
    \   list = list :+ 1\n        list", "        var result = List[Long]()\n    \
    \    var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result =\
    \ m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n\
    \        result = 1 :: result\n        result", "        def getOddCollatzHelper(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 1) acc\n  \
    \          else if (n % 2 == 0) getOddCollatzHelper(n / 2, acc)\n            else\
    \ getOddCollatzHelper(3 * n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n,\
    \ List()).reverse", "        var result = List[Long]()\n        var current =\
    \ n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var collatz = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            collatz = current :: collatz\n            if (current %\
    \ 2 == 0) current /= 2\n            else current = 3 * current + 1\n        }\n\
    \        collatz = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else m * 3 + 1\n        }\n        list = list :+ 1\n        list", " \
    \       var result = List[Long]()\n        var x = n\n        while (x != 1) {\n\
    \            if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result", "        var collatz =\
    \ List[Long]()\n        var temp = n\n        while (temp != 1) {\n          \
    \  collatz = temp :: collatz\n            if (temp % 2 == 0) temp /= 2\n     \
    \       else temp = 3 * temp + 1\n        }\n        collatz = 1 :: collatz\n\
    \        collatz.filter(_ % 2 == 1)", "        var result = List[Long]()\n   \
    \     var cur = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result\
    \ = cur :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 +\
    \ 1\n        }\n        result = 1 :: result\n        result", "        var collatz\
    \ = List[Long]()\n        var x = n\n        while (x != 1) {\n            collatz\
    \ = x :: collatz\n            if (x % 2 == 0) x /= 2\n            else x = 3 *\
    \ x + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x =>\
    \ x % 2 == 1).sorted", "        if (n == 1) return List(1)\n        var list =\
    \ List[Long]()\n        var m = n\n        while (m != 1) {\n            if (m\
    \ % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0) m / 2 else 3 * m\
    \ + 1\n        }\n        list = list :+ 1\n        list.sorted", "        def\
    \ loop(n : Long, acc : List[Long]) : List[Long] = {\n            if (n == 1) acc\n\
    \            else if (n % 2 == 0) loop(n / 2, acc)\n            else loop(3 *\
    \ n + 1, n :: acc)\n        }\n        loop(n, List(1)).reverse", "        var\
    \ result = List[Long]()\n        var cur = n\n        while (cur != 1) {\n   \
    \         if (cur % 2 == 1) {\n                result = result :+ cur\n      \
    \      }\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n     \
    \   }\n        result = result :+ 1\n        result.sorted", "        var result\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) result = m :: result\n            m = if (m % 2 == 0) m / 2 else\
    \ 3 * m + 1\n        }\n        result = 1 :: result\n        result", "     \
    \   var result = new ListBuffer[Long]\n        var m = n\n        while (m !=\
    \ 1) {\n            if (m % 2 == 1) result += m\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result += 1\n        result.toList",
  "        var lst = List[Long]()\n        var num = n\n        while (num != 1) {\n\
    \            if (num % 2 == 1) lst = num :: lst\n            num = if (num % 2\
    \ == 0) num / 2 else num * 3 + 1\n        }\n        lst = 1 :: lst\n        lst.reverse",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list", " \
    \       var collatz = new ListBuffer[Long]\n        var m = n\n        while (m\
    \ != 1) {\n            collatz += m\n            if (m % 2 == 0) m /= 2\n    \
    \        else m = 3 * m + 1\n        }\n        collatz += 1\n        collatz.filter(_\
    \ % 2 == 1).toList", "        var collatz = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            collatz = m :: collatz\n            if\
    \ (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(_ % 2 == 1)", "        var collatz =\
    \ List[Long]()\n        var m = n\n        while (m != 1) {\n            collatz\
    \ = m :: collatz\n            if (m % 2 == 0) m /= 2\n            else m = 3 *\
    \ m + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(x =>\
    \ x % 2 == 1).sorted", "        def getOddCollatz(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n ::\
    \ acc)\n        }\n        getOddCollatz(n, List()).sorted", "        var result\
    \ = List[Long]()\n        var cur = n\n        while (cur != 1) {\n          \
    \  if (cur % 2 == 1) result = cur :: result\n            cur = if (cur % 2 ==\
    \ 0) cur / 2 else 3 * cur + 1\n        }\n        result = 1 :: result\n     \
    \   result", "        var result = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) result = m :: result\n            m\
    \ = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n\
    \        result", "        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).sorted",
  "        var l = List[Long]()\n        var m = n\n        while (m != 1) {\n   \
    \         if (m % 2 == 1) l = l :+ m\n            m = if (m % 2 == 0) m / 2 else\
    \ 3 * m + 1\n        }\n        l = l :+ 1\n        l.sorted", "        var collatz\
    \ = List[Long]()\n        var current = n\n        while (current != 1) {\n  \
    \          collatz = current :: collatz\n            if (current % 2 == 0) current\
    \ /= 2\n            else current = 3 * current + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted", "        var\
    \ collatz = new ListBuffer[Long]\n        var num = n\n        while (num != 1)\
    \ {\n            collatz += num\n            if (num % 2 == 0) num /= 2\n    \
    \        else num = 3 * num + 1\n        }\n        collatz += 1\n        collatz.filter(_\
    \ % 2 == 1).toList", "        var collatz = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            collatz = x :: collatz\n            if\
    \ (x % 2 == 0) x /= 2\n            else x = 3 * x + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(_ % 2 == 1)", "        def collatz(n\
    \ : Long) : List[Long] = {\n            if (n == 1) List(1)\n            else\
    \ if (n % 2 == 0) n :: collatz(n / 2)\n            else n :: collatz(3 * n + 1)\n\
    \        }\n        collatz(n).filter(_ % 2 == 1).sorted", "        var result\
    \ = List[Long]()\n        var x = n\n        while (x != 1) {\n            if\
    \ (x % 2 == 1) result = x :: result\n            x = if (x % 2 == 0) x / 2 else\
    \ 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        def getOddCollatz(n : Long, list : List[Long]) : List[Long] = {\n     \
    \       if (n == 1) list\n            else if (n % 2 == 0) getOddCollatz(n / 2,\
    \ list)\n            else getOddCollatz(3 * n + 1, n :: list)\n        }\n   \
    \     getOddCollatz(n, List()).sorted", "        var result = List[Long]()\n \
    \       var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var collatz = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current != 1) {\n\
    \            collatz += current\n            if (current % 2 == 0) current /=\
    \ 2\n            else current = 3 * current + 1\n        }\n        collatz +=\
    \ 1\n        collatz.filter(_ % 2 == 1).toList", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var cur = n\n        while (cur != 1) {\n            if (cur % 2 == 1)\
    \ result = cur :: result\n            cur = if (cur % 2 == 0) cur / 2 else 3 *\
    \ cur + 1\n        }\n        result = 1 :: result\n        result", "       \
    \ var result = List[Long]()\n        var m = n\n        while (m != 1) {\n   \
    \         if (m % 2 == 1) result = m :: result\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else 3 * cur + 1\n        }\n        result = 1 :: result\n\
    \        result", "        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse", " \
    \       var collatz = List[Long]()\n        var cur = n\n        while (cur !=\
    \ 1) {\n            collatz = cur :: collatz\n            if (cur % 2 == 0) cur\
    \ /= 2\n            else cur = 3 * cur + 1\n        }\n        collatz = 1 ::\
    \ collatz\n        collatz.filter(_ % 2 == 1).sorted", "        var collatz =\
    \ List[Long]()\n        var current = n\n        while (current != 1) {\n    \
    \        collatz = current :: collatz\n            if (current % 2 == 0) current\
    \ /= 2\n            else current = 3 * current + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted", "        var\
    \ collatz = List[Long]()\n        var m = n\n        while (m != 1) {\n      \
    \      collatz = m :: collatz\n            if (m % 2 == 0) m /= 2\n          \
    \  else m = 3 * m + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(_\
    \ % 2 == 1)", "        def getOddCollatzHelper(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 1) acc\n            else if (n % 2 == 0) getOddCollatzHelper(n\
    \ / 2, acc)\n            else getOddCollatzHelper(3 * n + 1, n :: acc)\n     \
    \   }\n        getOddCollatzHelper(n, List()).sorted", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var num = n\n        while (num != 1) {\n            if (num % 2 == 1)\
    \ result = num :: result\n            num = if (num % 2 == 0) num / 2 else 3 *\
    \ num + 1\n        }\n        result = 1 :: result\n        result.reverse", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            result = result :+ current\n            if (current % 2\
    \ == 0) current /= 2\n            else current = current * 3 + 1\n        }\n\
    \        result = result :+ 1\n        result.filter(_ % 2 == 1).sorted", "  \
    \      var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else 3 * current + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse", "        def\
    \ getOddCollatz(n : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 1) acc\n            else if (n % 2 == 0) getOddCollatz(n / 2, acc)\n    \
    \        else getOddCollatz(3 * n + 1, n :: acc)\n        }\n        getOddCollatz(n,\
    \ List()).sorted", "        var result = ListBuffer[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ += current\n            current = if (current % 2 == 0) current / 2 else 3 *\
    \ current + 1\n        }\n        result += 1\n        result.toList", "     \
    \   var list = List[Long]()\n        var m = n\n        while (m != 1) {\n   \
    \         if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0) m\
    \ / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list", "  \
    \      var collatz = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            collatz = m :: collatz\n            if (m % 2 == 0) m /= 2\n    \
    \        else m = 3 * m + 1\n        }\n        collatz = 1 :: collatz\n     \
    \   collatz.filter(_ % 2 == 1)", "        var result = List[Long]()\n        var\
    \ m = n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var collatz = new ListBuffer[Long]\n\
    \        var num = n\n        while (num != 1) {\n            collatz += num\n\
    \            if (num % 2 == 0) num /= 2\n            else num = 3 * num + 1\n\
    \        }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var collatz = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current != 1) {\n            collatz += current\n            if (current %\
    \ 2 == 0) current /= 2\n            else current = 3 * current + 1\n        }\n\
    \        collatz += 1\n        collatz.toList.filter(x => x % 2 == 1)", "    \
    \    def getOddCollatz(n : Long, acc : List[Long]) : List[Long] = {\n        \
    \    if (n == 1) acc\n            else if (n % 2 == 0) getOddCollatz(n / 2, acc)\n\
    \            else getOddCollatz(3 * n + 1, n :: acc)\n        }\n        getOddCollatz(n,\
    \ List()).reverse", "        var list = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n        \
    \    m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list", "        var result = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var collatz = new ListBuffer[Long]\n\
    \        var x = n\n        while (x != 1) {\n            collatz += x\n     \
    \       if (x % 2 == 0) x /= 2\n            else x = 3 * x + 1\n        }\n  \
    \      collatz += 1\n        collatz.filter(_ % 2 == 1).toList", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current != 1)\
    \ {\n            if (current % 2 == 1) result = current :: result\n          \
    \  current = if (current % 2 == 0) current / 2 else 3 * current + 1\n        }\n\
    \        result = 1 :: result\n        result.reverse", "        var collatz =\
    \ List[Long]()\n        var m = n\n        while (m != 1) {\n            if (m\
    \ % 2 == 1) collatz = m :: collatz\n            m = if (m % 2 == 0) m / 2 else\
    \ m * 3 + 1\n        }\n        collatz = 1 :: collatz\n        collatz.reverse",
  "        var result = List[Long]()\n        var x = n\n        while (x != 1) {\n\
    \            if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var collatz = new ListBuffer[Long]\n        var i = n\n        while (i\
    \ != 1) {\n            collatz += i\n            if (i % 2 == 0) i /= 2\n    \
    \        else i = 3 * i + 1\n        }\n        collatz += 1\n        collatz.filter(_\
    \ % 2 == 1).toList", "        var collatz = List[Long]()\n        var cur = n\n\
    \        while (cur != 1) {\n            collatz = cur :: collatz\n          \
    \  if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n        }\n\
    \        collatz = 1 :: collatz\n        collatz.filter(_ % 2 == 1).sorted", " \
    \       var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        def helper(n : Long, acc : List[Long]) : List[Long] = {\n            if\
    \ (n == 1) acc\n            else if (n % 2 == 0) helper(n / 2, acc)\n        \
    \    else helper(3 * n + 1, n :: acc)\n        }\n        helper(n, List()).reverse",
  "        if (n == 1) return List(1)\n        var result = List[Long]()\n       \
    \ var cur = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result\
    \ = cur :: result\n            cur = if (cur % 2 == 0) cur / 2 else 3 * cur +\
    \ 1\n        }\n        result = 1 :: result\n        result.sorted", "      \
    \  var result = List[Long]()\n        var x = n\n        while (x != 1) {\n  \
    \          if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = new ListBuffer[Long]\n        var m = n\n        while (m\
    \ != 1) {\n            if (m % 2 == 1) result += m\n            m = if (m % 2\
    \ == 0) m / 2 else 3 * m + 1\n        }\n        result += 1\n        result.toList",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else 3 * current + 1\n  \
    \      }\n        result = 1 :: result\n        result.sorted", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current != 1) {\n  \
    \          if (current % 2 == 1) result = current :: result\n            current\
    \ = if (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n      \
    \  result = 1 :: result\n        result.reverse", "        var collatz = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) collatz = current :: collatz\n            current = if (current %\
    \ 2 == 0) current / 2 else 3 * current + 1\n        }\n        collatz = 1 ::\
    \ collatz\n        collatz.reverse", "        var result = List[Long]()\n    \
    \    var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else current * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var result = List[Long]()\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        val collatz = new HashMap[Long, List[Long]]\n\
    \        def getCollatz(n : Long) : List[Long] = {\n            if (collatz.contains(n))\
    \ collatz(n)\n            else {\n                val result = if (n == 1) List(1)\
    \ else if (n % 2 == 0) n :: getCollatz(n / 2) else n :: getCollatz(3 * n + 1)\n\
    \                collatz(n) = result\n                result\n            }\n\
    \        }\n        getCollatz(n).filter(x => x % 2 == 1)", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current != 1) {\n  \
    \          if (current % 2 == 1) result = current :: result\n            current\
    \ = if (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n      \
    \  result = 1 :: result\n        result.reverse", "        var list = List[Long]()\n\
    \        var x = n\n        while (x != 1) {\n            if (x % 2 == 1) list\
    \ = list :+ x\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n\
    \        list = list :+ 1\n        list", "        var result = List[Long]()\n\
    \        var x = n\n        while (x != 1) {\n            if (x % 2 == 1) result\
    \ = x :: result\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n      \
    \  }\n        result = 1 :: result\n        result.reverse", "        var result\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) result = m :: result\n            m = if (m % 2 == 0) m / 2 else\
    \ 3 * m + 1\n        }\n        result = 1 :: result\n        result", "     \
    \   var result = List[Long]()\n        var m = n\n        while (m != 1) {\n \
    \           if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list", " \
    \       def collatz(n : Long) : List[Long] = {\n            if (n == 1) List(1)\n\
    \            else if (n % 2 == 0) n :: collatz(n / 2)\n            else n :: collatz(3\
    \ * n + 1)\n        }\n        collatz(n).filter(_ % 2 == 1).sorted", "      \
    \  var l = List[Long]()\n        var x = n\n        while (x != 1) {\n       \
    \     if (x % 2 == 1) l = x :: l\n            x = if (x % 2 == 0) x / 2 else 3\
    \ * x + 1\n        }\n        l = 1 :: l\n        l.reverse", "        var collatz\
    \ = new ListBuffer[Long]\n        var cur = n\n        while (cur != 1) {\n  \
    \          collatz += cur\n            if (cur % 2 == 0) cur /= 2\n          \
    \  else cur = 3 * cur + 1\n        }\n        collatz += 1\n        collatz.filter(_\
    \ % 2 == 1).toList", "        def getOddCollatz(n : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 == 0)\
    \ getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n :: acc)\n\
    \        }\n        getOddCollatz(n, List()).reverse", "        var result = List[Long]()\n\
    \        var x = n\n        while (x != 1) {\n            if (x % 2 == 1) result\
    \ = x :: result\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n      \
    \  }\n        result = 1 :: result\n        result.reverse", "        def getOddCollatz(n\
    \ : Long, list : List[Long]) : List[Long] = {\n            if (n == 1) list\n\
    \            else if (n % 2 == 0) getOddCollatz(n / 2, list)\n            else\
    \ getOddCollatz(3 * n + 1, n :: list)\n        }\n        getOddCollatz(n, List()).sorted",
  "        var result = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current != 1) {\n            if (current % 2 == 1) result += current\n    \
    \        current = if (current % 2 == 0) current / 2 else current * 3 + 1\n  \
    \      }\n        result += 1\n        result.toList", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var collatz = new\
    \ ListBuffer[Long]\n        var cur = n\n        while (cur != 1) {\n        \
    \    collatz += cur\n            if (cur % 2 == 0) cur /= 2\n            else\
    \ cur = 3 * cur + 1\n        }\n        collatz += 1\n        collatz.toList.filter(_\
    \ % 2 == 1)", "        var collatz = new ListBuffer[Long]\n        var current\
    \ = n\n        while (current != 1) {\n            collatz += current\n      \
    \      if (current % 2 == 0) current /= 2\n            else current = 3 * current\
    \ + 1\n        }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            result = m :: result\n            if (m % 2 == 0) m /= 2\n      \
    \      else m = 3 * m + 1\n        }\n        result = 1 :: result\n        result.filter(_\
    \ % 2 == 1).sorted", "        var result = List[Long]()\n        var current =\
    \ n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else current * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result.sorted", "        var result\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) result = m :: result\n            m = if (m % 2 == 0) m / 2 else\
    \ m * 3 + 1\n        }\n        result = 1 :: result\n        result", "     \
    \   var result = List[Long]()\n        var m = n\n        while (m != 1) {\n \
    \           if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var collatz = new ListBuffer[Long]\n        var m = n\n        while (m\
    \ != 1) {\n            collatz += m\n            if (m % 2 == 0) m /= 2\n    \
    \        else m = 3 * m + 1\n        }\n        collatz += 1\n        collatz.filter(_\
    \ % 2 == 1).toList", "        def getOddCollatz(n : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 == 0)\
    \ getOddCollatz(n / 2, acc)\n            else getOddCollatz(3 * n + 1, n :: acc)\n\
    \        }\n        getOddCollatz(n, List()).reverse", "        var result = List[Long]()\n\
    \        var cur = n\n        while (cur != 1) {\n            if (cur % 2 == 1)\
    \ result = cur :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result", "       \
    \ var result = List[Long]()\n        var current = n\n        while (current !=\
    \ 1) {\n            if (current % 2 == 1) result = current :: result\n       \
    \     current = if (current % 2 == 0) current / 2 else 3 * current + 1\n     \
    \   }\n        result = 1 :: result\n        result.sorted", "        var list\
    \ = List[Long]()\n        var current = n\n        while (current != 1) {\n  \
    \          if (current % 2 == 1) list = list :+ current\n            current =\
    \ if (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n        list\
    \ = list :+ 1\n        list", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current != 1) {\n            if (current % 2 ==\
    \ 1) result = current :: result\n            current = if (current % 2 == 0) current\
    \ / 2 else 3 * current + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else 3 * current + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse", "        def\
    \ getOddCollatzHelper(n : Long, acc : List[Long]) : List[Long] = {\n         \
    \   if (n == 1) {\n                acc\n            } else {\n               \
    \ val next = if (n % 2 == 0) n / 2 else 3 * n + 1\n                if (next %\
    \ 2 == 1) getOddCollatzHelper(next, next :: acc) else getOddCollatzHelper(next,\
    \ acc)\n            }\n        }\n        getOddCollatzHelper(n, List(n)).reverse",
  "        var result = List[Long]()\n        var cur = n\n        while (cur != 1)\
    \ {\n            if (cur % 2 == 1) result = cur :: result\n            cur = if\
    \ (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result", "        var result = List[Long]()\n        var x = n\n    \
    \    while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n    \
    \        x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result =\
    \ 1 :: result\n        result.reverse", "        var list = List[Long]()\n   \
    \     var m = n\n        while (m != 1) {\n            if (m % 2 == 1) list =\
    \ list :+ m\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n\
    \        list = list :+ 1\n        list", "        var result = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else current * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var list = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n    \
    \        m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list\
    \ :+ 1\n        list", "        var collatz = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            collatz = m :: collatz\n            if\
    \ (m % 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1)", "        var list\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        list = list :+ 1\n        list", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current != 1) {\n  \
    \          if (current % 2 == 1) result = current :: result\n            current\
    \ = if (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n      \
    \  result = 1 :: result\n        result.reverse", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var cur = n\n        while (cur != 1) {\n            if (cur % 2 == 1)\
    \ result = cur :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result", "       \
    \ var result = List[Long]()\n        var current = n\n        while (current !=\
    \ 1) {\n            if (current % 2 == 1) result = current :: result\n       \
    \     current = if (current % 2 == 0) current / 2 else current * 3 + 1\n     \
    \   }\n        result = 1 :: result\n        result.reverse", "        var list\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            if\
    \ (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        list = list :+ 1\n        list", "        var result\
    \ = List[Long]()\n        var x = n\n        while (x != 1) {\n            if\
    \ (x % 2 == 1) result = x :: result\n            x = if (x % 2 == 0) x / 2 else\
    \ 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var x = n\n        while (x != 1) {\n\
    \            if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var x = n\n        while (x != 1) {\n\
    \            if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var x = n\n        while (x != 1) {\n\
    \            if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var x = n\n        while (x != 1) {\n\
    \            if (x % 2 == 1) result = x :: result\n            x = if (x % 2 ==\
    \ 0) x / 2 else 3 * x + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var curr = n\n        while (curr !=\
    \ 1) {\n            if (curr % 2 == 1) result = curr :: result\n            curr\
    \ = if (curr % 2 == 0) curr / 2 else 3 * curr + 1\n        }\n        result.reverse",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            result = m :: result\n            if (m % 2 == 0) m /= 2\n      \
    \      else m = 3 * m + 1\n        }\n        result = 1 :: result\n        result.filter(x\
    \ => x % 2 == 1).sorted", "        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur != 1) {\n            if (cur % 2 == 1) result = cur\
    \ :: result\n            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result", "        var collatz\
    \ = List[Long]()\n        var m = n\n        while (m != 1) {\n            collatz\
    \ = m :: collatz\n            if (m % 2 == 0) m /= 2\n            else m = 3 *\
    \ m + 1\n        }\n        collatz = 1 :: collatz\n        collatz.filter(_ %\
    \ 2 == 1)", "        def getOddCollatzHelper(n : Long, lst : List[Long]) : List[Long]\
    \ = {\n            if (n == 1) lst\n            else if (n % 2 == 0) getOddCollatzHelper(n\
    \ / 2, lst)\n            else getOddCollatzHelper(3 * n + 1, n :: lst)\n     \
    \   }\n        getOddCollatzHelper(n, List()).reverse", "        var result =\
    \ List[Long]()\n        var current = n\n        while (current != 1) {\n    \
    \        if (current % 2 == 1) result = current :: result\n            current\
    \ = if (current % 2 == 0) current / 2 else 3 * current + 1\n        }\n      \
    \  result = 1 :: result\n        result.reverse", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else current * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var list = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            if (x % 2 == 1) list = list :+ x\n    \
    \        x = if (x % 2 == 0) x / 2 else x * 3 + 1\n        }\n        list = list\
    \ :+ 1\n        list", "        var result = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var result = List[Long]()\n       \
    \ var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result = m\
    \ :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n\
    \        result = 1 :: result\n        result", "        val collatz = new HashMap[Long,\
    \ List[Long]]\n        def collatzSeq(n : Long) : List[Long] = {\n           \
    \ if (collatz.contains(n)) collatz(n)\n            else {\n                val\
    \ next = if (n % 2 == 0) n / 2 else 3 * n + 1\n                val seq = next\
    \ :: collatzSeq(next)\n                collatz += (n -> seq)\n               \
    \ seq\n            }\n        }\n        collatzSeq(n).filter(_ % 2 == 1)", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else current * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result.sorted", "        var result\
    \ = List[Long]()\n        var x = n\n        while (x != 1) {\n            if\
    \ (x % 2 == 1) result = x :: result\n            x = if (x % 2 == 0) x / 2 else\
    \ 3 * x + 1\n        }\n        1 :: result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else current * 3 + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var result = List[Long]()\n        var x =\
    \ n\n        while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n\
    \            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var list = List[Long]()\n        var\
    \ m = n\n        while (m != 1) {\n            if (m % 2 == 1) list = list :+\
    \ m\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n       \
    \ list = list :+ 1\n        list", "        def getOddCollatzHelper(n : Long,\
    \ acc : List[Long]) : List[Long] = {\n            if (n == 1) acc\n          \
    \  else if (n % 2 == 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3\
    \ * n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).reverse",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else 3 * current + 1\n  \
    \      }\n        result = 1 :: result\n        result.sorted", "        var collatz\
    \ = List[Long]()\n        var cur = n\n        while (cur != 1) {\n          \
    \  collatz = cur :: collatz\n            if (cur % 2 == 0) cur /= 2\n        \
    \    else cur = 3 * cur + 1\n        }\n        collatz = 1 :: collatz\n     \
    \   collatz.filter(_ % 2 == 1).sorted", "        def collatz(n : Long) : List[Long]\
    \ = {\n            if (n == 1) List(1)\n            else if (n % 2 == 0) n ::\
    \ collatz(n / 2)\n            else n :: collatz(3 * n + 1)\n        }\n      \
    \  collatz(n).filter(_ % 2 == 1).sorted", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else 3 * current + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var lst = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) lst ::= m\n           \
    \ m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        lst ::= 1\n   \
    \     lst.reverse", "        def getOddCollatzHelper(n : Long, lst : List[Long])\
    \ : List[Long] = {\n            if (n == 1) lst\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, lst)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: lst)\n        }\n        getOddCollatzHelper(n, List()).sorted",
  "        var collatz = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            collatz = m :: collatz\n            if (m % 2 == 0) m /= 2\n    \
    \        else m = 3 * m + 1\n        }\n        collatz = 1 :: collatz\n     \
    \   collatz.filter(x => x % 2 == 1)", "        if (n == 1) return List(1)\n  \
    \      var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) list = list :+ m\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n        list.sorted",
  "        if (n == 1) return List(1)\n        var list = List[Long]()\n        var\
    \ x = n\n        while (x != 1) {\n            if (x % 2 == 1) list = list :+\
    \ x\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n       \
    \ list = list :+ 1\n        list.sorted", "        var seq = List[Long]()\n  \
    \      var cur = n\n        while (cur != 1) {\n            seq = cur :: seq\n\
    \            if (cur % 2 == 0) cur /= 2\n            else cur = 3 * cur + 1\n\
    \        }\n        seq = 1 :: seq\n        seq.filter(x => x % 2 == 1)", "  \
    \      var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        def getOddCollatz(n : Long, acc : List[Long]) : List[Long] = {\n      \
    \      if (n == 1) acc\n            else if (n % 2 == 0) getOddCollatz(n / 2,\
    \ acc)\n            else getOddCollatz(3 * n + 1, n :: acc)\n        }\n     \
    \   getOddCollatz(n, List()).sorted", "        var result = List[Long]()\n   \
    \     var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        1 :: result", "        var result = List[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var result = List[Long]()\n       \
    \ var x = n\n        while (x != 1) {\n            if (x % 2 == 1) result = x\
    \ :: result\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n\
    \        result = 1 :: result\n        result.reverse", "        var result =\
    \ List[Long]()\n        var num = n\n        while (num != 1) {\n            if\
    \ (num % 2 == 1) result = num :: result\n            num = if (num % 2 == 0) num\
    \ / 2 else 3 * num + 1\n        }\n        result = 1 :: result\n        result.reverse",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ != 1) {\n            if (current % 2 == 1) result = current :: result\n    \
    \        current = if (current % 2 == 0) current / 2 else current * 3 + 1\n  \
    \      }\n        result = 1 :: result\n        result.reverse", "        var\
    \ collatz = List[Long]()\n        var m = n\n        while (m != 1) {\n      \
    \      if (m % 2 == 1) collatz = m :: collatz\n            m = if (m % 2 == 0)\
    \ m / 2 else 3 * m + 1\n        }\n        collatz = 1 :: collatz\n        collatz.sorted",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var curr = n\n        while (curr !=\
    \ 1) {\n            if (curr % 2 == 1) result = curr :: result\n            curr\
    \ = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result.sorted", "        var result = List[Long]()\n  \
    \      var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else 3 * current + 1\n        }\n        result = 1 :: result\n\
    \        result.reverse", "        var lst = List[Long]()\n        var x = n\n\
    \        while (x != 1) {\n            if (x % 2 == 1) lst = x :: lst\n      \
    \      x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        lst = 1 ::\
    \ lst\n        lst.reverse"]
stop_tokens:
- "\n    }\n"
