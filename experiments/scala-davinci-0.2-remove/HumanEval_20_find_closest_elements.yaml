name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    def findClosestElements(numbers : List[Float]) :\
  \ Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        var minDistance = Float.MaxValue\n        var minDistanceElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (min(numbers(i), numbers(j)), max(numbers(i),\
    \ numbers(j)))\n                }\n            }\n        }\n        minDiffElements",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        if (minPair._1\
    \ > minPair._2) (minPair._2, minPair._1) else minPair", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minDistanceElements = Tuple2(0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = Tuple2(numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n\
    \                }\n            }\n        }\n        minPair", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (min(numbers(i), numbers(j)), max(numbers(i),\
    \ numbers(j)))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDistance = Float.MaxValue\n        var minPair : Tuple2[Float, Float]\
    \ = null\n        for (i <- 0 until numbers.length - 1) {\n            for (j\
    \ <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minPair = if (numbers(i) <\
    \ numbers(j)) (numbers(i), numbers(j)) else (numbers(j), numbers(i))\n       \
    \         }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var minDistance = Float.MaxValue\n\
    \        var result : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val distance = abs(numbers(i) - numbers(i + 1))\n      \
    \      if (distance < minDistance) {\n                minDistance = distance\n\
    \                result = (numbers(i), numbers(i + 1))\n            }\n      \
    \  }\n        result", "        var minDifference = Float.MaxValue\n        var\
    \ minDifferenceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val difference = abs(numbers(i) - numbers(j))\n                if (difference\
    \ < minDifference) {\n                    minDifference = difference\n       \
    \             minDifferenceElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDifferenceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minPair : Tuple2[Float, Float] = null\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = (numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        return minPair", "        var minDistance\
    \ = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val distance = abs(numbers(i) - numbers(j))\n               \
    \ if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minPair = (numbers(i), numbers(j))\n                }\n \
    \           }\n        }\n        minPair", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minDiffElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minDiffElements", "       \
    \ var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minPair = (numbers(i), numbers(i + 1))\n            }\n      \
    \  }\n        minPair", "        var minDistance = Float.MaxValue\n        var\
    \ minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n      \
    \      for (j <- i + 1 until numbers.length) {\n                val distance =\
    \ abs(numbers(i) - numbers(j))\n                if (distance < minDistance) {\n\
    \                    minDistance = distance\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var closest = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var closest\
    \ = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var minDistance\
    \ = Float.MaxValue\n        var minPair : Tuple2[Float, Float] = null\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = (numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        minPair", "        val sortedNumbers\
    \ = numbers.sorted\n        var minDistance = Float.MaxValue\n        var closestElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until sortedNumbers.length - 1) {\n    \
    \        val distance = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n       \
    \     if (distance < minDistance) {\n                minDistance = distance\n\
    \                closestElements = (sortedNumbers(i), sortedNumbers(i + 1))\n\
    \            }\n        }\n        closestElements", "        val sortedNumbers\
    \ = numbers.sorted\n        var minDistance = Float.MaxValue\n        var closestElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until sortedNumbers.length - 1) {\n    \
    \        val distance = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n       \
    \     if (distance < minDistance) {\n                minDistance = distance\n\
    \                closestElements = (sortedNumbers(i), sortedNumbers(i + 1))\n\
    \            }\n        }\n        closestElements", "        val sortedNumbers\
    \ = numbers.sorted\n        var minDiff = Float.MaxValue\n        var closestElements\
    \ = (0f, 0f)\n        for (i <- 0 until sortedNumbers.length - 1) {\n        \
    \    val diff = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                closestElements\
    \ = (sortedNumbers(i), sortedNumbers(i + 1))\n            }\n        }\n     \
    \   closestElements", "        var min = Float.MaxValue\n        var minPair =\
    \ (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j\
    \ <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min) {\n                    min =\
    \ diff\n                    minPair = (min(numbers(i), numbers(j)), max(numbers(i),\
    \ numbers(j)))\n                }\n            }\n        }\n        minPair",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minDistanceElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDistance = Float.MaxValue\n      \
    \  var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        var closest = numbers(0)\
    \ -> numbers(1)\n        var closestDistance = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = numbers(i) -> numbers(j)\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDiff = Float.MaxValue\n        var minElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minElements = (numbers(i), numbers(j))\n                }\n            }\n\
    \        }\n        minElements", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var min = abs(numbers(0)\
    \ - numbers(1))\n        var minPair = (numbers(0), numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        val sorted = numbers.sorted\n        val diffs = sorted.sliding(2).map(x\
    \ => abs(x(0) - x(1))).toList\n        val minDiff = diffs.min\n        val minDiffIndex\
    \ = diffs.indexOf(minDiff)\n        (sorted(minDiffIndex), sorted(minDiffIndex\
    \ + 1))", "        val sorted = numbers.sorted\n        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until sorted.length - 1)\
    \ {\n            val diff = abs(sorted(i) - sorted(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (sorted(i),\
    \ sorted(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      if (minPair._1 > minPair._2) (minPair._2, minPair._1) else minPair", " \
    \       var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var result = (numbers(0), numbers(1))\n \
    \       var minDistance = abs(numbers(0) - numbers(1))\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val distance = abs(numbers(i) - numbers(j))\n               \
    \ if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    result = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        result", "        val sortedNumbers = numbers.sorted\n\
    \        var closestDistance = abs(sortedNumbers(0) - sortedNumbers(1))\n    \
    \    var closestElements = (sortedNumbers(0), sortedNumbers(1))\n        for (i\
    \ <- 1 until sortedNumbers.length - 1) {\n            val distance = abs(sortedNumbers(i)\
    \ - sortedNumbers(i + 1))\n            if (distance < closestDistance) {\n   \
    \             closestDistance = distance\n                closestElements = (sortedNumbers(i),\
    \ sortedNumbers(i + 1))\n            }\n        }\n        closestElements", " \
    \       var closest = Float.MaxValue\n        var closestElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < closest) {\n                    closest = diff\n \
    \                   closestElements = (min(numbers(i), numbers(j)), max(numbers(i),\
    \ numbers(j)))\n                }\n            }\n        }\n        closestElements",
  "        var closest = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < abs(closest._1\
    \ - closest._2)) closest = (numbers(i), numbers(j))\n            }\n        }\n\
    \        closest", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var min = Float.MaxValue\n        var min1 = 0.0f\n        var min2 = 0.0f\n\
    \        for (i <- 0 until numbers.length) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           min1 = numbers(i)\n                    min2 = numbers(j)\n       \
    \         }\n            }\n        }\n        if (min1 > min2) (min2, min1) else\
    \ (min1, min2)", "        var closest = (numbers(0), numbers(1))\n        var\
    \ closestDistance = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var minDiff = Float.MaxValue\n  \
    \      var minDiffElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        val sorted = numbers.sorted\n        var minDiff = Float.MaxValue\n   \
    \     var minPair = (0.0f, 0.0f)\n        for (i <- 0 until sorted.length - 1)\
    \ {\n            val diff = abs(sorted(i) - sorted(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (sorted(i),\
    \ sorted(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDistance\
    \ = Float.MaxValue\n        var minElements = (0.0f, 0.0f)\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minElements = (numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minElements", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        val sorted = numbers.sorted\n\
    \        var closest = (sorted(0), sorted(1))\n        for (i <- 0 until sorted.length\
    \ - 1) {\n            val diff = abs(sorted(i) - sorted(i + 1))\n            if\
    \ (diff < abs(closest._1 - closest._2)) closest = (sorted(i), sorted(i + 1))\n\
    \        }\n        closest", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n      \
    \      for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minPair = (numbers(i), numbers(j))\n           \
    \     }\n            }\n        }\n        minPair", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minPair : Tuple2[Float, Float] = null\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = if (numbers(i) < numbers(j)) (numbers(i),\
    \ numbers(j)) else (numbers(j), numbers(i))\n                }\n            }\n\
    \        }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n      \
    \      val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        val sorted = numbers.sorted\n\
    \        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n  \
    \      for (i <- 0 until sorted.length - 1) {\n            val diff = abs(sorted(i)\
    \ - sorted(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (sorted(i), sorted(i + 1))\n            }\n\
    \        }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minDiffElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDiffElements",
  "        var min = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minDiffElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minDiffElements", "       \
    \ var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n \
    \       for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDistance = Float.MaxValue\n        var minPair\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minPair = if (numbers(i) <\
    \ numbers(j)) (numbers(i), numbers(j)) else (numbers(j), numbers(i))\n       \
    \         }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (numbers(0), numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        var min = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        var minDistance\
    \ = Float.MaxValue\n        var minElements = (0.0f, 0.0f)\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minElements = (numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minElements", "        var minDistance = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ distance = abs(numbers(i) - numbers(j))\n                if (distance < minDistance)\
    \ {\n                    minDistance = distance\n                    minPair =\
    \ (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n               \
    \ }\n            }\n        }\n        minPair", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n\
    \                }\n            }\n        }\n        minDistanceElements", " \
    \       val sorted = numbers.sorted\n        var minDistance = abs(sorted(0) -\
    \ sorted(1))\n        var minPair = (sorted(0), sorted(1))\n        for (i <-\
    \ 0 until sorted.length - 1) {\n            val distance = abs(sorted(i) - sorted(i\
    \ + 1))\n            if (distance < minDistance) {\n                minDistance\
    \ = distance\n                minPair = (sorted(i), sorted(i + 1))\n         \
    \   }\n        }\n        minPair", "        val sortedNumbers = numbers.sorted\n\
    \        var closestPair = (sortedNumbers(0), sortedNumbers(1))\n        var closestDistance\
    \ = abs(sortedNumbers(0) - sortedNumbers(1))\n        for (i <- 0 until sortedNumbers.length\
    \ - 1) {\n            val distance = abs(sortedNumbers(i) - sortedNumbers(i +\
    \ 1))\n            if (distance < closestDistance) {\n                closestDistance\
    \ = distance\n                closestPair = (sortedNumbers(i), sortedNumbers(i\
    \ + 1))\n            }\n        }\n        closestPair", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minPair = (numbers(i), numbers(j))\n                }\n \
    \           }\n        }\n        minPair", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minPair = (numbers(i), numbers(j))\n                }\n \
    \           }\n        }\n        minPair", "        var minDistance = Float.MaxValue\n\
    \        var closestElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     closestElements = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n\
    \                }\n            }\n        }\n        closestElements", "    \
    \    var min = Float.MaxValue\n        var minPair = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           minPair = (numbers(i), numbers(j))\n                }\n          \
    \  }\n        }\n        minPair", "        var minDistance = Float.MaxValue\n\
    \        var minElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minElements = (numbers(i), numbers(j))\n                }\n            }\n\
    \        }\n        minElements", "        var minDiff = Float.MaxValue\n    \
    \    var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minElements = Tuple2(0f, 0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minElements = if (numbers(i) < numbers(j)) (numbers(i), numbers(j))\
    \ else (numbers(j), numbers(i))\n                }\n            }\n        }\n\
    \        minElements", "        var min = Float.MaxValue\n        var minPair\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min) {\n                    min =\
    \ diff\n                    minPair = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minPair", "        var minDistance =\
    \ Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minDistanceElements = (Float.MaxValue,\
    \ Float.MaxValue)\n        for (i <- 0 until numbers.length - 1) {\n         \
    \   for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var min = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var closest\
    \ = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                if (abs(numbers(i)\
    \ - numbers(j)) < abs(closest._1 - closest._2)) closest = (numbers(i), numbers(j))\n\
    \            }\n        }\n        closest", "        val sorted = numbers.sorted\n\
    \        var minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n\
    \        for (i <- 0 until sorted.length - 1) {\n            val diff = abs(sorted(i)\
    \ - sorted(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (sorted(i), sorted(i + 1))\n     \
    \       }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = Tuple2(0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ Tuple2(numbers(i), numbers(j))\n                }\n            }\n        }\n\
    \        minDiffElements", "        var minDistance = Float.MaxValue\n       \
    \ var minDistanceElements = Tuple2(0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = Tuple2(numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minDistanceElements", "        var minDistance\
    \ = Float.MaxValue\n        var minPair : Tuple2[Float, Float] = null\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = (numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        minPair", "        var min = Float.MaxValue\n\
    \        var minPair : Tuple2[Float, Float] = null\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    minPair = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minPair", "        var min = Float.MaxValue\n        var minPair\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min) {\n                    min =\
    \ diff\n                    minPair = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        val sorted = numbers.sorted\n        var minDiff = Float.MaxValue\n   \
    \     var minDiffElements = (Float.MaxValue, Float.MaxValue)\n        for (i <-\
    \ 0 until sorted.length - 1) {\n            val diff = abs(sorted(i) - sorted(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minDiffElements = (sorted(i), sorted(i + 1))\n            }\n\
    \        }\n        minDiffElements", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = Tuple2(0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val distance = abs(numbers(i) - numbers(j))\n               \
    \ if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = Tuple2(numbers(i), numbers(j))\n  \
    \              }\n            }\n        }\n        minDistanceElements", "  \
    \      var minDistance = Float.MaxValue\n        var minPair = (0f, 0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = (numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        val sorted = numbers.sorted\n\
    \        val diffs = sorted.sliding(2).map(x => abs(x(0) - x(1))).toList\n   \
    \     val minDiff = diffs.min\n        val minIndex = diffs.indexOf(minDiff)\n\
    \        (sorted(minIndex), sorted(minIndex + 1))", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        if (minDiffElements._1 > minDiffElements._2)\
    \ (minDiffElements._2, minDiffElements._1) else minDiffElements", "        var\
    \ minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDistance = Float.MaxValue\n      \
    \  var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n\
    \                }\n            }\n        }\n        minDistanceElements", " \
    \       var minDiff = Float.MaxValue\n        var minPair = (0f, 0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDistance = Float.MaxValue\n      \
    \  var closestElements = (0f, 0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ distance = abs(numbers(i) - numbers(j))\n                if (distance < minDistance)\
    \ {\n                    minDistance = distance\n                    closestElements\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      closestElements", "        var minDistance = Float.MaxValue\n        var\
    \ minDistanceElements = Tuple2(0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = Tuple2(numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minDistanceElements", "        var minDistance\
    \ = Float.MaxValue\n        var closestElements = (0f, 0f)\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    closestElements = (numbers(i), numbers(j))\n            \
    \    }\n            }\n        }\n        closestElements", "        val sorted\
    \ = numbers.sorted\n        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until sorted.length - 1) {\n            val\
    \ diff = abs(sorted(i) - sorted(i + 1))\n            if (diff < minDiff) {\n \
    \               minDiff = diff\n                minDiffElements = (sorted(i),\
    \ sorted(i + 1))\n            }\n        }\n        minDiffElements", "      \
    \  var minDistance = Float.MaxValue\n        var minDistanceElements = (0f, 0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minDistanceElements = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minDistanceElements", " \
    \       var minDistance = Float.MaxValue\n        var minElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minElements", "        var\
    \ minDistance = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minPair = (numbers(i), numbers(j))\n                }\n \
    \           }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDistance = Float.MaxValue\n        var minDistanceElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var closest = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < abs(closest._1 - closest._2)) closest =\
    \ (numbers(i), numbers(j))\n            }\n        }\n        closest", "    \
    \    var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minDiffElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minDiffElements", "       \
    \ var minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      if (minPair._1 > minPair._2) (minPair._2, minPair._1) else minPair", " \
    \       var minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDiff\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n             \
    \   }\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var minDistance = Float.MaxValue\n        var result : Tuple2[Float, Float]\
    \ = null\n        for (i <- 0 until numbers.length - 1) {\n            val distance\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (distance < minDistance)\
    \ {\n                minDistance = distance\n                result = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        result", "        var minDistance\
    \ = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length) {\n            for (j <- i + 1 until numbers.length) {\n   \
    \             val distance = abs(numbers(i) - numbers(j))\n                if\
    \ (distance < minDistance) {\n                    minDistance = distance\n   \
    \                 minPair = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        if (minPair._1 > minPair._2) (minPair._2, minPair._1)\
    \ else minPair", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n          \
    \  for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minDiffElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minDiffElements", "       \
    \ var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minDistanceElements = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minDistanceElements", " \
    \       var closest = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < abs(closest._1 - closest._2)) {\n      \
    \              closest = (numbers(i), numbers(j))\n                }\n       \
    \     }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDistance = Float.MaxValue\n        var minPair = (0f, 0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = (numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (numbers(i), numbers(i + 1))\n   \
    \         }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var min = Float.MaxValue\n        var minPair : Tuple2[Float, Float] =\
    \ null\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           minPair = if (numbers(i) < numbers(j)) (numbers(i), numbers(j)) else\
    \ (numbers(j), numbers(i))\n                }\n            }\n        }\n    \
    \    minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val diff =\
    \ abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n      \
    \          minDiff = diff\n                minPair = (numbers(i), numbers(i +\
    \ 1))\n            }\n        }\n        minPair", "        val sortedNumbers\
    \ = numbers.sorted\n        var closest = (sortedNumbers(0), sortedNumbers(1))\n\
    \        var closestDistance = abs(sortedNumbers(0) - sortedNumbers(1))\n    \
    \    for (i <- 0 until sortedNumbers.length - 1) {\n            val distance =\
    \ abs(sortedNumbers(i) - sortedNumbers(i + 1))\n            if (distance < closestDistance)\
    \ {\n                closest = (sortedNumbers(i), sortedNumbers(i + 1))\n    \
    \            closestDistance = distance\n            }\n        }\n        closest",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var min =\
    \ Float.MaxValue\n        var result = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n\
    \                    min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var closest\
    \ = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var minPair = (0f, 0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    minPair = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n      \
    \      for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minPair = (numbers(i), numbers(j))\n           \
    \     }\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDiff = Float.MaxValue\n        var minPair = Tuple2(0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = Tuple2(numbers(i), numbers(j))\n               \
    \ }\n            }\n        }\n        minPair", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        var min = Float.MaxValue\n\
    \        var minTuple : Tuple2[Float, Float] = null\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    minTuple = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minTuple", "        var minDiff = Float.MaxValue\n       \
    \ var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minDiffElements = (numbers(i), numbers(i + 1))\n            }\n\
    \        }\n        minDiffElements", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (Float.MaxValue, Float.MaxValue)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDiff = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var minDistance\
    \ = Float.MaxValue\n        var minPair : Tuple2[Float, Float] = null\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minPair = if (numbers(i) < numbers(j)) (numbers(i),\
    \ numbers(j)) else (numbers(j), numbers(i))\n                }\n            }\n\
    \        }\n        minPair", "        var minDistance = Float.MaxValue\n    \
    \    var minDistanceElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        var min = Float.MaxValue\n\
    \        var result = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        val sorted\
    \ = numbers.sorted\n        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until sorted.length - 1) {\n            val\
    \ diff = abs(sorted(i) - sorted(i + 1))\n            if (diff < minDiff) {\n \
    \               minDiff = diff\n                minDiffElements = (sorted(i),\
    \ sorted(i + 1))\n            }\n        }\n        minDiffElements", "      \
    \  val sortedNumbers = numbers.sorted\n        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until sortedNumbers.length\
    \ - 1) {\n            val distance = abs(sortedNumbers(i) - sortedNumbers(i +\
    \ 1))\n            if (distance < minDistance) {\n                minDistance\
    \ = distance\n                minDistanceElements = (sortedNumbers(i), sortedNumbers(i\
    \ + 1))\n            }\n        }\n        minDistanceElements", "        var\
    \ minDistance = Float.MaxValue\n        var minElements = (0.0f, 0.0f)\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minElements", "        var\
    \ minDistance = Float.MaxValue\n        var minElements = (0.0f, 0.0f)\n     \
    \   for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < minDistance) {\n                    minDistance\
    \ = distance\n                    minElements = (numbers(i), numbers(j))\n   \
    \             }\n            }\n        }\n        minElements", "        var\
    \ minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) -\
    \ numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (numbers(i), numbers(i + 1))\n   \
    \         }\n        }\n        minDiffElements", "        var min = Float.MaxValue\n\
    \        var result = (0f, 0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        result", "        var minDiff\
    \ = Float.MaxValue\n        var minElements = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minElements = (numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0f, 0f)\n        for (i <- 0 until numbers.length) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                val diff\
    \ = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n    \
    \                minDiff = diff\n                    minPair = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minPair", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = (0f, 0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDifference = Float.MaxValue\n        var minDifferenceElements = (0.0f, 0.0f)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val difference = abs(numbers(i) - numbers(j))\n\
    \                if (difference < minDifference) {\n                    minDifference\
    \ = difference\n                    minDifferenceElements = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        if (minDifferenceElements._1\
    \ > minDifferenceElements._2) (minDifferenceElements._2, minDifferenceElements._1)\n\
    \        else minDifferenceElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (0f, 0f)\n        for (i <- 0 until numbers.length - 1) {\n            val\
    \ diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n\
    \                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var closest = (numbers(0), numbers(1))\n        var minDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    closest = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        closest", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minDiffElements = (numbers(i), numbers(i + 1))\n            }\n\
    \        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0f, 0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var minDistance = Float.MaxValue\n        var closestElements = Tuple2(0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    closestElements = if (numbers(i)\
    \ < numbers(j)) (numbers(i), numbers(j)) else (numbers(j), numbers(i))\n     \
    \           }\n            }\n        }\n        closestElements", "        var\
    \ min = Float.MaxValue\n        var minIndex = 0\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < min) {\n                min = diff\n                minIndex = i\n\
    \            }\n        }\n        (numbers(minIndex), numbers(minIndex + 1))",
  "        var minDistance = Float.MaxValue\n        var minDistanceElements = Tuple2[Float,\
    \ Float](0, 0)\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = Tuple2(numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var min = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        // Sort the list of numbers.\n        val sortedNumbers\
    \ = numbers.sorted\n        // Find the closest pair of numbers.\n        var\
    \ closestPair = (sortedNumbers(0), sortedNumbers(1))\n        var closestDifference\
    \ = abs(sortedNumbers(0) - sortedNumbers(1))\n        for (i <- 0 until sortedNumbers.length\
    \ - 1) {\n            val difference = abs(sortedNumbers(i) - sortedNumbers(i\
    \ + 1))\n            if (difference < closestDifference) {\n                closestPair\
    \ = (sortedNumbers(i), sortedNumbers(i + 1))\n                closestDifference\
    \ = difference\n            }\n        }\n        closestPair", "        var minDistance\
    \ = Float.MaxValue\n        var minDistanceElements = Tuple2(0, 0)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = Tuple2(numbers(i), numbers(j))\n  \
    \              }\n            }\n        }\n        minDistanceElements", "  \
    \      val sorted = numbers.sorted\n        var minDiff = abs(sorted(0) - sorted(1))\n\
    \        var minPair = (sorted(0), sorted(1))\n        for (i <- 0 until sorted.length\
    \ - 1) {\n            val diff = abs(sorted(i) - sorted(i + 1))\n            if\
    \ (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (sorted(i), sorted(i + 1))\n            }\n        }\n        minPair", " \
    \       var minDistance = Float.MaxValue\n        var minDistanceElements = (0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < minDistance) {\n             \
    \       minDistance = distance\n                    minDistanceElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDistanceElements",
  "        var closest = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < abs(closest._1\
    \ - closest._2)) {\n                    closest = (numbers(i), numbers(j))\n \
    \               }\n            }\n        }\n        closest", "        var min\
    \ = Float.MaxValue\n        var result = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < min) {\n                    min = diff\n                    result = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        result", "        if (numbers.length < 2) throw new IllegalArgumentException(\"\
    List must have at least two elements\")\n        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (numbers(0), numbers(1))\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minDiffElements\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minDiffElements", "        var minDistance = Float.MaxValue\n        var\
    \ result : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     result = if (numbers(i) < numbers(j)) (numbers(i), numbers(j)) else (numbers(j),\
    \ numbers(i))\n                }\n            }\n        }\n        result", " \
    \       var minDiff = Float.MaxValue\n        var minDiffElements = Tuple2(0f,\
    \ 0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = Tuple2(numbers(i), numbers(j))\n       \
    \         }\n            }\n        }\n        return minDiffElements", "    \
    \    var minDiff = Float.MaxValue\n        var minDiffElements = (0f, 0f)\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minDiffElements = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minDiffElements", "        var closest\
    \ = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest"]
stop_tokens:
- "\n    }\n"
