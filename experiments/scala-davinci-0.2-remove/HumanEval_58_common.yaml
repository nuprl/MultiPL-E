name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    def common(l1 :\
  \ List[Long], l2 : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 &\
    \ s2).toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        val s3 = s1 & s2\n        s3.toList.sorted",
  "        val m1 = l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val h1 = l1.toSet\n        val h2 = l2.toSet\n        val h3 = h1.intersect(h2)\n\
    \        h3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1 & s2\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        val s3 = s1 & s2\n        s3.toList.sorted", "        val\
    \ s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val l = l1.intersect(l2).sorted\n        if (l.isEmpty) List(-1) else l",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val m1 = l1.toSet\n        val m2 = l2.toSet\n        val m3 = m1.intersect(m2)\n\
    \        m3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val m1 = l1.toSet\n        val m2\
    \ = l2.toSet\n        (m1 & m2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        var set1 = l1.toSet\n        var set2 = l2.toSet\n        var set3 = set1\
    \ & set2\n        return set3.toList.sorted", "        val s1 = l1.toSet\n   \
    \     val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val l3 = l1.intersect(l2)\n\
    \        l3.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n \
    \       (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2 =\
    \ l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n   \
    \     val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val l = l1.intersect(l2).sorted\n\
    \        if (l.isEmpty) return List(0)\n        return l", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1\
    \ = l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val l = l1.intersect(l2).sorted\n        if (l.isEmpty) List(0) else l",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val l = l1.intersect(l2).sorted\n        if (l.isEmpty) List(0) else l",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        val s3 = s1.intersect(s2)\n        s3.toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s = s1.intersect(s2)\n\
    \        s.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val l = l1.intersect(l2).sorted\n\
    \        if (l.isEmpty) List() else l.tail.foldLeft(List(l.head))((a, b) => if\
    \ (a.last != b) a :+ b else a)", "        val s1 = l1.toSet\n        val s2 =\
    \ l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n   \
    \     val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1 = l1.toSet\n\
    \        val m2 = l2.toSet\n        (m1 & m2).toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1 & s2\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n   \
    \     s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        val s = s1 & s2\n        s.toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val hs = HashSet[Long]()\n        for (i <- l1) hs += i\n        val res\
    \ = ListBuffer[Long]()\n        for (i <- l2) if (hs.contains(i)) res += i\n \
    \       res.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", '        (l1.toSet
    & l2.toSet).toList.sorted', "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val m1 = l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val m1 = l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted",
  "        val l = l1.intersect(l2).sorted\n        if (l.isEmpty) return List()\n\
    \        var result = List(l.head)\n        for (i <- 1 until l.length) {\n  \
    \          if (l(i) != l(i - 1)) result = result :+ l(i)\n        }\n        return\
    \ result", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val\
    \ s3 = s1 & s2\n        s3.toList.sorted", "        val s1 = l1.toSet\n      \
    \  val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1 = l1.toSet\n\
    \        val m2 = l2.toSet\n        (m1 & m2).toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1 & s2\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        val s3 = s1 & s2\n        s3.toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        val s3 = s1.intersect(s2)\n        s3.toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val m1 = l1.toSet\n        val m2 = l2.toSet\n        val m = m1.intersect(m2)\n\
    \        m.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val l = l1.intersect(l2).sorted\n\
    \        if (l.isEmpty) List(0) else l", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        val s = s1 & s2\n        s.toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s = s1.intersect(s2)\n\
    \        s.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val m1 =\
    \ l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s = s1 & s2\n\
    \        s.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val m1 = l1.toSet\n        val m2 = l2.toSet\n        (m1 & m2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val l = l1.intersect(l2).sorted\n        if (l.isEmpty) List(1) else l",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", '        l1.intersect(l2).sorted',
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s = s1 & s2\n\
    \        s.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val l = l1.intersect(l2).sorted\n\
    \        if (l.isEmpty) List(0) else l", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n        s3.toList.sorted",
  "        val s = new HashSet[Long]\n        for (i <- l1) s += i\n        val r\
    \ = new ListBuffer[Long]\n        for (i <- l2) if (s.contains(i)) r += i\n  \
    \      r.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1 & s2\n        s3.toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted"]
stop_tokens:
- "\n    }\n"
