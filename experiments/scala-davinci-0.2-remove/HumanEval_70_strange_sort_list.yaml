name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    def strangeSortList(lst\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val sorted = lst.sorted\n        val (min, max) = (sorted.head,\
    \ sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_ != max),\
    \ sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n  \
    \      val maxLstSorted = maxLst.sorted\n        val minLstSortedReversed = minLstSorted.reverse\n\
    \        val maxLstSortedReversed = maxLstSorted.reverse\n        val (minLstSortedReversed1,\
    \ minLstSortedReversed2) = minLstSortedReversed.splitAt(minLstSortedReversed.length\
    \ / 2)\n        val (maxLstSortedReversed1, maxLstSortedReversed2) = maxLstSortedReversed.splitAt(maxLstSortedReversed.length\
    \ / 2)\n        val minLstSortedReversed1Sorted = minLstSortedReversed1.sorted\n\
    \        val minLstSortedReversed2Sorted = minLstSortedReversed2.sorted\n    \
    \    val maxLstSortedReversed1Sorted = maxLstSortedReversed1.sorted\n        val\
    \ maxLstSortedReversed2Sorted = maxLstSortedReversed2.sorted\n        val minLstSortedReversed1SortedReversed\
    \ = minLstSortedReversed1Sorted.reverse\n        val minLstSortedReversed2SortedReversed\
    \ = minLstSortedReversed2Sorted.reverse\n        val maxLstSortedReversed1SortedReversed\
    \ = maxLstSortedReversed1Sorted.reverse\n        val maxLstSortedReversed2SortedReversed\
    \ = maxLstSortedReversed2Sorted.reverse\n        val minLstSortedReversed1SortedReversed1\
    \ = minLstSortedReversed1SortedReversed.head\n        val minLstSortedReversed1SortedRe",
  "        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n     \
    \   while (lst2.length > 0) {\n            lst3 = lst2.head :: lst3\n        \
    \    lst2 = lst2.tail\n            if (lst2.length > 0) {\n                lst3\
    \ = lst2.last :: lst3\n                lst2 = lst2.dropRight(1)\n            }\n\
    \        }\n        lst3", "        if (lst.length == 0) return lst\n        val\
    \ sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n \
    \       val (left, right) = sorted.tail.init.partition(_ < (min + max) / 2)\n\
    \        val leftSorted = left.sorted\n        val rightSorted = right.sorted\n\
    \        val result = new ListBuffer[Long]\n        result += min\n        result\
    \ ++= rightSorted\n        result += max\n        result ++= leftSorted\n    \
    \    result.toList", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val (minLstSorted, maxLstSorted)\
    \ = (minLst.sorted, maxLst.sorted)\n        val (minLstSortedRev, maxLstSortedRev)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n        val (minLstSortedRevIt,\
    \ maxLstSortedRevIt) = (minLstSortedRev.iterator, maxLstSortedRev.iterator)\n\
    \        val result = new ListBuffer[Long]\n        while (minLstSortedRevIt.hasNext\
    \ && maxLstSortedRevIt.hasNext) {\n            result += minLstSortedRevIt.next\n\
    \            result += maxLstSortedRevIt.next\n        }\n        if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n        if (maxLstSortedRevIt.hasNext) result\
    \ += maxLstSortedRevIt.next\n        result.toList", "        val sorted = lst.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        var j =\
    \ sorted.length - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        while (i\
    \ < sorted.length) {\n            if (i % 2 == 0) result += sorted(i)\n      \
    \      else result += sorted(sorted.length - 1 - i)\n            i += 1\n    \
    \    }\n        result.toList", "        val sorted = lst.sorted\n        val\
    \ n = lst.length\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        while (i < n) {\n            if (i % 2 == 0) result += sorted(i)\n  \
    \          else result += sorted(n - i - 1)\n            i += 1\n        }\n \
    \       result.toList", "        val sorted = lst.sorted\n        val result =\
    \ new ListBuffer[Long]\n        var i = 0\n        var j = sorted.length - 1\n\
    \        while (i <= j) {\n            result += sorted(i)\n            if (i\
    \ != j) result += sorted(j)\n            i += 1\n            j -= 1\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        var remaining\
    \ = lst.sortWith(_ < _)\n        while (remaining.length > 0) {\n            result\
    \ = remaining.head :: result\n            remaining = remaining.tail\n       \
    \     if (remaining.length > 0) {\n                result = remaining.last ::\
    \ result\n                remaining = remaining.init\n            }\n        }\n\
    \        result", "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = sorted.length - 1\n        while (i <= j)\
    \ {\n            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       var result = List[Long]()\n        var remaining = lst.sortWith(_ < _)\n\
    \        while (remaining.length > 0) {\n            result = remaining.head ::\
    \ result\n            remaining = remaining.tail\n            if (remaining.length\
    \ > 0) {\n                result = remaining.last :: result\n                remaining\
    \ = remaining.init\n            }\n        }\n        result", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = sorted.tail.partition(_ < max)\n        val (minLst1, maxLst1)\
    \ = minLst.partition(_ < min)\n        val (minLst2, maxLst2) = maxLst.partition(_\
    \ < min)\n        val (minLst3, maxLst3) = maxLst1.partition(_ < maxLst2.head)\n\
    \        val (minLst4, maxLst4) = minLst3.partition(_ < maxLst3.head)\n      \
    \  val (minLst5, maxLst5) = maxLst4.partition(_ < maxLst3.head)\n        val (minLst6,\
    \ maxLst6) = minLst5.partition(_ < maxLst2.head)\n        val (minLst7, maxLst7)\
    \ = maxLst6.partition(_ < maxLst2.head)\n        val (minLst8, maxLst8) = minLst7.partition(_\
    \ < maxLst2.head)\n        val (minLst9, maxLst9) = maxLst8.partition(_ < maxLst2.head)\n\
    \        val (minLst10, maxLst10) = minLst9.partition(_ < maxLst2.head)\n    \
    \    val (minLst11, maxLst11) = maxLst10.partition(_ < maxLst2.head)\n       \
    \ val (minLst12, maxLst12) = minLst11.partition(_ < maxLst2.head)\n        val\
    \ (minLst13, maxLst13) = maxLst12.partition(_ < maxLst2.head)\n        val (minLst14,\
    \ maxLst14) = minLst13.partition(_ < maxLst2.head)\n        val (minLst15, maxLst15)\
    \ = maxLst14.partition(_ < maxLst2.head)\n        val (minLst", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        def helper(minLst : List[Long], maxLst : List[Long], acc : List[Long])\
    \ : List[Long] = {\n            if (minLst.isEmpty && maxLst.isEmpty) acc\n  \
    \          else if (minLst.isEmpty) helper(minLst, maxLst.tail, acc :+ maxLst.head)\n\
    \            else if (maxLst.isEmpty) helper(minLst.tail, maxLst, acc :+ minLst.head)\n\
    \            else helper(minLst.tail, maxLst.tail, acc :+ minLst.head :+ maxLst.head)\n\
    \        }\n        helper(minLst, maxLst, List(min, max))", "        val sorted\
    \ = lst.sorted\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        while (i < sorted.length) {\n            if (i % 2 == 0) result += sorted(i)\n\
    \            else result += sorted(sorted.length - 1 - i)\n            i += 1\n\
    \        }\n        result.toList", "        val sorted = lst.sorted\n       \
    \ val result = new ListBuffer[Long]\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result += sorted(i)\n    \
    \        } else {\n                result += sorted(sorted.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        result.toList", "      \
    \  val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val (minLst2, maxLst2) = (minLst.reverse, maxLst.reverse)\n\
    \        val (minLst3, maxLst3) = (minLst2.tail, maxLst2.tail)\n        val (minLst4,\
    \ maxLst4) = (minLst3.reverse, maxLst3.reverse)\n        val (minLst5, maxLst5)\
    \ = (minLst4.tail, maxLst4.tail)\n        val (minLst6, maxLst6) = (minLst5.reverse,\
    \ maxLst5.reverse)\n        val (minLst7, maxLst7) = (minLst6.tail, maxLst6.tail)\n\
    \        val (minLst8, maxLst8) = (minLst7.reverse, maxLst7.reverse)\n       \
    \ val (minLst9, maxLst9) = (minLst8.tail, maxLst8.tail)\n        val (minLst10,\
    \ maxLst10) = (minLst9.reverse, maxLst9.reverse)\n        val (minLst11, maxLst11)\
    \ = (minLst10.tail, maxLst10.tail)\n        val (minLst12, maxLst12) = (minLst11.reverse,\
    \ maxLst11.reverse)\n        val (minLst13, maxLst13) = (minLst12.tail, maxLst12.tail)\n\
    \        val (minLst14, maxLst14) = (minLst13.reverse, maxLst13.reverse)\n   \
    \     val (minLst15, maxLst15) = (minLst14.tail, maxLst14.tail)\n        val (minLst16,\
    \ maxLst16) = (minLst15.reverse, maxLst15.reverse)\n       ", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        if (minLst.isEmpty) List(min)\n        else if (maxLst.isEmpty) List(max)\n\
    \        else List(min) ::: strangeSortList(maxLst) ::: List(max) ::: strangeSortList(minLst)",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        var result = List[Long]()\n        var i = 0\n        while (i < lst.length)\
    \ {\n            if (i % 2 == 0) result = result :+ min\n            else result\
    \ = result :+ max\n            i += 1\n        }\n        result", "        var\
    \ result = List[Long]()\n        var remaining = lst.sorted\n        while (!remaining.isEmpty)\
    \ {\n            result = remaining.head :: result\n            remaining = remaining.tail\n\
    \            if (!remaining.isEmpty) {\n                result = remaining.last\
    \ :: result\n                remaining = remaining.init\n            }\n     \
    \   }\n        result", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n\
    \        val maxLstSortedRev = maxLstSorted.reverse\n        val (minLstSortedRev1,\
    \ minLstSortedRev2) = minLstSortedRev.splitAt(minLstSortedRev.length / 2)\n  \
    \      val (maxLstSortedRev1, maxLstSortedRev2) = maxLstSortedRev.splitAt(maxLstSortedRev.length\
    \ / 2)\n        val minLstSorted1 = minLstSortedRev1.reverse\n        val minLstSorted2\
    \ = minLstSortedRev2.reverse\n        val maxLstSorted1 = maxLstSortedRev1.reverse\n\
    \        val maxLstSorted2 = maxLstSortedRev2.reverse\n        val minLstSorted1Rev\
    \ = minLstSorted1.reverse\n        val minLstSorted2Rev = minLstSorted2.reverse\n\
    \        val maxLstSorted1Rev = maxLstSorted1.reverse\n        val maxLstSorted2Rev\
    \ = maxLstSorted2.reverse\n        val minLstSorted1Rev1 = minLstSorted1Rev.head\n\
    \        val minLstSorted1Rev2 = minLstSorted1Rev.tail\n        val minLstSorted2Rev1\
    \ = minLstSorted2Rev.head\n        val minLstSorted2Rev2 = minLstSorted2Rev.tail\n\
    \        val maxLstSorted1Rev1 = maxLstSorted1Rev.head\n        val maxLstSorted1Rev2\
    \ = maxLstSorted1Rev.tail\n        val maxLstSorted2Rev1 = maxLstSorted2Rev.head\n\
    \        val", "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        while (i < sorted.length) {\n            if (i % 2\
    \ == 0) result += sorted(i)\n            else result += sorted(sorted.length -\
    \ 1 - i)\n            i += 1\n        }\n        result.toList", "        val\
    \ sorted = lst.sorted\n        val (left, right) = sorted.splitAt(sorted.length\
    \ / 2)\n        val result = new ListBuffer[Long]\n        for (i <- 0 until left.length)\
    \ {\n            result += left(i)\n            if (i < right.length) result +=\
    \ right(right.length - i - 1)\n        }\n        result.toList", "        val\
    \ sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n \
    \       val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail,\
    \ maxLstSortedRev.tail)\n        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val (minLstSortedRev4, maxLstSortedRev4)\
    \ = (minLstSortedRev3 :+ minLstSortedRev.head, maxLstSortedRev3 :+ maxLstSortedRev.head)\n\
    \        val (minLstSortedRev5, maxLstSortedRev5) = (minLstSortedRev4 :+ max,\
    \ maxLstSortedRev4 :+ min)\n        minLstSortedRev5 ::: maxLstSortedRev5", " \
    \       var sorted = lst.sorted\n        var result = List[Long]()\n        var\
    \ i = 0\n        while (i < sorted.length) {\n            if (i % 2 == 0) {\n\
    \                result = result :+ sorted(i)\n            } else {\n        \
    \        result = result :+ sorted(sorted.length - 1 - i)\n            }\n   \
    \         i += 1\n        }\n        return result", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = sorted.partition(_ == min)\n        val (minLst2, maxLst2) = sorted.partition(_\
    \ == max)\n        val (minLst3, maxLst3) = (minLst2.tail, maxLst2.tail)\n   \
    \     val (minLst4, maxLst4) = (minLst3.reverse, maxLst3.reverse)\n        val\
    \ (minLst5, maxLst5) = (minLst4.tail, maxLst4.tail)\n        val (minLst6, maxLst6)\
    \ = (minLst5.reverse, maxLst5.reverse)\n        val (minLst7, maxLst7) = (minLst6.tail,\
    \ maxLst6.tail)\n        val (minLst8, maxLst8) = (minLst7.reverse, maxLst7.reverse)\n\
    \        val (minLst9, maxLst9) = (minLst8.tail, maxLst8.tail)\n        val (minLst10,\
    \ maxLst10) = (minLst9.reverse, maxLst9.reverse)\n        val (minLst11, maxLst11)\
    \ = (minLst10.tail, maxLst10.tail)\n        val (minLst12, maxLst12) = (minLst11.reverse,\
    \ maxLst11.reverse)\n        val (minLst13, maxLst13) = (minLst12.tail, maxLst12.tail)\n\
    \        val (minLst14, maxLst14) = (minLst13.reverse, maxLst13.reverse)\n   \
    \     val (minLst15, maxLst15) = (minLst14.tail, maxLst14.tail)\n        val (minLst16,\
    \ maxLst16) = (minLst15.reverse, maxLst15.reverse)\n        val (minLst17, maxLst17)\
    \ = (minLst", "        val sorted = lst.sorted\n        val (min, max) = (sorted.head,\
    \ sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_ != max),\
    \ sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n  \
    \      val maxLstSorted = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n\
    \        val maxLstSortedRev = maxLstSorted.reverse\n        val minLstSortedRevIt\
    \ = minLstSortedRev.iterator\n        val maxLstSortedRevIt = maxLstSortedRev.iterator\n\
    \        val result = new ListBuffer[Long]\n        result += min\n        result\
    \ += max\n        while (minLstSortedRevIt.hasNext && maxLstSortedRevIt.hasNext)\
    \ {\n            result += minLstSortedRevIt.next\n            result += maxLstSortedRevIt.next\n\
    \        }\n        if (minLstSortedRevIt.hasNext) result += minLstSortedRevIt.next\n\
    \        if (maxLstSortedRevIt.hasNext) result += maxLstSortedRevIt.next\n   \
    \     result.toList", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val (minLstSorted, maxLstSorted)\
    \ = (minLst.sorted, maxLst.sorted)\n        val (minLstSortedRev, maxLstSortedRev)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n        val (minLstSortedRev2,\
    \ maxLstSortedRev2) = (minLstSortedRev.tail, maxLstSortedRev.tail)\n        val\
    \ (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse, maxLstSortedRev2.reverse)\n\
    \        val (minLstSortedRev4, maxLstSortedRev4) = (minLstSortedRev3 :+ minLstSortedRev.head,\
    \ maxLstSortedRev3 :+ maxLstSortedRev.head)\n        val (minLstSortedRev5, maxLstSortedRev5)\
    \ = (minLstSortedRev4 :+ max, maxLstSortedRev4 :+ min)\n        val (minLstSortedRev6,\
    \ maxLstSortedRev6) = (minLstSortedRev5.reverse, maxLstSortedRev5.reverse)\n \
    \       val (minLstSortedRev7, maxLstSortedRev7) = (minLstSortedRev6.tail, maxLstSortedRev6.tail)\n\
    \        val (minLstSortedRev8, maxLstSortedRev8) = (minLstSortedRev7.reverse,\
    \ maxLstSortedRev7.reverse)\n        val (minLstSortedRev9, maxLstSortedRev9)\
    \ = (minLstSortedRev8 :+ minLstSortedRev6.head, maxLstSortedRev8 :+ maxLstSortedRev6.head)\n\
    \        val (minLstSortedRev10,", "        val sorted = lst.sorted\n        val\
    \ n = lst.length\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        var j = n - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ArrayBuffer[Long]\n    \
    \    var i = 0\n        while (i < n) {\n            if (i % 2 == 0) result +=\
    \ sorted(i / 2)\n            else result += sorted(n - 1 - i / 2)\n          \
    \  i += 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ListBuffer[Long]\n     \
    \   var i = 0\n        var j = n - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            if (i != j) result += sorted(j)\n            i +=\
    \ 1\n            j -= 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        val minLstSorted = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n\
    \        val (minLstSortedReverse, maxLstSortedReverse) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedReverseTail, maxLstSortedReverseTail)\
    \ = (minLstSortedReverse.tail, maxLstSortedReverse.tail)\n        val (minLstSortedReverseTailInit,\
    \ maxLstSortedReverseTailInit) = (minLstSortedReverseTail.init, maxLstSortedReverseTail.init)\n\
    \        val (minLstSortedReverseTailInitReverse, maxLstSortedReverseTailInitReverse)\
    \ = (minLstSortedReverseTailInit.reverse, maxLstSortedReverseTailInit.reverse)\n\
    \        val (minLstSortedReverseTailInitReverseTail, maxLstSortedReverseTailInitReverseTail)\
    \ = (minLstSortedReverseTailInitReverse.tail, maxLstSortedReverseTailInitReverse.tail)\n\
    \        val (minLstSortedReverseTailInitReverseTailInit, maxLstSortedReverseTailInitReverseTailInit)\
    \ = (minLstSortedReverseTailInitReverseTail.init, maxLstSortedReverseTailInitReverseTail.init)\n\
    \        val (minLstSortedReverseTailInitReverseTailInitReverse, maxLstSortedReverseTailInitReverseTailInitReverse)\
    \ = (minLstSortedReverse", "        var result = List[Long]()\n        var remaining\
    \ = lst.sorted\n        while (remaining.length > 0) {\n            result = remaining.head\
    \ :: result\n            remaining = remaining.tail\n            if (remaining.length\
    \ > 0) {\n                result = remaining.last :: result\n                remaining\
    \ = remaining.init\n            }\n        }\n        result", "        val sorted\
    \ = lst.sorted\n        var result = ListBuffer[Long]()\n        var i = 0\n \
    \       var j = sorted.length - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            if (i != j) result += sorted(j)\n            i +=\
    \ 1\n            j -= 1\n        }\n        result.toList", "        var result\
    \ = List[Long]()\n        var remaining = lst.toBuffer\n        while (remaining.length\
    \ > 0) {\n            result = result :+ remaining.min\n            remaining\
    \ -= remaining.min\n            if (remaining.length > 0) {\n                result\
    \ = result :+ remaining.max\n                remaining -= remaining.max\n    \
    \        }\n        }\n        result", "        var result = List[Long]()\n \
    \       var remaining = lst.sortWith(_ < _)\n        while (remaining.length >\
    \ 0) {\n            result = result :+ remaining.head\n            remaining =\
    \ remaining.tail\n            if (remaining.length > 0) {\n                result\
    \ = result :+ remaining.last\n                remaining = remaining.init\n   \
    \         }\n        }\n        result", "        val sorted = lst.sorted\n  \
    \      val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n        def\
    \ helper(minLst : List[Long], maxLst : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            if (minLst.isEmpty && maxLst.isEmpty) acc\n            else\
    \ if (minLst.isEmpty) helper(minLst, maxLst.tail, acc :+ maxLst.head)\n      \
    \      else if (maxLst.isEmpty) helper(minLst.tail, maxLst, acc :+ minLst.head)\n\
    \            else if (minLst.length == maxLst.length) helper(minLst.tail, maxLst.tail,\
    \ acc :+ minLst.head :+ maxLst.head)\n            else if (minLst.length > maxLst.length)\
    \ helper(minLst.tail, maxLst, acc :+ minLst.head)\n            else helper(minLst,\
    \ maxLst.tail, acc :+ maxLst.head)\n        }\n        helper(minLst, maxLst,\
    \ List(min, max))", "        val sorted = lst.sorted\n        val (min, max) =\
    \ (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n        val (minLstSortedRev2,\
    \ maxLstSortedRev2) = (minLstSortedRev.tail, maxLstSortedRev.tail)\n        val\
    \ (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse, maxLstSortedRev2.reverse)\n\
    \        val (minLstSortedRev4, maxLstSortedRev4) = (minLstSortedRev3 :+ minLstSortedRev.head,\
    \ maxLstSortedRev3 :+ maxLstSortedRev.head)\n        val (minLstSortedRev5, maxLstSortedRev5)\
    \ = (minLstSortedRev4.reverse, maxLstSortedRev4.reverse)\n        val (minLstSortedRev6,\
    \ maxLstSortedRev6) = (minLstSortedRev5 :+ min, maxLstSortedRev5 :+ max)\n   \
    \     val (minLstSortedRev7, maxLstSortedRev7) = (minLstSortedRev6.reverse, maxLstSortedRev6.reverse)\n\
    \        val (minLstSortedRev8, maxLstSortedRev8) = (minLstSortedRev7.tail, maxLstSortedRev7.tail)\n\
    \        val (minLstSortedRev9, maxLstSortedRev9) = (minLstSortedRev8.reverse,\
    \ maxLstSortedRev8.reverse)\n        val (minLstSortedRev10, maxLstSortedRev10)\
    \ = (minLstSortedRev9 :+ min", "        val sorted = lst.sorted\n        val (min,\
    \ max) = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n\
    \        val maxLstSortedRev = maxLstSorted.reverse\n        val minLstSortedRevIt\
    \ = minLstSortedRev.iterator\n        val maxLstSortedRevIt = maxLstSortedRev.iterator\n\
    \        val result = new ListBuffer[Long]\n        result += min\n        result\
    \ += max\n        while (minLstSortedRevIt.hasNext && maxLstSortedRevIt.hasNext)\
    \ {\n            result += minLstSortedRevIt.next\n            result += maxLstSortedRevIt.next\n\
    \        }\n        result.toList", "        var result = List[Long]()\n     \
    \   var lst2 = lst.sorted\n        while (lst2.length > 0) {\n            result\
    \ = lst2.head :: result\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                result = lst2.last :: result\n                lst2 =\
    \ lst2.init\n            }\n        }\n        result", "        if (lst.length\
    \ == 0) return lst\n        val sorted = lst.sorted\n        val result = new\
    \ ListBuffer[Long]\n        var i = 0\n        var j = sorted.length - 1\n   \
    \     while (i <= j) {\n            result += sorted(i)\n            if (i !=\
    \ j) result += sorted(j)\n            i += 1\n            j -= 1\n        }\n\
    \        result.toList", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val (minLstSorted, maxLstSorted)\
    \ = (minLst.sorted, maxLst.sorted)\n        val (minLstSortedRev, maxLstSortedRev)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n        val (minLstSortedRevIt,\
    \ maxLstSortedRevIt) = (minLstSortedRev.iterator, maxLstSortedRev.iterator)\n\
    \        val result = new ListBuffer[Long]\n        while (minLstSortedRevIt.hasNext\
    \ && maxLstSortedRevIt.hasNext) {\n            result += minLstSortedRevIt.next\n\
    \            result += maxLstSortedRevIt.next\n        }\n        if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n        if (maxLstSortedRevIt.hasNext) result\
    \ += maxLstSortedRevIt.next\n        result.toList", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ListBuffer[Long]\n     \
    \   var i = 0\n        while (i < n) {\n            result += sorted(i)\n    \
    \        if (i + 1 < n) result += sorted(n - i - 1)\n            i += 1\n    \
    \    }\n        result.toList", "        if (lst.length == 0) return List()\n\
    \        if (lst.length == 1) return lst\n        val sorted = lst.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val rest\
    \ = sorted.tail.init\n        val (left, right) = rest.splitAt(rest.length / 2)\n\
    \        val leftSorted = strangeSortList(left)\n        val rightSorted = strangeSortList(right)\n\
    \        val leftSortedReversed = leftSorted.reverse\n        val rightSortedReversed\
    \ = rightSorted.reverse\n        val leftSortedReversedWithMax = leftSortedReversed\
    \ :+ max\n        val rightSortedReversedWithMin = min :: rightSortedReversed\n\
    \        val leftSortedReversedWithMaxAndRightSortedReversedWithMin = leftSortedReversedWithMax\
    \ ::: rightSortedReversedWithMin\n        leftSortedReversedWithMaxAndRightSortedReversedWithMin",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (left, right) = sorted.tail.init.splitAt(sorted.length / 2)\n   \
    \     if (sorted.length % 2 == 0) {\n            List(min) ++ right ++ List(max)\
    \ ++ left\n        } else {\n            List(min) ++ right ++ left ++ List(max)\n\
    \        }", "        val sorted = lst.sorted\n        val (min, max) = (sorted.head,\
    \ sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_ != max),\
    \ sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n  \
    \      val maxLstSorted = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n        val minLstSortedRevIt\
    \ = minLstSortedRev.iterator\n        val maxLstSortedRevIt = maxLstSortedRev.iterator\n\
    \        val result = new ListBuffer[Long]\n        while (minLstSortedRevIt.hasNext\
    \ && maxLstSortedRevIt.hasNext) {\n            result += minLstSortedRevIt.next\n\
    \            result += maxLstSortedRevIt.next\n        }\n        if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n        if (maxLstSortedRevIt.hasNext) result\
    \ += maxLstSortedRevIt.next\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.init, sorted.tail.init.reverse)\n        val result = new ListBuffer[Long]\n\
    \        result += min\n        result += max\n        for (i <- 0 until minLst.length)\
    \ {\n            result += minLst(i)\n            result += maxLst(i)\n      \
    \  }\n        result.toList", "        var result = List[Long]()\n        var\
    \ remaining = lst.sortWith(_ < _)\n        while (remaining.length > 0) {\n  \
    \          result = remaining.head :: result\n            remaining = remaining.tail\n\
    \            if (remaining.length > 0) {\n                result = remaining.last\
    \ :: result\n                remaining = remaining.init\n            }\n     \
    \   }\n        result", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val remaining = sorted.tail.init\n   \
    \     val result = new ListBuffer[Long]\n        result += min\n        var i\
    \ = 0\n        while (i < remaining.length) {\n            if (i % 2 == 0) {\n\
    \                result += remaining(i)\n            } else {\n              \
    \  result.prepend(remaining(i))\n            }\n            i += 1\n        }\n\
    \        result += max\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (left, right)\
    \ = sorted.tail.splitAt(sorted.length / 2)\n        val leftSorted = left.reverse\n\
    \        val rightSorted = right.reverse\n        val result = new ListBuffer[Long]\n\
    \        result += min\n        result += max\n        for (i <- 0 until leftSorted.length)\
    \ {\n            result += leftSorted(i)\n            result += rightSorted(i)\n\
    \        }\n        if (leftSorted.length != rightSorted.length) result += rightSorted.last\n\
    \        result.toList", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        def strangeSort(minLst : List[Long],\
    \ maxLst : List[Long], acc : List[Long]) : List[Long] = {\n            if (minLst.isEmpty\
    \ && maxLst.isEmpty) acc\n            else if (minLst.isEmpty) strangeSort(minLst,\
    \ maxLst.tail, acc :+ maxLst.head)\n            else if (maxLst.isEmpty) strangeSort(minLst.tail,\
    \ maxLst, acc :+ minLst.head)\n            else strangeSort(minLst.tail, maxLst.tail,\
    \ acc :+ minLst.head :+ maxLst.head)\n        }\n        strangeSort(minLst, maxLst,\
    \ List(min, max))", "        val sorted = lst.sorted\n        val (min, max) =\
    \ (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val (minLstSortedReverse, maxLstSortedReverse)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n        val minLstSortedReverseMax\
    \ = minLstSortedReverse.head :: maxLstSortedReverse\n        val maxLstSortedReverseMin\
    \ = maxLstSortedReverse.head :: minLstSortedReverse\n        val minLstSortedReverseMaxSorted\
    \ = minLstSortedReverseMax.sorted\n        val maxLstSortedReverseMinSorted =\
    \ maxLstSortedReverseMin.sorted\n        val minLstSortedReverseMaxSortedReverse\
    \ = minLstSortedReverseMaxSorted.reverse\n        val maxLstSortedReverseMinSortedReverse\
    \ = maxLstSortedReverseMinSorted.reverse\n        val minLstSortedReverseMaxSortedReverseMin\
    \ = minLstSortedReverseMaxSortedReverse.head :: minLstSortedReverse\n        val\
    \ maxLstSortedReverseMinSortedReverseMax = maxLstSortedReverseMinSortedReverse.head\
    \ :: maxLstSortedReverse\n        val minLstSortedReverseMaxSortedReverseMinSorted\
    \ = minLstSortedReverseMaxSortedReverseMin.sorted\n        val maxLstSortedReverseMinSortedReverseMaxSorted\
    \ = maxLstSortedReverseMinSortedReverseMax.sorted\n        val minLstSortedReverseMaxSortedReverseMinSortedReverse\
    \ = minLstSortedReverseMaxS", "        val sorted = lst.sorted\n        val (min,\
    \ max) = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedReversed =\
    \ minLstSorted.reverse\n        val maxLstSortedReversed = maxLstSorted.reverse\n\
    \        val minLstSortedReversedIterator = minLstSortedReversed.iterator\n  \
    \      val maxLstSortedReversedIterator = maxLstSortedReversed.iterator\n    \
    \    val result = new ListBuffer[Long]\n        result += min\n        result\
    \ += max\n        while (minLstSortedReversedIterator.hasNext && maxLstSortedReversedIterator.hasNext)\
    \ {\n            result += minLstSortedReversedIterator.next\n            result\
    \ += maxLstSortedReversedIterator.next\n        }\n        if (minLstSortedReversedIterator.hasNext)\
    \ result += minLstSortedReversedIterator.next\n        if (maxLstSortedReversedIterator.hasNext)\
    \ result += maxLstSortedReversedIterator.next\n        result.toList", "     \
    \   val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n      \
    \  val maxLstSortedRev = maxLstSorted.reverse\n        val (minLstSorted1, minLstSorted2)\
    \ = minLstSorted.splitAt(minLstSorted.length / 2)\n        val (maxLstSorted1,\
    \ maxLstSorted2) = maxLstSorted.splitAt(maxLstSorted.length / 2)\n        val\
    \ (minLstSortedRev1, minLstSortedRev2) = minLstSortedRev.splitAt(minLstSortedRev.length\
    \ / 2)\n        val (maxLstSortedRev1, maxLstSortedRev2) = maxLstSortedRev.splitAt(maxLstSortedRev.length\
    \ / 2)\n        val minLstSorted1Rev = minLstSorted1.reverse\n        val minLstSorted2Rev\
    \ = minLstSorted2.reverse\n        val maxLstSorted1Rev = maxLstSorted1.reverse\n\
    \        val maxLstSorted2Rev = maxLstSorted2.reverse\n        val minLstSortedRev1Rev\
    \ = minLstSortedRev1.reverse\n        val minLstSortedRev2Rev = minLstSortedRev2.reverse\n\
    \        val maxLstSortedRev1Rev = maxLstSortedRev1.reverse\n        val maxLstSortedRev2Rev\
    \ = maxLstSortedRev2.reverse\n        val minLstSorted1Rev1 = minLstSorted1Rev.head\
    \ :: minLstSorted1Rev.tail.reverse\n        val minLstSorted1Rev2 = minLstSorted1Rev.init.reverse\
    \ ::: List(minLstSorted1", "        val sorted = lst.sorted\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < sorted.length) {\n   \
    \         if (i % 2 == 0) result = result :+ sorted(i)\n            else result\
    \ = sorted(i) +: result\n            i += 1\n        }\n        result", "   \
    \     val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail,\
    \ maxLstSortedRev.tail)\n        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val (minLstSortedRev4, maxLstSortedRev4)\
    \ = (minLstSortedRev3.tail, maxLstSortedRev3.tail)\n        val (minLstSortedRev5,\
    \ maxLstSortedRev5) = (minLstSortedRev4.reverse, maxLstSortedRev4.reverse)\n \
    \       val (minLstSortedRev6, maxLstSortedRev6) = (minLstSortedRev5.tail, maxLstSortedRev5.tail)\n\
    \        val (minLstSortedRev7, maxLstSortedRev7) = (minLstSortedRev6.reverse,\
    \ maxLstSortedRev6.reverse)\n        val (minLstSortedRev8, maxLstSortedRev8)\
    \ = (minLstSortedRev7.tail, maxLstSortedRev7.tail)\n        val (minLstSortedRev9,\
    \ maxLstSortedRev9) = (minLstSortedRev8.reverse, maxLstSortedRev8.reverse)\n \
    \       val (minLstSortedRev10, maxLstSortedRev10) = (minLstSortedRev9.tail, maxLstSortedRev9.tail)\n\
    \        val (minLstS", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (left, right) = sorted.tail.init.splitAt(sorted.length\
    \ / 2)\n        val leftSorted = left.sorted\n        val rightSorted = right.sorted\n\
    \        val leftSortedReversed = leftSorted.reverse\n        val rightSortedReversed\
    \ = rightSorted.reverse\n        val leftSortedReversedWithMin = min :: leftSortedReversed\n\
    \        val rightSortedReversedWithMax = rightSortedReversed :+ max\n       \
    \ val leftSortedReversedWithMinAndRightSortedReversedWithMax = leftSortedReversedWithMin\
    \ ++ rightSortedReversedWithMax\n        val leftSortedReversedWithMinAndRightSortedReversedWithMaxReversed\
    \ = leftSortedReversedWithMinAndRightSortedReversedWithMax.reverse\n        val\
    \ leftSortedReversedWithMinAndRightSortedReversedWithMaxReversedWithMin = min\
    \ :: leftSortedReversedWithMinAndRightSortedReversedWithMaxReversed\n        val\
    \ leftSortedReversedWithMinAndRightSortedReversedWithMaxReversedWithMinAndMax\
    \ = leftSortedReversedWithMinAndRightSortedReversedWithMaxReversedWithMin :+ max\n\
    \        leftSortedReversedWithMinAndRightSortedReversedWithMaxReversedWithMinAndMax",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        while (i < sorted.length) {\n            if (i % 2 ==\
    \ 0) result += sorted(i)\n            else result += sorted(sorted.length - 1\
    \ - i)\n            i += 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val n = lst.length\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = n - 1\n        while (i <= j) {\n        \
    \    result += sorted(i)\n            if (i != j) result += sorted(j)\n      \
    \      i += 1\n            j -= 1\n        }\n        result.toList", "      \
    \  val lst2 = lst.sortWith(_ < _)\n        val lst3 = lst2.sortWith(_ > _)\n \
    \       val lst4 = lst2.zip(lst3)\n        lst4.map(x => x._1 + x._2)", "    \
    \    var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n       \
    \ while (lst2.length > 0) {\n            lst3 = lst2.head :: lst3\n          \
    \  lst2 = lst2.tail\n            if (lst2.length > 0) {\n                lst3\
    \ = lst2.last :: lst3\n                lst2 = lst2.init\n            }\n     \
    \   }\n        lst3", "        val sorted = lst.sorted\n        val n = lst.length\n\
    \        val result = new ArrayBuffer[Long]\n        var i = 0\n        var j\
    \ = n - 1\n        while (i <= j) {\n            result += sorted(i)\n       \
    \     if (i != j) result += sorted(j)\n            i += 1\n            j -= 1\n\
    \        }\n        result.toList", "        val sorted = lst.sorted\n       \
    \ val n = lst.length\n        val result = new ArrayBuffer[Long]\n        var\
    \ i = 0\n        while (i < n) {\n            if (i % 2 == 0) {\n            \
    \    result += sorted(i / 2)\n            } else {\n                result +=\
    \ sorted(n - i / 2 - 1)\n            }\n            i += 1\n        }\n      \
    \  result.toList", "        val sorted = lst.sorted\n        val (min, max) =\
    \ (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val (minLstSorted2, maxLstSorted2)\
    \ = (minLstSorted.tail.filter(_ != max), minLstSorted.init.filter(_ != min))\n\
    \        val (minLstSorted3, maxLstSorted3) = (minLstSorted2.tail.filter(_ !=\
    \ max), minLstSorted2.init.filter(_ != min))\n        val (minLstSorted4, maxLstSorted4)\
    \ = (minLstSorted3.tail.filter(_ != max), minLstSorted3.init.filter(_ != min))\n\
    \        val (minLstSorted5, maxLstSorted5) = (minLstSorted4.tail.filter(_ !=\
    \ max), minLstSorted4.init.filter(_ != min))\n        val (minLstSorted6, maxLstSorted6)\
    \ = (minLstSorted5.tail.filter(_ != max), minLstSorted5.init.filter(_ != min))\n\
    \        val (minLstSorted7, maxLstSorted7) = (minLstSorted6.tail.filter(_ !=\
    \ max), minLstSorted6.init.filter(_ != min))\n        val (minLstSorted8, maxLstSorted8)\
    \ = (minLstSorted7.tail.filter(_ != max), minLstSorted7.init.filter(_ != min))\n\
    \        val (minLstSorted9, maxLstSorted9) = (minLstSorted8.tail.filter(_ !=\
    \ max), minLstSorted8.init.filter(_ != min))\n        val (minLstSorted10, maxLstSorted10)\
    \ = (minLstSorted9.tail.filter(_ != max), minLstS", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        var result = List[Long]()\n\
    \        var current = min\n        var remaining = sorted.tail.init\n       \
    \ while (!remaining.isEmpty) {\n            result = result :+ current\n     \
    \       if (current == min) {\n                current = max\n               \
    \ remaining = remaining.tail\n            } else {\n                current =\
    \ min\n                remaining = remaining.init\n            }\n        }\n\
    \        result :+ current", "        val sorted = lst.sorted\n        val (min,\
    \ max) = (sorted.head, sorted.last)\n        val (minLst, maxLst) = sorted.tail.span(_\
    \ != max)\n        val (minLst1, maxLst1) = minLst.span(_ != min)\n        val\
    \ (minLst2, maxLst2) = maxLst.tail.span(_ != min)\n        val (minLst3, maxLst3)\
    \ = maxLst1.tail.span(_ != max)\n        val (minLst4, maxLst4) = minLst2.tail.span(_\
    \ != max)\n        val (minLst5, maxLst5) = maxLst2.tail.span(_ != min)\n    \
    \    val (minLst6, maxLst6) = minLst3.tail.span(_ != min)\n        val (minLst7,\
    \ maxLst7) = maxLst3.tail.span(_ != max)\n        val (minLst8, maxLst8) = minLst4.tail.span(_\
    \ != min)\n        val (minLst9, maxLst9) = maxLst4.tail.span(_ != max)\n    \
    \    val (minLst10, maxLst10) = minLst5.tail.span(_ != min)\n        val (minLst11,\
    \ maxLst11) = maxLst5.tail.span(_ != max)\n        val (minLst12, maxLst12) =\
    \ minLst6.tail.span(_ != min)\n        val (minLst13, maxLst13) = maxLst6.tail.span(_\
    \ != max)\n        val (minLst14, maxLst14) = minLst7.tail.span(_ != min)\n  \
    \      val (minLst15, maxLst15) = maxLst7.tail.span(_ != max)\n        val (minLst16,\
    \ maxLst16) = minLst8.tail.span(_ != min)\n        val (minLst17, maxLst17) =\
    \ maxLst8.tail.span(_ != max)\n        val (minL", "        val sorted = lst.sorted\n\
    \        var result = List[Long]()\n        var i = 0\n        var j = sorted.length\
    \ - 1\n        while (i < j) {\n            result = result :+ sorted(i)\n   \
    \         result = result :+ sorted(j)\n            i += 1\n            j -= 1\n\
    \        }\n        if (i == j) result = result :+ sorted(i)\n        result",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ < max), sorted.tail.filter(_\
    \ > min))\n        val (minLst2, maxLst2) = (minLst.sorted, maxLst.sorted)\n \
    \       val (minLst3, maxLst3) = (minLst2.tail, maxLst2.tail)\n        val (minLst4,\
    \ maxLst4) = (minLst3.filter(_ < maxLst2.head), maxLst3.filter(_ > minLst2.last))\n\
    \        val (minLst5, maxLst5) = (minLst4.sorted, maxLst4.sorted)\n        val\
    \ (minLst6, maxLst6) = (minLst5.tail, maxLst5.tail)\n        val (minLst7, maxLst7)\
    \ = (minLst6.filter(_ < maxLst5.head), maxLst6.filter(_ > minLst5.last))\n   \
    \     val (minLst8, maxLst8) = (minLst7.sorted, maxLst7.sorted)\n        val (minLst9,\
    \ maxLst9) = (minLst8.tail, maxLst8.tail)\n        val (minLst10, maxLst10) =\
    \ (minLst9.filter(_ < maxLst8.head), maxLst9.filter(_ > minLst8.last))\n     \
    \   val (minLst11, maxLst11) = (minLst10.sorted, maxLst10.sorted)\n        val\
    \ (minLst12, maxLst12) = (minLst11.tail, maxLst11.tail)\n        val (minLst13,\
    \ maxLst13) = (minLst12.filter(_ < maxLst11.head), maxLst12.filter(_ > minLst11.last))\n\
    \        val (minLst14, maxLst14) = (minLst13", "        var result = List[Long]()\n\
    \        var remaining = lst.sortWith(_ < _)\n        while (remaining.length\
    \ > 0) {\n            result = remaining.head :: result\n            remaining\
    \ = remaining.tail\n            if (remaining.length > 0) {\n                result\
    \ = remaining.last :: result\n                remaining = remaining.init\n   \
    \         }\n        }\n        result", "        val sorted = lst.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val remaining\
    \ = sorted.tail.init\n        val n = remaining.length\n        val (l1, l2) =\
    \ remaining.splitAt(n / 2)\n        val l3 = if (n % 2 == 0) List() else List(remaining.last)\n\
    \        val l4 = l1.reverse\n        val l5 = l2.reverse\n        val l6 = l3.reverse\n\
    \        val l7 = l4 ::: l5 ::: l6\n        val l8 = l7 ::: List(max) ::: List(min)\n\
    \        l8", "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        while (i < sorted.length) {\n            if (i % 2\
    \ == 0) {\n                result += sorted(i)\n            } else {\n       \
    \         result += sorted(sorted.length - 1 - i)\n            }\n           \
    \ i += 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (left, right)\
    \ = sorted.tail.init.partition(_ < min)\n        val (left1, right1) = left.partition(_\
    \ < max)\n        val (left2, right2) = right.partition(_ < min)\n        val\
    \ (left3, right3) = right1.partition(_ < max)\n        val (left4, right4) = left2.partition(_\
    \ < min)\n        val (left5, right5) = right3.partition(_ < max)\n        val\
    \ (left6, right6) = left3.partition(_ < min)\n        val (left7, right7) = right4.partition(_\
    \ < max)\n        val (left8, right8) = left4.partition(_ < min)\n        val\
    \ (left9, right9) = right5.partition(_ < max)\n        val (left10, right10) =\
    \ left5.partition(_ < min)\n        val (left11, right11) = right6.partition(_\
    \ < max)\n        val (left12, right12) = left6.partition(_ < min)\n        val\
    \ (left13, right13) = right7.partition(_ < max)\n        val (left14, right14)\
    \ = left7.partition(_ < min)\n        val (left15, right15) = right8.partition(_\
    \ < max)\n        val (left16, right16) = left8.partition(_ < min)\n        val\
    \ (left17, right17) = right9.partition(_ < max)\n        val (left18, right18)\
    \ = left9.partition(_ < min)\n        val (left19, right19) = right10.partition(_\
    \ < max)\n        val (left20, right20) = left10.partition(_ < min)\n        val\
    \ (left21, right21) = right11.partition(_ < max)\n        val (left22, right22)\
    \ = left11.partition(_ < min)\n        val (left23, right23) = right12.partition(_\
    \ < max)\n        val (", "        val sorted = lst.sorted\n        val (min,\
    \ max) = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.filter(_\
    \ != min), sorted.filter(_ != max))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n\
    \        val maxLstSortedRev = maxLstSorted.reverse\n        val minLstSortedRevZip\
    \ = minLstSortedRev.zip(maxLstSortedRev)\n        val minLstSortedRevZipFlat =\
    \ minLstSortedRevZip.flatMap(x => List(x._1, x._2))\n        val minLstSortedRevZipFlatSorted\
    \ = minLstSortedRevZipFlat.sorted\n        val minLstSortedRevZipFlatSortedRev\
    \ = minLstSortedRevZipFlatSorted.reverse\n        val minLstSortedRevZipFlatSortedRevZip\
    \ = minLstSortedRevZipFlatSortedRev.zip(minLstSortedRevZipFlatSorted)\n      \
    \  val minLstSortedRevZipFlatSortedRevZipFlat = minLstSortedRevZipFlatSortedRevZip.flatMap(x\
    \ => List(x._1, x._2))\n        val minLstSortedRevZipFlatSortedRevZipFlatSorted\
    \ = minLstSortedRevZipFlatSortedRevZipFlat.sorted\n        val minLstSortedRevZipFlatSortedRevZipFlatSortedRev\
    \ = minLstSortedRevZipFlatSortedRevZipFlatSorted.reverse\n        val minLstSortedRevZipFlatSortedRevZipFlatSortedRevZip\
    \ = minLstSortedRevZipFlatSortedRevZipFlatSortedRev.zip(minLstSortedRevZipFlatSortedRevZipFlatSorted)\n\
    \        val minLstSortedRevZipFlatSortedRevZipFlatSortedRevZipFlat = minLstSortedRevZipFlatSortedRev",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minList, maxList) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minListSorted = minList.sorted\n        val maxListSorted\
    \ = maxList.sorted\n        val minListSortedReversed = minListSorted.reverse\n\
    \        val maxListSortedReversed = maxListSorted.reverse\n        val (minList1,\
    \ minList2) = minListSorted.splitAt(minListSorted.length / 2)\n        val (maxList1,\
    \ maxList2) = maxListSorted.splitAt(maxListSorted.length / 2)\n        val (minList1Reversed,\
    \ minList2Reversed) = minListSortedReversed.splitAt(minListSortedReversed.length\
    \ / 2)\n        val (maxList1Reversed, maxList2Reversed) = maxListSortedReversed.splitAt(maxListSortedReversed.length\
    \ / 2)\n        val list1 = (minList1 ++ maxList1Reversed).toList\n        val\
    \ list2 = (minList2Reversed ++ maxList2).toList\n        val list = (list1 ++\
    \ list2).toList\n        min :: list ::: List(max)", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ListBuffer[Long]\n     \
    \   var i = 0\n        while (i < n) {\n            if (i % 2 == 0) result +=\
    \ sorted(i / 2)\n            else result += sorted(n - 1 - i / 2)\n          \
    \  i += 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n        val\
    \ minLstSorted = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n   \
    \     val minLstSortedRev = minLstSorted.reverse\n        val maxLstSortedRev\
    \ = maxLstSorted.reverse\n        val (minLstSortedRevIt, maxLstSortedRevIt) =\
    \ (minLstSortedRev.iterator, maxLstSortedRev.iterator)\n        val result = new\
    \ ListBuffer[Long]\n        result += min\n        while (minLstSortedRevIt.hasNext\
    \ && maxLstSortedRevIt.hasNext) {\n            result += minLstSortedRevIt.next\n\
    \            result += maxLstSortedRevIt.next\n        }\n        if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n        if (maxLstSortedRevIt.hasNext) result\
    \ += maxLstSortedRevIt.next\n        result.toList", "        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        while (lst2.length > 0) {\n \
    \           lst3 = lst2.head :: lst3\n            lst2 = lst2.tail\n         \
    \   if (lst2.length > 0) {\n                lst3 = lst2.last :: lst3\n       \
    \         lst2 = lst2.init\n            }\n        }\n        lst3", "       \
    \ val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n       \
    \ var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n   \
    \         result += sorted(i)\n            if (i != j) result += sorted(j)\n \
    \           i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n \
    \       var i = 0\n        while (i < sorted.length) {\n            if (i % 2\
    \ == 0) {\n                result += sorted(i)\n            } else {\n       \
    \         result += sorted(sorted.length - 1 - i)\n            }\n           \
    \ i += 1\n        }\n        result.toList", "        // Sort the list.\n    \
    \    val sorted = lst.sorted\n        // Create a new list.\n        val newList\
    \ = new ListBuffer[Long]\n        // Add the first element.\n        newList +=\
    \ sorted.head\n        // Add the last element.\n        newList += sorted.last\n\
    \        // Add the remaining elements.\n        for (i <- 1 until sorted.length\
    \ - 1) {\n            // Add the element.\n            newList += sorted(i)\n\
    \        }\n        // Return the new list.\n        newList.toList", "      \
    \  val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ < max), sorted.init.filter(_\
    \ > min))\n        val result = ListBuffer[Long]()\n        var i = 0\n      \
    \  while (i < lst.length) {\n            if (i % 2 == 0) {\n                if\
    \ (minLst.length > 0) {\n                    result += minLst.head\n         \
    \           minLst -= minLst.head\n                } else {\n                \
    \    result += maxLst.head\n                    maxLst -= maxLst.head\n      \
    \          }\n            } else {\n                if (maxLst.length > 0) {\n\
    \                    result += maxLst.last\n                    maxLst -= maxLst.last\n\
    \                } else {\n                    result += minLst.last\n       \
    \             minLst -= minLst.last\n                }\n            }\n      \
    \      i += 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (lst1, lst2) = sorted.splitAt(lst.length / 2)\n        if (lst1.length\
    \ == 0) lst2\n        else if (lst2.length == 0) lst1\n        else if (lst1.length\
    \ == 1) lst1 ::: lst2\n        else if (lst2.length == 1) lst2 ::: lst1\n    \
    \    else lst1.head :: lst2.last :: strangeSortList(lst1.tail ::: lst2.init)",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (left, right) = sorted.tail.init.partition(_ < (min + max) / 2)\n\
    \        val leftSorted = left.sortWith(_ > _)\n        val rightSorted = right.sortWith(_\
    \ < _)\n        (min :: rightSorted) ::: (max :: leftSorted)", "        val sorted\
    \ = lst.sorted\n        val (left, right) = sorted.splitAt(lst.length / 2)\n \
    \       val leftReverse = left.reverse\n        val rightReverse = right.reverse\n\
    \        val result = new ListBuffer[Long]\n        for (i <- 0 until min(left.length,\
    \ right.length)) {\n            result += leftReverse(i)\n            result +=\
    \ rightReverse(i)\n        }\n        if (left.length > right.length) result +=\
    \ leftReverse(left.length - 1)\n        else if (right.length > left.length) result\
    \ += rightReverse(right.length - 1)\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val n = lst.length\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        while (i < n) {\n            result += sorted(i)\n\
    \            if (i + 1 < n) result += sorted(n - i - 1)\n            i += 1\n\
    \        }\n        result.toList", "        var sorted = lst.sorted\n       \
    \ var result = List[Long]()\n        while (sorted.length > 0) {\n           \
    \ result = sorted.head :: result\n            sorted = sorted.tail\n         \
    \   if (sorted.length > 0) {\n                result = sorted.last :: result\n\
    \                sorted = sorted.init\n            }\n        }\n        result",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        while (i < sorted.length) {\n            if (i % 2 ==\
    \ 0) result += sorted(i)\n            else result += sorted(sorted.length - 1\
    \ - i)\n            i += 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        while (i < sorted.length) {\n            if (i % 2 == 0) {\n        \
    \        result += sorted(i)\n            } else {\n                result +=\
    \ sorted(sorted.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        var remaining\
    \ = lst.sortWith(_ < _)\n        while (remaining.length > 0) {\n            result\
    \ = remaining.head :: result\n            remaining = remaining.tail\n       \
    \     if (remaining.length > 0) {\n                result = remaining.last ::\
    \ result\n                remaining = remaining.init\n            }\n        }\n\
    \        result", "        val sorted = lst.sorted\n        val n = lst.length\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        while (i\
    \ < n) {\n            if (i % 2 == 0) result += sorted(i / 2)\n            else\
    \ result += sorted(n - 1 - i / 2)\n            i += 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val minLstSortedReversed = minLstSorted.reverse\n \
    \       val maxLstSortedReversed = maxLstSorted.reverse\n        val minLstSortedReversedZipped\
    \ = minLstSortedReversed.zip(maxLstSortedReversed)\n        val minLstSortedReversedZippedFlattened\
    \ = minLstSortedReversedZipped.flatten\n        val minLstSortedReversedZippedFlattenedSorted\
    \ = minLstSortedReversedZippedFlattened.sorted\n        val minLstSortedReversedZippedFlattenedSortedReversed\
    \ = minLstSortedReversedZippedFlattenedSorted.reverse\n        val minLstSortedReversedZippedFlattenedSortedReversedZipped\
    \ = minLstSortedReversedZippedFlattenedSortedReversed.zip(minLstSortedReversedZippedFlattenedSorted)\n\
    \        val minLstSortedReversedZippedFlattenedSortedReversedZippedFlattened\
    \ = minLstSortedReversedZippedFlattenedSortedReversedZipped.flatten\n        val\
    \ minLstSortedReversedZippedFlattenedSortedReversedZippedFlattenedSorted = minLstSortedReversedZippedFlattenedSortedReversedZippedFlattened.sorted\n\
    \        val minLstSortedReversedZippedFlattenedSortedReversedZippedFlattenedSortedReversed\
    \ = minLstSortedReversedZippedFlattenedSortedReversedZippedFlattenedSorted.reverse\n\
    \        val minLstSortedReversedZippedFlattenedSortedRe", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        val (minLstSorted, maxLstSorted) = (minLst.sorted, maxLst.sorted)\n \
    \       val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n\
    \        val (minLstSortedRevZip, maxLstSortedRevZip) = (minLstSortedRev.zipWithIndex,\
    \ maxLstSortedRev.zipWithIndex)\n        val (minLstSortedRevZipSort, maxLstSortedRevZipSort)\
    \ = (minLstSortedRevZip.sortBy(_._2), maxLstSortedRevZip.sortBy(_._2))\n     \
    \   val (minLstSortedRevZipSortMap, maxLstSortedRevZipSortMap) = (minLstSortedRevZipSort.map(_._1),\
    \ maxLstSortedRevZipSort.map(_._1))\n        val (minLstSortedRevZipSortMapRev,\
    \ maxLstSortedRevZipSortMapRev) = (minLstSortedRevZipSortMap.reverse, maxLstSortedRevZipSortMap.reverse)\n\
    \        val (minLstSortedRevZipSortMapRevAppend, maxLstSortedRevZipSortMapRevAppend)\
    \ = (minLstSortedRevZipSortMapRev :+ max, maxLstSortedRevZipSortMapRev :+ min)\n\
    \        val (minLstSortedRevZipSortMapRevAppendRev, maxLstSortedRevZipSortMapRevAppendRev)\
    \ = (minLstSortedRevZipSortMapRevAppend.reverse, maxLstSortedRevZipSortMapRevAppend.reverse)\n\
    \        val (minLstSortedRevZipSortMapRevAppendRevZip, maxLstSortedRevZipSortMapRevAppendRevZip)\
    \ = (minLstSortedRevZipSortMapRevAppendRev.zipWithIndex, maxL", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (left, right) = sorted.tail.splitAt(sorted.length / 2)\n        val (leftMin,\
    \ leftMax) = (left.head, left.last)\n        val (rightMin, rightMax) = (right.head,\
    \ right.last)\n        if (left.length == 1) List(min, max)\n        else List(min,\
    \ leftMax, rightMin, max) ::: strangeSortList(left.tail.tail ::: right.tail.tail)",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail,\
    \ maxLstSortedRev.tail)\n        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val minLstSortedRev4 = minLstSortedRev3 :+\
    \ minLstSortedRev.head\n        val maxLstSortedRev4 = maxLstSortedRev3 :+ maxLstSortedRev.head\n\
    \        val minLstSortedRev5 = minLstSortedRev4.reverse\n        val maxLstSortedRev5\
    \ = maxLstSortedRev4.reverse\n        val minLstSortedRev6 = minLstSortedRev5\
    \ :+ min\n        val maxLstSortedRev6 = maxLstSortedRev5 :+ max\n        val\
    \ minLstSortedRev7 = minLstSortedRev6.reverse\n        val maxLstSortedRev7 =\
    \ maxLstSortedRev6.reverse\n        val minLstSortedRev8 = minLstSortedRev7.tail\n\
    \        val maxLstSortedRev8 = maxLstSortedRev7.tail\n        val minLstSortedRev9\
    \ = minLstSortedRev8.reverse\n        val maxLstSortedRev9 = maxLstSortedRev8.reverse\n\
    \        val minLstSortedRev10 = minLstSortedRev9 :+ minLstSortedRev7.head\n \
    \       val maxLstSortedRev10 = maxLstS", "        val sorted = lst.sorted\n \
    \       val n = lst.length\n        val result = new ArrayBuffer[Long]\n     \
    \   var i = 0\n        var j = n - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            if (i != j) result += sorted(j)\n            i +=\
    \ 1\n            j -= 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val n = lst.length\n        val result = new ArrayBuffer[Long]\n\
    \        var i = 0\n        var j = n - 1\n        while (i <= j) {\n        \
    \    result += sorted(i)\n            if (i != j) result += sorted(j)\n      \
    \      i += 1\n            j -= 1\n        }\n        result.toList", "      \
    \  var result = new ListBuffer[Long]\n        var remaining = lst.sorted\n   \
    \     while (remaining.length > 0) {\n            result += remaining.head\n \
    \           remaining = remaining.tail\n            if (remaining.length > 0)\
    \ {\n                result += remaining.last\n                remaining = remaining.dropRight(1)\n\
    \            }\n        }\n        result.toList", "        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = ListBuffer[Long]()\n        while (lst2.length > 0)\
    \ {\n            lst3 += lst2.head\n            lst2 = lst2.tail\n           \
    \ if (lst2.length > 0) {\n                lst3 += lst2.last\n                lst2\
    \ = lst2.init\n            }\n        }\n        lst3.toList", "        def strangeSortList(lst\
    \ : List[Long], acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty)\
    \ acc\n            else {\n                val min = lst.min\n               \
    \ val max = lst.max\n                strangeSortList(lst.filter(_ != min).filter(_\
    \ != max), min :: max :: acc)\n            }\n        }\n        strangeSortList(lst,\
    \ Nil).reverse", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.slice(1, sorted.length\
    \ - 1)\n        val mid1 = mid.slice(0, mid.length / 2)\n        val mid2 = mid.slice(mid.length\
    \ / 2, mid.length)\n        val mid2R = mid2.reverse\n        val result = List(min)\
    \ ::: mid1 ::: List(max) ::: mid2R\n        result", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ArrayBuffer[Long]\n    \
    \    var i = 0\n        var j = n - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            i += 1\n            if (i <= j) {\n              \
    \  result += sorted(j)\n                j -= 1\n            }\n        }\n   \
    \     result.toList", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n\
    \        val maxLstSortedRev = maxLstSorted.reverse\n        val minLstSortedRevIt\
    \ = minLstSortedRev.iterator\n        val maxLstSortedRevIt = maxLstSortedRev.iterator\n\
    \        val result = new ListBuffer[Long]\n        result += min\n        while\
    \ (minLstSortedRevIt.hasNext && maxLstSortedRevIt.hasNext) {\n            result\
    \ += minLstSortedRevIt.next\n            result += maxLstSortedRevIt.next\n  \
    \      }\n        if (minLstSortedRevIt.hasNext) result += minLstSortedRevIt.next\n\
    \        if (maxLstSortedRevIt.hasNext) result += maxLstSortedRevIt.next\n   \
    \     result.toList", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedReversed =\
    \ minLstSorted.reverse\n        val maxLstSortedReversed = maxLstSorted.reverse\n\
    \        val minLstSortedReversedWithMin = minLstSortedReversed :+ min\n     \
    \   val maxLstSortedReversedWithMax = maxLstSortedReversed :+ max\n        val\
    \ minLstSortedReversedWithMinAndMax = minLstSortedReversedWithMin ::: maxLstSortedReversedWithMax\n\
    \        minLstSortedReversedWithMinAndMax", "        if (lst.length == 0) return\
    \ List()\n        val sorted = lst.sorted\n        var result = ListBuffer[Long]()\n\
    \        var i = 0\n        var j = sorted.length - 1\n        while (i <= j)\
    \ {\n            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val (minLst2, maxLst2) = (minLst.reverse, maxLst.reverse)\n\
    \        val (minLst3, maxLst3) = (minLst2.tail, maxLst2.tail)\n        val (minLst4,\
    \ maxLst4) = (minLst3.reverse, maxLst3.reverse)\n        val (minLst5, maxLst5)\
    \ = (minLst4.tail, maxLst4.tail)\n        val (minLst6, maxLst6) = (minLst5.reverse,\
    \ maxLst5.reverse)\n        val (minLst7, maxLst7) = (minLst6.tail, maxLst6.tail)\n\
    \        val (minLst8, maxLst8) = (minLst7.reverse, maxLst7.reverse)\n       \
    \ val (minLst9, maxLst9) = (minLst8.tail, maxLst8.tail)\n        val (minLst10,\
    \ maxLst10) = (minLst9.reverse, maxLst9.reverse)\n        val (minLst11, maxLst11)\
    \ = (minLst10.tail, maxLst10.tail)\n        val (minLst12, maxLst12) = (minLst11.reverse,\
    \ maxLst11.reverse)\n        val (minLst13, maxLst13) = (minLst12.tail, maxLst12.tail)\n\
    \        val (minLst14, maxLst14) = (minLst13.reverse, maxLst13.reverse)\n   \
    \     val (minLst15, maxLst15) = (minLst14.tail, maxLst14.tail)\n        val (minLst16,\
    \ maxLst16) = (minLst15.reverse, maxLst15.reverse)\n       ", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        val minLstSorted = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n\
    \        val (minLstSorted1, maxLstSorted1) = (minLstSorted.tail.reverse, maxLstSorted.tail.reverse)\n\
    \        val minLstSorted2 = minLstSorted.head :: minLstSorted1\n        val maxLstSorted2\
    \ = maxLstSorted.head :: maxLstSorted1\n        val (minLstSorted3, maxLstSorted3)\
    \ = (minLstSorted2.reverse, maxLstSorted2.reverse)\n        val lst1 = minLstSorted3\
    \ ++ maxLstSorted3\n        min :: lst1 :+ max", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n        val\
    \ minLstSorted = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n   \
    \     val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n\
    \        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail, maxLstSortedRev.tail)\n\
    \        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val (minLstSortedRev4, maxLstSortedRev4)\
    \ = (minLstSortedRev3 :+ minLstSortedRev.head, maxLstSortedRev3 :+ maxLstSortedRev.head)\n\
    \        val (minLstSortedRev5, maxLstSortedRev5) = (minLstSortedRev4.reverse,\
    \ maxLstSortedRev4.reverse)\n        val (minLstSortedRev6, maxLstSortedRev6)\
    \ = (minLstSortedRev5 :+ min, maxLstSortedRev5 :+ max)\n        val (minLstSortedRev7,\
    \ maxLstSortedRev7) = (minLstSortedRev6.reverse, maxLstSortedRev6.reverse)\n \
    \       val (minLstSortedRev8, maxLstSortedRev8) = (minLstSortedRev7.tail, maxLstSortedRev7.tail)\n\
    \        val (minLstSortedRev9, maxLstSortedRev9) = (minLstSortedRev8.reverse,\
    \ maxLstSortedRev8.reverse)\n        val (minLstSortedRev10, maxLstSortedRev10)\
    \ = (minLstSortedRev9 :+ min", "        var lst2 = lst.sorted\n        var lst3\
    \ = List[Long]()\n        while (lst2.length > 0) {\n            lst3 = lst2.head\
    \ :: lst3\n            lst2 = lst2.tail\n            if (lst2.length > 0) {\n\
    \                lst3 = lst2.last :: lst3\n                lst2 = lst2.init\n\
    \            }\n        }\n        lst3", "        val sorted = lst.sorted\n \
    \       val result = new ListBuffer[Long]\n        var i = 0\n        var j =\
    \ sorted.length - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n        val\
    \ (minLstSorted, maxLstSorted) = (minLst.sorted, maxLst.sorted)\n        val (minLstSortedRev,\
    \ maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n        val\
    \ (minLstSortedRevIt, maxLstSortedRevIt) = (minLstSortedRev.iterator, maxLstSortedRev.iterator)\n\
    \        val result = new ListBuffer[Long]\n        while (minLstSortedRevIt.hasNext\
    \ || maxLstSortedRevIt.hasNext) {\n            if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n            if (maxLstSortedRevIt.hasNext)\
    \ result += maxLstSortedRevIt.next\n        }\n        result.toList", "     \
    \   val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val (minLstSorted, maxLstSorted) = (minLst.sorted, maxLst.sorted)\n\
    \        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n\
    \        val (minLstSortedRevIt, maxLstSortedRevIt) = (minLstSortedRev.iterator,\
    \ maxLstSortedRev.iterator)\n        val result = new ListBuffer[Long]\n     \
    \   while (minLstSortedRevIt.hasNext && maxLstSortedRevIt.hasNext) {\n       \
    \     result += minLstSortedRevIt.next\n            result += maxLstSortedRevIt.next\n\
    \        }\n        if (minLstSortedRevIt.hasNext) result += minLstSortedRevIt.next\n\
    \        if (maxLstSortedRevIt.hasNext) result += maxLstSortedRevIt.next\n   \
    \     result.toList", "        var result = List[Long]()\n        var remaining\
    \ = lst.sorted\n        while (remaining.length > 0) {\n            result = remaining.head\
    \ :: result\n            remaining = remaining.tail\n            if (remaining.length\
    \ > 0) {\n                result = remaining.last :: result\n                remaining\
    \ = remaining.init\n            }\n        }\n        result", "        val sorted\
    \ = lst.sorted\n        var result = List[Long]()\n        var min = sorted.head\n\
    \        var max = sorted.last\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result = min :: result\n \
    \               min = sorted.tail.filter(_ > min).min\n            } else {\n\
    \                result = max :: result\n                max = sorted.filter(_\
    \ < max).max\n            }\n            i += 1\n        }\n        result.reverse",
  "        val sorted = lst.sorted\n        val n = lst.length\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        var j = n - 1\n        while\
    \ (i <= j) {\n            result += sorted(i)\n            if (i != j) result\
    \ += sorted(j)\n            i += 1\n            j -= 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n      \
    \  val maxLstSortedRev = maxLstSorted.reverse\n        val minLstSortedRevIt =\
    \ minLstSortedRev.iterator\n        val maxLstSortedRevIt = maxLstSortedRev.iterator\n\
    \        val result = new ListBuffer[Long]\n        result += min\n        while\
    \ (minLstSortedRevIt.hasNext && maxLstSortedRevIt.hasNext) {\n            result\
    \ += minLstSortedRevIt.next\n            result += maxLstSortedRevIt.next\n  \
    \      }\n        if (minLstSortedRevIt.hasNext) result += minLstSortedRevIt.next\n\
    \        if (maxLstSortedRevIt.hasNext) result += maxLstSortedRevIt.next\n   \
    \     result.toList", "        val sorted = lst.sorted\n        val result = new\
    \ ListBuffer[Long]\n        var i = 0\n        var j = sorted.length - 1\n   \
    \     while (i <= j) {\n            result += sorted(i)\n            if (i !=\
    \ j) result += sorted(j)\n            i += 1\n            j -= 1\n        }\n\
    \        result.toList", "        val sorted = lst.sorted\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result += sorted(i)\n    \
    \        } else {\n                result += sorted(sorted.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        result.toList", "      \
    \  val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n      \
    \  var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n  \
    \          result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail,\
    \ maxLstSortedRev.tail)\n        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val (minLstSortedRev4, maxLstSortedRev4)\
    \ = (minLstSortedRev3.tail, maxLstSortedRev3.tail)\n        val (minLstSortedRev5,\
    \ maxLstSortedRev5) = (minLstSortedRev4.reverse, maxLstSortedRev4.reverse)\n \
    \       val (minLstSortedRev6, maxLstSortedRev6) = (minLstSortedRev5.tail, maxLstSortedRev5.tail)\n\
    \        val (minLstSortedRev7, maxLstSortedRev7) = (minLstSortedRev6.reverse,\
    \ maxLstSortedRev6.reverse)\n        val (minLstSortedRev8, maxLstSortedRev8)\
    \ = (minLstSortedRev7.tail, maxLstSortedRev7.tail)\n        val (minLstSortedRev9,\
    \ maxLstSortedRev9) = (minLstSortedRev8.reverse, maxLstSortedRev8.reverse)\n \
    \       val (minLstSortedRev10, maxLstSortedRev10) = (minLstSortedRev9.tail, maxLstSortedRev9.tail)\n\
    \        val (minLstS", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.init,\
    \ sorted.tail.init.reverse)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until lst.length) {\n            if (i % 2 == 0) result = result :+ minLst(i\
    \ / 2)\n            else result = result :+ maxLst(i / 2)\n        }\n       \
    \ if (lst.length % 2 == 0) result = result :+ max\n        else result = result\
    \ :+ min\n        result", "        val sorted = lst.sorted\n        val (min,\
    \ max) = (sorted.head, sorted.last)\n        var result = List[Long]()\n     \
    \   var remaining = sorted.tail.init\n        while (remaining.length > 0) {\n\
    \            result = result :+ min\n            result = result :+ max\n    \
    \        remaining = remaining.filter(x => x != min && x != max)\n           \
    \ if (remaining.length > 0) {\n                val (min, max) = (remaining.min,\
    \ remaining.max)\n            }\n        }\n        result", "        val sorted\
    \ = lst.sorted\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        var j = sorted.length - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            if (i != j) result += sorted(j)\n            i +=\
    \ 1\n            j -= 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val n = lst.length\n        val result = new ArrayBuffer[Long]\n\
    \        var i = 0\n        while (i < n) {\n            if (i % 2 == 0) result\
    \ += sorted(i)\n            else result += sorted(n - i - 1)\n            i +=\
    \ 1\n        }\n        result.toList", "        val sorted = lst.sorted\n   \
    \     val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n        val\
    \ minLstSorted = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n   \
    \     val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n\
    \        val (minLstSortedRevIt, maxLstSortedRevIt) = (minLstSortedRev.iterator,\
    \ maxLstSortedRev.iterator)\n        val result = new ListBuffer[Long]\n     \
    \   result += min\n        result += max\n        while (minLstSortedRevIt.hasNext\
    \ && maxLstSortedRevIt.hasNext) {\n            result += minLstSortedRevIt.next\n\
    \            result += maxLstSortedRevIt.next\n        }\n        if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n        if (maxLstSortedRevIt.hasNext) result\
    \ += maxLstSortedRevIt.next\n        result.toList", "        val sorted = lst.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        var j =\
    \ sorted.length - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var remaining = lst.sorted\n        while (remaining.length > 0) {\n\
    \            result = remaining.head :: result\n            remaining = remaining.tail\n\
    \            if (remaining.length > 0) {\n                result = remaining.last\
    \ :: result\n                remaining = remaining.init\n            }\n     \
    \   }\n        result", "        val sorted = lst.sorted\n        val (min, max)\
    \ = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minIter = Iterator.continually(minLst).flatten\n\
    \        val maxIter = Iterator.continually(maxLst).flatten\n        val iter\
    \ = Iterator.continually(minIter.next).zip(maxIter).flatten\n        iter.toList",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val minLstSortedRev = minLstSorted.reverse\n      \
    \  val maxLstSortedRev = maxLstSorted.reverse\n        val minLstSortedRevZip\
    \ = minLstSortedRev.zipWithIndex\n        val maxLstSortedRevZip = maxLstSortedRev.zipWithIndex\n\
    \        val minLstSortedRevZipFiltered = minLstSortedRevZip.filter(_._2 % 2 ==\
    \ 0)\n        val maxLstSortedRevZipFiltered = maxLstSortedRevZip.filter(_._2\
    \ % 2 == 0)\n        val minLstSortedRevZipFilteredUnzip = minLstSortedRevZipFiltered.unzip._1\n\
    \        val maxLstSortedRevZipFilteredUnzip = maxLstSortedRevZipFiltered.unzip._1\n\
    \        val minLstSortedRevZipFilteredUnzipRev = minLstSortedRevZipFilteredUnzip.reverse\n\
    \        val maxLstSortedRevZipFilteredUnzipRev = maxLstSortedRevZipFilteredUnzip.reverse\n\
    \        val minLstSortedRevZipFilteredUnzipRevZip = minLstSortedRevZipFilteredUnzipRev.zipWithIndex\n\
    \        val maxLstSortedRevZipFilteredUnzipRevZip = maxLstSortedRevZipFilteredUnzipRev.zipWithIndex\n\
    \        val minLstSortedRevZipFilteredUnzipRevZipFiltered = minLstSortedRevZipFilteredUnzipRevZip.filter(_._2\
    \ % 2 == 0)\n        val maxLstSortedRevZipFilteredUnzipRevZipFiltered = maxLstSortedRevZipFilteredUnzipRevZip.filter(_._2\
    \ % 2 == 0)\n        val minLstSortedRevZipFilteredUnzipRevZipFiltered", "   \
    \     val sorted = lst.sorted\n        val n = lst.length\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        var j = n - 1\n        while\
    \ (i <= j) {\n            result += sorted(i)\n            if (i != j) result\
    \ += sorted(j)\n            i += 1\n            j -= 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        var result = List(min)\n        var remaining = sorted.tail.init\n  \
    \      var ascending = true\n        while (remaining.length > 0) {\n        \
    \    if (ascending) {\n                result = result :+ remaining.last\n   \
    \             remaining = remaining.init\n            } else {\n             \
    \   result = result :+ remaining.head\n                remaining = remaining.tail\n\
    \            }\n            ascending = !ascending\n        }\n        result",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLst2 = minLst.reverse\n        val maxLst2 = maxLst.reverse\n\
    \        val result = ListBuffer[Long]()\n        var i = 0\n        while (i\
    \ < minLst.length) {\n            result += minLst(i)\n            result += maxLst(i)\n\
    \            i += 1\n        }\n        if (minLst.length != maxLst.length) result\
    \ += minLst.last\n        result.toList", "        val sorted = lst.sorted\n \
    \       val result = new ListBuffer[Long]\n        var i = 0\n        while (i\
    \ < sorted.length) {\n            result += sorted(i)\n            if (i + 1 <\
    \ sorted.length) result += sorted(sorted.length - i - 1)\n            i += 1\n\
    \        }\n        result.toList", "        var result = List[Long]()\n     \
    \   var remaining = lst.sortWith(_ < _)\n        while (remaining.length > 0)\
    \ {\n            result = remaining.head :: result\n            remaining = remaining.tail\n\
    \            if (remaining.length > 0) {\n                result = remaining.last\
    \ :: result\n                remaining = remaining.init\n            }\n     \
    \   }\n        result", "        val sorted = lst.sorted\n        val n = lst.length\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        var j =\
    \ n - 1\n        while (i <= j) {\n            result += sorted(i)\n         \
    \   if (i != j) result += sorted(j)\n            i += 1\n            j -= 1\n\
    \        }\n        result.toList", "        if (lst.length == 0) return List()\n\
    \        if (lst.length == 1) return lst\n        val sorted = lst.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val rest\
    \ = sorted.tail.init\n        val (left, right) = rest.splitAt(rest.length / 2)\n\
    \        val leftSorted = left.sorted\n        val rightSorted = right.sorted\n\
    \        val leftSortedReversed = leftSorted.reverse\n        val rightSortedReversed\
    \ = rightSorted.reverse\n        val leftSortedReversedWithMax = leftSortedReversed\
    \ :+ max\n        val rightSortedReversedWithMin = min :: rightSortedReversed\n\
    \        val result = leftSortedReversedWithMax ::: rightSortedReversedWithMin\n\
    \        return result", "        val sorted = lst.sorted\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) result += sorted(i)\n            else result\
    \ += sorted(sorted.length - 1 - i)\n            i += 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSorted1, maxLstSorted1) = if (minLstSorted.length\
    \ > maxLstSorted.length) (minLstSorted, maxLstSorted) else (maxLstSorted, minLstSorted)\n\
    \        val minLstSorted2 = minLstSorted1.reverse\n        val maxLstSorted2\
    \ = maxLstSorted1.reverse\n        val minLstSorted3 = minLstSorted2.map(x =>\
    \ (x, true))\n        val maxLstSorted3 = maxLstSorted2.map(x => (x, false))\n\
    \        val lst1 = minLstSorted3 ++ maxLstSorted3\n        val lst2 = lst1.sortBy(_._2)\n\
    \        val lst3 = lst2.map(_._1)\n        val lst4 = min :: lst3 :+ max\n  \
    \      lst4", "        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n\
    \        while (lst2.length > 0) {\n            lst3 = lst2.head :: lst3\n   \
    \         lst2 = lst2.tail\n            if (lst2.length > 0) {\n             \
    \   lst3 = lst2.last :: lst3\n                lst2 = lst2.dropRight(1)\n     \
    \       }\n        }\n        lst3", "        def strangeSortList(lst : List[Long],\
    \ acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty) acc\n     \
    \       else {\n                val min = lst.min\n                val max = lst.max\n\
    \                val minIndex = lst.indexOf(min)\n                val maxIndex\
    \ = lst.indexOf(max)\n                if (minIndex < maxIndex) {\n           \
    \         strangeSortList(lst.slice(minIndex + 1, maxIndex) ::: lst.slice(maxIndex\
    \ + 1, lst.length), acc ::: List(min, max))\n                } else {\n      \
    \              strangeSortList(lst.slice(maxIndex + 1, minIndex) ::: lst.slice(minIndex\
    \ + 1, lst.length), acc ::: List(max, min))\n                }\n            }\n\
    \        }\n        strangeSortList(lst, List())", "        val sorted = lst.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val remaining\
    \ = sorted.tail.init\n        val n = remaining.length\n        val half = n /\
    \ 2\n        val first = remaining.take(half)\n        val second = remaining.drop(half)\n\
    \        val firstSorted = first.sortWith(_ > _)\n        val secondSorted = second.sortWith(_\
    \ < _)\n        val result = (firstSorted ::: List(min) ::: secondSorted ::: List(max)).toList\n\
    \        result", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.slice(1, sorted.length\
    \ - 1)\n        val midSorted = mid.sorted\n        val midSortedReversed = midSorted.reverse\n\
    \        val midSortedReversedWithMin = min :: midSortedReversed\n        val\
    \ midSortedReversedWithMinAndMax = midSortedReversedWithMin :+ max\n        midSortedReversedWithMinAndMax",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        var result = List[Long]()\n        var (i, j) = (0, sorted.length - 1)\n\
    \        while (i <= j) {\n            if (i == j) {\n                result =\
    \ result :+ sorted(i)\n                i += 1\n            } else {\n        \
    \        result = result :+ sorted(i) :+ sorted(j)\n                i += 1\n \
    \               j -= 1\n            }\n        }\n        result", "        val\
    \ sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n \
    \       val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val minLstSortedReversed = minLstSorted.reverse\n \
    \       val maxLstSortedReversed = maxLstSorted.reverse\n        val minLstSortedReversedZipped\
    \ = minLstSortedReversed.zip(maxLstSortedReversed)\n        val minLstSortedReversedZippedFlattened\
    \ = minLstSortedReversedZipped.flatten\n        val minLstSortedReversedZippedFlattenedSorted\
    \ = minLstSortedReversedZippedFlattened.sorted\n        val minLstSortedReversedZippedFlattenedSortedReversed\
    \ = minLstSortedReversedZippedFlattenedSorted.reverse\n        val minLstSortedReversedZippedFlattenedSortedReversedZipped\
    \ = minLstSortedReversedZippedFlattenedSortedReversed.zip(minLstSortedReversedZippedFlattenedSorted)\n\
    \        val minLstSortedReversedZippedFlattenedSortedReversedZippedFlattened\
    \ = minLstSortedReversedZippedFlattenedSortedReversedZipped.flatten\n        val\
    \ minLstSortedReversedZippedFlattenedSortedReversedZippedFlattenedSorted = minLstSortedReversedZippedFlattenedSortedReversedZippedFlattened.sorted\n\
    \        val minLstSortedReversedZippedFlattenedSortedReversedZippedFlattenedSortedReversed\
    \ = minLstSortedReversedZippedFlattenedSortedReversedZippedFlattenedSorted.reverse\n\
    \        val minLstSortedReversedZippedFlattenedSortedRe", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        if (minLst.isEmpty) List(min)\n        else if (maxLst.isEmpty) List(max)\n\
    \        else List(min) ::: strangeSortList(maxLst) ::: List(max) ::: strangeSortList(minLst)",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minList, maxList) = (sorted.tail.filter(_ < max), sorted.tail.filter(_\
    \ > min))\n        val minListSorted = minList.sorted\n        val maxListSorted\
    \ = maxList.sorted\n        val minListSortedReversed = minListSorted.reverse\n\
    \        val maxListSortedReversed = maxListSorted.reverse\n        val minListSortedReversedTail\
    \ = minListSortedReversed.tail\n        val maxListSortedReversedTail = maxListSortedReversed.tail\n\
    \        val minListSortedReversedTailTail = minListSortedReversedTail.tail\n\
    \        val maxListSortedReversedTailTail = maxListSortedReversedTail.tail\n\
    \        val minListSortedReversedTailTailTail = minListSortedReversedTailTail.tail\n\
    \        val maxListSortedReversedTailTailTail = maxListSortedReversedTailTail.tail\n\
    \        val minListSortedReversedTailTailTailTail = minListSortedReversedTailTailTail.tail\n\
    \        val maxListSortedReversedTailTailTailTail = maxListSortedReversedTailTailTail.tail\n\
    \        val minListSortedReversedTailTailTailTailTail = minListSortedReversedTailTailTailTail.tail\n\
    \        val maxListSortedReversedTailTailTailTailTail = maxListSortedReversedTailTailTailTail.tail\n\
    \        val minListSortedReversedTailTailTailTailTailTail = minListSortedReversedTailTailTailTailTail.tail\n\
    \        val maxListSortedReversedTailTailTailTailTailTail = maxListSortedReversedTailTailTailTailTail.tail\n\
    \        val minListSortedRe", "        val sorted = lst.sorted\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result += sorted(i)\n    \
    \        } else {\n                result += sorted(sorted.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        result.toList", "      \
    \  val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val (minLstSorted, maxLstSorted) = (minLst.sorted, maxLst.sorted)\n\
    \        val (minLstSortedReversed, maxLstSortedReversed) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedReversedTail, maxLstSortedReversedTail)\
    \ = (minLstSortedReversed.tail, maxLstSortedReversed.tail)\n        val (minLstSortedReversedTailInit,\
    \ maxLstSortedReversedTailInit) = (minLstSortedReversedTail.init, maxLstSortedReversedTail.init)\n\
    \        val (minLstSortedReversedTailInitHead, maxLstSortedReversedTailInitHead)\
    \ = (minLstSortedReversedTailInit.head, maxLstSortedReversedTailInit.head)\n \
    \       val (minLstSortedReversedTailInitHeadTail, maxLstSortedReversedTailInitHeadTail)\
    \ = (minLstSortedReversedTailInitHead.tail, maxLstSortedReversedTailInitHead.tail)\n\
    \        val (minLstSortedReversedTailInitHeadTailInit, maxLstSortedReversedTailInitHeadTailInit)\
    \ = (minLstSortedReversedTailInitHeadTail.init, maxLstSortedReversedTailInitHeadTail.init)\n\
    \        val (minLstSortedReversedTailInitHeadTailInitHead, maxLstSortedReversedTailInitHeadTailInitHead)\
    \ = (minLstSortedReversedTailInitHeadTailInit.head, maxLstSortedReversedTailInitHeadTailInit.",
  "        def strangeSortList(lst : List[Long], acc : List[Long]) : List[Long] =\
    \ {\n            if (lst.isEmpty) acc\n            else {\n                val\
    \ min = lst.min\n                val max = lst.max\n                val minIndex\
    \ = lst.indexOf(min)\n                val maxIndex = lst.indexOf(max)\n      \
    \          val newLst = lst.patch(minIndex, Nil, 1).patch(maxIndex - 1, Nil, 1)\n\
    \                strangeSortList(newLst, acc :+ min :+ max)\n            }\n \
    \       }\n        strangeSortList(lst, Nil)", "        val sorted = lst.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        while (i\
    \ < sorted.length) {\n            if (i % 2 == 0) result += sorted(i)\n      \
    \      else result += sorted(sorted.length - 1 - i)\n            i += 1\n    \
    \    }\n        result.toList", "        val sorted = lst.sorted\n        val\
    \ n = lst.length\n        val result = new ListBuffer[Long]\n        var i = 0\n\
    \        var j = n - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ListBuffer[Long]\n     \
    \   var i = 0\n        var j = n - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            if (i != j) result += sorted(j)\n            i +=\
    \ 1\n            j -= 1\n        }\n        result.toList", "        if (lst.length\
    \ == 0) return List()\n        var min = lst.min\n        var max = lst.max\n\
    \        var lst2 = lst.filter(x => x != min && x != max)\n        var lst3 =\
    \ List(min, max)\n        while (lst2.length > 0) {\n            min = lst2.min\n\
    \            max = lst2.max\n            lst3 = lst3 :+ min\n            lst3\
    \ = lst3 :+ max\n            lst2 = lst2.filter(x => x != min && x != max)\n \
    \       }\n        return lst3", "        val sorted = lst.sorted\n        val\
    \ (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n        val minLstSorted = minLst.sorted\n\
    \        val maxLstSorted = maxLst.sorted\n        val minLstSortedReversed =\
    \ minLstSorted.reverse\n        val maxLstSortedReversed = maxLstSorted.reverse\n\
    \        val minLstSortedReversedZipped = minLstSortedReversed.zip(minLstSorted)\n\
    \        val maxLstSortedReversedZipped = maxLstSortedReversed.zip(maxLstSorted)\n\
    \        val minLstSortedReversedZippedFlattened = minLstSortedReversedZipped.flatten\n\
    \        val maxLstSortedReversedZippedFlattened = maxLstSortedReversedZipped.flatten\n\
    \        val minLstSortedReversedZippedFlattenedSorted = minLstSortedReversedZippedFlattened.sorted\n\
    \        val maxLstSortedReversedZippedFlattenedSorted = maxLstSortedReversedZippedFlattened.sorted\n\
    \        val minLstSortedReversedZippedFlattenedSortedReversed = minLstSortedReversedZippedFlattenedSorted.reverse\n\
    \        val maxLstSortedReversedZippedFlattenedSortedReversed = maxLstSortedReversedZippedFlattenedSorted.reverse\n\
    \        val minLstSortedReversedZippedFlattenedSortedReversedZipped = minLstSortedReversedZippedFlattenedSortedReversed.zip(minLstSortedReversedZippedFlattenedSorted)\n\
    \        val maxLstSortedReversedZippedFlattenedSortedReversedZipped = maxLstSortedReversedZippedFlattenedSortedReversed.zip(maxLstSortedRe",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = sorted.partition(_ == min)\n        val (minLst2,\
    \ maxLst2) = (minLst.tail, maxLst.tail)\n        val (minLst3, maxLst3) = (minLst2.reverse,\
    \ maxLst2.reverse)\n        val (minLst4, maxLst4) = (minLst3.tail, maxLst3.tail)\n\
    \        val (minLst5, maxLst5) = (minLst4.reverse, maxLst4.reverse)\n       \
    \ val (minLst6, maxLst6) = (minLst5.tail, maxLst5.tail)\n        val (minLst7,\
    \ maxLst7) = (minLst6.reverse, maxLst6.reverse)\n        val (minLst8, maxLst8)\
    \ = (minLst7.tail, maxLst7.tail)\n        val (minLst9, maxLst9) = (minLst8.reverse,\
    \ maxLst8.reverse)\n        val (minLst10, maxLst10) = (minLst9.tail, maxLst9.tail)\n\
    \        val (minLst11, maxLst11) = (minLst10.reverse, maxLst10.reverse)\n   \
    \     val (minLst12, maxLst12) = (minLst11.tail, maxLst11.tail)\n        val (minLst13,\
    \ maxLst13) = (minLst12.reverse, maxLst12.reverse)\n        val (minLst14, maxLst14)\
    \ = (minLst13.tail, maxLst13.tail)\n        val (minLst15, maxLst15) = (minLst14.reverse,\
    \ maxLst14.reverse)\n        val (minLst16, maxLst16) = (minLst15.tail, maxLst15.tail)\n\
    \        val (minLst17, maxLst17)", "        val sorted = lst.sorted\n       \
    \ val result = new ListBuffer[Long]\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) result += sorted(i)\n            else result\
    \ += sorted(sorted.length - 1 - i)\n            i += 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n\
    \            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       var result = List[Long]()\n        var remaining = lst.sorted\n      \
    \  while (remaining.length > 0) {\n            result = result :+ remaining.head\n\
    \            remaining = remaining.tail\n            if (remaining.length > 0)\
    \ {\n                result = result :+ remaining.last\n                remaining\
    \ = remaining.init\n            }\n        }\n        result", "        val sorted\
    \ = lst.sorted\n        val length = sorted.length\n        val result = new ArrayBuffer[Long]\n\
    \        var i = 0\n        while (i < length) {\n            if (i % 2 == 0)\
    \ result += sorted(i / 2)\n            else result += sorted(length - 1 - i /\
    \ 2)\n            i += 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val n = lst.length\n        val result = new ArrayBuffer[Long]\n\
    \        var i = 0\n        var j = n - 1\n        while (i <= j) {\n        \
    \    result += sorted(i)\n            if (i != j) result += sorted(j)\n      \
    \      i += 1\n            j -= 1\n        }\n        result.toList", "      \
    \  val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val (minLst2, maxLst2) = (minLst.tail.filter(_ != max), minLst.init.filter(_\
    \ != min))\n        val (minLst3, maxLst3) = (minLst2.tail.filter(_ != max), minLst2.init.filter(_\
    \ != min))\n        val (minLst4, maxLst4) = (minLst3.tail.filter(_ != max), minLst3.init.filter(_\
    \ != min))\n        val (minLst5, maxLst5) = (minLst4.tail.filter(_ != max), minLst4.init.filter(_\
    \ != min))\n        val (minLst6, maxLst6) = (minLst5.tail.filter(_ != max), minLst5.init.filter(_\
    \ != min))\n        val (minLst7, maxLst7) = (minLst6.tail.filter(_ != max), minLst6.init.filter(_\
    \ != min))\n        val (minLst8, maxLst8) = (minLst7.tail.filter(_ != max), minLst7.init.filter(_\
    \ != min))\n        val (minLst9, maxLst9) = (minLst8.tail.filter(_ != max), minLst8.init.filter(_\
    \ != min))\n        val (minLst10, maxLst10) = (minLst9.tail.filter(_ != max),\
    \ minLst9.init.filter(_ != min))\n        val (minLst11, maxLst11) = (minLst10.tail.filter(_\
    \ != max), minLst10.init.filter(_ != min))\n        val (minLst12, maxLst12) =\
    \ (minLst11.tail.filter(_ != max), minLst11.init.filter(_ != min))\n        val\
    \ (minLst13, maxLst", "        val sorted = lst.sorted\n        val n = lst.length\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        while (i\
    \ < n) {\n            if (i % 2 == 0) result += sorted(i / 2)\n            else\
    \ result += sorted(n - 1 - i / 2)\n            i += 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val (left, right) = sorted.splitAt(lst.length\
    \ / 2)\n        val leftReverse = left.reverse\n        val rightReverse = right.reverse\n\
    \        val result = new ListBuffer[Long]\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0) result += leftReverse(i / 2)\n            else\
    \ result += rightReverse(i / 2)\n        }\n        result.toList", "        val\
    \ sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n \
    \       val (left, right) = sorted.tail.init.partition(_ < (min + max) / 2)\n\
    \        val leftSorted = left.sorted\n        val rightSorted = right.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        while (i\
    \ < leftSorted.length) {\n            result += leftSorted(i)\n            result\
    \ += rightSorted(i)\n            i += 1\n        }\n        if (leftSorted.length\
    \ != rightSorted.length) result += rightSorted.last\n        result.toList", " \
    \       val sorted = lst.sorted\n        val n = lst.length\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        var j = n - 1\n        while\
    \ (i <= j) {\n            result += sorted(i)\n            if (i != j) result\
    \ += sorted(j)\n            i += 1\n            j -= 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        while (i < sorted.length) {\n            if (i % 2 ==\
    \ 0) result += sorted(i)\n            else result += sorted(sorted.length - 1\
    \ - i)\n            i += 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val n = lst.length\n        val result = new ArrayBuffer[Long]\n\
    \        var i = 0\n        var j = n - 1\n        while (i <= j) {\n        \
    \    result += sorted(i)\n            if (i != j) result += sorted(j)\n      \
    \      i += 1\n            j -= 1\n        }\n        result.toList", "      \
    \  val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n      \
    \  var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n  \
    \          result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       val sorted = lst.sorted\n        val n = lst.length\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        while (i < n) {\n       \
    \     if (i % 2 == 0) {\n                result += sorted(i / 2)\n           \
    \ } else {\n                result += sorted(n - 1 - i / 2)\n            }\n \
    \           i += 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val result = new ListBuffer[Long]\n        var i = 0\n        var j =\
    \ sorted.length - 1\n        while (i <= j) {\n            result += sorted(i)\n\
    \            if (i != j) result += sorted(j)\n            i += 1\n           \
    \ j -= 1\n        }\n        result.toList", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ > min), sorted.tail.filter(_ < max))\n        val minLstSorted\
    \ = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n        val minLstSortedReversed\
    \ = minLstSorted.reverse\n        val maxLstSortedReversed = maxLstSorted.reverse\n\
    \        val (minLstSortedReversed1, maxLstSortedReversed1) = (minLstSortedReversed.tail,\
    \ maxLstSortedReversed.tail)\n        val (minLstSortedReversed2, maxLstSortedReversed2)\
    \ = (minLstSortedReversed1.tail, maxLstSortedReversed1.tail)\n        val (minLstSortedReversed3,\
    \ maxLstSortedReversed3) = (minLstSortedReversed2.tail, maxLstSortedReversed2.tail)\n\
    \        val (minLstSortedReversed4, maxLstSortedReversed4) = (minLstSortedReversed3.tail,\
    \ maxLstSortedReversed3.tail)\n        val (minLstSortedReversed5, maxLstSortedReversed5)\
    \ = (minLstSortedReversed4.tail, maxLstSortedReversed4.tail)\n        val (minLstSortedReversed6,\
    \ maxLstSortedReversed6) = (minLstSortedReversed5.tail, maxLstSortedReversed5.tail)\n\
    \        val (minLstSortedReversed7, maxLstSortedReversed7) = (minLstSortedReversed6.tail,\
    \ maxLstSortedReversed6.tail)\n        val (minLstSortedReversed8, maxLstSortedReversed8)\
    \ = (minLstSortedReversed", "        if (lst.length == 0) return lst\n       \
    \ val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n       \
    \ var i = 0\n        while (i < sorted.length) {\n            if (i % 2 == 0)\
    \ result += sorted(i / 2)\n            else result += sorted(sorted.length - 1\
    \ - i / 2)\n            i += 1\n        }\n        result.toList", "        val\
    \ sorted = lst.sorted\n        val result = new ListBuffer[Long]\n        var\
    \ i = 0\n        while (i < sorted.length) {\n            if (i % 2 == 0) result\
    \ += sorted(i / 2)\n            else result += sorted(sorted.length - 1 - i /\
    \ 2)\n            i += 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = sorted.partition(_ == min)\n        val maxLst2 = maxLst.tail\n\
    \        val minLst2 = minLst.tail\n        val minLst3 = minLst2.reverse\n  \
    \      val maxLst3 = maxLst2.reverse\n        val lst2 = minLst3 ++ maxLst3\n\
    \        val lst3 = min :: lst2\n        val lst4 = lst3 ++ List(max)\n      \
    \  lst4", "        val sorted = lst.sorted\n        val n = lst.length\n     \
    \   val result = new ListBuffer[Long]\n        var i = 0\n        while (i < n)\
    \ {\n            if (i % 2 == 0) result += sorted(i)\n            else result\
    \ += sorted(n - i / 2 - 1)\n            i += 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val n = lst.length\n        val result\
    \ = new ListBuffer[Long]\n        var i = 0\n        var j = n - 1\n        while\
    \ (i <= j) {\n            result += sorted(i)\n            if (i != j) result\
    \ += sorted(j)\n            i += 1\n            j -= 1\n        }\n        result.toList",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail,\
    \ maxLstSortedRev.tail)\n        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val (minLstSortedRev4, maxLstSortedRev4)\
    \ = (minLstSortedRev3 :+ minLstSortedRev.head, maxLstSortedRev3 :+ maxLstSortedRev.head)\n\
    \        val (minLstSortedRev5, maxLstSortedRev5) = (minLstSortedRev4.reverse,\
    \ maxLstSortedRev4.reverse)\n        val (minLstSortedRev6, maxLstSortedRev6)\
    \ = (minLstSortedRev5 :+ min, maxLstSortedRev5 :+ max)\n        val (minLstSortedRev7,\
    \ maxLstSortedRev7) = (minLstSortedRev6.reverse, maxLstSortedRev6.reverse)\n \
    \       val (minLstSortedRev8, maxLstSortedRev8) = (minLstSortedRev7.tail, maxLstSortedRev7.tail)\n\
    \        val (minLstSortedRev9, maxLstSortedRev9) = (minLstSortedRev8.reverse,\
    \ maxLstSortedRev8.reverse)\n        val (minLstSortedRev10, maxLstSortedRev10)\
    \ = (minLstSortedRev9 :+ min", "        val sorted = lst.sorted\n        val (min,\
    \ max) = (sorted.head, sorted.last)\n        val (minLst, maxLst) = sorted.tail.partition(_\
    \ < max)\n        val (minLst1, maxLst1) = (minLst.reverse, maxLst.reverse)\n\
    \        val (minLst2, maxLst2) = (minLst1.tail, maxLst1.tail)\n        val (minLst3,\
    \ maxLst3) = (minLst2.reverse, maxLst2.reverse)\n        val (minLst4, maxLst4)\
    \ = (minLst3.tail, maxLst3.tail)\n        val (minLst5, maxLst5) = (minLst4.reverse,\
    \ maxLst4.reverse)\n        val (minLst6, maxLst6) = (minLst5.tail, maxLst5.tail)\n\
    \        val (minLst7, maxLst7) = (minLst6.reverse, maxLst6.reverse)\n       \
    \ val (minLst8, maxLst8) = (minLst7.tail, maxLst7.tail)\n        val (minLst9,\
    \ maxLst9) = (minLst8.reverse, maxLst8.reverse)\n        val (minLst10, maxLst10)\
    \ = (minLst9.tail, maxLst9.tail)\n        val (minLst11, maxLst11) = (minLst10.reverse,\
    \ maxLst10.reverse)\n        val (minLst12, maxLst12) = (minLst11.tail, maxLst11.tail)\n\
    \        val (minLst13, maxLst13) = (minLst12.reverse, maxLst12.reverse)\n   \
    \     val (minLst14, maxLst14) = (minLst13.tail, maxLst13.tail)\n        val (minLst15,\
    \ maxLst15) = (minLst14.reverse, maxLst14.reverse)\n        val (minLst16, maxLst",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedReversed, maxLstSortedReversed) =\
    \ (minLstSorted.reverse, maxLstSorted.reverse)\n        val (minLstSortedReversedTail,\
    \ maxLstSortedReversedTail) = (minLstSortedReversed.tail, maxLstSortedReversed.tail)\n\
    \        val (minLstSortedReversedTailInit, maxLstSortedReversedTailInit) = (minLstSortedReversedTail.init,\
    \ maxLstSortedReversedTail.init)\n        val (minLstSortedReversedTailInitHead,\
    \ maxLstSortedReversedTailInitHead) = (minLstSortedReversedTailInit.head, maxLstSortedReversedTailInit.head)\n\
    \        val (minLstSortedReversedTailInitHeadTail, maxLstSortedReversedTailInitHeadTail)\
    \ = (minLstSortedReversedTailInitHead.tail, maxLstSortedReversedTailInitHead.tail)\n\
    \        val (minLstSortedReversedTailInitHeadTailInit, maxLstSortedReversedTailInitHeadTailInit)\
    \ = (minLstSortedReversedTailInitHeadTail.init, maxLstSortedReversedTailInitHeadTail.init)\n\
    \        val (minLstSortedReversedTailInitHeadTailInitHead, maxLstSortedReversedTailInitHeadTailInitHead)\
    \ = (minLstSortedReversedTailInitHeadTailInit.head, maxLstSortedReversedTailInitHeadTailInit.head)",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSorted1, maxLstSorted1) = if (minLstSorted.length\
    \ % 2 == 0) (minLstSorted, maxLstSorted) else (minLstSorted.tail, maxLstSorted.tail)\n\
    \        val minLstSorted2 = minLstSorted1.grouped(2).map(_.reverse).flatten.toList\n\
    \        val maxLstSorted2 = maxLstSorted1.grouped(2).map(_.reverse).flatten.toList\n\
    \        (min :: maxLstSorted2 ::: minLstSorted2 ::: List(max)).toList", "   \
    \     var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length\
    \ > 0) {\n            lst3 = lst2.head :: lst3\n            lst2 = lst2.tail\n\
    \            if (lst2.length > 0) {\n                lst3 = lst2.last :: lst3\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        lst3",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val (minLstSorted, maxLstSorted) = (minLst.sorted, maxLst.sorted)\n\
    \        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n\
    \        val (minLstSortedRevZip, maxLstSortedRevZip) = (minLstSortedRev.zipWithIndex,\
    \ maxLstSortedRev.zipWithIndex)\n        val (minLstSortedRevZipSorted, maxLstSortedRevZipSorted)\
    \ = (minLstSortedRevZip.sortBy(_._2), maxLstSortedRevZip.sortBy(_._2))\n     \
    \   val (minLstSortedRevZipSortedUnzip, maxLstSortedRevZipSortedUnzip) = (minLstSortedRevZipSorted.unzip,\
    \ maxLstSortedRevZipSorted.unzip)\n        val (minLstSortedRevZipSortedUnzip1,\
    \ maxLstSortedRevZipSortedUnzip1) = (minLstSortedRevZipSortedUnzip._1, maxLstSortedRevZipSortedUnzip._1)\n\
    \        val (minLstSortedRevZipSortedUnzip1Rev, maxLstSortedRevZipSortedUnzip1Rev)\
    \ = (minLstSortedRevZipSortedUnzip1.reverse, maxLstSortedRevZipSortedUnzip1.reverse)\n\
    \        val (minLstSortedRevZipSortedUnzip1RevZip, maxLstSortedRevZipSortedUnzip1RevZip)\
    \ = (minLstSortedRevZipSortedUnzip1Rev.zipWithIndex, maxLstSortedRevZipSortedUnzip1Rev.zipWithIndex)\n\
    \        val (minLstSortedRevZipSortedUnzip1RevZipSorted, maxLstSortedRevZipSortedUnzip",
  "        val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ < max), sorted.tail.filter(_\
    \ > min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse,\
    \ maxLstSorted.reverse)\n        val (minLstSortedRev2, maxLstSortedRev2) = (minLstSortedRev.tail,\
    \ maxLstSortedRev.tail)\n        val (minLstSortedRev3, maxLstSortedRev3) = (minLstSortedRev2.reverse,\
    \ maxLstSortedRev2.reverse)\n        val (minLstSortedRev4, maxLstSortedRev4)\
    \ = (minLstSortedRev3 :+ minLstSortedRev.head, maxLstSortedRev3 :+ maxLstSortedRev.head)\n\
    \        val (minLstSortedRev5, maxLstSortedRev5) = (minLstSortedRev4 :+ max,\
    \ maxLstSortedRev4 :+ min)\n        minLstSortedRev5 ::: maxLstSortedRev5", " \
    \       val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.init, sorted.tail.init.reverse)\n\
    \        val (minLst1, maxLst1) = (minLst.zipWithIndex.map(x => (x._1, x._2 %\
    \ 2 == 0)), maxLst.zipWithIndex.map(x => (x._1, x._2 % 2 == 0)))\n        val\
    \ (minLst2, maxLst2) = (minLst1.sortBy(x => x._2).map(x => x._1), maxLst1.sortBy(x\
    \ => x._2).map(x => x._1))\n        min :: max :: (minLst2 ::: maxLst2)", "  \
    \      var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length\
    \ > 0) {\n            lst3 = lst2.head :: lst3\n            lst2 = lst2.tail\n\
    \            if (lst2.length > 0) {\n                lst3 = lst2.last :: lst3\n\
    \                lst2 = lst2.init\n            }\n        }\n        lst3", " \
    \       var result = List[Long]()\n        var remaining = lst.sorted\n      \
    \  while (remaining.length > 0) {\n            result = remaining.head :: result\n\
    \            remaining = remaining.tail\n            if (remaining.length > 0)\
    \ {\n                result = remaining.last :: result\n                remaining\
    \ = remaining.init\n            }\n        }\n        result", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        val (minLst2, maxLst2) = (minLst.filter(_ != minLst.last), maxLst.filter(_\
    \ != maxLst.head))\n        val (minLst3, maxLst3) = (minLst2.filter(_ != minLst2.last),\
    \ maxLst2.filter(_ != maxLst2.head))\n        val (minLst4, maxLst4) = (minLst3.filter(_\
    \ != minLst3.last), maxLst3.filter(_ != maxLst3.head))\n        val (minLst5,\
    \ maxLst5) = (minLst4.filter(_ != minLst4.last), maxLst4.filter(_ != maxLst4.head))\n\
    \        val (minLst6, maxLst6) = (minLst5.filter(_ != minLst5.last), maxLst5.filter(_\
    \ != maxLst5.head))\n        val (minLst7, maxLst7) = (minLst6.filter(_ != minLst6.last),\
    \ maxLst6.filter(_ != maxLst6.head))\n        val (minLst8, maxLst8) = (minLst7.filter(_\
    \ != minLst7.last), maxLst7.filter(_ != maxLst7.head))\n        val (minLst9,\
    \ maxLst9) = (minLst8.filter(_ != minLst8.last), maxLst8.filter(_ != maxLst8.head))\n\
    \        val (minLst10, maxLst10) = (minLst9.filter(_ != minLst9.last), maxLst9.filter(_\
    \ != maxLst9.head))\n        val (minLst11, maxLst11) = (minLst10.filter(_ !=\
    \ minLst10.last), maxLst10.filter(_ != max", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        var result = List(min)\n\
    \        var remaining = sorted.tail.init\n        var ascending = true\n    \
    \    while (!remaining.isEmpty) {\n            if (ascending) {\n            \
    \    result = result :+ remaining.max\n                remaining = remaining.filter(_\
    \ != remaining.max)\n            } else {\n                result = result :+\
    \ remaining.min\n                remaining = remaining.filter(_ != remaining.min)\n\
    \            }\n            ascending = !ascending\n        }\n        result\
    \ :+ max", "        var sorted = lst.sorted\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < sorted.length) {\n            if (i % 2\
    \ == 0) result = result :+ sorted(i)\n            else result = sorted(i) +: result\n\
    \            i += 1\n        }\n        result", "        val sorted = lst.sorted\n\
    \        val (left, right) = sorted.splitAt(sorted.length / 2)\n        val leftReverse\
    \ = left.reverse\n        val rightReverse = right.reverse\n        val result\
    \ = new ListBuffer[Long]\n        for (i <- 0 until left.length) {\n         \
    \   result += leftReverse(i)\n            if (i < right.length) result += rightReverse(i)\n\
    \        }\n        result.toList", "        val sorted = lst.sorted\n       \
    \ var result = List[Long]()\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ sorted(i)\n\
    \            } else {\n                result = sorted(i) +: result\n        \
    \    }\n            i += 1\n        }\n        result", "        var sorted =\
    \ lst.sorted\n        var result = List[Long]()\n        var i = 0\n        while\
    \ (sorted.size > 0) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ sorted.head\n                sorted = sorted.tail\n            } else\
    \ {\n                result = result :+ sorted.last\n                sorted =\
    \ sorted.dropRight(1)\n            }\n            i += 1\n        }\n        result",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n\
    \            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       val sorted = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n\
    \        val (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_\
    \ != min))\n        val minLstSorted = minLst.sorted\n        val maxLstSorted\
    \ = maxLst.sorted\n        val minLstSortedReversed = minLstSorted.reverse\n \
    \       val maxLstSortedReversed = maxLstSorted.reverse\n        val minLstSortedReversedWithMax\
    \ = minLstSortedReversed :+ max\n        val maxLstSortedReversedWithMin = maxLstSortedReversed\
    \ :+ min\n        val minLstSortedReversedWithMaxZip = minLstSortedReversedWithMax.zip(maxLstSortedReversedWithMin)\n\
    \        val minLstSortedReversedWithMaxZipFlat = minLstSortedReversedWithMaxZip.flatten\n\
    \        minLstSortedReversedWithMaxZipFlat", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n        val\
    \ minLstSorted = minLst.sorted\n        val maxLstSorted = maxLst.sorted\n   \
    \     val (minLstSortedRev, maxLstSortedRev) = (minLstSorted.reverse, maxLstSorted.reverse)\n\
    \        val (minLstSortedRevIt, maxLstSortedRevIt) = (minLstSortedRev.iterator,\
    \ maxLstSortedRev.iterator)\n        val result = new ListBuffer[Long]\n     \
    \   result += min\n        result += max\n        while (minLstSortedRevIt.hasNext\
    \ && maxLstSortedRevIt.hasNext) {\n            result += minLstSortedRevIt.next\n\
    \            result += maxLstSortedRevIt.next\n        }\n        if (minLstSortedRevIt.hasNext)\
    \ result += minLstSortedRevIt.next\n        if (maxLstSortedRevIt.hasNext) result\
    \ += maxLstSortedRevIt.next\n        result.toList", "        val sorted = lst.sorted\n\
    \        val n = lst.length\n        val result = new ArrayBuffer[Long]\n    \
    \    var i = 0\n        var j = n - 1\n        while (i <= j) {\n            result\
    \ += sorted(i)\n            if (i != j) result += sorted(j)\n            i +=\
    \ 1\n            j -= 1\n        }\n        result.toList", "        val sorted\
    \ = lst.sorted\n        val (min, max) = (sorted.head, sorted.last)\n        val\
    \ (minLst, maxLst) = (sorted.tail.filter(_ != max), sorted.init.filter(_ != min))\n\
    \        if (minLst.isEmpty) List(min)\n        else if (maxLst.isEmpty) List(max)\n\
    \        else List(min) ++ strangeSortList(maxLst) ++ List(max) ++ strangeSortList(minLst)",
  "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n  \
    \      var i = 0\n        while (i < sorted.length) {\n            if (i % 2 ==\
    \ 0) result += sorted(i / 2)\n            else result += sorted(sorted.length\
    \ - 1 - i / 2)\n            i += 1\n        }\n        result.toList", "     \
    \   def strangeSortList(lst : List[Long], acc : List[Long]) : List[Long] = {\n\
    \            if (lst.isEmpty) acc\n            else {\n                val min\
    \ = lst.min\n                val max = lst.max\n                val minIndex =\
    \ lst.indexOf(min)\n                val maxIndex = lst.indexOf(max)\n        \
    \        if (minIndex < maxIndex) strangeSortList(lst.slice(minIndex + 1, maxIndex)\
    \ ::: lst.slice(maxIndex + 1, lst.length), acc ::: List(min, max))\n         \
    \       else strangeSortList(lst.slice(maxIndex + 1, minIndex) ::: lst.slice(minIndex\
    \ + 1, lst.length), acc ::: List(max, min))\n            }\n        }\n      \
    \  strangeSortList(lst, List())", "        def strangeSortList(lst : List[Long],\
    \ acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty) acc\n     \
    \       else {\n                val min = lst.min\n                val max = lst.max\n\
    \                val lst2 = lst.filter(x => x != min && x != max)\n          \
    \      strangeSortList(lst2, acc :+ min :+ max)\n            }\n        }\n  \
    \      strangeSortList(lst, List())", "        val sorted = lst.sorted\n     \
    \   val n = lst.length\n        val result = new ListBuffer[Long]\n        var\
    \ i = 0\n        while (i < n) {\n            if (i % 2 == 0) result += sorted(i\
    \ / 2)\n            else result += sorted(n - 1 - i / 2)\n            i += 1\n\
    \        }\n        result.toList", "        val sorted = lst.sorted\n       \
    \ val n = lst.length\n        val result = new ListBuffer[Long]\n        var i\
    \ = 0\n        while (i < n) {\n            if (i % 2 == 0) result += sorted(i\
    \ / 2)\n            else result += sorted(n - 1 - i / 2)\n            i += 1\n\
    \        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
