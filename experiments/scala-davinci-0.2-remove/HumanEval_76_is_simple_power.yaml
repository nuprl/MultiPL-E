name: HumanEval_76_is_simple_power
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to write a function that returns true if a number x is a simple\n\
  \    // power of n and false in other cases.\n    // x is a simple power of n if\
  \ n**int=x\n    // For example:\n    def isSimplePower(x : Long, n : Long) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSimplePower((16l),\
  \ (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n \
  \   assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l),\
  \ (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l),\
  \ (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l),\
  \ (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l),\
  \ (12l)) == (true));\n    }\n\n}\n"
completions: ["        if (x == 1) return true\n        var i = 2\n        while (i\
    \ <= x) {\n            if (pow(n, i).toLong == x) return true\n            i +=\
    \ 1\n        }\n        return false", "        if (x == 1) return true\n    \
    \    if (n == 1) return false\n        var i = 2\n        while (i <= x) {\n \
    \           if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        var result = false\n        var i = 1\n        while (i <=\
    \ x) {\n            if (pow(n, i) == x) {\n                result = true\n   \
    \             i = x\n            }\n            i += 1\n        }\n        result",
  "        val r = sqrt(x)\n        if (r == round(r)) {\n            val rr = round(r)\n\
    \            val rrr = pow(rr, 2)\n            if (rrr == x) {\n             \
    \   val rrrr = pow(rr, 3)\n                if (rrrr == x) {\n                \
    \    val rrrrr = pow(rr, 4)\n                    if (rrrrr == x) {\n         \
    \               val rrrrrr = pow(rr, 5)\n                        if (rrrrrr ==\
    \ x) {\n                            val rrrrrrr = pow(rr, 6)\n               \
    \             if (rrrrrrr == x) {\n                                val rrrrrrrr\
    \ = pow(rr, 7)\n                                if (rrrrrrrr == x) {\n       \
    \                             val rrrrrrrrr = pow(rr, 8)\n                   \
    \                 if (rrrrrrrrr == x) {\n                                    \
    \    val rrrrrrrrrr = pow(rr, 9)\n                                        if (rrrrrrrrrr\
    \ == x) {\n                                            val rrrrrrrrrrr = pow(rr,\
    \ 10)\n                                            if (rrrrrrrrrrr == x) {\n \
    \                                               val rrrrrrrrrrrr = pow(rr, 11)\n\
    \                                                if (rrrrrrrrrrrr == x) {\n  \
    \                                                  val rrrrrrrrrrrrr = pow(rr,\
    \ 12)\n                                                    if (rrrrrrrrrrrrr ==\
    \ x) {\n                                                        val rrrrrrrrrrrrrr\
    \ = pow(rr, 13)\n                                                        if (rrrrrrrrrrrrrr\
    \ == x) {\n                                                            val rrrrrrrrrrrrrrr\
    \ = pow(rr, 14)\n                                                            if\
    \ (rrrrrrrrrrrrrrr == x) {\n                                                 \
    \               val rrrrrrrrrrrrrrrr = pow(rr, 15)\n                         \
    \                                       if (rrrrrrrrrrrrrrrr == x) {\n       \
    \                                                             val rrrrrrrrrrrrrrrrr\
    \ = pow(rr, 16)\n                                                            \
    \        if (rrrrrrrrrrrrrrrrr == x) {\n                                     \
    \           ", "        if (x == 1) return true\n        var i = 2\n        while\
    \ (i <= x) {\n            if (pow(n, i).toLong == x) return true\n           \
    \ i += 1\n        }\n        return false", "        val root = pow(x, 1.0 / n)\n\
    \        root % 1 == 0", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false",
  "        val r = pow(x, 1.0 / n)\n        r == r.toInt", "        if (x == 1) true\n\
    \        else if (x % n != 0) false\n        else isSimplePower(x / n, n)", " \
    \       if (x == 1) return true\n        var i = 2\n        while (i <= n) {\n\
    \            var p = pow(n, i)\n            if (p == x) return true\n        \
    \    if (p > x) return false\n            i += 1\n        }\n        return false",
  "        val r = pow(x, 1.0 / n)\n        r == r.toInt", "        var y = n\n  \
    \      while (y < x) {\n            y *= n\n        }\n        return y == x",
  "        val m = log(x) / log(n)\n        if (m % 1 == 0) true else false", "  \
    \      if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        var i = 2\n        while (i\
    \ <= x) {\n            if (i == x) return true\n            i *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false", " \
    \       if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (pow(n, i).toLong == x) return true\n            i += 1\n    \
    \    }\n        return false", "        if (x == 1) return true\n        var i\
    \ = 1\n        while (pow(n, i) <= x) {\n            if (pow(n, i) == x) return\
    \ true\n            i += 1\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        var i = 2\n        while (i <= x) {\n            if\
    \ (i == x) return true\n            i *= n\n        }\n        return false",
  "        val m = log(x) / log(n)\n        if (m % 1 == 0) true else false", "  \
    \      val root = pow(x, 1.0 / n)\n        root - root.toInt == 0", "        if\
    \ (x == 1) return true\n        var i = 2\n        while (i <= x) {\n        \
    \    if (i == x) return true\n            i *= n\n        }\n        return false",
  "        if (x == 1) return true\n        var i = 2\n        while (i <= n) {\n\
    \            var p = pow(n, i)\n            if (p == x) return true\n        \
    \    if (p > x) return false\n            i += 1\n        }\n        return false",
  "        if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (pow(n, i).toLong == x) return true\n            i += 1\n    \
    \    }\n        return false", "        if (x == 1) return true\n        var i\
    \ = 2\n        while (i <= x) {\n            if (pow(n, i).toLong == x) return\
    \ true\n            i += 1\n        }\n        return false", "        if (x ==\
    \ 1) true\n        else if (x % n != 0) false\n        else isSimplePower(x /\
    \ n, n)", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var y = n\n        while (y < x) {\n            y *= n\n            if\
    \ (y == x) return true\n        }\n        return false", "        if (x == 1)\
    \ return true\n        if (n == 1) return false\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        if (x % n != 0) return false\n    \
    \    isSimplePower(x / n, n)", "        val r = sqrt(x).toLong\n        if (r\
    \ * r == x) {\n            val rr = sqrt(r).toLong\n            if (rr * rr ==\
    \ r) true\n            else false\n        }\n        else false", "        if\
    \ (x == 1) return true\n        if (n == 1) return false\n        var i = 2\n\
    \        var p = n\n        while (p <= x) {\n            if (p == x) return true\n\
    \            p *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var y = n\n        while (y\
    \ <= x) {\n            if (y == x) return true\n            y *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (i\
    \ == x) return true\n            i *= n\n        }\n        return false", " \
    \       if (x == 1) return true\n        var i = 2\n        while (i <= sqrt(x).toInt)\
    \ {\n            var p = 1\n            while (pow(i, p).toLong <= x) {\n    \
    \            if (pow(i, p).toLong == x) return true\n                p += 1\n\
    \            }\n            i += 1\n        }\n        return false", "      \
    \  if (x == 1) return true\n        var p = 1L\n        while (p <= x) {\n   \
    \         if (p == x) return true\n            p *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var a = n\n        var b = 1\n\
    \        while (a <= x) {\n            if (a == x) return true\n            a\
    \ *= n\n            b += 1\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        if (x == n) return\
    \ true\n        if (x % n != 0) return false\n        isSimplePower(x / n, n)",
  "        var i = 0\n        while (pow(n, i) <= x) {\n            if (pow(n, i)\
    \ == x) return true\n            i += 1\n        }\n        return false", " \
    \       val r = sqrt(x)\n        if (r % 1 == 0) {\n            val rr = pow(r,\
    \ 2)\n            if (rr == x) {\n                val rrr = sqrt(r)\n        \
    \        if (rrr % 1 == 0) {\n                    val rrrr = pow(rrr, 2)\n   \
    \                 if (rrrr == r) return true\n                }\n            }\n\
    \        }\n        false", "        val l = log(x) / log(n)\n        l == l.toInt",
  "        if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var p = 1L\n        while (p <= x) {\n            if (p == x) return\
    \ true\n            p *= n\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        var i = 2\n        while (i <= x) {\n            if\
    \ (i == x) return true\n            i *= n\n        }\n        return false",
  "        val r = pow(x, 1.0 / n)\n        r == r.toInt", "        val r = pow(x,\
    \ 1.0 / n)\n        r == r.toInt", "        val r = sqrt(x).toLong\n        if\
    \ (r * r == x) {\n            val rr = sqrt(r).toLong\n            if (rr * rr\
    \ == r) true\n            else false\n        }\n        else false", "      \
    \  if (x == 1) return true\n        if (n == 1) return false\n        var i =\
    \ 2\n        while (i <= x) {\n            if (i == x) return true\n         \
    \   i *= n\n        }\n        return false", "        var m = n\n        while\
    \ (m < x) {\n            m *= n\n        }\n        m == x", "        if (x ==\
    \ 1) return true\n        var i = 2\n        while (i <= x) {\n            if\
    \ (pow(n, i).toLong == x) return true\n            i += 1\n        }\n       \
    \ return false", "        if (x == 1) return true\n        if (n == 1) return\
    \ false\n        if (x == n) return true\n        if (x % n != 0) return false\n\
    \        isSimplePower(x / n, n)", "        if (x == 1) return true\n        var\
    \ p = n\n        while (p <= x) {\n            if (p == x) return true\n     \
    \       p *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        if (x % n != 0) return false\n\
    \        isSimplePower(x / n, n)", "        if (x == 1) return true\n        var\
    \ i = 2\n        while (i <= x) {\n            if (i == x) return true\n     \
    \       i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= x) {\n            if (pow(n, i).toLong\
    \ == x) return true\n            i += 1\n        }\n        return false", " \
    \       var p = 1L\n        while (p <= x) {\n            if (p == x) return true\n\
    \            p *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        if (x % n != 0) return false\n\
    \        val p = log(x) / log(n)\n        if (p % 1 == 0) return true\n      \
    \  return false", "        val xRoot = pow(x, 1.0 / n)\n        xRoot == round(xRoot)",
  "        val log = log10(x) / log10(n)\n        log == log.toInt", "        val\
    \ r = pow(x, 1.0 / n)\n        r == r.toInt", "        var y = x\n        while\
    \ (y % n == 0) y /= n\n        return y == 1", "        val r = sqrt(x)\n    \
    \    if (r == round(r)) {\n            val rr = round(r)\n            val p =\
    \ pow(rr, 2)\n            if (p == x) {\n                val rrr = log(rr) / log(n)\n\
    \                if (rrr == round(rrr)) return true\n            }\n        }\n\
    \        return false", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        if (x == n) return true\n        val log = log10(x) /\
    \ log10(n)\n        log == log.toInt", "        if (x == 1) return true\n    \
    \    if (n == 1) return false\n        var i = 2\n        while (i <= x) {\n \
    \           if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        val r = sqrt(x)\n        if (r == round(r)) {\n           \
    \ val rr = round(r)\n            val rrr = pow(rr, 2)\n            if (rrr ==\
    \ x) {\n                val rrrr = pow(rr, 3)\n                if (rrrr == x)\
    \ {\n                    val rrrrr = pow(rr, 4)\n                    if (rrrrr\
    \ == x) {\n                        val rrrrrr = pow(rr, 5)\n                 \
    \       if (rrrrrr == x) {\n                            val rrrrrrr = pow(rr,\
    \ 6)\n                            if (rrrrrrr == x) {\n                      \
    \          val rrrrrrrr = pow(rr, 7)\n                                if (rrrrrrrr\
    \ == x) {\n                                    val rrrrrrrrr = pow(rr, 8)\n  \
    \                                  if (rrrrrrrrr == x) {\n                   \
    \                     val rrrrrrrrrr = pow(rr, 9)\n                          \
    \              if (rrrrrrrrrr == x) {\n                                      \
    \      val rrrrrrrrrrr = pow(rr, 10)\n                                       \
    \     if (rrrrrrrrrrr == x) {\n                                              \
    \  val rrrrrrrrrrrr = pow(rr, 11)\n                                          \
    \      if (rrrrrrrrrrrr == x) {\n                                            \
    \        val rrrrrrrrrrrrr = pow(rr, 12)\n                                   \
    \                 if (rrrrrrrrrrrrr == x) {\n                                \
    \                        val rrrrrrrrrrrrrr = pow(rr, 13)\n                  \
    \                                      if (rrrrrrrrrrrrrr == x) {\n          \
    \                                                  val rrrrrrrrrrrrrrr = pow(rr,\
    \ 14)\n                                                            if (rrrrrrrrrrrrrrr\
    \ == x) {\n                                                                val\
    \ rrrrrrrrrrrrrrrr = pow(rr, 15)\n                                           \
    \                     if (rrrrrrrrrrrrrrrr == x) {\n                         \
    \                                           val rrrrrrrrrrrrrrrrr = pow(rr, 16)\n\
    \                                                                    if (rrrrrrrrrrrrrrrrr\
    \ == x) {\n                                                ", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        var i = 2\n      \
    \  while (i <= n) {\n            if (pow(n, i).toLong == x) return true\n    \
    \        i += 1\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var i = 2\n        while (i\
    \ <= sqrt(x)) {\n            var p = 1\n            while (pow(i, p).toLong <=\
    \ x) {\n                if (pow(i, p).toLong == x) return true\n             \
    \   p += 1\n            }\n            i += 1\n        }\n        return false",
  "        if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ p = 0\n        while (x % n == 0) {\n            x /= n\n            p += 1\n\
    \        }\n        x == 1", "        if (x == 1) return true\n        var i =\
    \ 2\n        while (i <= x) {\n            if (i == x) return true\n         \
    \   i *= n\n        }\n        return false", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        var i = 2\n        while (i\
    \ <= x) {\n            if (i == x) return true\n            i *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        while (i <= x) {\n            if (pow(n,\
    \ i).toLong == x) return true\n            i += 1\n        }\n        return false",
  "        val m = log(x) / log(n)\n        if (m % 1 == 0) true else false", "  \
    \      if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        var i = 2\n        while (i\
    \ <= x) {\n            if (pow(n, i).toLong == x) return true\n            i +=\
    \ 1\n        }\n        return false", "        val p = log(x) / log(n)\n    \
    \    p == p.toInt", "        if (x == 1) return true\n        var i = 2\n    \
    \    while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n  \
    \          i += 1\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= x) {\n            if (i == x) return\
    \ true\n            i *= n\n        }\n        return false", "        var i =\
    \ 1\n        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false", "        val r = pow(x,\
    \ 1.0 / n)\n        r == r.toInt", "        if (x == 1) return true\n        if\
    \ (n == 1) return false\n        var i = 2\n        while (i <= sqrt(x).toInt)\
    \ {\n            var j = 2\n            var p = pow(i, j).toLong\n           \
    \ while (p <= x) {\n                if (p == x) return true\n                j\
    \ += 1\n                p = pow(i, j).toLong\n            }\n            i +=\
    \ 1\n        }\n        return false", "        if (x == 1) return true\n    \
    \    var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        val a = log(x)\
    \ / log(n)\n        a == a.toInt", "        val r = sqrt(x)\n        if (r % 1\
    \ == 0) {\n            val rr = pow(r, 2)\n            if (rr == x) true else\
    \ false\n        } else false", "        var a = x\n        while (a % n == 0)\
    \ a /= n\n        a == 1", "        if (x == 1) return true\n        if (n ==\
    \ 1) return false\n        var p = n\n        while (p <= x) {\n            if\
    \ (p == x) return true\n            p *= n\n        }\n        return false",
  "        if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ i = 2\n        while (i <= x) {\n            if (i == x) return true\n     \
    \       i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= sqrt(x)) {\n            if (x %\
    \ i == 0) {\n                var j = 2\n                var p = i\n          \
    \      while (p <= sqrt(x)) {\n                    if (x % p == 0) {\n       \
    \                 if (p % i != 0) return false\n                        j += 1\n\
    \                        p = pow(i, j).toLong\n                    }\n       \
    \             else return false\n                }\n                if (pow(i,\
    \ j) == x) return true\n                else return false\n            }\n   \
    \         i += 1\n        }\n        return false", "        val k = log(x) /\
    \ log(n)\n        k == k.toInt", "        val nn = log(x) / log(n)\n        nn\
    \ == nn.toInt", "        if (x == 1) return true\n        var i = 2\n        while\
    \ (i <= x) {\n            if (i == x) return true\n            i *= n\n      \
    \  }\n        return false", "        if (x == 1) return true\n        if (n ==\
    \ 1) return false\n        var p = 1L\n        while (p <= x) {\n            if\
    \ (p == x) return true\n            p *= n\n        }\n        return false",
  "        if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ i = 2\n        while (i <= n) {\n            if (pow(n, i).toLong == x) return\
    \ true\n            i += 1\n        }\n        return false", "        if (n ==\
    \ 1) return x == 1\n        var p = 1L\n        var i = 1\n        while (p <=\
    \ x) {\n            if (p == x) return true\n            p *= n\n            i\
    \ += 1\n        }\n        false", "        val p = log(x) / log(n)\n        p\
    \ == round(p)", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= x) {\n            if (pow(n, i).toLong\
    \ == x) return true\n            i += 1\n        }\n        return false", " \
    \       if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ i = 2\n        while (i <= x) {\n            if (i == x) return true\n     \
    \       i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var p = n\n        while (p <= x) {\n            if (p == x) return\
    \ true\n            p *= n\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        if (x % n != 0) return\
    \ false\n        isSimplePower(x / n, n)", "        if (x == 1) return true\n\
    \        var i = 2\n        while (i <= sqrt(x)) {\n            var j = 2\n  \
    \          var p = pow(i, j).toLong\n            while (p <= x) {\n          \
    \      if (p == x) return true\n                j += 1\n                p = pow(i,\
    \ j).toLong\n            }\n            i += 1\n        }\n        return false",
  "        if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ i = 2\n        while (i <= x) {\n            if (i == x) return true\n     \
    \       i *= n\n        }\n        return false", "        var k = 1L\n      \
    \  while (k <= x) {\n            if (k == x) return true\n            k *= n\n\
    \        }\n        return false", "        if (x == 1) return true\n        if\
    \ (n == 1) return false\n        var p = n\n        while (p <= x) {\n       \
    \     if (p == x) return true\n            p *= n\n        }\n        return false",
  "        val log = log10(x) / log10(n)\n        log == log.toInt", "        val\
    \ r = pow(x, 1.0 / n)\n        r == round(r)", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        var i = 2\n        while (i\
    \ <= x) {\n            if (i == x) return true\n            i *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        var k = 2\n\
    \        while (k <= x) {\n            if (pow(n, k).toLong == x) return true\n\
    \            k += 1\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        if (x % n != 0) return false\n\
    \        val y = log(x) / log(n)\n        return y == round(y)", "        if (x\
    \ == 1) return true\n        if (n == 1) return false\n        var i = 2\n   \
    \     while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n \
    \           i += 1\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= x) {\n            if (i == x) return\
    \ true\n            i *= n\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        var k = 2\n        while (k <= x) {\n            var\
    \ p = pow(n, k)\n            if (p == x) return true\n            if (p > x) return\
    \ false\n            k += 1\n        }\n        return false", "        var result\
    \ = false\n        var i = 1\n        while (i <= x) {\n            if (pow(n,\
    \ i) == x) {\n                result = true\n                i = x\n         \
    \   }\n            i += 1\n        }\n        result", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= x) {\n            if (i == x) return\
    \ true\n            i *= n\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        var i = 2\n      \
    \  while (i <= x) {\n            if (i == x) return true\n            i *= n\n\
    \        }\n        return false", "        if (x == 1) return true\n        if\
    \ (n == 1) return false\n        var i = 2\n        while (i <= x) {\n       \
    \     if (pow(n, i).toLong == x) return true\n            i += 1\n        }\n\
    \        return false", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var p = n\n        while (p <= x) {\n            if (p\
    \ == x) return true\n            p *= n\n        }\n        return false", " \
    \       var m = n\n        while (m <= x) {\n            if (m == x) return true\n\
    \            m *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var p = 1L\n        while (p\
    \ <= x) {\n            if (p == x) return true\n            p *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        if (n == 1)\
    \ return false\n        var i = 2\n        var p = n\n        while (p <= x) {\n\
    \            if (p == x) return true\n            p *= n\n        }\n        return\
    \ false", "        val r = pow(x, 1.0 / n)\n        r == r.toInt", "        if\
    \ (x == 1) return true\n        if (n == 1) return false\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false", "        if (x == 1) return true\n \
    \       if (n == 1) return false\n        if (x % n != 0) return false\n     \
    \   var y = x / n\n        while (y % n == 0) y /= n\n        return y == 1",
  "        var p = 1L\n        while (p <= x) {\n            if (p == x) return true\n\
    \            p *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var i = 2\n        while (i\
    \ <= x) {\n            if (i == x) return true\n            i *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false", "        var i = 1\n  \
    \      while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var i = 2\n        while (i\
    \ <= x) {\n            if (pow(n, i).toLong == x) return true\n            i +=\
    \ 1\n        }\n        return false", "        if (x == 1) return true\n    \
    \    var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        if (x % n != 0) return false\n\
    \        val m = log(x) / log(n)\n        if (m - m.toInt != 0) return false\n\
    \        isSimplePower(x / n, n)", "        val r = sqrt(x)\n        if (r ==\
    \ round(r)) {\n            val rr = round(r)\n            val rrr = pow(rr, 2)\n\
    \            if (rrr == x) {\n                val rrrr = pow(rr, 3)\n        \
    \        if (rrrr == x) {\n                    return false\n                }\n\
    \                return true\n            }\n        }\n        return false",
  "        if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        var i = 2\n        while (i\
    \ <= x) {\n            if (i * i > x) return false\n            if (x % i == 0)\
    \ {\n                val y = x / i\n                if (y == n) return true\n\
    \                if (isSimplePower(y, n)) return true\n            }\n       \
    \     i += 1\n        }\n        false", "        if (x == 1) return true\n  \
    \      if (n == 1) return false\n        var y = n\n        while (y <= x) {\n\
    \            if (y == x) return true\n            y *= n\n        }\n        return\
    \ false", "        val r = pow(x, 1.0 / n)\n        r == r.toInt", "        if\
    \ (x == 1) return true\n        if (n == 1) return false\n        var i = 2\n\
    \        while (i <= x) {\n            if (i == x) return true\n            i\
    \ *= n\n        }\n        return false", "        val root = pow(x, 1.0 / n)\n\
    \        root % 1 == 0", "        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false", "        val r = pow(x,\
    \ 1.0 / n)\n        r == r.toInt", "        if (x == 1) return true\n        if\
    \ (n == 1) return false\n        var i = 2\n        while (i <= n) {\n       \
    \     if (i * i > x) return false\n            if (x % i == 0) {\n           \
    \     var j = 2\n                while (j <= i) {\n                    if (i %\
    \ j == 0) {\n                        if (j == i) return true\n               \
    \         else return false\n                    }\n                    j += 1\n\
    \                }\n            }\n            i += 1\n        }\n        return\
    \ false", "        val p = log(x) / log(n)\n        p == round(p)", "        if\
    \ (x == 1) return true\n        val root = pow(x, 1.0 / n)\n        if (root %\
    \ 1 == 0) return true\n        return false", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        var m = n\n        while (m <= x) {\n\
    \            if (m == x) return true\n            m *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= x) {\n            if (pow(n, i).toLong\
    \ == x) return true\n            i += 1\n        }\n        return false", " \
    \       val root = pow(x, 1.0 / n)\n        root == root.toInt", "        var\
    \ i = 1\n        while (i <= x) {\n            if (pow(n, i).toLong == x) return\
    \ true\n            i += 1\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        var i = 2\n      \
    \  while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n    \
    \        i += 1\n        }\n        return false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        var i = 2\n        while (i\
    \ <= x) {\n            if (pow(n, i).toLong == x) return true\n            i +=\
    \ 1\n        }\n        return false", "        val r = pow(x, 1.0 / n)\n    \
    \    r == r.toInt", "        if (x == 1) return true\n        if (n == 1) return\
    \ false\n        var i = 2\n        while (i <= x) {\n            if (pow(n, i).toLong\
    \ == x) return true\n            i += 1\n        }\n        return false", " \
    \       if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ p = 2\n        while (pow(n, p) <= x) {\n            if (pow(n, p) == x) return\
    \ true\n            p += 1\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        var i = 2\n      \
    \  while (i <= x) {\n            if (i == x) return true\n            i *= n\n\
    \        }\n        return false", "        val r = log(x) / log(n)\n        r\
    \ == r.toInt", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        if (x % n != 0) return false\n        isSimplePower(x / n, n)", "   \
    \     if (x == 1) return true\n        if (n == 1) return false\n        var i\
    \ = 2\n        while (i <= x) {\n            if (i == x) return true\n       \
    \     i *= n\n        }\n        return false", "        var i = 1\n        while\
    \ (i <= x) {\n            if (pow(n, i).toLong == x) return true\n           \
    \ i += 1\n        }\n        return false", "        if (x == 1) return true\n\
    \        var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        if (x == 1) return\
    \ true\n        var i = 2\n        while (i <= x) {\n            if (i == x) return\
    \ true\n            i *= n\n        }\n        return false", "        if (x ==\
    \ 1) return true\n        if (n == 1) return false\n        var i = 2\n      \
    \  while (i <= x) {\n            if (i == x) return true\n            i *= n\n\
    \        }\n        return false", "        val k = log(x) / log(n)\n        k\
    \ == round(k)", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= x) {\n            if (pow(n, i).toLong\
    \ == x) return true\n            i += 1\n        }\n        return false", " \
    \       if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        var power = 1L\n        while (power < x) {\n            power\
    \ *= n\n        }\n        power == x", "        if (x == 1) return true\n   \
    \     if (n == 1) return false\n        var m = n\n        while (m <= x) {\n\
    \            if (m == x) return true\n            m *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        var m = n\n  \
    \      while (m <= x) {\n            if (m == x) return true\n            m *=\
    \ n\n        }\n        return false", "        var i = 2\n        while (i <=\
    \ x) {\n            if (pow(n, i).toLong == x) return true\n            i += 1\n\
    \        }\n        return false", "        if (x == 1) return true\n        if\
    \ (n == 1) return false\n        var p = n\n        while (p <= x) {\n       \
    \     if (p == x) return true\n            p *= n\n        }\n        return false",
  "        if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        val r = sqrt(x)\n        if (r == round(r)) {\n           \
    \ val rr = round(r)\n            val rrr = rr.toLong\n            if (rrr == 1)\
    \ return true\n            if (rrr % n == 0) return isSimplePower(rrr, n)\n  \
    \          else return false\n        }\n        else return false", "       \
    \ if (x == 1) return true\n        if (n == 1) return false\n        var m = n\n\
    \        while (m <= x) {\n            if (m == x) return true\n            m\
    \ *= n\n        }\n        return false", "        if (x == 1) return true\n \
    \       if (n == 1) return false\n        if (x % n != 0) return false\n     \
    \   val y = log(x) / log(n)\n        return y == y.toInt", "        if (x == 1)\
    \ return true\n        if (n == 1) return false\n        var i = 2\n        while\
    \ (i <= x) {\n            if (pow(n, i).toLong == x) return true\n           \
    \ i += 1\n        }\n        return false", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        if (x == n) return true\n        if\
    \ (x % n != 0) return false\n        isSimplePower(x / n, n)", "        if (x\
    \ == 1) return true\n        if (n == 1) return false\n        var i = 2\n   \
    \     while (i <= x) {\n            if (i == x) return true\n            i *=\
    \ n\n        }\n        return false", "        if (x == 1) return true\n    \
    \    if (n == 1) return false\n        var p = n\n        while (p <= x) {\n \
    \           if (p == x) return true\n            p *= n\n        }\n        return\
    \ false", "        if (x < n) return false\n        if (x == n) return true\n\
    \        val p = log(x) / log(n)\n        if (p - p.toInt == 0) true else false",
  "        if (x == 1) return true\n        if (n == 1) return false\n        var\
    \ i = 2\n        while (i <= sqrt(x)) {\n            var p = i\n            while\
    \ (p <= x) {\n                if (p == x) return true\n                p *= i\n\
    \            }\n            i += 1\n        }\n        return false", "      \
    \  if (x == 1) return true\n        var i = 2L\n        while (i <= x) {\n   \
    \         if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= sqrt(x).toInt) {\n            var p =\
    \ 1\n            while (pow(i, p).toLong <= x) {\n                if (pow(i, p).toLong\
    \ == x) return true\n                p += 1\n            }\n            i += 1\n\
    \        }\n        return false", "        if (x == 1) return true\n        var\
    \ i = 2\n        while (i <= x) {\n            if (x % i == 0) {\n           \
    \     if (i == n) return true\n                x /= i\n                i = 2\n\
    \            } else i += 1\n        }\n        false", "        if (x == 1) return\
    \ true\n        if (n == 1) return false\n        if (x == n) return true\n  \
    \      if (x % n != 0) return false\n        isSimplePower(x / n, n)", "     \
    \   if (x == 1) return true\n        if (n == 1) return false\n        var i =\
    \ 2\n        while (i <= x) {\n            if (pow(n, i).toLong == x) return true\n\
    \            i += 1\n        }\n        return false", "        if (n == 1) return\
    \ true\n        if (x == 1) return false\n        var i = 2\n        while (i\
    \ <= x) {\n            if (i == x) return true\n            i *= n\n        }\n\
    \        return false", "        if (x == 1) return true\n        var i = 2\n\
    \        while (i <= sqrt(x).toInt) {\n            var p = 1\n            while\
    \ (pow(i, p).toLong <= x) {\n                if (pow(i, p).toLong == x) return\
    \ true\n                p += 1\n            }\n            i += 1\n        }\n\
    \        return false", "        val p = log(x) / log(n)\n        p == round(p)",
  "        if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n\
    \            if (pow(n, i).toLong == x) return true\n            i += 1\n    \
    \    }\n        return false", "        if (x == 1) return true\n        if (n\
    \ == 1) return false\n        var m = n\n        while (m < x) {\n           \
    \ m *= n\n        }\n        return m == x", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        if (x % n != 0) return false\n    \
    \    isSimplePower(x / n, n)", "        if (x == 1) return true\n        if (n\
    \ == 1) return false\n        if (x % n != 0) return false\n        isSimplePower(x\
    \ / n, n)", "        var i = 2\n        while (i <= n) {\n            var j =\
    \ 2\n            var p = pow(i, j).toLong\n            while (p <= x) {\n    \
    \            if (p == x) return true\n                j += 1\n               \
    \ p = pow(i, j).toLong\n            }\n            i += 1\n        }\n       \
    \ return false", "        if (x == 1) return true\n        var i = 2\n       \
    \ while (i <= x) {\n            if (i == x) return true\n            i *= n\n\
    \        }\n        return false", "        val r = sqrt(x)\n        if (r % 1\
    \ == 0) {\n            val rr = pow(r, 2)\n            if (rr == x) {\n      \
    \          val rrr = sqrt(r)\n                if (rrr % 1 == 0) {\n          \
    \          val rrrr = pow(rrr, 2)\n                    if (rrrr == r) {\n    \
    \                    return true\n                    }\n                }\n \
    \           }\n        }\n        return false", "        if (x == 1) return true\n\
    \        if (n == 1) return false\n        var i = 2\n        while (i <= x) {\n\
    \            if (pow(n, i).toLong == x) return true\n            i += 1\n    \
    \    }\n        return false", "        val m = log(x) / log(n)\n        m ==\
    \ m.toInt", "        val r = pow(x, 1.0 / n)\n        r == r.toInt", "       \
    \ if (x == 1) return true\n        var i = 2\n        while (i <= x) {\n     \
    \       if (i == x) return true\n            i *= n\n        }\n        return\
    \ false", "        if (x == 1) return true\n        if (n == 1) return false\n\
    \        var i = 2\n        while (i <= x) {\n            if (i == x) return true\n\
    \            i *= n\n        }\n        return false", "        val r = pow(x,\
    \ 1.0 / n)\n        r == r.toInt"]
stop_tokens:
- "\n    }\n"
