name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    def roundedAvg(n :\
  \ Long, m : Long) : Either[String, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        if (n > m) return Left(\"n is greater than m\")\n        val\
    \ avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) return Left(\"n must be less than or equal to m\")\n       \
    \ val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n\
    \            val avg = (n + m) / 2\n            Right(avg)\n        }", "    \
    \    if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n   \
    \         val avg = (n + m) / 2\n            Right(avg)\n        }", "       \
    \ if (n > m) return Left(\"n is greater than m\")\n        val avg = round((n\
    \ + m) / 2.0)\n        Right(avg)", "        if (n > m) return Left(\"n must be\
    \ less than or equal to m\")\n        val avg = (n + m) / 2\n        val rounded\
    \ = round(avg)\n        Right(rounded)", "        if (n > m) return Left(\"n is\
    \ greater than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n    \
    \    Right(rounded)", "        if (n > m) return Left(\"n is greater than m\"\
    )\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n\
    \            val avg = floor((n + m) / 2).toLong\n            Right(avg)\n   \
    \     }", "        if (n > m) Left(\"n is greater than m\")\n        else {\n\
    \            val avg = round(n + m / 2.0)\n            Right(avg)\n        }",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val roundedAvg = round(avg)\n        val binary = roundedAvg.toBinaryString\n\
    \        Right(binary.toLong)", "        if (n > m) return Left(\"n is greater\
    \ than m\")\n        val avg = (n + m) / 2\n        Right(avg)", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val rounded = round(avg)\n        Right(rounded)", "        if (n > m)\
    \ Left(\"n is greater than m\")\n        else {\n            val avg = (n + m)\
    \ / 2\n            val roundedAvg = round(avg)\n            Right(roundedAvg)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = round((n + m) / 2.0)\n            Right(avg)\n    \
    \    }", "        if (n > m) return Left(\"n is greater than m\")\n        val\
    \ avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        val binary =\
    \ roundedAvg.toBinaryString\n        Right(binary.toLong)", "        if (n > m)\
    \ Left(\"n is greater than m\")\n        else {\n            val avg = (n + m)\
    \ / 2\n            Right(avg)\n        }", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        val binary = rounded.toBinaryString\n        Right(binary.toLong)", " \
    \       if (n > m) return Left(\"n is greater than m\")\n        val avg = (n\
    \ + m) / 2\n        Right(avg)", "        if (n > m) Left(\"n is greater than\
    \ m\")\n        else {\n            val avg = round(n.toDouble / 2 + m.toDouble\
    \ / 2)\n            Right(avg)\n        }", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = (n + m) / 2\n        Right(avg)", " \
    \       if (n > m) return Left(\"n is greater than m\")\n        val avg = (n\
    \ + m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "     \
    \   if (n > m)\n            Left(\"n is greater than m\")\n        else {\n  \
    \          val avg = (n + m) / 2\n            Right(avg)\n        }", "      \
    \  if (n > m) Left(\"n is greater than m\")\n        else {\n            val avg\
    \ = (n + m) / 2\n            Right(avg)\n        }", "        if (n > m) {\n \
    \           Left(\"n is greater than m\")\n        } else {\n            val avg\
    \ = (n + m) / 2\n            Right(avg)\n        }", "        if (n > m) return\
    \ Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded\
    \ = round(avg)\n        val binary = rounded.toBinaryString\n        Right(binary.toLong)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n\
    \            val avg = (n + m) / 2\n            Right(avg)\n        }", "    \
    \    if (n > m) Left(\"n is greater than m\")\n        else {\n            val\
    \ avg = (n + m) / 2\n            val rounded = round(avg)\n            Right(rounded)\n\
    \        }", "        if (n > m) Left(\"n must be less than or equal to m\")\n\
    \        else {\n            val avg = (n + m) / 2\n            Right(avg)\n \
    \       }", "        if (n > m) return Left(\"n is greater than m\")\n       \
    \ val avg = round((n + m) / 2.0)\n        Right(avg)", "        if (n > m) return\
    \ Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded\
    \ = round(avg)\n        Right(rounded)", "        if (n > m) return Left(\"n >\
    \ m\")\n        val avg = (n + m) / 2\n        Right(avg)", "        if (n > m)\
    \ return Left(\"n must be less than or equal to m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) Left(\"n must be less than or equal to m\")\n        else {\n      \
    \      val avg = (n + m) / 2\n            val rounded = round(avg)\n         \
    \   Right(rounded)\n        }", "        if (n > m) {\n            Left(\"n is\
    \ greater than m\")\n        } else {\n            val avg = (n + m) / 2\n   \
    \         val roundedAvg = round(avg)\n            Right(roundedAvg)\n       \
    \ }", "        if (n > m) return Left(\"n is greater than m\")\n        val avg\
    \ = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)", " \
    \       if (n > m) Left(\"n is greater than m\")\n        else {\n           \
    \ val avg = round(n + m / 2.0)\n            Right(avg)\n        }", "        if\
    \ (n > m) Left(\"n is greater than m\")\n        else {\n            val avg =\
    \ (n + m) / 2\n            val roundedAvg = round(avg)\n            Right(roundedAvg)\n\
    \        }", "        if (n > m)\n            Left(\"n is greater than m\")\n\
    \        else {\n            val avg = round(n + m / 2.0)\n            Right(avg)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)", " \
    \       if (n > m) Left(\"n is greater than m\")\n        else {\n           \
    \ val avg = round(BigDecimal((n + m) / 2.0))\n            Right(avg.toLong)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n must be less than or equal to m\")\n       \
    \ val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = (n + m) / 2\n            Right(avg)\n        }", " \
    \       if (n > m) return Left(\"n must be less than or equal to m\")\n      \
    \  val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)", " \
    \       if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = (n + m) / 2\n            Right(avg)\n        }", " \
    \       if (n > m) return Left(\"n is greater than m\")\n        val avg = (n\
    \ + m) / 2\n        val rounded = round(avg)\n        val binary = rounded.toBinaryString\n\
    \        Right(binary.toLong)", "        if (n > m) {\n            Left(\"n must\
    \ be less than or equal to m\")\n        } else {\n            val avg = round((n\
    \ + m) / 2.0)\n            Right(avg)\n        }", "        if (n > m) Left(\"\
    n is greater than m\")\n        else {\n            val avg = (n + m) / 2\n  \
    \          val roundedAvg = round(avg)\n            Right(roundedAvg)\n      \
    \  }", "        if (n > m) return Left(\"n is greater than m\")\n        val avg\
    \ = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)", " \
    \       if (n > m) Left(\"n is greater than m\")\n        else {\n           \
    \ val avg = round(n + m) / 2\n            Right(avg)\n        }", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val rounded = round(avg)\n        Right(rounded)", "        if (n > m)\
    \ {\n            Left(\"n is greater than m\")\n        } else {\n           \
    \ val avg = (n + m) / 2\n            Right(avg)\n        }", "        if (n >\
    \ m) {\n            Left(\"n is greater than m\")\n        } else {\n        \
    \    val avg = (n + m) / 2\n            Right(avg)\n        }", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val rounded = round(avg)\n        Right(rounded)", "        if (n > m)\
    \ return Left(\"n must be less than or equal to m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = round((n + m)\
    \ / 2.0)\n        Right(avg)", "        if (n > m) return Left(\"n is greater\
    \ than m\")\n        val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n\
    \        Right(roundedAvg)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n \
    \       Right(roundedAvg)", "        if (n > m) Left(\"n is greater than m\")\n\
    \        else {\n            val avg = (n + m) / 2\n            Right(avg)\n \
    \       }", "        if (n > m) return Left(\"n is greater than m\")\n       \
    \ val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = (n + m) / 2\n            Right(avg)\n        }", " \
    \       if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = ((n + m) / 2.0).round\n            Right(avg)\n   \
    \     }", "        if (n > m) return Left(\"n is greater than m\")\n        val\
    \ avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) Left(\"n is greater than m\")\n        else {\n            val avg\
    \ = (n + m) / 2\n            val roundedAvg = round(avg)\n            Right(roundedAvg)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        Right(avg)", "        if (n > m) {\n            Left(\"n must\
    \ be less than or equal to m\")\n        } else {\n            val avg = (n +\
    \ m) / 2\n            val roundedAvg = round(avg)\n            Right(roundedAvg)\n\
    \        }", "        if (n > m) Left(\"n must be less than or equal to m\")\n\
    \        else {\n            val avg = (n + m) / 2\n            val rounded =\
    \ round(avg)\n            val binary = rounded.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        Right(avg)", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = round((n + m) / 2.0)\n        Right(avg)",
  "        if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = (n + m) / 2\n            val roundedAvg = round(avg)\n\
    \            Right(roundedAvg)\n        }", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        Right(avg)", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val rounded = round(avg)\n        Right(rounded)", "        if (n > m) return\
    \ Left(\"n must be less than or equal to m\")\n        val avg = (n + m) / 2\n\
    \        Right(avg)", "        if (n > m) return Left(\"n is greater than m\"\
    )\n        val avg = round((n + m) / 2.0)\n        Right(avg)", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       Right(avg)", "        if (n > m) return Left(\"n is greater than m\")\n\
    \        val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)",
  "        if (n > m) Left(\"n is greater than m\")\n        else {\n            val\
    \ avg = round(n + m / 2.0)\n            Right(avg)\n        }", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val rounded = round(avg)\n        Right(rounded)", "        if (n > m)\
    \ return Left(\"n must be less than or equal to m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n   \
    \         val avg = (n + m) / 2\n            Right(avg)\n        }", "       \
    \ if (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n\
    \            val avg = (n + m) / 2\n            val roundedAvg = round(avg)\n\
    \            Right(roundedAvg)\n        }", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = ((n + m) / 2.0).round\n        Right(avg.toBinaryString.toLong)",
  "        if (n > m) return Left(\"n must be less than or equal to m\")\n       \
    \ val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) Left(\"n is greater than m\")\n        else {\n            val\
    \ avg = round(n + m / 2.0)\n            Right(avg)\n        }", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val avgBinary = avg.toBinaryString\n        val avgBinaryRounded = avgBinary.substring(0,\
    \ avgBinary.length - 1) + \"1\"\n        Right(avgBinaryRounded.toLong(2))", " \
    \       if (n > m) Left(\"n > m\")\n        else {\n            val avg = (n +\
    \ m) / 2\n            val rounded = round(avg)\n            Right(rounded)\n \
    \       }", "        if (n > m) Left(\"n is greater than m\")\n        else {\n\
    \            val avg = (n + m) / 2\n            val roundedAvg = round(avg)\n\
    \            Right(roundedAvg)\n        }", "        if (n > m) return Left(\"\
    n must be less than or equal to m\")\n        val avg = (n + m) / 2\n        val\
    \ rounded = round(avg)\n        Right(rounded)", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = (n + m) / 2\n        val roundedAvg\
    \ = round(avg)\n        val binary = roundedAvg.toBinaryString\n        Right(binary.toLong)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)", " \
    \       if (n > m) return Left(\"n must be less than or equal to m\")\n      \
    \  val avg = round((n + m) / 2.0)\n        Right(avg)", "        if (n > m) return\
    \ Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n        val roundedAvg\
    \ = round(avg)\n        Right(roundedAvg)", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n    \
    \    val binary = rounded.toBinaryString\n        Right(binary.toLong)", "   \
    \     if (n > m) return Left(\"n must be less than or equal to m\")\n        val\
    \ avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) /\
    \ 2\n        val rounded = round(avg)\n        Right(rounded)", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n\
    \ > m) Left(\"n must be less than or equal to m\")\n        else {\n         \
    \   val avg = (n + m) / 2\n            Right(avg)\n        }", "        if (n\
    \ > m) Left(\"n must be less than or equal to m\")\n        else {\n         \
    \   val avg = round(n.toDouble + m.toDouble / 2)\n            Right(avg)\n   \
    \     }", "        if (n > m) return Left(\"n is greater than m\")\n        val\
    \ avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) /\
    \ 2\n        val binary = avg.toBinaryString\n        val rounded = round(avg)\n\
    \        val roundedBinary = rounded.toBinaryString\n        Right(roundedBinary.toLong)",
  "        if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            Right((n + m) / 2)\n        }", "        if (n > m)\n       \
    \     Left(\"n must be less than or equal to m\")\n        else {\n          \
    \  val avg = (n + m) / 2\n            val rounded = round(avg)\n            Right(rounded)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = round((n + m) / 2.0)\n        Right(avg)", "        if (n > m) return\
    \ Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded\
    \ = round(avg)\n        Right(rounded)", "        if (n > m) return Left(\"n is\
    \ greater than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) {\n            Left(\"n is greater\
    \ than m\")\n        } else {\n            val avg = (n + m) / 2\n           \
    \ Right(avg)\n        }", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n \
    \       Right(roundedAvg)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n    \
    \    Right(rounded)", "        if (n > m) return Left(\"n is greater than m\"\
    )\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n\
    \            val avg = (n + m) / 2\n            Right(avg)\n        }", "    \
    \    if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) return Left(\"n cannot be greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) /\
    \ 2\n        val rounded = round(avg)\n        Right(rounded)", "        if (n\
    \ > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n \
    \       val rounded = round(avg)\n        val binary = rounded.toBinaryString\n\
    \        Right(binary.toLong)", "        if (n > m) return Left(\"n must be less\
    \ than or equal to m\")\n        val avg = (n + m) / 2\n        val rounded =\
    \ round(avg)\n        Right(rounded)", "        if (n > m) return Left(\"n is\
    \ greater than m\")\n        val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n\
    \        val binary = roundedAvg.toBinaryString\n        Right(binary.toLong)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = round((n\
    \ + m) / 2.0)\n        Right(avg)", "        if (n > m) return Left(\"n is greater\
    \ than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val bin = avg.toBinaryString\n\
    \        Right(bin.toLong)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val bin = avg.toBinaryString\n\
    \        Right(bin.toLong)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        Right(avg)", "        if (n > m)\
    \ {\n            Left(\"n is greater than m\")\n        } else {\n           \
    \ val avg = (n + m) / 2\n            Right(avg)\n        }", "        if (n >\
    \ m) Left(\"n must be less than or equal to m\")\n        else {\n           \
    \ val avg = (n + m) / 2\n            val rounded = round(avg)\n            Right(rounded)\n\
    \        }", "        if (n > m) Left(\"n is greater than m\")\n        else {\n\
    \            val avg = round(n.toDouble + m.toDouble / 2)\n            Right(avg)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)", " \
    \       if (n > m) {\n            Left(\"n must be less than or equal to m\")\n\
    \        } else {\n            val avg = (n + m) / 2\n            val roundedAvg\
    \ = round(avg)\n            Right(roundedAvg)\n        }", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val rounded = round(avg)\n        Right(rounded)", "        if (n > m) {\n\
    \            Left(\"n is greater than m\")\n        } else {\n            val\
    \ avg = (n + m) / 2\n            Right(avg)\n        }", "        if (n > m) return\
    \ Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n        val roundedAvg\
    \ = round(avg)\n        val binary = roundedAvg.toBinaryString\n        Right(binary.toLong)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val roundedAvg = round(avg)\n        Right(roundedAvg)", " \
    \       if (n > m) Left(\"n is greater than m\")\n        else {\n           \
    \ val avg = (n + m) / 2\n            Right(avg)\n        }", "        if (n >\
    \ m) {\n            Left(\"n must be less than or equal to m\")\n        } else\
    \ {\n            Right((n + m) / 2)\n        }", "        if (n > m) return Left(\"\
    n is greater than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n must be less than\
    \ or equal to m\")\n        val avg = (n + m) / 2\n        Right(avg)", "    \
    \    if (n > m) Left(\"n is greater than m\")\n        else {\n            val\
    \ avg = round(n.toDouble + m.toDouble / 2)\n            Right(avg)\n        }",
  "        if (n > m) {\n            Left(\"n must be less than or equal to m\")\n\
    \        } else {\n            val avg = (n + m) / 2\n            Right(avg)\n\
    \        }", "        if (n > m) return Left(\"n is greater than m\")\n      \
    \  val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n        val binary\
    \ = roundedAvg.toBinaryString\n        Right(binary.toLong)", "        if (n >\
    \ m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n   \
    \     val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n\
    \ > m) {\n            Left(\"n is greater than m\")\n        } else {\n      \
    \      val avg = (n + m) / 2\n            Right(avg)\n        }", "        if\
    \ (n > m) {\n            Left(\"n is greater than m\")\n        } else {\n   \
    \         val avg = (n + m) / 2\n            Right(avg)\n        }", "       \
    \ if (n > m) return Left(\"n must be less than or equal to m\")\n        val avg\
    \ = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)", " \
    \       if (n > m) return Left(\"n is greater than m\")\n        val avg = (n\
    \ + m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "     \
    \   if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val rounded = round(avg)\n        val binary = rounded.toBinaryString\n\
    \        Right(binary.toLong)", "        if (n > m) return Left(\"n is greater\
    \ than m\")\n        val avg = round((n + m) / 2.0)\n        Right(avg)", "  \
    \      if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        Right(avg)", "        if (n > m) return Left(\"n is greater\
    \ than m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        Right(avg)", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val rounded = round(avg)\n        val binary = rounded.toBinaryString\n   \
    \     Right(binary.toLong)", "        if (n > m) {\n            return Left(\"\
    n must be less than or equal to m\")\n        }\n        val avg = (n + m) / 2\n\
    \        Right(avg)", "        if (n > m) return Left(\"n must be less than or\
    \ equal to m\")\n        val avg = (n + m) / 2\n        val rounded = round(avg)\n\
    \        Right(rounded)", "        if (n > m) return Left(\"n is greater than\
    \ m\")\n        val avg = (n + m) / 2\n        val roundedAvg = round(avg)\n \
    \       val binary = roundedAvg.toBinaryString\n        Right(binary.toLong)",
  "        if (n > m) {\n            Left(\"n is greater than m\")\n        } else\
    \ {\n            val avg = (n + m) / 2\n            Right(avg)\n        }", " \
    \       if (n > m) return Left(\"n must be less than or equal to m\")\n      \
    \  val avg = (n + m) / 2\n        val rounded = round(avg)\n        val binary\
    \ = rounded.toBinaryString\n        Right(binary.toLong)", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n > m)\
    \ return Left(\"n must be less than or equal to m\")\n        val avg = (n + m)\
    \ / 2\n        val rounded = round(avg)\n        Right(rounded)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val bin = avg.toBinaryString\n        Right(bin.toLong)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if\
    \ (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n\
    \        val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if\
    \ (n > m) Left(\"n must be less than or equal to m\")\n        else {\n      \
    \      val avg = (n + m) / 2\n            val rounded = round(avg)\n         \
    \   Right(rounded)\n        }", "        if (n > m) Left(\"n is greater than m\"\
    )\n        else {\n            val avg = (n + m) / 2\n            Right(avg)\n\
    \        }", "        if (n > m) {\n            Left(\"n is greater than m\")\n\
    \        } else {\n            val avg = (n + m) / 2\n            val roundedAvg\
    \ = round(avg)\n            Right(roundedAvg)\n        }", "        if (n > m)\
    \ return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n      \
    \  val roundedAvg = round(avg)\n        Right(roundedAvg)", "        if (n > m)\
    \ Left(\"n is greater than m\")\n        else {\n            val avg = (n + m)\
    \ / 2\n            val rounded = round(avg)\n            Right(rounded)\n    \
    \    }", "        if (n > m) return Left(\"n is greater than m\")\n        val\
    \ avg = (n + m) / 2\n        Right(avg)", "        if (n > m) Left(\"n is greater\
    \ than m\")\n        else {\n            val avg = (n + m) / 2\n            val\
    \ roundedAvg = round(avg)\n            Right(roundedAvg)\n        }", "      \
    \  if (n > m) return Left(\"n must be less than or equal to m\")\n        val\
    \ avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) return Left(\"n is greater than m\")\n        val avg = (n + m) /\
    \ 2\n        val rounded = round(avg)\n        val binary = rounded.toBinaryString\n\
    \        Right(binary.toLong)", "        if (n > m) {\n            Left(\"n is\
    \ greater than m\")\n        } else {\n            val avg = (n + m) / 2\n   \
    \         Right(avg)\n        }", "        if (n > m) return Left(\"n > m\")\n\
    \        val avg = round((n + m) / 2.0)\n        Right(avg)", "        if (n >\
    \ m) return Left(\"n is greater than m\")\n        val avg = (n + m) / 2\n   \
    \     val binary = avg.toBinaryString\n        Right(binary.toLong)", "      \
    \  if (n > m) return Left(\"n must be less than or equal to m\")\n        val\
    \ avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)", "       \
    \ if (n > m) return Left(\"n must be less than or equal to m\")\n        val avg\
    \ = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)", " \
    \       if (n > m) return Left(\"n must be less than or equal to m\")\n      \
    \  val avg = (n + m) / 2\n        val rounded = round(avg)\n        Right(rounded)",
  "        if (n > m) return Left(\"n is greater than m\")\n        val avg = (n +\
    \ m) / 2\n        val rounded = round(avg)\n        Right(rounded)"]
stop_tokens:
- "\n    }\n"
