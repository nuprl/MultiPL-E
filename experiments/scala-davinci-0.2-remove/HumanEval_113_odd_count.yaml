name: HumanEval_113_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of strings, where each string consists of only digits, return\
  \ a list.\n    // Each element i of the output should be \"the number of odd elements\
  \ in the\n    // string i of the input.\" where all the i's should be replaced by\
  \ the number\n    // of odd digits in the i'th string of the input.\n    def oddCount(lst\
  \ : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
  1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
  271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
  \    }\n\n}\n"
completions: ['        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(x => x.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.toList.map(y => y.asDigit).filter(y => y % 2 == 1).length.toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.toCharArray.filter(y => y.toString.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(s => s.toList.filter(c => c.asDigit % 2
    == 1).length.toString)', '        lst.map(x => x.count(x => x.toInt % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(c => c.asDigit % 2
    == 1).toString)', '        lst.map(x => x.count(c => c.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', "        lst.map(x\
    \ => x.count(c => (c - '0') % 2 == 1).toString)", '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', "        def odd(s : String) : Int = {\n  \
    \          var count = 0\n            for (c <- s) {\n                if (c.toInt\
    \ % 2 == 1) count += 1\n            }\n            count\n        }\n        lst.map(odd(_).toString)",
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(x => x.toInt
    % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(x => x.toInt % 2 == 1).toString)', '        lst.map(s
    => s.filter(c => c.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.toList.map(y =>
    y.asDigit).filter(z => z % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(c => c.asDigit % 2
    == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', "        lst.map(x => x.filter(y\
    \ => (y.toInt - '0'.toInt) % 2 == 1).length.toString)", '        lst.map(s =>
    s.filter(c => c.asDigit % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(s => s.count(_.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', "        lst.map(x\
    \ => x.filter(c => (c - '0') % 2 == 1).length.toString)", '        lst.map(x =>
    x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(x =>
    x.toInt % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(c => c.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(c => c.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.filter(x => x.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.toCharArray.filter(y => y.asDigit % 2 == 1).length.toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.toList.map(y => y.asDigit).filter(z
    => z % 2 == 1).length.toString)', "        lst.map(x => x.count(y => (y.toInt\
    \ - '0'.toInt) % 2 == 1).toString)", '        lst.map(x => x.filter(c => c.asDigit
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(s => s.filter(c => c.asDigit % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(x => x.count(y => (y.asDigit % 2) == 1).toString)',
  '        lst.map(x => x.count(x => x.toInt % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.map(y => y.asDigit).filter(z => z % 2 == 1).length.toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(s => s.count(_.asDigit % 2 == 1).toString)', '        lst.map(s
    => s.count(_.asDigit % 2 == 1).toString)', '        lst.map(x => x.filter(y =>
    y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.count(y => y.asDigit % 2
    == 1).toString)', '        lst.map(x => x.filter(x => x.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(s
    => s.count(_.toInt % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.filter(x => x.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1))', '        lst.map(x => x.filter(x => x.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(x => x.toInt % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(x
    => x.toInt % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)',
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(x
    => x.toInt % 2 == 1).length.toString)', '        lst.map(x => x.count(c => c.asDigit
    % 2 == 1).toString)', "        lst.map(x => x.count(y => (y.toInt - '0'.toInt)\
    \ % 2 == 1).toString)", '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y
    => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.count(y => y.asDigit
    % 2 == 1).toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt
    % 2 == 1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 ==
    1).length.toString)', '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length.toString)',
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString)', '        lst.map(x => x.toCharArray.filter(y
    => y.toString.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', "        var result = List[String]()\n\
    \        for (i <- lst) {\n            var count = 0\n            for (j <- i)\
    \ {\n                if (j.toInt % 2 == 1) count += 1\n            }\n       \
    \     result = result :+ count.toString\n        }\n        result", '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(y
    => y.toInt % 2 == 1).length.toString)', '        lst.map(x => x.filter(c => c.asDigit
    % 2 == 1).length.toString)']
stop_tokens:
- "\n    }\n"
