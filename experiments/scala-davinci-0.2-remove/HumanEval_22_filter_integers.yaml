name: HumanEval_22_filter_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter given list of any python values only for integers\n    def filterIntegers(values\
  \ : List[Any]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
  \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
  \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ['        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        var result = List[Long]()\n        for (value <- values) {\n          \
    \  if (value.isInstanceOf[Long]) {\n                result = value.asInstanceOf[Long]\
    \ :: result\n            }\n        }\n        return result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ = List[Long]()\n        for (value <- values) {\n            if (value.isInstanceOf[Long])\
    \ {\n                result = result :+ value.asInstanceOf[Long]\n           \
    \ }\n        }\n        return result", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        return values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result = List[Long]()\n        for (value\
    \ <- values) {\n            value match {\n                case x : Int => result\
    \ = result :+ x.toLong\n                case x : Long => result = result :+ x\n\
    \                case _ =>\n            }\n        }\n        return result",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ = List[Long]()\n        for (value <- values) {\n            value match {\n\
    \                case x : Int => result = result :+ x.toLong\n               \
    \ case x : Long => result = result :+ x\n                case _ =>\n         \
    \   }\n        }\n        return result", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ = List[Long]()\n        for (value <- values) {\n            if (value.isInstanceOf[Long])\
    \ {\n                result = value.asInstanceOf[Long] :: result\n           \
    \ }\n        }\n        return result", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result = List[Long]()\n        for (value\
    \ <- values) {\n            if (value.isInstanceOf[Long]) {\n                result\
    \ = result :+ value.asInstanceOf[Long]\n            }\n        }\n        return\
    \ result", '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        return values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ = List[Long]()\n        for (value <- values) {\n            value match {\n\
    \                case x : Int => result = result :+ x.toLong\n               \
    \ case x : Long => result = result :+ x\n                case _ =>\n         \
    \   }\n        }\n        return result", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', "     \
    \   var result = List[Long]()\n        for (value <- values) {\n            value\
    \ match {\n                case x : Int => result = result :+ x.toLong\n     \
    \           case x : Long => result = result :+ x\n                case _ =>\n\
    \            }\n        }\n        return result", '        values.filter(x =>
    x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Int]).map(x => x.asInstanceOf[Int].toLong)', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        values.filter\
    \ {\n            case x : Long => true\n            case _ => false\n        }.map\
    \ {\n            case x : Long => x\n        }", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])']
stop_tokens:
- "\n    }\n"
