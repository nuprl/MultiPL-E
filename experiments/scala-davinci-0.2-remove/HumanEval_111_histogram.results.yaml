language: scala
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov22qg3a.scala:18)\n\tat Problem.main(tmpov22qg3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val testList = test.split(\"\
    \ \").toList\n        testList.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjujmxfi.scala:22)\n\tat Problem.main(tmpxjujmxfi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptlzrlnnu.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCount = letters.groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = letterCount.values.max\n        letterCount.filter(_._2\
    \ == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2d2p31py.scala:12:26\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        letterCount.filter(_._2\
    \ == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val testArray =\
    \ test.split(\" \")\n        val max = testArray.map(x => testArray.count(_ ==\
    \ x)).max\n        testArray.foreach(x => if (testArray.count(_ == x) == max)\
    \ result += (x -> max))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lgg_1t5.scala:22)\n\tat Problem.main(tmp3lgg_1t5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          if (result.contains(c.toString)) {\n                result(c.toString)\
    \ += 1\n            } else {\n                result += (c.toString -> 1)\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyrgxmr5q.scala:20)\n\tat Problem.main(tmpyrgxmr5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val wordCounts = words.groupBy(word\
    \ => word).mapValues(_.length)\n        wordCounts\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpys8_po0b.scala:11:8\
    \ ---------------------\e[0m\e[0m\n\e[31m11 |\e[0m        wordCounts\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordCounts\
    \ : scala.collection.MapView[String, Int])\n\e[31m   |\e[0m        Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (c <- test)\
    \ {\n            val count = result.getOrElse(c.toString, 0L)\n            result.put(c.toString,\
    \ count + 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplx8ckup9.scala:17)\n\tat Problem.main(tmplx8ckup9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).map(x => (x._1, x._2.length.toLong))\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5ys437o.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (c <- test)\
    \ {\n            val count = result.getOrElse(c.toString, 0L)\n            result.put(c.toString,\
    \ count + 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplx8ckup9.scala:17)\n\tat Problem.main(tmplx8ckup9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        letters.foreach(letter => {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        })\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftvemutn.scala:22)\n\tat Problem.main(tmpftvemutn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val histogram = new\
    \ HashMap[String,Long]\n        for (letter <- testArray) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdqemmcy.scala:22)\n\tat Problem.main(tmphdqemmcy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmposn8bo2l.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) result(x) += 1\n            else result(x)\
    \ = 1\n        })\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6d54gwhe.scala:18)\n\tat Problem.main(tmp6d54gwhe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn36fzu6t.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val hist = words.groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0j4cajgf.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var map = Map[String,Long]()\n        for (c <- test) {\n     \
    \       val count = map.getOrElse(c.toString, 0)\n            map += (c.toString\
    \ -> (count + 1))\n        }\n        return map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9iwrx0w1.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            map += (c.toString -> (count + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of AnyVal, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.toLowerCase.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodw57hxm.scala:21)\n\tat Problem.main(tmpodw57hxm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = Map[String,Long]()\n        for (c <- test) {\n    \
    \        val count = hist.getOrElse(c.toString, 0)\n            hist(c.toString)\
    \ = count + 1\n        }\n        hist\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgvz5cya1.scala:12:37 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            hist(c.toString) = count + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpank4uqyj.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (c <- test)\
    \ {\n            val count = result.getOrElse(c.toString, 0L)\n            result.put(c.toString,\
    \ count + 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplx8ckup9.scala:17)\n\tat Problem.main(tmplx8ckup9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]()\n        val letters =\
    \ test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        for ((letter,count) <-\
    \ letterCounts) {\n            if (count == maxCount) result += (letter -> count)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6iuexhd.scala:25)\n\tat Problem.main(tmpi6iuexhd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpleuvi.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpleuvi.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjd7lu9n2.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Long]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov22qg3a.scala:18)\n\tat Problem.main(tmpov22qg3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov22qg3a.scala:18)\n\tat Problem.main(tmpov22qg3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ysoo00.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3misxydb.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val histogram = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = histogram.values.max\n        histogram.filter(_._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0rgabo92.scala:11:24\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        histogram.filter(_._2\
    \ == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m \
    \  |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"\
    b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn2v_cuz.scala:21)\n\tat Problem.main(tmpsn2v_cuz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (c <- test)\
    \ {\n            val count = result.getOrElse(c.toString, 0L)\n            result.put(c.toString,\
    \ count + 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplx8ckup9.scala:17)\n\tat Problem.main(tmplx8ckup9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn36fzu6t.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov22qg3a.scala:18)\n\tat Problem.main(tmpov22qg3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) result(x) += 1\n   \
    \         else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn6iy_9va.scala:18)\n\tat Problem.main(tmpn6iy_9va.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val max = testMap.values.max\n        testMap.filter(_._2 == max)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ob_qblv.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(x => x).mapValues(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzt3rsic.scala:9:49\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(\e[36mx\e[0m => x).mapValues(_.length)\n\e[31m\e[31m  |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \        Found:    scala.collection.MapView[String, Int]\n\e[31m  |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = Map[String,Long]()\n        for (c <- test) {\n    \
    \        val count = hist.getOrElse(c.toString, 0)\n            hist += (c.toString\
    \ -> (count + 1))\n        }\n        hist\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnza6ouap.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            hist += (c.toString -> (count + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9git7ywu.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xoa93wv.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var hist = Map[String,Long]()\n        for (c <- test) {\n    \
    \        if (hist.contains(c.toString)) {\n                hist(c.toString) +=\
    \ 1\n            } else {\n                hist(c.toString) = 1\n            }\n\
    \        }\n        var max = hist.values.max\n        var maxKeys = hist.filter(x\
    \ => x._2 == max).keys\n        var result = Map[String,Long]()\n        for (k\
    \ <- maxKeys) {\n            result(k) = max\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9kyn3b2g.scala:26)\n\tat Problem.main(tmp9kyn3b2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3hfm7dzj.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          val count = result.getOrElse(c.toString, 0)\n            result(c.toString)\
    \ = count + 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j20hp5o.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result(c.toString) = count + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5ayfm23.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).map(x => (x._1, x._2.length.toLong))\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5ys437o.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxg8l3jx.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = result.values.max\n        result.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopajwn2a.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        result.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        var max = 0\n        for\
    \ (c <- test) {\n            val count = result.getOrElse(c.toString, 0) + 1\n\
    \            result += (c.toString -> count)\n            if (count > max) max\
    \ = count\n        }\n        result.filter(x => x._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfssw4osk.scala:12:56 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = result.getOrElse(c.toString,\
    \ \e[31m0\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5ayfm23.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjd7lu9n2.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Long]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxg8l3jx.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxg8l3jx.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val m = Map[String,Long]()\n        for (c <- test) {\n       \
    \     val s = c.toString\n            if (m.contains(s)) m(s) += 1\n         \
    \   else m(s) = 1\n        }\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfj_ryyl.scala:18)\n\tat Problem.main(tmpsfj_ryyl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (i <- 0 until testArray.length) {\n            val key = testArray(i)\n\
    \            if (map.contains(key)) {\n                val count = map(key)\n\
    \                map(key) = count + 1\n            } else {\n                map(key)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7kxv3ook.scala:24)\n\tat Problem.main(tmp7kxv3ook.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          val count = result.getOrElse(c.toString, 0)\n            result +=\
    \ (c.toString -> (count + 1))\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoow3jrfi.scala:12:44 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result += (c.toString -> (count + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpank4uqyj.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          val count = result.getOrElse(c.toString, 0)\n            result(c.toString)\
    \ = count + 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j20hp5o.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result(c.toString) = count + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val testArray = test.split(\"\
    \ \")\n        for (letter <- testArray) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbjp1ymk.scala:22)\n\tat Problem.main(tmpvbjp1ymk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxg8l3jx.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hi25ud5.scala:22)\n\tat Problem.main(tmp0hi25ud5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var hist = Map[String,Long]()\n        for (c <- test) {\n    \
    \        val count = hist.getOrElse(c.toString, 0)\n            hist += (c.toString\
    \ -> (count + 1))\n        }\n        hist\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplg33ozvc.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            hist += (c.toString -> (count + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ysoo00.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val hist = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn36fzu6t.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val histogram = letters.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = histogram.values.max\n        histogram.filter(x => x._2 ==\
    \ max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbl8nrm7f.scala:12:24\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        histogram.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            val count = result.getOrElse(x, 0)\n           \
    \ result.put(x, count + 1)\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwmz5m2lj.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result.put(x, count + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is\
    \ not a member of AnyVal, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (result.contains(word)) {\n\
    \                result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wkwjom8.scala:22)\n\tat Problem.main(tmp7wkwjom8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpplzn2p_o.scala:22)\n\tat Problem.main(tmpplzn2p_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0i604mes.scala:21)\n\tat Problem.main(tmp0i604mes.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxg8l3jx.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = Map[String,Long]()\n        for (c <- test) {\n     \
    \       val count = map.getOrElse(c.toString, 0)\n            map += (c.toString\
    \ -> (count + 1))\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3mftgqem.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            map += (c.toString -> (count + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of AnyVal, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1pnk89ov.scala:22)\n\tat Problem.main(tmp1pnk89ov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length)\n\
    \        val max = hist.values.max\n        return hist.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphlzi2t5d.scala:11:26\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mreturn\e[0m hist.filter(\e\
    [36mx\e[0m => x._2 == max)\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    scala.collection.MapView[String,\
    \ Int]\n\e[31m   |\e[0m               Required: collection.mutable.Map[String,\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val counts = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivlsr481.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val max = testMap.values.max\n        testMap.filter(_._2 == max)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ob_qblv.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(x => x.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ywmh27j.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpleuvi.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hi25ud5.scala:22)\n\tat Problem.main(tmp0hi25ud5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val words = test.split(\" \")\n        val hist = words.groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0j4cajgf.scala:12:19\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]()\n        for (c <- test)\
    \ {\n            val count = result.getOrElse(c.toString, 0)\n            result.put(c.toString,\
    \ count + 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiyvgqztm.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result.put(c.toString, count + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue + is not a member of AnyVal, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          if (result.contains(c.toString)) result(c.toString) += 1\n        \
    \    else result += (c.toString -> 1)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0ht1oft.scala:17)\n\tat Problem.main(tmpu0ht1oft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(c => c.toString).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputr6ezwn.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Long]\n\
    \e[31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpank4uqyj.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzio8e6xq.scala:12:21\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        counts.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptx9pt36a.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xoa93wv.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val counts = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivlsr481.scala:11:21\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => result(x) = result.getOrElse(x, 0) + 1)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0l99f7g_.scala:10:72 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        test.split(\e[31m\" \"\e[0m).foreach(\e[36mx\e\
    [0m => result(x) = result.getOrElse(x, \e[31m0\e[0m) + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeiq0pqe1.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) result(x) += 1\n            else result(x)\
    \ = 1\n        })\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfo9lt6c4.scala:18)\n\tat Problem.main(tmpfo9lt6c4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testList = test.split(\" \").toList\n        val testMap =\
    \ testList.groupBy(identity).mapValues(_.size)\n        val max = testMap.values.max\n\
    \        testMap.filter(_._2 == max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_xrur8hu.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val testArray =\
    \ test.split(\" \")\n        testArray.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85uguob7.scala:22)\n\tat Problem.main(tmp85uguob7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val testArray =\
    \ test.split(\" \")\n        for (i <- 0 until testArray.length) {\n         \
    \   val letter = testArray(i)\n            if (result.contains(letter)) {\n  \
    \              result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmvtwy0q.scala:23)\n\tat Problem.main(tmptmvtwy0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          val count = result.getOrElse(c.toString, 0)\n            result(c.toString)\
    \ = count + 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j20hp5o.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result(c.toString) = count + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = map.values.max\n        map.filter(_._2 == max)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovjthj1v.scala:11:18\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        map.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpleuvi.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val max = testMap.maxBy(_._2)._2\n        testMap.filter(_._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ze50j8g.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpank4uqyj.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length.toLong)\n  \
    \      val max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwfunw0td.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Long]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpleuvi.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n\
    \        val max = hist.maxBy(x => x._2)._2\n        hist.filter(x => x._2 ==\
    \ max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptmb0r697.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q542_hg.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKeys = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxMap = maxKeys.map(x => (x, maxValue)).toMap\n\
    \        return maxMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpecqzcn9e.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m maxMap\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (maxMap : Map[String, Int])\n\e[31m   |\e[0m               Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKeys = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxKeysString = maxKeys.mkString(\" \")\n   \
    \     Map(maxKeysString -> maxValue)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvgmlbl7i.scala:17)\n\tat Problem.main(tmpvgmlbl7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjd7lu9n2.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Long]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(identity).mapValues(_.length)\n       \
    \ val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglz2ho37.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ysoo00.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(c => c.toString).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzszmnrmo.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val testArray = test.split(\"\
    \ \")\n        for (i <- 0 until testArray.length) {\n            if (result.contains(testArray(i)))\
    \ {\n                result(testArray(i)) += 1\n            } else {\n       \
    \         result(testArray(i)) = 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6mnfhob.scala:22)\n\tat Problem.main(tmpd6mnfhob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]()\n        val testArray\
    \ = test.split(\" \")\n        for (i <- 0 until testArray.length) {\n       \
    \     if (result.contains(testArray(i))) {\n                result(testArray(i))\
    \ += 1\n            } else {\n                result(testArray(i)) = 1\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo0whrfcn.scala:22)\n\tat Problem.main(tmpo0whrfcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArr = test.split(\" \")\n        val testMap = testArr.groupBy(identity).mapValues(_.length)\n\
    \        val maxVal = testMap.values.max\n        testMap.filter(_._2 == maxVal)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwy4ewgh.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ maxVal)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m \
    \  |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_tsllond.scala:9:51\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(identity).mapValues(_.length.toLong)\n\e[31m\e[31m  |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m        Found:    scala.collection.MapView[String, Long]\n\e[31m  |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val histogram = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = histogram.values.max\n        histogram.filter(_._2 == max)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp01bo3p1r.scala:11:24\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        histogram.filter(_._2\
    \ == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m \
    \  |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val max = testMap.values.max\n        testMap.filter(_._2 == max)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ob_qblv.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = testMap.values.max\n        testMap.filter(_._2 == maxCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1r40i07.scala:12:22\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        testMap.filter(_._2 ==\
    \ maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m\
    \   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val map = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = map.values.max\n        map.filter(x => x._2 == max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprexuxsj_.scala:11:18\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        map.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        for (c <- test) {\n  \
    \          val count = result.getOrElse(c.toString, 0)\n            result +=\
    \ (c.toString -> (count + 1))\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoow3jrfi.scala:12:44 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result += (c.toString -> (count + \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of AnyVal, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n\
    \        val max = hist.maxBy(x => x._2)._2\n        hist.filter(x => x._2 ==\
    \ max)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptmb0r697.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKey = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxKeyArray = maxKey.toArray\n        val maxKeyString\
    \ = maxKeyArray.mkString(\" \")\n        val maxKeyMap = Map(maxKeyString -> maxValue)\n\
    \        return maxKeyMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuxelqpis.scala:16:15\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m maxKeyMap\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:\
    \    \e[1m\e[31m(\e[0m\e[1m\e[31mmaxKeyMap\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mscala\e[0m\e[1m\e[31m.\e[0mcollection.mutable.Map[String,\
    \ \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m       Required: collection.mutable.Map[String,\
    \ \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ysoo00.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(x => x._2 == max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4ysoo00.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[Char, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val letters = test.split(\"\
    \ \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n  \
    \      val max = counts.values.max\n        for ((k,v) <- counts) {\n        \
    \    if (v == max) result += (k -> v)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpia2pwlkg.scala:25)\n\tat Problem.main(tmpia2pwlkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val testArray =\
    \ test.split(\" \")\n        for (i <- 0 until testArray.length) {\n         \
    \   if (result.contains(testArray(i))) {\n                result(testArray(i))\
    \ += 1\n            } else {\n                result(testArray(i)) = 1\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67ei9mf5.scala:22)\n\tat Problem.main(tmp67ei9mf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        test.split(\" \").groupBy(x => x).mapValues(_.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplzt3rsic.scala:9:49\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        test.split(\e[31m\" \"\
    \e[0m).groupBy(\e[36mx\e[0m => x).mapValues(_.length)\n\e[31m\e[31m  |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m\
    \        Found:    scala.collection.MapView[String, Int]\n\e[31m  |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        var result = Map[String,Long]()\n        test.toCharArray.foreach(x\
    \ => {\n            if (result.contains(x.toString)) result(x.toString) += 1 else\
    \ result(x.toString) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ke1t_af.scala:16)\n\tat Problem.main(tmp7ke1t_af.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov22qg3a.scala:18)\n\tat Problem.main(tmpov22qg3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        for (c <- test)\
    \ {\n            if (result.contains(c.toString)) result(c.toString) += 1\n  \
    \          else result(c.toString) = 1\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpifx3zg93.scala:17)\n\tat Problem.main(tmpifx3zg93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            val count = result.getOrElse(word,\
    \ 0)\n            result += (word -> (count + 1))\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdi96sm8o.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            result += (word -> (count + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of AnyVal, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660028629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).map(x => (x._1.toString, x._2.length.toLong))\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q542_hg.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Map[String, Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv14e2d7.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val letterCounts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = letterCounts.values.max\n        letterCounts.filter(x\
    \ => x._2 == maxCount)\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfd2hce79.scala:12:27\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        letterCounts.filter(\e\
    [36mx\e[0m => x._2 == maxCount)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppz2yhwme.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(x => x).mapValues(_.length)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptx9pt36a.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m      \
    \  Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3misxydb.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \       })\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\"\
    \ -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9cdn45m.scala:21)\n\tat Problem.main(tmp_9cdn45m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val list = test.split(\" \").toList\n        val map = list.groupBy(identity).mapValues(_.size)\n\
    \        val max = map.values.max\n        map.filter(_._2 == max)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6uybarv.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        map.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e[0m       \
    \ Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length)\n\
    \        val max = hist.values.max\n        hist.filter(x => x._2 == max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpleuvi.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(\e[36mx\e\
    [0m => x._2 == max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e\
    [31m   |\e[0m        Required: collection.mutable.Map[String, Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val testArray = test.split(\" \")\n        val testMap = testArray.groupBy(identity).mapValues(_.length)\n\
    \        val maxValue = testMap.values.max\n        val maxKeys = testMap.filter(_._2\
    \ == maxValue).keys\n        val maxMap = maxKeys.map(x => (x,maxValue)).toMap\n\
    \        return maxMap\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbqubk0h.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m maxMap\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (maxMap : Map[String, Int])\n\e[31m   |\e[0m               Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        val testArray =\
    \ test.split(\" \")\n        for (i <- 0 until testArray.length) {\n         \
    \   if (result.contains(testArray(i))) {\n                result(testArray(i))\
    \ += 1\n            } else {\n                result(testArray(i)) = 1\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"a\" -> 2l,\
    \ \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67ei9mf5.scala:22)\n\tat Problem.main(tmp67ei9mf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.split(\" \").groupBy(identity).mapValues(_.length.toLong)\n\
    \        val max = hist.maxBy(_._2)._2\n        hist.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3misxydb.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[String, Long]\n\e[31m   |\e[0m     \
    \   Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b b a\"\
    )).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkd_mwj3k.scala:12:21\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        counts.filter(_._2 ==\
    \ max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    scala.collection.MapView[String, Int]\n\e[31m   |\e\
    [0m        Required: collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val hist = test.groupBy(x => x).mapValues(_.length)\n        val\
    \ max = hist.values.max\n        hist.filter(_._2 == max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp62abi9mc.scala:11:19\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        hist.filter(_._2 == max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    scala.collection.MapView[Char, Int]\n\e[31m   |\e[0m        Required:\
    \ collection.mutable.Map[String, Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result(x) += 1\n\
    \            } else {\n                result(x) = 1\n            }\n        })\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"\
    a b b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
    a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l,\
    \ \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
    r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\"\
    )).equals((Map[String,Long](\"b\" -> 4l))));\n    assert(histogram((\"r t g\"\
    )).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    \")).equals((Map[String,Long]())));\n    assert(histogram((\"a\")).equals((Map[String,Long](\"\
    a\" -> 1l))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplaabcrqd.scala:21)\n\tat Problem.main(tmplaabcrqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    // of the letter with the most repetition and containing the\
    \ corresponding count.\n    // If several letters have the same occurrence, return\
    \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
    \ = {\n        val result = new HashMap[String,Long]\n        test.split(\" \"\
    ).foreach(x => {\n            if (result.contains(x)) result(x) += 1\n       \
    \     else result(x) = 1\n        })\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(histogram((\"a b b a\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c a b\")).equals((Map[String,Long](\"\
    a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"a b c d g\")).equals((Map[String,Long](\"\
    a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\
    r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n\
    \    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"b\" -> 4l))));\n\
    \    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\" -> 1l, \"t\"\
    \ -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
    \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpov22qg3a.scala:18)\n\tat Problem.main(tmpov22qg3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028589
