name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    def simplify(x\
  \ : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n\
    \        val x_numerator = x_(0).toInt\n        val x_denominator = x_(1).toInt\n\
    \        val n_numerator = n_(0).toInt\n        val n_denominator = n_(1).toInt\n\
    \        val numerator = x_numerator * n_denominator\n        val denominator\
    \ = x_denominator * n_numerator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator_ = numerator / gcd.toInt\n        val denominator_ = denominator\
    \ / gcd.toInt\n        if (numerator_ % denominator_ == 0) true else false", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val result = numerator / gcd\n        val result2 = denominator\
    \ / gcd\n        if (result == result2) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = BigInt(xn(0))\n\
    \        val xdenominator = BigInt(xn(1))\n        val nnumerator = BigInt(nn(0))\n\
    \        val ndenominator = BigInt(nn(1))\n        val numerator = xnumerator\
    \ * nnumerator\n        val denominator = xdenominator * ndenominator\n      \
    \  val gcd = numerator.gcd(denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedNumerator\
    \ % simplifiedDenominator == 0", "        val xs = x.split(\"/\")\n        val\
    \ xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val ns = n.split(\"\
    /\")\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val\
    \ g = gcd(xd, nd)\n        val d = xd * nd / g\n        val n = xn * nd / g\n\
    \        val m = nn * xd / g\n        val r = n - m\n        r % d == 0", "  \
    \      val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = gcd(xn, xd)\n        xn / gcd == xd / gcd", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val numerator2 = numerator\
    \ / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n        if\
    \ (numerator2 % denominator2 == 0) true else false", "        val xs = x.split(\"\
    /\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val\
    \ ns = n.split(\"/\")\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val g = gcd(xd, nd)\n        val d = xd * nd / g\n        val n = xn\
    \ * nd / g\n        val m = nn * xd / g\n        n % m == 0", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ gcd(xn, xd)\n        xn / gcd == xd / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        numerator / gcd.toInt == denominator / gcd.toInt", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n      \
    \  xd2 % xn2 == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd\
    \ == xd / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        val nn =\
    \ xn / gcd\n        val nd = xd / gcd\n        if (nn % nd == 0) true else false",
  "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_num\
    \ = x_(0).toInt\n        val x_den = x_(1).toInt\n        val n_num = n_(0).toInt\n\
    \        val n_den = n_(1).toInt\n        val num = x_num * n_num\n        val\
    \ den = x_den * n_den\n        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n\
    \        val num_ = num / gcd\n        val den_ = den / gcd\n        den_ % num_\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = gcd(xn, xd)\n        val nn = xn / gcd\n        val nd = xd\
    \ / gcd\n        if (nd == 1) true else false", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val numerator2\
    \ = numerator / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n\
    \        if (numerator2 % denominator2 == 0) true else false", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        val gcd =\
    \ gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 = nx / gcd\n      \
    \  xn2 % nx2 == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n    \
    \    val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (num, den) = (xn\
    \ * nn, xd * nd)\n        val gcd = BigInt(num).gcd(den).toInt\n        val (snum,\
    \ sden) = (num / gcd, den / gcd)\n        val (snum2, sden2) = (snum % sden, sden)\n\
    \        if (snum2 == 0) true else false", "        val xn = x.split(\"/\")\n\
    \        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n     \
    \   val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n   \
    \     val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val simplified = numerator\
    \ / gcd\n        simplified % denominator == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        val nn = xn / gcd\n        val nd = xd / gcd\n        nn % nd == 0",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplified\
    \ = (numerator / gcd) / (denominator / gcd)\n        simplified % 1 == 0", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   if (gcd == 1) return false\n        else {\n            val numerator2 = numerator\
    \ / gcd.toInt\n            val denominator2 = denominator / gcd.toInt\n      \
    \      if (numerator2 % denominator2 == 0) return true\n            else return\
    \ false\n        }", "        val xn = x.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nn = n.split(\"\
    /\")\n        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xArr = x.split(\"/\")\n        val\
    \ nArr = n.split(\"/\")\n        val xNum = xArr(0).toInt\n        val xDen =\
    \ xArr(1).toInt\n        val nNum = nArr(0).toInt\n        val nDen = nArr(1).toInt\n\
    \        val num = xNum * nDen\n        val den = xDen * nNum\n        val gcd\
    \ = gcd(num, den)\n        val num2 = num / gcd\n        val den2 = den / gcd\n\
    \        num2 % den2 == 0", "        val xs = x.split(\"/\")\n        val ns =\
    \ n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd =\
    \ xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2 =\
    \ xn / gcd\n        val xd2 = xd / gcd\n        xd2 % xn2 == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val nnumerator2 = numerator\
    \ / gcd\n        val ndenominator2 = denominator / gcd\n        val nnumerator3\
    \ = nnumerator2.toDouble\n        val ndenominator3 = ndenominator2.toDouble\n\
    \        val result = nnumerator3 / ndenominator3\n        val result2 = result.toInt\n\
    \        if (result2 == result) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        (xn / gcd) % (nx / gcd) == 0", "     \
    \   val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn =\
    \ xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n    \
    \    val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "    \
    \    val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toLong * ns(1).toLong\n        val xd = xs(1).toLong * ns(0).toLong\n\
    \        val gcd = BigInt(xn).gcd(xd).toLong\n        xn / gcd == xd / gcd", " \
    \       val xArray = x.split(\"/\")\n        val nArray = n.split(\"/\")\n   \
    \     val xNumerator = xArray(0).toInt\n        val xDenominator = xArray(1).toInt\n\
    \        val nNumerator = nArray(0).toInt\n        val nDenominator = nArray(1).toInt\n\
    \        val numerator = xNumerator * nDenominator\n        val denominator =\
    \ xDenominator * nNumerator\n        val gcd = gcd(numerator, denominator)\n \
    \       if (numerator % gcd == 0 && denominator % gcd == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd.toInt\
    \ == denominator / gcd.toInt", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n\
    \        xn / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nn = n.split(\"/\")\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nn = n.split(\"/\")\n        val nnumerator = nn(0).toInt\n     \
    \   val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        xn % xd == 0", "        val\
    \ x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_num = x_(0).toInt\n\
    \        val x_den = x_(1).toInt\n        val n_num = n_(0).toInt\n        val\
    \ n_den = n_(1).toInt\n        val num = x_num * n_num\n        val den = x_den\
    \ * n_den\n        val gcd = gcd_iter(num, den)\n        val num_ = num / gcd\n\
    \        val den_ = den / gcd\n        if (num_ % den_ == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 = xd\
    \ / gcd\n        xd2 == 1", "        val xs = x.split(\"/\")\n        val xn =\
    \ xs(0).toInt\n        val xd = xs(1).toInt\n        val ns = n.split(\"/\")\n\
    \        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val xnn =\
    \ xn * nn\n        val xdd = xd * nd\n        val gcd = BigInt(xnn).gcd(xdd).toInt\n\
    \        val xnnn = xnn / gcd\n        val xddd = xdd / gcd\n        xnnn % xddd\
    \ == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n \
    \       val xnumerator = BigInt(xn(0))\n        val xdenominator = BigInt(xn(1))\n\
    \        val nnumerator = BigInt(nn(0))\n        val ndenominator = BigInt(nn(1))\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = numerator.gcd(denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      val nn = xn / gcd\n        val nd = xd / gcd\n        nn % nd == 0", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val numerator2\
    \ = numerator / gcd\n        val denominator2 = denominator / gcd\n        if\
    \ (numerator2 % denominator2 == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd.toInt == denominator\
    \ / gcd.toInt", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val nn = xn / gcd\n  \
    \      val nd = xd / gcd\n        nn % nd == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n  \
    \      val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val simplifiedNumerator = numerator / gcd\n        val\
    \ simplifiedDenominator = denominator / gcd\n        simplifiedNumerator % simplifiedDenominator\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toLong * ns(1).toLong\n        val xd = xs(1).toLong *\
    \ ns(0).toLong\n        val gcd = BigInt(xn).gcd(xd).toLong\n        xn / gcd\
    \ == xd / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd\
    \ == xd / gcd", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\"\
    )(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n\
    \        val (xn2, xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 /\
    \ gcd(xn2, xd2), xd2 / gcd(xn2, xd2))\n        xd3 == 1", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val simplifiedNumerator =\
    \ numerator / gcd.toInt\n        val simplifiedDenominator = denominator / gcd.toInt\n\
    \        return simplifiedNumerator % simplifiedDenominator == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val numerator2 = numerator\
    \ / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n        numerator2\
    \ % denominator2 == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnum = xn(0).toInt\n        val xden = xn(1).toInt\n       \
    \ val nnum = nn(0).toInt\n        val nden = nn(1).toInt\n        val num = xnum\
    \ * nnum\n        val den = xden * nden\n        val gcd = BigInt(num).gcd(den)\n\
    \        val num2 = num / gcd.toInt\n        val den2 = den / gcd.toInt\n    \
    \    val num3 = num2.toDouble\n        val den3 = den2.toDouble\n        val result\
    \ = num3 / den3\n        if (result % 1 == 0) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val nnumerator2\
    \ = numerator / gcd.toInt\n        val ndenominator2 = denominator / gcd.toInt\n\
    \        if (nnumerator2 % ndenominator2 == 0) true else false", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n \
    \       val xn1 = xn / gcd\n        val xd1 = xd / gcd\n        xn1 % xd1 == 0",
  "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n   \
    \     val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n    \
    \    val (xn2, xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 / gcd(xn2,\
    \ xd2), xd2 / gcd(xn2, xd2))\n        xd3 == 1", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toLong * ns(1).toLong\n\
    \        val xd = xs(1).toLong * ns(0).toLong\n        val gcd = gcd(xn, xd)\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        val xn3 = xn2\
    \ / xd2\n        val xd3 = xd2 / xd2\n        xn3 == xd3", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val (xn,\
    \ xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (num, den) = (xn * nn, xd * nd)\n        val gcd = BigInt(num).gcd(den).toInt\n\
    \        val (snum, sden) = (num / gcd, den / gcd)\n        snum % sden == 0",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n      \
    \  val xd2 = xd / gcd\n        xn2 % xd2 == 0", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = gcd(xn, xd)\n        val nn = xn / gcd\n        val nd = xd\
    \ / gcd\n        if (nn % nd == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedNumerator\
    \ % simplifiedDenominator == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2\
    \ = xn / gcd\n        val xd2 = xd / gcd\n        xd2 == 1", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val simplifiedNumerator =\
    \ numerator / gcd.toInt\n        val simplifiedDenominator = denominator / gcd.toInt\n\
    \        simplifiedNumerator % simplifiedDenominator == 0", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val simplifiedNumerator =\
    \ numerator / gcd.toInt\n        val simplifiedDenominator = denominator / gcd.toInt\n\
    \        simplifiedNumerator % simplifiedDenominator == 0", "        val x_num\
    \ = x.split(\"/\")(0).toInt\n        val x_den = x.split(\"/\")(1).toInt\n   \
    \     val n_num = n.split(\"/\")(0).toInt\n        val n_den = n.split(\"/\")(1).toInt\n\
    \        val num = x_num * n_num\n        val den = x_den * n_den\n        val\
    \ gcd = gcd(num, den)\n        val num_simplified = num / gcd\n        val den_simplified\
    \ = den / gcd\n        if (num_simplified == den_simplified) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator) = (xn\
    \ * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (sn, sd) = (numerator / gcd, denominator / gcd)\n        sd == 1",
  "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n   \
    \     val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n    \
    \    val (xn1, xd1) = (xn * nd, xd * nn)\n        val g = gcd(xn1, xd1)\n    \
    \    (xn1 / g) % (xd1 / g) == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       simplifiedNumerator % simplifiedDenominator == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n \
    \       val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xd2 % xn2 == 0",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n      \
    \  val xd2 = xd / gcd\n        val x2 = xn2.toDouble / xd2.toDouble\n        x2\
    \ % 1 == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\"\
    )\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt *\
    \ ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd ==\
    \ xd / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       simplifiedNumerator % simplifiedDenominator == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val numerator2 = numerator\
    \ / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n        if\
    \ (numerator2 % denominator2 == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nn = n.split(\"/\")\n        val nnumerator = nn(0).toInt\n     \
    \   val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toLong * ns(1).toLong\n        val xd = xs(1).toLong * ns(0).toLong\n\
    \        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 =\
    \ xd / gcd\n        xd2 % xn2 == 0", "        val xs = x.split(\"/\")\n      \
    \  val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n     \
    \   val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n      \
    \  val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xd2 % xn2 == 0", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toLong * ns(1).toLong\n        val xd = xs(1).toLong * ns(0).toLong\n\
    \        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 =\
    \ xd / gcd\n        if (xd2 == 1) true\n        else if (xn2 % xd2 == 0) true\n\
    \        else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd\
    \ == xd / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd\
    \ == xd / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val simplifiedNumerator = numerator / gcd.toInt\n        val simplifiedDenominator\
    \ = denominator / gcd.toInt\n        simplifiedNumerator % simplifiedDenominator\
    \ == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n \
    \       val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      xn / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nn = n.split(\"\
    /\")\n        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       simplifiedNumerator % simplifiedDenominator == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toLong * ns(1).toLong\n\
    \        val xd = xs(1).toLong * ns(0).toLong\n        val gcd = BigInt(xn).gcd(BigInt(xd)).toLong\n\
    \        val nn = xn / gcd\n        val nd = xd / gcd\n        if (nn % nd ==\
    \ 0) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn_ = xn / gcd\n \
    \       val xd_ = xd / gcd\n        xd_ % xn_ == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 % xd2 ==\
    \ 0", "        val xs = x.split(\"/\")\n        val xn = xs(0).toInt\n       \
    \ val xd = xs(1).toInt\n        val ns = n.split(\"/\")\n        val nn = ns(0).toInt\n\
    \        val nd = ns(1).toInt\n        val gcd = gcd(xd, nd)\n        val d =\
    \ xd * nd / gcd\n        val n = xn * nd / gcd + nn * xd / gcd\n        gcd(n,\
    \ d) == d", "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n\
    \        val x_num = x_(0).toInt\n        val x_den = x_(1).toInt\n        val\
    \ n_num = n_(0).toInt\n        val n_den = n_(1).toInt\n        val x_num_n =\
    \ x_num * n_den\n        val x_den_n = x_den * n_num\n        val gcd = gcd_rec(x_num_n,\
    \ x_den_n)\n        if (gcd == 1) return false\n        else return true", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   numerator / gcd.toInt == denominator / gcd.toInt", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        xn / gcd == xd / gcd", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val simplifiedNumerator = numerator / gcd\n        val\
    \ simplifiedDenominator = denominator / gcd\n        simplifiedNumerator % simplifiedDenominator\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       simplifiedNumerator % simplifiedDenominator == 0", "        val x_ = x.split(\"\
    /\")\n        val n_ = n.split(\"/\")\n        val x_num = x_(0).toInt\n     \
    \   val x_den = x_(1).toInt\n        val n_num = n_(0).toInt\n        val n_den\
    \ = n_(1).toInt\n        val num = x_num * n_num\n        val den = x_den * n_den\n\
    \        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n        if (gcd == 1) return\
    \ false\n        val num_ = num / gcd\n        val den_ = den / gcd\n        if\
    \ (num_ % den_ == 0) return true\n        return false", "        val xs = x.split(\"\
    /\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val\
    \ ns = n.split(\"/\")\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val num = xn * nn\n        val den = xd * nd\n        val gcd = BigInt(num).gcd(den).toInt\n\
    \        val num2 = num / gcd\n        val den2 = den / gcd\n        den2 % num2\
    \ == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n \
    \       val xn1 = xn(0).toInt\n        val xn2 = xn(1).toInt\n        val nn1\
    \ = nn(0).toInt\n        val nn2 = nn(1).toInt\n        val xn1n2 = xn1 * nn2\n\
    \        val nn1xn2 = nn1 * xn2\n        val xn2nn2 = xn2 * nn2\n        val gcd\
    \ = gcd(xn1n2, xn2nn2)\n        val xn1n2s = xn1n2 / gcd\n        val xn2nn2s\
    \ = xn2nn2 / gcd\n        if (xn1n2s == nn1xn2) true else false", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toLong\
    \ * ns(1).toLong\n        val xd = xs(1).toLong * ns(0).toLong\n        val gcd\
    \ = BigInt(xn).gcd(BigInt(xd)).toLong\n        val nn = xn / gcd\n        val\
    \ nd = xd / gcd\n        nn % nd == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n   \
    \     val nn = xn / gcd\n        val nd = xd / gcd\n        nn % nd == 0", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        val result = numerator2.toDouble / denominator2.toDouble\n\
    \        val result2 = result * denominator2\n        result2 == numerator2",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 =\
    \ xd / gcd\n        xd2 % xn2 == 0", "        val (x1, x2) = x.split(\"/\").map(_.toLong)\n\
    \        val (n1, n2) = n.split(\"/\").map(_.toLong)\n        val gcd = BigInt(x2).gcd(BigInt(n2)).toLong\n\
    \        val lcm = x2 / gcd * n2\n        val y1 = x1 * (lcm / x2)\n        val\
    \ y2 = n1 * (lcm / n2)\n        val y = y1 + y2\n        y % lcm == 0", "    \
    \    val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 = xd\
    \ / gcd\n        xd2 % xn2 == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        val nn = xn / gcd\n        val nd = xd / gcd\n        nn % nd == 0",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", "  \
    \      val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val result = numerator\
    \ / gcd\n        result * denominator == denominator", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedNumerator\
    \ % simplifiedDenominator == 0", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (denominator2 == 1) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       simplifiedNumerator % simplifiedDenominator == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val xnumerator2 = xnumerator\
    \ * ndenominator\n        val xdenominator2 = xdenominator * nnumerator\n    \
    \    val gcd = gcd2(xnumerator2, xdenominator2)\n        val xnumerator3 = xnumerator2\
    \ / gcd\n        val xdenominator3 = xdenominator2 / gcd\n        if (xdenominator3\
    \ == 1) true else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n  \
    \      xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd\
    \ = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2\
    \ = xn / gcd\n        val xd2 = xd / gcd\n        xd2 == 1", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedNumerator\
    \ % simplifiedDenominator == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2\
    \ = xn / gcd\n        val xd2 = xd / gcd\n        if (xd2 == 1) true\n       \
    \ else if (xn2 % xd2 == 0) true\n        else false", "        val (xn, xd) =\
    \ x.split(\"/\") match {case Array(xn, xd) => (xn.toInt, xd.toInt)}\n        val\
    \ (nn, nd) = n.split(\"/\") match {case Array(nn, nd) => (nn.toInt, nd.toInt)}\n\
    \        val (num, den) = (xn * nn, xd * nd)\n        val g = gcd(num, den)\n\
    \        num / g == den / g", "        val xs = x.split(\"/\")\n        val xn\
    \ = xs(0).toInt\n        val xd = xs(1).toInt\n        val ns = n.split(\"/\"\
    )\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n        val g =\
    \ gcd(xd, nd)\n        val d = xd * nd / g\n        val n = xn * nd / g\n    \
    \    val m = nn * xd / g\n        val r = n - m\n        r % d == 0", "      \
    \  val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val simplified\
    \ = (numerator / gcd.toInt, denominator / gcd.toInt)\n        simplified._1 %\
    \ simplified._2 == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val simplified\
    \ = (numerator / gcd.toInt, denominator / gcd.toInt)\n        val (numerator2,\
    \ denominator2) = simplified\n        numerator2 % denominator2 == 0", "     \
    \   val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd.toInt\
    \ == denominator / gcd.toInt", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = BigInt(xn(0))\n        val xdenominator\
    \ = BigInt(xn(1))\n        val nnumerator = BigInt(nn(0))\n        val ndenominator\
    \ = BigInt(nn(1))\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = numerator.gcd(denominator)\n\
    \        numerator / gcd == denominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nn = n.split(\"/\")\n        val nnumerator = nn(0).toInt\n     \
    \   val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xn = x.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nn = n.split(\"/\")\n   \
    \     val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n \
    \       val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator)\
    \ = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (sn, sd) = (numerator / gcd, denominator / gcd)\n        sn % sd\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * ndenominator\n        val denominator = xdenominator\
    \ * nnumerator\n        val gcd = gcd(numerator, denominator)\n        val simplified\
    \ = numerator / gcd\n        val simplified2 = denominator / gcd\n        if (simplified\
    \ % simplified2 == 0) true else false", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 % xd2 ==\
    \ 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n    \
    \    val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n  \
    \      val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplified\
    \ = (numerator / gcd, denominator / gcd)\n        simplified._1 == simplified._2",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnum\
    \ = xn(0).toInt\n        val xden = xn(1).toInt\n        val nnum = nn(0).toInt\n\
    \        val nden = nn(1).toInt\n        val num = xnum * nnum\n        val den\
    \ = xden * nden\n        val gcd = BigInt(num).gcd(den)\n        val num2 = num\
    \ / gcd.toInt\n        val den2 = den / gcd.toInt\n        if (num2 % den2 ==\
    \ 0) true else false", "        val xn = x.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nn = n.split(\"\
    /\")\n        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplified\
    \ = numerator / gcd\n        val simplified2 = denominator / gcd\n        if (simplified\
    \ == simplified2) true else false", "        val xn = x.split(\"/\")\n       \
    \ val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (denominator2 == 1) true else false", "        val x_\
    \ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_numerator =\
    \ x_(0).toInt\n        val x_denominator = x_(1).toInt\n        val n_numerator\
    \ = n_(0).toInt\n        val n_denominator = n_(1).toInt\n        val numerator\
    \ = x_numerator * n_denominator\n        val denominator = x_denominator * n_numerator\n\
    \        val gcd = gcd_recursive(numerator, denominator)\n        val simplified_numerator\
    \ = numerator / gcd\n        val simplified_denominator = denominator / gcd\n\
    \        if (simplified_denominator == 1) true else false", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 =\
    \ nx / gcd\n        val gcd2 = gcd(xn2, nx2)\n        xn2 / gcd2 == nx2 / gcd2",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n      \
    \  val xd2 = xd / gcd\n        xn2 % xd2 == 0", "        val (xn, xd) = (x.split(\"\
    /\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\"\
    )(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd *\
    \ nn)\n        val g = gcd(xn2, xd2)\n        (xn2 / g) % (xd2 / g) == 0", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n      \
    \  val xd2 = xd / gcd\n        xn2 % xd2 == 0", "        val x_numerator = x.split(\"\
    /\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n        val\
    \ n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"\
    /\")(1).toInt\n        val numerator = x_numerator * n_numerator\n        val\
    \ denominator = x_denominator * n_denominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xSplit = x.split(\"/\")\n        val nSplit = n.split(\"\
    /\")\n        val xNum = xSplit(0).toInt\n        val xDen = xSplit(1).toInt\n\
    \        val nNum = nSplit(0).toInt\n        val nDen = nSplit(1).toInt\n    \
    \    val xNum2 = xNum * nDen\n        val xDen2 = xDen * nNum\n        val gcd\
    \ = gcd(xNum2, xDen2)\n        val xNum3 = xNum2 / gcd\n        val xDen3 = xDen2\
    \ / gcd\n        if (xNum3 % xDen3 == 0) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        if (gcd == 1) return false\n\
    \        val simplifiedNumerator = numerator / gcd.toInt\n        val simplifiedDenominator\
    \ = denominator / gcd.toInt\n        if (simplifiedNumerator % simplifiedDenominator\
    \ == 0) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        xn / gcd == xd / gcd",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toLong * ns(1).toLong\n        val nx = ns(0).toLong * xs(1).toLong\n\
    \        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 =\
    \ nx / gcd\n        xn2 == nx2", "        val x1 = x.split(\"/\")\n        val\
    \ n1 = n.split(\"/\")\n        val x2 = x1(0).toInt\n        val x3 = x1(1).toInt\n\
    \        val n2 = n1(0).toInt\n        val n3 = n1(1).toInt\n        val x4 =\
    \ x2 * n3\n        val n4 = n2 * x3\n        val gcd = gcd(x4, n4)\n        val\
    \ x5 = x4 / gcd\n        val n5 = n4 / gcd\n        if (x5 % n5 == 0) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = BigInt(xn).gcd(nx).toInt\n        xn / gcd == nx / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n      \
    \  val xd2 = xd / gcd\n        val xn3 = xn2.toDouble / xd2.toDouble\n       \
    \ val xn4 = xn3 * xd2\n        xn4 == xn2", "        val xn = x.split(\"/\")\n\
    \        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toLong\n    \
    \    val xdenominator = xn(1).toLong\n        val nnumerator = nn(0).toLong\n\
    \        val ndenominator = nn(1).toLong\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = BigInt(numerator).gcd(denominator)\n        val numerator2 = numerator\
    \ / gcd.toLong\n        val denominator2 = denominator / gcd.toLong\n        numerator2\
    \ % denominator2 == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (num, den) =\
    \ (xn * nn, xd * nd)\n        val gcd = BigInt(num).gcd(den).toInt\n        num\
    \ / gcd == den / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   numerator / gcd.toInt == denominator / gcd.toInt", "        val (xn, xd) =\
    \ x.split(\"/\").map(_.toLong)\n        val (nn, nd) = n.split(\"/\").map(_.toLong)\n\
    \        val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd =\
    \ BigInt(numerator).gcd(denominator).toLong\n        val (sn, sd) = (numerator\
    \ / gcd, denominator / gcd)\n        sn % sd == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val\
    \ nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val\
    \ product = xnumerator * nnumerator\n        val productdenominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(product, productdenominator)\n       \
    \ product / gcd == productdenominator / gcd", "        val xn = x.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nn = n.split(\"/\")\n        val nnumerator = nn(0).toInt\n     \
    \   val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val (xn,\
    \ xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd)\
    \ = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2, xd2)\
    \ = (xn * nd, xd * nn)\n        val g = gcd(xn2, xd2)\n        (xn2 / g) % (xd2\
    \ / g) == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\"\
    )\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val result\
    \ = numerator / gcd\n        val result2 = denominator / gcd\n        if (result\
    \ == result2) true else false", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = BigInt(xn(0))\n        val xdenominator\
    \ = BigInt(xn(1))\n        val nnumerator = BigInt(nn(0))\n        val ndenominator\
    \ = BigInt(nn(1))\n        val gcd = xdenominator.gcd(ndenominator)\n        val\
    \ lcm = xdenominator * ndenominator / gcd\n        val numerator = xnumerator\
    \ * (lcm / xdenominator) * nnumerator\n        val denominator = lcm\n       \
    \ numerator % denominator == 0", "        val xn = x.split(\"/\")\n        val\
    \ xn2 = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val xnumerator2 = xn2(0).toInt\n        val xdenominator2\
    \ = xn2(1).toInt\n        val numerator = xnumerator * xdenominator2\n       \
    \ val denominator = xdenominator * xnumerator2\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnumerator = BigInt(xn(0))\n        val xdenominator = BigInt(xn(1))\n     \
    \   val nnumerator = BigInt(nn(0))\n        val ndenominator = BigInt(nn(1))\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = numerator.gcd(denominator)\n        val numerator2\
    \ = numerator / gcd\n        val denominator2 = denominator / gcd\n        numerator2\
    \ % denominator2 == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n \
    \       val xd2 = xd / gcd\n        if (xd2 == 1) true\n        else false", " \
    \       val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val\
    \ xnum = xn(0).toInt\n        val xden = xn(1).toInt\n        val nnum = nn(0).toInt\n\
    \        val nden = nn(1).toInt\n        val num = xnum * nnum\n        val den\
    \ = xden * nden\n        val gcd = gcd(num, den)\n        val num2 = num / gcd\n\
    \        val den2 = den / gcd\n        if (num2 % den2 == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   numerator / gcd.toInt == denominator / gcd.toInt"]
stop_tokens:
- "\n    }\n"
