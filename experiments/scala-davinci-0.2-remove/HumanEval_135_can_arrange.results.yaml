language: scala
name: HumanEval_135_can_arrange
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        if (max -\
    \ min > 1) return -1\n        if (min == max) {\n            if (min == 0) return\
    \ (n * (n - 1)) / 2\n            return -1\n        }\n        val zeros = sorted.count(_\
    \ == 0)\n        val ones = sorted.count(_ == 1)\n        return zeros * ones\
    \ + (zeros * (zeros - 1)) / 2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjyi4706y.scala:24)\n\tat Problem.main(tmpjyi4706y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val s = arr.sorted\n        var i = 0\n        var j = s.length\
    \ - 1\n        var count = 0\n        while (i < j) {\n            if (s(i) +\
    \ s(j) == 0) {\n                count += 1\n                i += 1\n         \
    \       j -= 1\n            } else if (s(i) + s(j) < 0) {\n                i +=\
    \ 1\n            } else {\n                j -= 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj482t1n7.scala:28)\n\tat Problem.main(tmpj482t1n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val sum =\
    \ sorted.sum\n        if (sum % 2 == 1) return 0\n        val target = sum / 2\n\
    \        if (target < min || target > max) return 0\n        val dp = Array.fill(n\
    \ + 1, target.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n)\
    \ {\n            for (j <- 0 to target.toInt) {\n                dp(i)(j) = dp(i\
    \ - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j) += dp(i - 1)(j - sorted(i\
    \ - 1).toInt)\n            }\n        }\n        dp(n)(target.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98etw9xv.scala:29)\n\tat Problem.main(tmp98etw9xv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        if (max\
    \ - min > 1) return -1\n        if (max - min == 1) {\n            if (n % 2 ==\
    \ 1) return -1\n            val mid = n / 2\n            for (i <- 0 until mid)\
    \ {\n                if (sorted(i) != sorted(i + mid)) return -1\n           \
    \ }\n            return mid - 1\n        }\n        if (max == min) {\n      \
    \      if (n % 2 == 1) return -1\n            val mid = n / 2\n            for\
    \ (i <- 0 until mid) {\n                if (sorted(i) != sorted(i + mid)) return\
    \ -1\n            }\n            return mid - 1\n        }\n        return -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qxe9y35.scala:34)\n\tat Problem.main(tmp8qxe9y35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        var i = 0\n        var j = n - 1\n        while (i < j) {\n         \
    \   if (sorted(i) + sorted(j) == 0) {\n                i += 1\n              \
    \  j -= 1\n            } else if (sorted(i) + sorted(j) > 0) {\n             \
    \   j -= 1\n            } else {\n                i += 1\n            }\n    \
    \    }\n        if (i == j) {\n            if (sorted(i) == 0) 1 else 0\n    \
    \    } else {\n            1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow6vx4_u.scala:31)\n\tat Problem.main(tmpow6vx4_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val maxIndex\
    \ = sorted.indexOf(max)\n        val minIndex = sorted.indexOf(min)\n        val\
    \ maxIndex2 = sorted.indexOf(max, maxIndex + 1)\n        val minIndex2 = sorted.indexOf(min,\
    \ minIndex + 1)\n        val maxIndex3 = sorted.indexOf(max, maxIndex2 + 1)\n\
    \        val minIndex3 = sorted.indexOf(min, minIndex2 + 1)\n        val maxIndex4\
    \ = sorted.indexOf(max, maxIndex3 + 1)\n        val minIndex4 = sorted.indexOf(min,\
    \ minIndex3 + 1)\n        val maxIndex5 = sorted.indexOf(max, maxIndex4 + 1)\n\
    \        val minIndex5 = sorted.indexOf(min, minIndex4 + 1)\n        val maxIndex6\
    \ = sorted.indexOf(max, maxIndex5 + 1)\n        val minIndex6 = sorted.indexOf(min,\
    \ minIndex5 + 1)\n        val maxIndex7 = sorted.indexOf(max, maxIndex6 + 1)\n\
    \        val minIndex7 = sorted.indexOf(min, minIndex6 + 1)\n        val maxIndex8\
    \ = sorted.indexOf(max, maxIndex7 + 1)\n        val minIndex8 = sorted.indexOf(min,\
    \ minIndex7 + 1)\n        val maxIndex9 = sorted.indexOf(max, maxIndex8 + 1)\n\
    \        val minIndex9 = sorted.indexOf(min, minIndex8 + 1)\n        val maxIndex10\
    \ = sorted.indexOf(max, maxIndex9 + 1)\n        val minIndex10 = sorted.indexOf(min,\
    \ minIndex9 + 1)\n        val maxIndex11 = sorted.indexOf(max, maxIndex10 + 1)\n\
    \        val minIndex11 = sorted.indexOf(min, minIndex10 + 1)\n        val maxIndex12\
    \ = sorted.indexOf(max, maxIndex11 + 1)\n        val minIndex12 = sorted.indexOf(min,\
    \ minIndex11 + 1)\n        val maxIndex13 = sorted.indexOf(max, max\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl_v5sy8j.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl_v5sy8j.scala:38:45 --------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxIndex13\e[0m = sorted.indexOf(max, max\n\e[31m\e\
    [31m   |\e[0m                                             ^^^\e[0m\n\e[31m   |\e\
    [0m                                             Found:    (max : Long)\n\e[31m\
    \   |\e[0m                                             Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_v5sy8j.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) {\n                j -= 1\n\
    \            }\n            if (j < 0) {\n                dp(i) = x\n        \
    \    } else {\n                dp(i) = dp(j) + x\n            }\n        }\n \
    \       dp(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vwssj7t.scala:27)\n\tat Problem.main(tmp4vwssj7t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val max = sorted.max\n\
    \        val min = sorted.min\n        val range = max - min\n        if (range\
    \ == 0) return 0\n        val count = Array.fill(range.toInt + 1)(0)\n       \
    \ for (i <- 0 until sorted.length) {\n            count(sorted(i).toInt - min.toInt)\
    \ += 1\n        }\n        var total = 0L\n        for (i <- 0 until count.length)\
    \ {\n            if (count(i) > 0) {\n                val j = i + min.toInt\n\
    \                if (j + j == max + min) {\n                    total += count(i)\
    \ * (count(i) - 1) / 2\n                } else if (j + j < max + min) {\n    \
    \                total += count(i) * count(max.toInt - min.toInt - j)\n      \
    \          }\n            }\n        }\n        total\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp974mdiml.scala:33)\n\tat Problem.main(tmp974mdiml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val diff =\
    \ max - min\n        if (diff % 2 == 1) return -1\n        val mid = min + diff\
    \ / 2\n        val count = Array.fill(n)(0)\n        for (i <- 0 until n) {\n\
    \            val x = sorted(i)\n            if (x <= mid) count(i) = 1\n     \
    \       else count(i) = -1\n        }\n        val prefix = Array.fill(n)(0)\n\
    \        prefix(0) = count(0)\n        for (i <- 1 until n) prefix(i) = prefix(i\
    \ - 1) + count(i)\n        var result = 0L\n        for (i <- 0 until n) {\n \
    \           if (count(i) == 1) {\n                val index = prefix.indexWhere(_\
    \ == prefix(i) - 1)\n                if (index != -1) result += 1\n          \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_iv_6jqf.scala:36)\n\tat Problem.main(tmp_iv_6jqf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var sum = 0L\n        for (i <- 0 until n) {\n            sum += sorted(i)\n\
    \        }\n        if (sum % 2 == 1) return 0\n        val target = sum / 2\n\
    \        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n       \
    \     dp(i) = dp(i - 1) + sorted(i - 1)\n        }\n        val count = Array.fill(n\
    \ + 1)(0L)\n        for (i <- 1 to n) {\n            count(i) = count(i - 1) +\
    \ 1\n        }\n        var result = 0L\n        for (i <- 1 to n) {\n       \
    \     val j = dp.indexWhere(dp(i) - _ == target)\n            if (j != -1) {\n\
    \                result += count(j)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi63ymhtb.scala:36)\n\tat Problem.main(tmpi63ymhtb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val max = arr.max\n        val\
    \ sum = arr.sum\n        if (sum % 2 == 1) return 0\n        val half = sum /\
    \ 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0) = 1\n\
    \        for (i <- 1 to n) {\n            val a = arr(i - 1)\n            for\
    \ (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n              \
    \  if (j >= a) dp(i)(j) += dp(i - 1)(j - a)\n            }\n        }\n      \
    \  dp(n)(half)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv23ormr.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppv23ormr.scala:19:27 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppv23ormr.scala:21:37 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mif\e[0m (j >= a) dp(i)(j) += dp(i - \e[31m1\e[0m)(j -\
    \ a)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppv23ormr.scala:21:50 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (j >= a) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - a)\n\e[31m\e[31m   |\e[0m                              \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppv23ormr.scala:24:14 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m              ^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (half : Long)\n\e[31m   |\e[0m   \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m lo"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        if (max\
    \ - min >= n) return -1\n        var i = 0\n        var j = 1\n        while (i\
    \ < n && j < n) {\n            if (sorted(i) + 1 == sorted(j)) {\n           \
    \     i += 1\n                j += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        i.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptms_ecc4.scala:28)\n\tat Problem.main(tmptms_ecc4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        arr.sortWith(_ > _).foldLeft(0L)((acc, x) => acc + x)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8nk_6g4.scala:13)\n\tat Problem.main(tmpc8nk_6g4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val\
    \ half = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk41445ur.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk41445ur.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpk41445ur.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk41445ur.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk41445ur.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n    \
    \        for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n   \
    \             if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n   \
    \         }\n        }\n        dp(n)(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo988lgp9.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo988lgp9.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo988lgp9.scala:19:59 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        dp(n)(half)\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val min = sorted(0)\n        val max = sorted(n - 1)\n        val sum\
    \ = sorted.sum\n        if (sum % 2 == 1) return 0\n        val target = sum /\
    \ 2\n        if (min == max) {\n            if (min == target) return 1\n    \
    \        else return 0\n        }\n        val counts = new HashMap[Long, Long]\n\
    \        for (i <- 0 until n) {\n            val x = sorted(i)\n            if\
    \ (counts.contains(x)) counts(x) += 1\n            else counts(x) = 1\n      \
    \  }\n        val dp = new Array[Long](target.toInt + 1)\n        dp(0) = 1\n\
    \        for (i <- min.toInt to target.toInt) {\n            for (j <- min.toInt\
    \ to max.toInt) {\n                if (i - j >= 0 && counts.contains(j)) {\n \
    \                   dp(i) += dp(i - j) * counts(j)\n                }\n      \
    \      }\n        }\n        return dp(target.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpswqgefou.scala:39)\n\tat Problem.main(tmpswqgefou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            for (j\
    \ <- i - 1 to 0 by -1) {\n                if (arr(j) <= x) {\n               \
    \     dp(i) = max(dp(i), dp(j) + 1)\n                }\n            }\n      \
    \  }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa8kb14oa.scala:24)\n\tat Problem.main(tmpa8kb14oa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            val x =\
    \ arr(i)\n            for (j <- 0 until n) {\n                if (j != i) {\n\
    \                    val y = arr(j)\n                    if (x + y <= m) dp(x.toInt)\
    \ = max(dp(x.toInt), dp(y.toInt) + 1)\n                }\n            }\n    \
    \    }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.canArrange$$anonfun$1$$anonfun$1(tmp3ibyqpu7.scala:18)\n\t\
    at scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.canArrange$$anonfun$1(tmp3ibyqpu7.scala:20)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.canArrange(tmp3ibyqpu7.scala:21)\n\
    \tat Problem$.main(tmp3ibyqpu7.scala:26)\n\tat Problem.main(tmp3ibyqpu7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpihlo6rfs.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpihlo6rfs.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpihlo6rfs.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n            if (j\
    \ == -1) dp(i) = x\n            else dp(i) = dp(j) + x\n        }\n        dp.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1cxuggo_.scala:22)\n\tat Problem.main(tmp1cxuggo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpihlo6rfs.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpihlo6rfs.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpihlo6rfs.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        val diff\
    \ = max - min\n        if (diff % 2 == 0) {\n            val target = diff / 2\n\
    \            val map = new HashMap[Long, Int]\n            for (i <- 0 until n)\
    \ {\n                val x = sorted(i)\n                if (map.contains(x)) map(x)\
    \ += 1\n                else map(x) = 1\n            }\n            for (i <-\
    \ 0 until n) {\n                val x = sorted(i)\n                if (map(x)\
    \ > 0) {\n                    val y = x + target\n                    if (map.contains(y)\
    \ && map(y) > 0) {\n                        map(x) -= 1\n                    \
    \    map(y) -= 1\n                    }\n                }\n            }\n  \
    \          var count = 0\n            for (i <- 0 until n) {\n               \
    \ val x = sorted(i)\n                if (map(x) > 0) count += 1\n            }\n\
    \            if (count % 2 == 0) count / 2 else -1\n        } else -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_8ba45zi.scala:42)\n\tat Problem.main(tmp_8ba45zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        if (min == max) return 0\n        val\
    \ diff = max - min\n        val sum = sorted.sum\n        if (sum % 2 == 1) return\
    \ -1\n        val target = sum / 2\n        if (target < min || target > max)\
    \ return -1\n        val dp = Array.fill(target.toInt + 1)(-1)\n        dp(0)\
    \ = 0\n        for (i <- 0 until sorted.length) {\n            val x = sorted(i)\n\
    \            for (j <- target.toInt to x.toInt by -1) {\n                if (dp(j\
    \ - x.toInt) != -1) {\n                    if (dp(j) == -1) dp(j) = dp(j - x.toInt)\
    \ + 1\n                    else dp(j) = min(dp(j), dp(j - x.toInt) + 1)\n    \
    \            }\n            }\n        }\n        if (dp(target.toInt) == -1)\
    \ return -1\n        return dp(target.toInt).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpzl9o036i.scala:26:33 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33melse\e[0m dp(j) = min(dp(j),\
    \ dp(j - x.toInt) + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \            ^^^\e[0m\n\e[31m   |\e[0m                                 \e[33mvalue\e\
    [0m \e[35mmin\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            for (j\
    \ <- 0 until n) {\n                if (x % arr(j) == 0) {\n                  \
    \  dp(i) += 1\n                }\n            }\n        }\n        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            val x = arr(i)\n         \
    \   for (j <- 0 until n) {\n                if (arr(j) % x == 0) {\n         \
    \           result += dp(j)\n                }\n            }\n            result\
    \ -= dp(i)\n        }\n        result / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmparjo22lb.scala:33)\n\tat Problem.main(tmparjo22lb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n    \
    \        for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n   \
    \             if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n   \
    \         }\n        }\n        dp(n)(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo988lgp9.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo988lgp9.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo988lgp9.scala:19:59 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        dp(n)(half)\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        if (max -\
    \ min > n) return -1\n        var count = new Array[Long](n)\n        for (i <-\
    \ 0 until n) count(i) = 0\n        for (i <- 0 until n) count(arr(i).toInt - min.toInt)\
    \ += 1\n        var d = 0\n        for (i <- 0 until n) {\n            if (count(i)\
    \ > 0) {\n                var j = i\n                while (j < n && count(j)\
    \ > 0) {\n                    count(j) -= 1\n                    j += 1\n    \
    \            }\n                d = max(d, j - i)\n            }\n        }\n\
    \        return d\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpsux18h4q.scala:26:20 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                d = max(d, j - i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^\e[0m\n\e[31m   |\e[0m                    \e[33mvalue\e\
    [0m \e[35mmax\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n    \
    \        for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n   \
    \             if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n   \
    \         }\n        }\n        dp(n)(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo988lgp9.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo988lgp9.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo988lgp9.scala:19:59 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        dp(n)(half)\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        val arr4 = arr3.map(x => x * x)\n      \
    \  val arr5 = arr4.sorted\n        val arr6 = arr5.reverse\n        val arr7 =\
    \ arr6.map(x => sqrt(x).toLong)\n        val arr8 = arr7.sorted\n        val arr9\
    \ = arr8.reverse\n        val arr10 = arr9.map(x => x * x)\n        val arr11\
    \ = arr10.sorted\n        val arr12 = arr11.reverse\n        val arr13 = arr12.map(x\
    \ => sqrt(x).toLong)\n        val arr14 = arr13.sorted\n        val arr15 = arr14.reverse\n\
    \        val arr16 = arr15.map(x => x * x)\n        val arr17 = arr16.sorted\n\
    \        val arr18 = arr17.reverse\n        val arr19 = arr18.map(x => sqrt(x).toLong)\n\
    \        val arr20 = arr19.sorted\n        val arr21 = arr20.reverse\n       \
    \ val arr22 = arr21.map(x => x * x)\n        val arr23 = arr22.sorted\n      \
    \  val arr24 = arr23.reverse\n        val arr25 = arr24.map(x => sqrt(x).toLong)\n\
    \        val arr26 = arr25.sorted\n        val arr27 = arr26.reverse\n       \
    \ val arr28 = arr27.map(x => x * x)\n        val arr29 = arr28.sorted\n      \
    \  val arr30 = arr29.reverse\n        val arr31 = arr30.map(x => sqrt(x).toLong)\n\
    \        val arr32 = arr31.sorted\n        val arr33 = arr32.reverse\n       \
    \ val arr34 = arr33.map(x => x * x)\n        val arr35 = arr34.sorted\n      \
    \  val arr36 = arr35.reverse\n        val arr37 = arr36.map(x => sqrt(x).toLong)\n\
    \        val arr38 = arr37.sorted\n        val arr39 = arr38.reverse\n       \
    \ val arr\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpapb79jbm.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpapb79jbm.scala:10:20\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mn\e[0m = arr.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value length is not a member of Null\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpapb79jbm.scala:11:23 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36marr2\e[0m = arr.sorted\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ sorted is not a member of Null, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToScala.list\
    \ asScalaBuffer\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapb79jbm.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val max = arr.max\n        val\
    \ min = arr.min\n        val sum = arr.sum\n        if (sum % 2 == 1) return 0\n\
    \        val half = sum / 2\n        if (half < min) return 0\n        if (max\
    \ > half) return 0\n        val dp = Array.fill(n + 1, half + 1)(0L)\n       \
    \ dp(0)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half)\
    \ {\n                dp(i)(j) = dp(i - 1)(j)\n                if (j >= arr(i -\
    \ 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n            }\n        }\n      \
    \  dp(n)(half) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9erackz_.scala:18:35\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9erackz_.scala:21:27 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9erackz_.scala:23:46 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp9erackz_.scala:23:59 --------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9erackz_.scala:26:14\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        dp(n)(half) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m              ^^^"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val\
    \ target = sum / 2\n        val dp = Array.fill(n + 1, target.toInt + 1)(0L)\n\
    \        dp(0)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to\
    \ target.toInt) {\n                dp(i)(j) = dp(i - 1)(j)\n                if\
    \ (j >= sorted(i - 1).toInt) dp(i)(j) += dp(i - 1)(j - sorted(i - 1).toInt)\n\
    \            }\n        }\n        dp(n)(target.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp741npqi6.scala:26)\n\tat Problem.main(tmp741npqi6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j)\
    \ + arr(i))\n            }\n        }\n        dp.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_pkh_c6.scala:21)\n\tat Problem.main(tmpp_pkh_c6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val m = sorted.max\n        val sum = sorted.sum\n        if (sum % 2 ==\
    \ 1) return 0\n        val target = sum / 2\n        val dp = Array.fill(n + 1,\
    \ target + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n       \
    \     for (j <- 0 to target) {\n                dp(i)(j) = dp(i - 1)(j)\n    \
    \            if (j >= sorted(i - 1)) dp(i)(j) += dp(i - 1)(j - sorted(i - 1))\n\
    \            }\n        }\n        dp(n)(target)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0dc0sis.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, target + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    Long\n\e[31m   |\e[0m        \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb0dc0sis.scala:19:27 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to target) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                          Found:    (target : Long)\n\e[31m   |\e[0m        \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb0dc0sis.scala:21:49 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb0dc0sis.scala:21:62 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb0dc0sis.scala:24:14 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        dp(n)(target)\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659978361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = arr.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3euh5qew.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3euh5qew.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3euh5qew.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3euh5qew.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3euh5qew.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var max = 0L\n        for\
    \ (i <- 0 until sorted.length) {\n            val x = sorted(i)\n            if\
    \ (i == 0) max = x\n            else {\n                if (x > max) max = x\n\
    \                else return -1\n            }\n        }\n        return max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsk_ib22.scala:23)\n\tat Problem.main(tmplsk_ib22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val a = sorted.head\n        val b = sorted.last\n        if (a == b)\
    \ return 0\n        if (a + 1 == b) return 1\n        val x = (b - a) / (n - 1)\n\
    \        val y = (b - a) % (n - 1)\n        if (y == 0) return x\n        if (y\
    \ == 1) return x + 1\n        return x + 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfe4vohw.scala:23)\n\tat Problem.main(tmpsfe4vohw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val diff =\
    \ max - min\n        if (diff % 2 == 1) return -1\n        val half = diff / 2\n\
    \        val count = new Array[Long](n)\n        for (i <- 0 until n) {\n    \
    \        val x = sorted(i)\n            val j = sorted.indexOf(x + half)\n   \
    \         if (j != -1) count(j) += 1\n        }\n        var result = 0L\n   \
    \     for (i <- 0 until n) {\n            val x = sorted(i)\n            val j\
    \ = sorted.indexOf(x + half)\n            if (j != -1) {\n                val\
    \ c = count(j)\n                if (c > 0) {\n                    result += c\n\
    \                    count(j) = 0\n                }\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zosb42d.scala:39)\n\tat Problem.main(tmp_zosb42d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        while (i < n) {\n            if (sorted(i) % 2 == 0)\
    \ {\n                if (i == 0 || sorted(i) != sorted(i - 1)) return 0\n    \
    \        }\n            else {\n                if (i == n - 1 || sorted(i) !=\
    \ sorted(i + 1)) return 0\n            }\n            i += 1\n        }\n    \
    \    return 1\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr5qath5d.scala:25)\n\tat Problem.main(tmpr5qath5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        val arr4 = arr3.zipWithIndex\n        val\
    \ arr5 = arr4.map(x => (x._1, x._2 + 1))\n        val arr6 = arr5.map(x => (x._1,\
    \ x._2.toLong))\n        val arr7 = arr6.map(x => (x._1, x._2 * x._2))\n     \
    \   val arr8 = arr7.map(x => (x._1, x._2 * x._2))\n        val arr9 = arr8.map(x\
    \ => (x._1, x._2 * x._2))\n        val arr10 = arr9.map(x => (x._1, x._2 * x._2))\n\
    \        val arr11 = arr10.map(x => (x._1, x._2 * x._2))\n        val arr12 =\
    \ arr11.map(x => (x._1, x._2 * x._2))\n        val arr13 = arr12.map(x => (x._1,\
    \ x._2 * x._2))\n        val arr14 = arr13.map(x => (x._1, x._2 * x._2))\n   \
    \     val arr15 = arr14.map(x => (x._1, x._2 * x._2))\n        val arr16 = arr15.map(x\
    \ => (x._1, x._2 * x._2))\n        val arr17 = arr16.map(x => (x._1, x._2 * x._2))\n\
    \        val arr18 = arr17.map(x => (x._1, x._2 * x._2))\n        val arr19 =\
    \ arr18.map(x => (x._1, x._2 * x._2))\n        val arr20 = arr19.map(x => (x._1,\
    \ x._2 * x._2))\n        val arr21 = arr20.map(x => (x._1, x._2 * x._2))\n   \
    \     val arr22 = arr21.map(x => (x._1, x._2 * x._2))\n        val arr23 = arr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2019fbgk.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(half\
    \ + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until n) {\n            val\
    \ x = arr(i)\n            for (j <- half to x by -1) {\n                dp(j)\
    \ += dp(j - x)\n            }\n        }\n        dp(half)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilyjlv4w.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilyjlv4w.scala:19:19\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilyjlv4w.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    Long\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpilyjlv4w.scala:22:11 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 1 until n) {\n            val j = i - 1\n            val x\
    \ = arr(i)\n            val y = arr(j)\n            if (x >= y) dp(i) = dp(j)\
    \ + 1\n            else dp(i) = dp(j)\n        }\n        dp(n - 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbkg_a74.scala:23)\n\tat Problem.main(tmpzbkg_a74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ freq = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n) {\n        \
    \    freq(arr(i).toInt) += 1\n        }\n        var ans = 0L\n        for (i\
    \ <- 0 until n) {\n            var j = arr(i).toInt\n            while (j <= m)\
    \ {\n                if (freq(j) > 0) {\n                    freq(j) -= 1\n  \
    \                  ans += 1\n                    break\n                }\n  \
    \              j += 1\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ybodz1p.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val min = sorted(0)\n        val max = sorted(n - 1)\n        val sum\
    \ = sorted.sum\n        if (sum % 2 == 1) return 0\n        val target = sum /\
    \ 2\n        if (min > target || max < target) return 0\n        val dp = Array.fill(target.toInt\
    \ + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until n) {\n            val\
    \ x = sorted(i)\n            for (j <- target.toInt to x.toInt by -1) {\n    \
    \            dp(j) += dp(j - x.toInt)\n            }\n        }\n        dp(target.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_pe6d2r.scala:29)\n\tat Problem.main(tmp2_pe6d2r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val max = sorted.last\n\
    \        val min = sorted.head\n        if (max - min > 1) return -1\n       \
    \ if (max == min) return 0\n        val maxCount = sorted.count(_ == max)\n  \
    \      val minCount = sorted.count(_ == min)\n        if (maxCount == minCount)\
    \ return 0\n        if (maxCount > minCount) {\n            val diff = maxCount\
    \ - minCount\n            if (diff % 2 == 0) return 0\n            else return\
    \ 1\n        }\n        else {\n            val diff = minCount - maxCount\n \
    \           if (diff % 2 == 0) return 0\n            else return 1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphwyqdcyr.scala:30)\n\tat Problem.main(tmphwyqdcyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val max = sorted.last\n\
    \        val min = sorted.head\n        val diff = max - min\n        val n =\
    \ arr.length\n        val sum = arr.sum\n        if (sum % n != 0) return -1\n\
    \        val avg = sum / n\n        if (avg < min || avg > max) return -1\n  \
    \      val count = new Array[Long](n)\n        for (i <- 0 until n) count(i) =\
    \ 0\n        for (i <- 0 until n) count(arr(i).toInt - min.toInt) += 1\n     \
    \   for (i <- 0 until n) {\n            if (count(i) == 0) return -1\n       \
    \     if (i + diff.toInt >= n) return -1\n            if (count(i + diff.toInt)\
    \ == 0) return -1\n            count(i + diff.toInt) -= 1\n        }\n       \
    \ return 1\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpafc5c0mx.scala:31)\n\tat Problem.main(tmpafc5c0mx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val diff =\
    \ max - min\n        if (diff == 0) return 0\n        val count = Array.fill(diff\
    \ + 1)(0)\n        for (i <- 0 until n) {\n            count(sorted(i).toInt -\
    \ min.toInt) += 1\n        }\n        var i = 0\n        var j = diff\n      \
    \  var res = 0L\n        while (i <= j) {\n            if (i == j) {\n       \
    \         if (count(i) > 1) res += count(i) * (count(i) - 1) / 2\n           \
    \ } else {\n                res += count(i) * count(j)\n            }\n      \
    \      i += 1\n            j -= 1\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd23rarih.scala:16:31\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e\
    [0m = Array.fill(diff + \e[31m1\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \             Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd23rarih.scala:27:20\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                res += count(i)\
    \ * count(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd23rarih.scala:27:40 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                res += count(i) * count(j)\n\e[31m\e\
    [31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m \
    \                                       Found:    (j : Long)\n\e[31m   |\e[0m\
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        if (max - min\
    \ > 1) return -1\n        if (max == min) return (n * (n - 1) / 2) % 2\n     \
    \   val count = sorted.groupBy(x => x).map(x => (x._1, x._2.length)).toList\n\
    \        if (count.length == 1) return -1\n        val (a, b) = count.head\n \
    \       val (c, d) = count.last\n        if (a == c) return -1\n        if (a\
    \ == b - 1 && c == d - 1) return (b * d) % 2\n        if (a == b - 1) return d\
    \ % 2\n        if (c == d - 1) return b % 2\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7jjpn4l.scala:27)\n\tat Problem.main(tmp_7jjpn4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val max = sorted.last\n\
    \        val min = sorted.head\n        val diff = max - min\n        if (diff\
    \ == 0) return 0\n        if (diff % (arr.length - 1) != 0) return -1\n      \
    \  val step = diff / (arr.length - 1)\n        var i = 0\n        var j = 1\n\
    \        while (j < arr.length) {\n            if (sorted(j) - sorted(i) != step)\
    \ return -1\n            i += 1\n            j += 1\n        }\n        return\
    \ step\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp52ki1qo.scala:27)\n\tat Problem.main(tmpp52ki1qo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        for (i <- 0 until sorted.length\
    \ - 1) {\n            if (sorted(i) + sorted(i + 1) % 2 == 1) return -1\n    \
    \    }\n        return 1\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcdzht2c.scala:17)\n\tat Problem.main(tmpbcdzht2c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpihlo6rfs.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpihlo6rfs.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpihlo6rfs.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        val arr4 = arr3.zipWithIndex\n        val\
    \ arr5 = arr4.map(x => (x._1, x._2 + 1))\n        val arr6 = arr5.map(x => (x._1,\
    \ x._2.toLong))\n        val arr7 = arr6.map(x => (x._1, x._2 * x._2))\n     \
    \   val arr8 = arr7.map(x => (x._1, x._2 * x._2))\n        val arr9 = arr8.map(x\
    \ => (x._1, x._2 * x._2))\n        val arr10 = arr9.map(x => (x._1, x._2 * x._2))\n\
    \        val arr11 = arr10.map(x => (x._1, x._2 * x._2))\n        val arr12 =\
    \ arr11.map(x => (x._1, x._2 * x._2))\n        val arr13 = arr12.map(x => (x._1,\
    \ x._2 * x._2))\n        val arr14 = arr13.map(x => (x._1, x._2 * x._2))\n   \
    \     val arr15 = arr14.map(x => (x._1, x._2 * x._2))\n        val arr16 = arr15.map(x\
    \ => (x._1, x._2 * x._2))\n        val arr17 = arr16.map(x => (x._1, x._2 * x._2))\n\
    \        val arr18 = arr17.map(x => (x._1, x._2 * x._2))\n        val arr19 =\
    \ arr18.map(x => (x._1, x._2 * x._2))\n        val arr20 = arr19.map(x => (x._1,\
    \ x._2 * x._2))\n        val arr21 = arr20.map(x => (x._1, x._2 * x._2))\n   \
    \     val arr22 = arr21.map(x => (x._1, x._2 * x._2))\n        val arr23 = arr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2019fbgk.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val sum = sorted.sum\n\
    \        if (sum % 2 == 1) return 0\n        val target = sum / 2\n        if\
    \ (max > target) return 0\n        if (min == target) return 1\n        val dp\
    \ = Array.fill(target.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ n) {\n            for (j <- target.toInt to sorted(i).toInt by -1) {\n     \
    \           dp(j) += dp(j - sorted(i).toInt)\n            }\n        }\n     \
    \   dp(target.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp41pbl8ew.scala:29)\n\tat Problem.main(tmp41pbl8ew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        if (max - min\
    \ > 1) return -1\n        val count = new Array[Long](n)\n        for (i <- 0\
    \ until n) count(i) = sorted.count(_ == sorted(i))\n        if (max == min) {\n\
    \            if (count(0) % 2 == 1) return -1\n            return count(0) / 2\n\
    \        }\n        if (count(0) != count(n - 1)) return -1\n        return count(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_k053ff_.scala:25)\n\tat Problem.main(tmp_k053ff_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = dp(i\
    \ - 1) + arr(i)\n        }\n        var res = 0L\n        for (i <- 0 until n)\
    \ {\n            if (dp(i) % 2 == 0) {\n                res += 1\n           \
    \ }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_tppc8bx.scala:25)\n\tat Problem.main(tmp_tppc8bx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n) a(arr(i).toInt)\
    \ += 1\n        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            sum\
    \ += a(i) * (a(i) - 1) / 2\n            if (i + i <= m) sum += a(i) * a(i + i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyrz19aw6.scala:22)\n\tat Problem.main(tmpyrz19aw6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sums = new Array[Long](n)\n\
    \        sums(0) = arr(0)\n        for (i <- 1 until n) {\n            sums(i)\
    \ = sums(i - 1) + arr(i)\n        }\n        var result = 0L\n        for (i <-\
    \ 0 until n) {\n            val j = i + 1\n            if (j < n) {\n        \
    \        val sum = sums(n - 1) - sums(j) + arr(j)\n                if (sum ==\
    \ arr(i)) result += 1\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3v_a9sw.scala:27)\n\tat Problem.main(tmpk3v_a9sw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tnmp6mn.scala:29)\n\tat Problem.main(tmp0tnmp6mn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var sum = 0L\n        var max = 0L\n        for (i <- arr)\
    \ {\n            sum += i\n            max = max max i\n        }\n        if\
    \ (sum % 2 == 1) return 0\n        val target = sum / 2\n        if (max > target)\
    \ return 0\n        val dp = Array.fill(target.toInt + 1)(0L)\n        dp(0) =\
    \ 1\n        for (i <- arr) {\n            for (j <- target.toInt to i.toInt by\
    \ -1) {\n                dp(j) += dp(j - i.toInt)\n            }\n        }\n\
    \        dp(target.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4lmhxc7.scala:29)\n\tat Problem.main(tmpe4lmhxc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff % (n - 1) != 0) return -1\n        val d = diff\
    \ / (n - 1)\n        val m = HashMap[Long, Long]()\n        for (i <- 0 until\
    \ n) {\n            m(sorted(i)) = i\n        }\n        var result = 0L\n   \
    \     for (i <- 0 until n) {\n            val x = sorted(i)\n            val y\
    \ = x + d\n            if (m.contains(y)) {\n                val j = m(y)\n  \
    \              if (i < j) {\n                    result += j - i - 1\n       \
    \         } else {\n                    result += n - i - 1 + j\n            \
    \    }\n            } else {\n                return -1\n            }\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvyw1zk09.scala:39)\n\tat Problem.main(tmpvyw1zk09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n    \
    \        for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n   \
    \             if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n   \
    \         }\n        }\n        dp(n)(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo988lgp9.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo988lgp9.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo988lgp9.scala:19:59 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        dp(n)(half)\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val a = arr.sorted\n       \
    \ val b = a.reverse\n        var i = 0\n        var j = 0\n        var count =\
    \ 0\n        while (i < n && j < n) {\n            if (a(i) + b(j) == 0) {\n \
    \               count += 1\n                i += 1\n                j += 1\n \
    \           } else if (a(i) + b(j) > 0) {\n                j += 1\n          \
    \  } else {\n                i += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwhmz9sc8.scala:30)\n\tat Problem.main(tmpwhmz9sc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ s = arr.sum\n        if (s % 2 == 1) return 0\n        val dp = Array.fill(n\
    \ + 1, (s / 2 + 1).toInt)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n)\
    \ {\n            for (j <- 0 to (s / 2).toInt) {\n                dp(i)(j) = dp(i\
    \ - 1)(j)\n                if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i\
    \ - 1).toInt)\n            }\n        }\n        dp(n)(s / 2.toInt)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzgx6jaz.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        dp(n)(s / \e[31m2\e[0m.toInt)\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \     Found:    Long\n\e[31m   |\e[0m              Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        var i = 0\n        while (i < n) {\n            val j = i + 1\n     \
    \       if (j < n && sorted(i) + sorted(j) % 2 == 0) {\n                i += 2\n\
    \            } else {\n                return -1\n            }\n        }\n \
    \       return 1\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7esn115n.scala:24)\n\tat Problem.main(tmp7esn115n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max == min) {\n            if (max == 0) return\
    \ (n * (n - 1) / 2)\n            else return -1\n        }\n        val count\
    \ = new Array[Long](2)\n        for (i <- 0 until n) {\n            count(arr(i).toInt)\
    \ += 1\n        }\n        if (count(0) == 0 || count(1) == 0) return -1\n   \
    \     if (count(0) == count(1)) return (count(0) * (count(0) - 1) / 2)\n     \
    \   if (count(0) > count(1)) return (count(1) * (count(1) - 1) / 2)\n        else\
    \ return (count(0) * (count(0) - 1) / 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu4rih8s.scala:29)\n\tat Problem.main(tmpsu4rih8s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = dp(i\
    \ - 1) + arr(i)\n        }\n        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            val j = i - 1\n            if (j >= 0 && dp(i) - dp(j) <=\
    \ arr(i)) result += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6rk5onmx.scala:24)\n\tat Problem.main(tmp6rk5onmx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff % (n - 1) != 0) return -1\n        val step =\
    \ diff / (n - 1)\n        var i = 0\n        while (i < n) {\n            if (sorted(i)\
    \ != min + step * i) return -1\n            i += 1\n        }\n        return\
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp181fzmju.scala:25)\n\tat Problem.main(tmp181fzmju.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val arr2 = arr.sorted\n        val arr3 = arr2.zipWithIndex\n\
    \        val arr4 = arr3.map(x => (x._1, x._2 + 1))\n        val arr5 = arr4.map(x\
    \ => (x._1, x._2, x._1 - x._2))\n        val arr6 = arr5.filter(x => x._3 >= 0)\n\
    \        val arr7 = arr6.map(x => (x._1, x._2, x._3, x._3 / x._2))\n        val\
    \ arr8 = arr7.filter(x => x._4 == 0)\n        val arr9 = arr8.map(x => x._1)\n\
    \        if (arr9.length == 0) -1 else arr9.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppdr3ty45.scala:21)\n\tat Problem.main(tmppdr3ty45.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val maxIndex\
    \ = sorted.indexOf(max)\n        val minIndex = sorted.indexOf(min)\n        if\
    \ (maxIndex == 0) return -1\n        if (minIndex == n - 1) return -1\n      \
    \  if (maxIndex == n - 1) return maxIndex - 1\n        if (minIndex == 0) return\
    \ minIndex + 1\n        if (maxIndex < minIndex) return maxIndex\n        if (minIndex\
    \ > maxIndex) return minIndex\n        -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwaxtr88d.scala:26)\n\tat Problem.main(tmpwaxtr88d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val sum = sorted.sum\n\
    \        if (sum % 2 == 1) return 0\n        val target = sum / 2\n        if\
    \ (max > target) return 0\n        if (min == target) return 1\n        val dp\
    \ = Array.fill(target.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ n) {\n            val x = sorted(i)\n            for (j <- target.toInt to x.toInt\
    \ by -1) {\n                dp(j) += dp(j - x.toInt)\n            }\n        }\n\
    \        dp(target.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtrf74mh.scala:30)\n\tat Problem.main(tmpjtrf74mh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n) a(arr(i).toInt)\
    \ += 1\n        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            sum\
    \ += a(i) * (a(i) - 1) / 2\n            if (i + i <= m) sum += a(i) * a(i + i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyrz19aw6.scala:22)\n\tat Problem.main(tmpyrz19aw6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) dp(i) = dp(i - 1) + arr(i)\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            val left\
    \ = if (i == 0) 0 else dp(i - 1)\n            val right = dp(n - 1) - dp(i)\n\
    \            if (left == right) result += 1\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpts6g3syr.scala:23)\n\tat Problem.main(tmpts6g3syr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sum = arr.sum\n        if (sum % 2 == 1) return 0\n\
    \        val half = sum / 2\n        val dp = Array.fill(half + 1)(0L)\n     \
    \   dp(0) = 1\n        for (x <- arr) {\n            for (i <- half to x by -1)\
    \ {\n                dp(i) += dp(i - x)\n            }\n        }\n        dp(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvohk67q8.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvohk67q8.scala:17:19\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                dp(i) += dp(i\
    \ - x)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    (i : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvohk67q8.scala:17:28\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                dp(i) += dp(i\
    \ - x)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    Long\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvohk67q8.scala:20:11 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val diff\
    \ = max - min\n        val diffs = new Array[Long](n)\n        for (i <- 0 until\
    \ n) {\n            diffs(i) = sorted(i) - min\n        }\n        val count =\
    \ new Array[Long](diff + 1)\n        for (i <- 0 until n) {\n            count(diffs(i).toInt)\
    \ += 1\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n \
    \           val c = count(diffs(i).toInt)\n            if (c > 1) {\n        \
    \        result += c * (c - 1) / 2\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe9uxnwy8.scala:19:36\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcount\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](diff + \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                    Found:    Long\n\e[31m   |\e[0m \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) dp(i) = dp(i - 1) + arr(i)\n\
    \        var max = 0L\n        for (i <- 0 until n) {\n            val x = arr(i)\n\
    \            val y = dp(n - 1) - dp(i)\n            if (x == y) max = max max\
    \ x\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9dgusqb.scala:23)\n\tat Problem.main(tmpw9dgusqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var sum = 0L\n        for (i <- 0 until n) {\n            sum += arr2(i)\n\
    \        }\n        if (sum % 2 == 1) return 0\n        val target = sum / 2\n\
    \        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <-\
    \ 0 until n) {\n            for (j <- (n - 1) to i by -1) {\n                dp(j)\
    \ += dp(j - 1)\n            }\n        }\n        var result = 0L\n        for\
    \ (i <- 0 until n) {\n            val j = arr2.indexOf(target - arr2(i))\n   \
    \         if (j != -1) {\n                result += dp(j) * dp(n - j - 1)\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrcowcq3.scala:35)\n\tat Problem.main(tmplrcowcq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var\
    \ o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var\
    \ s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var\
    \ w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var\
    \ aa = 0\n        var bb = 0\n        var cc = 0\n        var dd = 0\n       \
    \ var ee = 0\n        var ff = 0\n        var gg = 0\n        var hh = 0\n   \
    \     var ii = 0\n        var jj = 0\n        var kk = 0\n        var ll = 0\n\
    \        var mm = 0\n        var nn = 0\n        var oo = 0\n        var pp =\
    \ 0\n        var qq = 0\n        var rr = 0\n        var ss = 0\n        var tt\
    \ = 0\n        var uu = 0\n        var vv = 0\n        var ww = 0\n        var\
    \ xx = 0\n        var yy = 0\n        var zz = 0\n        var aaa = 0\n      \
    \  var bbb = 0\n        var ccc = 0\n        var ddd = 0\n        var eee = 0\n\
    \        var fff = 0\n        var ggg = 0\n        var hhh = 0\n        var iii\
    \ = 0\n        var jjj = 0\n        var kkk = 0\n        var lll = 0\n       \
    \ var mmm = 0\n        var nnn = 0\n        var ooo = 0\n        var ppp = 0\n\
    \        var qqq = 0\n        var rrr = 0\n        var sss = 0\n        var ttt\
    \ = 0\n        var uuu = 0\n        var vvv = 0\n        var www = 0\n       \
    \ var xxx = 0\n        var yyy = 0\n        var zzz = 0\n        var aaaa = 0\n\
    \        var bbbb = 0\n        var cccc = 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzp5omxk9.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzp5omxk9.scala:86:5 ---------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        val diff\
    \ = max - min\n        if (diff == 0) return 0\n        val d = diff / n\n   \
    \     val r = diff % n\n        if (r == 0) return d\n        if (n % 2 == 0)\
    \ return -1\n        val mid = sorted(n / 2)\n        if (mid - min > d) return\
    \ -1\n        if (max - mid > d) return -1\n        return d + 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt41ewp2u.scala:26)\n\tat Problem.main(tmpt41ewp2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var i = 0\n        while (i < n) {\n            if (arr2(i) >= 0) {\n   \
    \             if (i == 0 || arr2(i) != arr2(i - 1)) {\n                    var\
    \ j = i + 1\n                    while (j < n && arr2(j) < 0) {\n            \
    \            if (arr2(j) == -arr2(i)) {\n                            arr2(i) =\
    \ -1\n                            arr2(j) = -1\n                            j\
    \ = n\n                        }\n                        j += 1\n           \
    \         }\n                }\n            }\n            i += 1\n        }\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            if (arr2(i)\
    \ != -1) count += 1\n        }\n        if (count % 2 == 0) 1 else 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6d38zuna.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                            arr2(i) = -\e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m value\
    \ update is not a member of List[Long] - did you mean arr2.updated?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6d38zuna.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                            arr2(j) = -\e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                            ^^^^\e[0m\n\e[31m   |\e[0m value\
    \ update is not a member of List[Long] - did you mean arr2.updated?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var i = 0\n        var j = n - 1\n        while (i < j) {\n            if\
    \ (arr2(i) + arr2(j) == 0) {\n                i += 1\n                j -= 1\n\
    \            } else if (arr2(i) + arr2(j) > 0) {\n                j -= 1\n   \
    \         } else {\n                i += 1\n            }\n        }\n       \
    \ if (i == j) {\n            if (arr2(i) == 0) 1 else 0\n        } else {\n  \
    \          1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zpv2x0t.scala:31)\n\tat Problem.main(tmp1zpv2x0t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n            if (j\
    \ >= 0) dp(i) = dp(j) + 1\n            else dp(i) = 1\n        }\n        dp.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbqma7xxy.scala:22)\n\tat Problem.main(tmpbqma7xxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val max = sorted.last\n\
    \        val min = sorted.head\n        if (max - min > 1) return -1\n       \
    \ if (max - min == 1) {\n            val count = sorted.count(_ == max)\n    \
    \        if (count == 1) return sorted.indexOf(max)\n            else return -1\n\
    \        }\n        val count = sorted.count(_ == min)\n        if (count == 1)\
    \ return sorted.indexOf(min)\n        else return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv5dg_m5t.scala:24)\n\tat Problem.main(tmpv5dg_m5t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var sum = 0L\n        for\
    \ (i <- 0 until sorted.length) {\n            sum += sorted(i)\n        }\n  \
    \      if (sum % 2 == 1) return 0\n        val target = sum / 2\n        val dp\
    \ = Array.fill(target.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- target.toInt to sorted(i).toInt by -1)\
    \ {\n                dp(j) += dp(j - sorted(i).toInt)\n            }\n       \
    \ }\n        dp(target.toInt)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph27i9kcx.scala:27)\n\tat Problem.main(tmph27i9kcx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        val sum = sorted.sum\n        if (sum % 2 == 1) return\
    \ 0\n        val target = sum / 2\n        if (diff > target) return 0\n     \
    \   val dp = Array.fill(target + 1)(0L)\n        dp(0) = 1\n        for (i <-\
    \ 0 until n) {\n            val cur = sorted(i)\n            for (j <- target\
    \ to cur by -1) {\n                dp(j) += dp(j - cur)\n            }\n     \
    \   }\n        dp(target) / 2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekf9stqw.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(target + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \            Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekf9stqw.scala:24:19\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                dp(j) += dp(j\
    \ - cur)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m    \
    \               Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpekf9stqw.scala:24:28\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                dp(j) += dp(j\
    \ - cur)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Found:    Long\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpekf9stqw.scala:27:11 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        dp(target) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    (target : Long)\n\e[31m   |\e[0m    \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n            if (j\
    \ == -1) dp(i) = 1\n            else dp(i) = dp(j) + 1\n        }\n        dp.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6high28.scala:22)\n\tat Problem.main(tmpy6high28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var max = 0L\n        for\
    \ (i <- 0 until sorted.length) {\n            val diff = sorted(i) - sorted(i\
    \ - 1)\n            if (diff > max) max = diff\n        }\n        max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.canArrange$$anonfun$1(tmpd8bkd8cs.scala:13)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.canArrange(tmpd8bkd8cs.scala:15)\n\
    \tat Problem$.main(tmpd8bkd8cs.scala:19)\n\tat Problem.main(tmpd8bkd8cs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ dp = Array.fill(n + 1)(0L)\n        for (i <- 0 until n) {\n            val\
    \ a = arr(i)\n            for (j <- 1 to n) {\n                dp(j) = max(dp(j),\
    \ dp(j - 1))\n                if (a <= j) dp(j) = max(dp(j), dp(j - a.toInt) +\
    \ a)\n            }\n        }\n        dp(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyse4qu8e.scala:23)\n\tat Problem.main(tmpyse4qu8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var sum = 0L\n        for\
    \ (i <- 0 until sorted.length) {\n            sum += sorted(i)\n        }\n  \
    \      if (sum % 2 == 1) return 0\n        val target = sum / 2\n        val dp\
    \ = Array.fill(target.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- target.toInt to sorted(i).toInt by -1)\
    \ {\n                dp(j) += dp(j - sorted(i).toInt)\n            }\n       \
    \ }\n        dp(target.toInt)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph27i9kcx.scala:27)\n\tat Problem.main(tmph27i9kcx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n     \
    \       for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n    \
    \            if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n    \
    \        }\n        }\n        dp(n)(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ubaupjc.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1ubaupjc.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1ubaupjc.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \  value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1ubaupjc.scala:19:59 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m))\
    \ dp(i)(j) += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                           ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1ubaupjc.scala:22:14 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m              ^^^^\e[0m\n\e\
    [31m   "
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val count = new Array[Long](max.toInt\
    \ + 1)\n        for (i <- sorted) count(i.toInt) += 1\n        for (i <- min.toInt\
    \ to max.toInt) {\n            if (count(i) > 0) {\n                val j = i\
    \ + 1\n                if (j <= max.toInt && count(j) > 0) {\n               \
    \     count(i) -= 1\n                    count(j) -= 1\n                }\n  \
    \          }\n        }\n        count.sum / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xaqar_8.scala:27)\n\tat Problem.main(tmp4xaqar_8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val sum =\
    \ sorted.sum\n        if (sum % 2 == 1) return 0\n        val target = sum / 2\n\
    \        if (min > target) return 0\n        if (max < target) return 0\n    \
    \    val dp = Array.fill(n + 1, target.toInt + 1)(0)\n        for (i <- 0 to n)\
    \ dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to target.toInt)\
    \ {\n                dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i\
    \ - 1)) dp(i)(j) += dp(i - 1)(j - sorted(i - 1).toInt)\n            }\n      \
    \  }\n        dp(n)(target.toInt)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpicu1p2_9.scala:30)\n\tat Problem.main(tmpicu1p2_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n) a(arr(i).toInt)\
    \ += 1\n        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            sum\
    \ += a(i) * (a(i) - 1) / 2\n            for (j <- i + 1 to m.toInt) {\n      \
    \          if ((i + j) % 2 == 0) {\n                    val k = (i + j) / 2\n\
    \                    if (k <= m.toInt) sum += a(i) * a(j) * a(k)\n           \
    \     }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvw_goihv.scala:27)\n\tat Problem.main(tmpvw_goihv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val max = arr.max\n        val\
    \ min = arr.min\n        val sum = arr.sum\n        if (sum % 2 == 1) return 0\n\
    \        val half = sum / 2\n        if (max > half) return 0\n        if (min\
    \ == half) return 1\n        val dp = Array.fill(half + 1)(0L)\n        dp(0)\
    \ = 1\n        for (i <- 0 until n) {\n            val x = arr(i)\n          \
    \  for (j <- half - x to 0 by -1) {\n                dp(j + x) += dp(j)\n    \
    \        }\n        }\n        dp(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe59bl6kz.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe59bl6kz.scala:23:19\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                dp(j + x) +=\
    \ dp(j)\n\e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                  Found:    Long\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe59bl6kz.scala:23:32\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                dp(j + x) +=\
    \ dp(j)\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m \
    \  |\e[0m                                Found:    (j : Long)\n\e[31m   |\e[0m\
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpe59bl6kz.scala:26:11 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e\
    [0m\n\e[31m   |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m      \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val\
    \ half = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk41445ur.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpk41445ur.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpk41445ur.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk41445ur.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk41445ur.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            if (i % 2 == 0) sum += arr3(i)\n            else sum -= arr3(i)\n\
    \        }\n        if (sum % 2 == 0) sum / 2\n        else -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvth6ggv.scala:22)\n\tat Problem.main(tmpmvth6ggv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var sum = 0L\n        for (i <- arr) {\n            sum\
    \ += i\n        }\n        if (sum % 2 == 1) return 0\n        val half = sum\
    \ / 2\n        val dp = Array.fill(arr.length + 1)(0L)\n        dp(0) = 1\n  \
    \      for (i <- 0 until arr.length) {\n            for (j <- (half - arr(i)).toInt\
    \ to 0 by -1) {\n                dp(j + arr(i).toInt) += dp(j)\n            }\n\
    \        }\n        dp(half.toInt)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvd0he38u.scala:26)\n\tat Problem.main(tmpvd0he38u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val maxIndex\
    \ = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n        if (maxIndex\
    \ == n - 1 || minIndex == 0) return -1\n        if (maxIndex == minIndex) return\
    \ maxIndex\n        if (maxIndex < minIndex) return maxIndex\n        if (minIndex\
    \ < maxIndex) return minIndex\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjjkj9kcn.scala:23)\n\tat Problem.main(tmpjjkj9kcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            val x = sorted(i - 1)\n      \
    \      for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n     \
    \           if (j >= x) dp(i)(j) += dp(i - 1)(j - x)\n            }\n        }\n\
    \        dp(n)(half)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6bko58r.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps6bko58r.scala:19:27 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps6bko58r.scala:21:37 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                \e[33mif\e[0m (j >= x) dp(i)(j) += dp(i - \e[31m1\e[0m)(j -\
    \ x)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6bko58r.scala:21:50 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (j >= x) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - x)\n\e[31m\e[31m   |\e[0m                              \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps6bko58r.scala:24:14 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m              ^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (half : Long)\n\e[31m   |\e[0m   \
    \           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m lo"
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i\
    \ <- 0 until n) {\n            sum += arr(i)\n        }\n        if (sum % 2 ==\
    \ 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n + 1)(0L)\n\
    \        dp(0) = 1\n        for (i <- 0 until n) {\n            for (j <- n -\
    \ 1 to 0 by -1) {\n                if (dp(j) == 1 && arr(i) + j <= half) {\n \
    \                   dp(j + arr(i).toInt) = 1\n                }\n            }\n\
    \        }\n        if (dp(half.toInt) == 1) return 1\n        return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq9fz5to_.scala:30)\n\tat Problem.main(tmpq9fz5to_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tnmp6mn.scala:29)\n\tat Problem.main(tmp0tnmp6mn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val diff =\
    \ max - min\n        if (diff == 0) return 0\n        val count = Array.fill(diff.toInt\
    \ + 1)(0)\n        for (i <- 0 until n) {\n            count(sorted(i).toInt -\
    \ min.toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            val x = sorted(i)\n            val y = x - min\n         \
    \   if (y == 0) {\n                if (count(y) > 1) {\n                    result\
    \ += 1\n                    count(y) -= 2\n                }\n            } else\
    \ if (y == diff) {\n                if (count(y) > 1) {\n                    result\
    \ += 1\n                    count(y) -= 2\n                }\n            } else\
    \ {\n                if (count(y) > 0 && count(y - 1) > 0) {\n               \
    \     result += 1\n                    count(y) -= 1\n                    count(y\
    \ - 1) -= 1\n                }\n            }\n        }\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hofl7sn.scala:25:26\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m\
    \ (count(y) > \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \ ^\e[0m\n\e[31m   |\e[0m                          Found:    (y : Long)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9hofl7sn.scala:27:26 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    count(y) -= \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (y : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hofl7sn.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m\
    \ (count(y) > \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \ ^\e[0m\n\e[31m   |\e[0m                          Found:    (y : Long)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9hofl7sn.scala:32:26 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    count(y) -= \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (y : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9hofl7sn.scala:35:26\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                \e[33mif\e[0m\
    \ (count(y) > \e[31m0\e[0m && count(y - \e[31m1\e[0m) > \e[31m0\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (y : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer "
  stdout: ''
  timestamp: 1659978386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        val diff =\
    \ max - min\n        if (diff % (n - 1) != 0) return -1\n        val d = diff\
    \ / (n - 1)\n        var i = 0\n        while (i < n) {\n            if (sorted(i)\
    \ != min + d * i) return -1\n            i += 1\n        }\n        return d\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdod4an4o.scala:25)\n\tat Problem.main(tmpdod4an4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val sum =\
    \ arr.sum\n        if (sum % 2 == 1) return 0\n        if (min * 2 > sum) return\
    \ 0\n        if (max * 2 < sum) return 0\n        val dp = Array.fill(n + 1, n\
    \ + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n            for\
    \ (j <- 0 to n) {\n                dp(i)(j) = dp(i - 1)(j)\n                if\
    \ (j >= sorted(i - 1)) dp(i)(j) += dp(i - 1)(j - sorted(i - 1))\n            }\n\
    \        }\n        dp(n)(sum / 2)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pv8f6yr.scala:23:49 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value += is not a member of Long - did you mean Long.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pv8f6yr.scala:23:62 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6pv8f6yr.scala:26:14 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        dp(n)(sum / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    Long\n\e[31m   |\e[0m \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        var i = 0\n        var j = 0\n        var\
    \ count = 0\n        while (i < n && j < n) {\n            if (arr2(i) == arr3(j))\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n            } else if (arr2(i) > arr3(j)) {\n                i += 1\n   \
    \         } else {\n                j += 1\n            }\n        }\n       \
    \ if (count == n) 1 else 0\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxi154xkl.scala:30)\n\tat Problem.main(tmpxi154xkl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val a = arr(i)\n            for (j\
    \ <- 0 until n) {\n                if (dp(j) == 0) {\n                    dp(j)\
    \ = a\n                    break\n                }\n                else if (dp(j)\
    \ % a == 0) {\n                    dp(j) = a\n                    break\n    \
    \            }\n            }\n        }\n        var count = 0L\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) != 0) count += 1\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfg8ti_ko.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfg8ti_ko.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    break\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978388
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i\
    \ <- 0 until n) {\n            sum += arr(i)\n        }\n        if (sum % 2 ==\
    \ 1) return 0\n        val dp = Array.fill(n + 1, (sum / 2).toInt + 1)(0L)\n \
    \       dp(0)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to\
    \ (sum / 2).toInt) {\n                dp(i)(j) = dp(i - 1)(j)\n              \
    \  if (j >= arr(i - 1)) {\n                    dp(i)(j) += dp(i - 1)(j - arr(i\
    \ - 1).toInt)\n                }\n            }\n        }\n        dp(n)((sum\
    \ / 2).toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp432_1ig.scala:29)\n\tat Problem.main(tmpp432_1ig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val sum = sorted.sum\n        if (sum\
    \ % 2 == 1) return 0\n        val target = sum / 2\n        if (target < min ||\
    \ target > max) return 0\n        val dp = Array.fill(target.toInt + 1)(0L)\n\
    \        dp(0) = 1\n        for (i <- sorted) {\n            for (j <- target.toInt\
    \ to i.toInt by -1) {\n                dp(j) += dp(j - i.toInt)\n            }\n\
    \        }\n        dp(target.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbepp859m.scala:27)\n\tat Problem.main(tmpbepp859m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff % (n - 1) != 0) return -1\n        val d = diff\
    \ / (n - 1)\n        var i = 0\n        while (i < n) {\n            if (sorted(i)\
    \ != min + i * d) return -1\n            i += 1\n        }\n        return max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3p13oag.scala:25)\n\tat Problem.main(tmpk3p13oag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val sum = sorted.sum\n\
    \        if (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp\
    \ = Array.fill(half.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- half.toInt to sorted(i).toInt by -1)\
    \ {\n                dp(j) += dp(j - sorted(i).toInt)\n            }\n       \
    \ }\n        dp(half.toInt)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc5m0ztt.scala:24)\n\tat Problem.main(tmpyc5m0ztt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max - min == 1) {\n            if (sorted.count(_\
    \ == max) == 1) return -1\n            else return sorted.indexOf(max)\n     \
    \   }\n        return n - 1\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp026dokwh.scala:22)\n\tat Problem.main(tmp026dokwh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val max = arr.max\n        val\
    \ sum = arr.sum\n        if (sum % 2 == 1) return 0\n        val half = sum /\
    \ 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0) = 1\n\
    \        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n           \
    \     dp(i)(j) = dp(i - 1)(j)\n                if (j >= arr(i - 1)) dp(i)(j) +=\
    \ dp(i - 1)(j - arr(i - 1))\n            }\n        }\n        dp(n)(half)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi5swy482.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpi5swy482.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpi5swy482.scala:20:46 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpi5swy482.scala:20:59 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi5swy482.scala:23:14\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        dp(n)(half)\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff % (n - 1) != 0) return -1\n        val d = diff\
    \ / (n - 1)\n        var i = 0\n        while (i < n - 1) {\n            if (sorted(i\
    \ + 1) - sorted(i) != d) return -1\n            i += 1\n        }\n        return\
    \ d\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuuc8g0u.scala:25)\n\tat Problem.main(tmpjuuc8g0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            sum += arr3(i)\n            if (sum < i + 1) return -1\n \
    \       }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbyrjv26.scala:21)\n\tat Problem.main(tmpxbyrjv26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val max = sorted.last\n\
    \        val min = sorted.head\n        val diff = max - min\n        if (diff\
    \ == 0) return 0\n        val count = arr.count(_ == max)\n        if (count ==\
    \ arr.length) return -1\n        val maxCount = arr.count(_ == max)\n        val\
    \ minCount = arr.count(_ == min)\n        if (maxCount == minCount) return 0\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        if (maxIndex < minIndex) return maxIndex\n        else return minIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm1tn54m_.scala:26)\n\tat Problem.main(tmpm1tn54m_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        if (max -\
    \ min > 1) return -1\n        if (max - min == 1) {\n            val minCount\
    \ = sorted.count(_ == min)\n            val maxCount = sorted.count(_ == max)\n\
    \            if (minCount == maxCount) return 0\n            if (minCount == maxCount\
    \ + 1) return 1\n            if (minCount == maxCount - 1) return 1\n        \
    \    return -1\n        }\n        if (max - min == 0) {\n            val count\
    \ = sorted.count(_ == min)\n            if (count % 2 == 0) return 0\n       \
    \     return -1\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14qup6wc.scala:31)\n\tat Problem.main(tmp14qup6wc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var max = 0L\n        for (i <- 0 until n) {\n            val x = arr2(i)\n\
    \            var j = i + 1\n            while (j < n && arr2(j) <= x + 1) j +=\
    \ 1\n            max = max max (j - i)\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvxgtot9s.scala:22)\n\tat Problem.main(tmpvxgtot9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var sum = 0L\n        for (x <- arr) {\n            sum\
    \ += x\n        }\n        if (sum % 2 == 1) return 0\n        var count = 0L\n\
    \        for (x <- arr) {\n            if (x % 2 == 1) count += 1\n        }\n\
    \        if (count % 2 == 1) return 0\n        return 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9f7i56r1.scala:23)\n\tat Problem.main(tmp9f7i56r1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) {\n                dp(i)\
    \ = max(dp(i), dp(j))\n                j -= 1\n            }\n            dp(i)\
    \ += x\n        }\n        dp.max\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpustmuqpy.scala:24)\n\tat Problem.main(tmpustmuqpy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var sum = 0L\n        for (i <- 0 until n) {\n            sum += sorted(i)\n\
    \        }\n        if (sum % 2 == 1) return 0\n        val half = sum / 2\n \
    \       val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <- 0\
    \ until n) {\n            for (j <- n to 0 by -1) {\n                if (j - sorted(i)\
    \ >= 0) {\n                    dp(j) += dp(j - sorted(i))\n                }\n\
    \            }\n        }\n        dp(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmq6kk7wm.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    dp(j) += dp(j - sorted(i))\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmq6kk7wm.scala:23:32 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                    dp(j) += dp(j - sorted(i))\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                Found:    Long\n\e[31m   |\e[0m             \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmq6kk7wm.scala:27:11 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n    \
    \        for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n   \
    \             if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n   \
    \         }\n        }\n        dp(n)(half)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo988lgp9.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo988lgp9.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo988lgp9.scala:19:59 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo988lgp9.scala:22:14\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        dp(n)(half)\n\e[31m\e\
    [31m   |\e[0m              ^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            for (j\
    \ <- 0 until n) {\n                if (x % arr(j) == 0) dp(i) += 1\n         \
    \   }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n  \
    \          val x = arr(i)\n            for (j <- 0 until n) {\n              \
    \  if (arr(j) % x == 0) result += dp(j)\n            }\n            result -=\
    \ dp(i)\n        }\n        result / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1hyygili.scala:29)\n\tat Problem.main(tmp1hyygili.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max == min) {\n            if (max == 0) return\
    \ (n * (n - 1)) / 2\n            else return (n * (n - 1)) / 2 - 1\n        }\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            if (sorted(i)\
    \ == 0) count += 1\n        }\n        if (count == n) return (n * (n - 1)) /\
    \ 2\n        if (count == n - 1) return (n * (n - 1)) / 2 - 1\n        if (count\
    \ == 0) return (n * (n - 1)) / 2 - 1\n        if (count == 1) return (n * (n -\
    \ 1)) / 2 - 2\n        return -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp61j2hzlh.scala:30)\n\tat Problem.main(tmp61j2hzlh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val sum = sorted.sum\n\
    \        if (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp\
    \ = Array.fill(half.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- half.toInt to sorted(i).toInt by -1)\
    \ {\n                dp(j) += dp(j - sorted(i).toInt)\n            }\n       \
    \ }\n        dp(half.toInt)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc5m0ztt.scala:24)\n\tat Problem.main(tmpyc5m0ztt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) <= arr(i)) {\n                 \
    \   dp(i) = max(dp(i), dp(j) + arr(i))\n                }\n            }\n   \
    \     }\n        dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqbkmgo_.scala:23)\n\tat Problem.main(tmpnqbkmgo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var i = 0\n        var j = arr.length - 1\n        var sum\
    \ = 0L\n        while (i < j) {\n            if (arr(i) == arr(j)) {\n       \
    \         i += 1\n                j -= 1\n            } else if (arr(i) < arr(j))\
    \ {\n                sum += arr(i)\n                i += 1\n            } else\
    \ {\n                sum -= arr(j)\n                j -= 1\n            }\n  \
    \      }\n        if (i == j) sum += arr(i)\n        if (sum == 0) 1 else 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1j4t8xyq.scala:29)\n\tat Problem.main(tmp1j4t8xyq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var sum = 0L\n        for\
    \ (i <- 0 until sorted.length) {\n            sum += sorted(i)\n        }\n  \
    \      if (sum % 2 == 1) return 0\n        val target = sum / 2\n        val dp\
    \ = Array.fill(target.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- target.toInt to sorted(i).toInt by -1)\
    \ {\n                dp(j) += dp(j - sorted(i).toInt)\n            }\n       \
    \ }\n        dp(target.toInt)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph27i9kcx.scala:27)\n\tat Problem.main(tmph27i9kcx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val s = arr.sorted\n       \
    \ val m = s.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <-\
    \ 0 until n) {\n            a(s(i).toInt) += 1\n        }\n        var count =\
    \ 0\n        for (i <- 0 until n) {\n            val x = s(i)\n            if\
    \ (x == 0) {\n                if (a(x.toInt) >= 2) {\n                    count\
    \ += 1\n                    a(x.toInt) -= 2\n                }\n            }\
    \ else {\n                if (a(x.toInt) >= 1 && a(x.toInt - 1) >= 1) {\n    \
    \                count += 1\n                    a(x.toInt) -= 1\n           \
    \         a(x.toInt - 1) -= 1\n                }\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppre4w_hg.scala:36)\n\tat Problem.main(tmppre4w_hg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val max = arr.max\n        val\
    \ count = Array.fill(max.toInt + 1)(0)\n        for (i <- 0 until n) {\n     \
    \       count(arr(i).toInt) += 1\n        }\n        var result = 0L\n       \
    \ for (i <- 0 until n) {\n            val x = arr(i)\n            if (count(x.toInt)\
    \ > 0) {\n                count(x.toInt) -= 1\n                val y = x - 1\n\
    \                if (y >= 0 && count(y.toInt) > 0) {\n                    count(y.toInt)\
    \ -= 1\n                    result += 1\n                }\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnfp9rgzr.scala:31)\n\tat Problem.main(tmpnfp9rgzr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = dp(i\
    \ - 1) + arr(i)\n        }\n        var sum = 0L\n        for (i <- 0 until n)\
    \ {\n            if (dp(i) % 2 == 0) {\n                val index = binarySearch(dp,\
    \ dp(i) / 2)\n                if (index != -1) {\n                    sum += index\
    \ + 1\n                }\n            }\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_zvj0sb2.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mindex\e[0m = binarySearch(dp,\
    \ dp(i) / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: binarySearch\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val\
    \ target = sum / 2\n        val dp = Array.fill(target + 1)(0L)\n        dp(0)\
    \ = 1\n        for (i <- 0 until n) {\n            for (j <- target to sorted(i)\
    \ by -1) {\n                dp(j) += dp(j - sorted(i))\n            }\n      \
    \  }\n        dp(target) / 2\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ykbd8lb.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(target + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \            Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ykbd8lb.scala:19:19\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - sorted(i))\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ykbd8lb.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - sorted(i))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0ykbd8lb.scala:22:11 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        dp(target) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m           Found:    (target : Long)\n\e\
    [31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978399
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var i = 0\n        while (i < n) {\n            if (arr2(i) != i + 1) return\
    \ -1\n            i += 1\n        }\n        return 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppoo0xj1a.scala:20)\n\tat Problem.main(tmppoo0xj1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        val diff\
    \ = max - min\n        if (diff % 2 == 0) {\n            val mid = min + diff\
    \ / 2\n            var count = 0\n            for (i <- 0 until n) {\n       \
    \         if (sorted(i) == mid) count += 1\n            }\n            if (count\
    \ % 2 == 0) return 1\n            else return 0\n        }\n        else return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplk7jrmzd.scala:27)\n\tat Problem.main(tmplk7jrmzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var max = arr.max\n        var sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        var dp = Array.fill(sum.toInt + 1)(0L)\n  \
    \      dp(0) = 1\n        for (i <- 0 until arr.length) {\n            for (j\
    \ <- sum.toInt to arr(i).toInt by -1) {\n                dp(j) += dp(j - arr(i).toInt)\n\
    \            }\n        }\n        return dp(sum.toInt / 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq2j7q61d.scala:23)\n\tat Problem.main(tmpq2j7q61d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val diff\
    \ = max - min\n        if (diff > n) return -1\n        val count = new Array[Long](n)\n\
    \        for (i <- 0 until n) count(i) = 0\n        for (i <- 0 until n) count(arr(i).toInt\
    \ - min.toInt) += 1\n        var d = 0\n        for (i <- 0 until n) {\n     \
    \       if (count(i) > 0) {\n                var j = i\n                while\
    \ (j < n && count(j) > 0) {\n                    count(j) -= 1\n             \
    \       j += diff\n                }\n                if (j != i + diff) return\
    \ -1\n            }\n        }\n        return 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdccvz5ud.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    j += diff\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978407
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var i = 0\n        var j = n - 1\n        var count = 0\n        while (i\
    \ < j) {\n            if (arr2(i) + arr2(j) == 0) {\n                count +=\
    \ 1\n                i += 1\n                j -= 1\n            } else if (arr2(i)\
    \ + arr2(j) < 0) {\n                i += 1\n            } else {\n           \
    \     j -= 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplf360ihx.scala:29)\n\tat Problem.main(tmplf360ihx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max == min) {\n            if (max == 0) return\
    \ (n * (n - 1)) / 2\n            else if (n % max == 0) return (n / max) * ((n\
    \ / max) - 1) / 2\n            else return -1\n        }\n        val zeros =\
    \ sorted.count(_ == 0)\n        val ones = sorted.count(_ == 1)\n        if (zeros\
    \ == 0) return (ones * (ones - 1)) / 2\n        else if (ones == 0) return (zeros\
    \ * (zeros - 1)) / 2\n        else return (zeros * ones) + (zeros * (zeros - 1))\
    \ / 2\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwbnu1ayo.scala:27)\n\tat Problem.main(tmpwbnu1ayo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var i = 0\n        var\
    \ j = sorted.length - 1\n        var count = 0\n        while (i < j) {\n    \
    \        if (sorted(i) + sorted(j) == 0) {\n                count += 1\n     \
    \           i += 1\n                j -= 1\n            } else if (sorted(i) +\
    \ sorted(j) < 0) {\n                i += 1\n            } else {\n           \
    \     j -= 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogrpit4t.scala:28)\n\tat Problem.main(tmpogrpit4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0tnmp6mn.scala:29)\n\tat Problem.main(tmp0tnmp6mn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) {\n                j -= 1\n\
    \            }\n            if (j >= 0) {\n                dp(i) = dp(j) + 1\n\
    \            }\n        }\n        dp.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ii8k4ef.scala:26)\n\tat Problem.main(tmp_ii8k4ef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = arr.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3euh5qew.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3euh5qew.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3euh5qew.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3euh5qew.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3euh5qew.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val sum = sorted.sum\n\
    \        if (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp\
    \ = Array.fill(half.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- half.toInt to sorted(i).toInt by -1)\
    \ {\n                dp(j) += dp(j - sorted(i).toInt)\n            }\n       \
    \ }\n        dp(half.toInt)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc5m0ztt.scala:24)\n\tat Problem.main(tmpyc5m0ztt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        val diff\
    \ = max - min\n        val sum = sorted.sum\n        if (sum % 2 == 1) return\
    \ 0\n        if (diff % 2 == 1) return 0\n        val half = sum / 2\n       \
    \ if (half < min) return 0\n        if (half > max) return 0\n        val dp =\
    \ Array.fill(half + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until n) {\n\
    \            val x = sorted(i)\n            for (j <- half to x by -1) {\n   \
    \             dp(j) += dp(j - x)\n            }\n        }\n        dp(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jr63wzp.scala:21:28\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jr63wzp.scala:26:19\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jr63wzp.scala:26:28\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    Long\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0jr63wzp.scala:29:11 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n        \
    \        if (arr(j) <= arr(i)) {\n                    dp(i) = max(dp(i), dp(j)\
    \ + 1)\n                }\n            }\n        }\n        dp.max\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6vjta77x.scala:23)\n\tat Problem.main(tmp6vjta77x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff == 0) return 0\n        if (diff % (n - 1) !=\
    \ 0) return -1\n        val step = diff / (n - 1)\n        var i = 0\n       \
    \ while (i < n - 1) {\n            if (sorted(i + 1) - sorted(i) != step) return\
    \ -1\n            i += 1\n        }\n        return step\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmyrgim2.scala:26)\n\tat Problem.main(tmpjmyrgim2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max - min == 1) {\n            if (sorted.count(_\
    \ == max) > 1) return -1\n            if (sorted.count(_ == min) > 1) return -1\n\
    \        }\n        var result = 0L\n        for (i <- 0 until n) {\n        \
    \    if (sorted(i) == max) result += 1\n            else result += max - sorted(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\
    \ == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
    \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
    \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptd998lwb.scala:27)\n\tat Problem.main(tmptd998lwb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        if (max\
    \ - min > 1) return -1\n        if (max == min) return (n * (n - 1)) / 2\n   \
    \     val count = Array.fill(n)(0)\n        for (i <- 0 until n) {\n         \
    \   count(i) = sorted.count(_ == sorted(i))\n        }\n        val countMax =\
    \ count(n - 1)\n        val countMin = count(0)\n        if (countMax == countMin)\
    \ return (countMax * (countMax - 1)) / 2\n        else return countMax * countMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz0vyovc.scala:26)\n\tat Problem.main(tmptz0vyovc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val sum =\
    \ arr.sum\n        if (sum % 2 == 1) return 0\n        if (max > sum / 2) return\
    \ 0\n        if (min == max) {\n            if (n % 2 == 0) return 1\n       \
    \     else return 0\n        }\n        var count = 0L\n        for (i <- 0 until\
    \ n) {\n            if (arr(i) == min) count += 1\n        }\n        if (count\
    \ % 2 == 1) return 0\n        return 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpooknq9qf.scala:29)\n\tat Problem.main(tmpooknq9qf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val mid = sorted(n / 2)\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            sum += abs(sorted(i) - mid)\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb034o6e_.scala:20)\n\tat Problem.main(tmpb034o6e_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        val maxIndex\
    \ = n - 1\n        val minIndex = 0\n        var maxCount = 0\n        var minCount\
    \ = 0\n        var i = 0\n        while (i < n) {\n            if (sorted(i) ==\
    \ max) {\n                maxCount += 1\n            }\n            if (sorted(i)\
    \ == min) {\n                minCount += 1\n            }\n            i += 1\n\
    \        }\n        if (max == min) {\n            if (maxCount % 2 == 0) {\n\
    \                return 1\n            } else {\n                return 0\n  \
    \          }\n        }\n        if (maxCount == 1) {\n            if (minCount\
    \ == 1) {\n                return 1\n            } else {\n                return\
    \ 0\n            }\n        }\n        if (minCount == 1) {\n            if (maxCount\
    \ == 1) {\n                return 1\n            } else {\n                return\
    \ 0\n            }\n        }\n        if (maxCount > 1) {\n            if (minCount\
    \ > 1) {\n                return 0\n            } else {\n                return\
    \ 1\n            }\n        }\n        if (minCount > 1) {\n            if (maxCount\
    \ > 1) {\n                return 0\n            } else {\n                return\
    \ 1\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7h9irzxf.scala:66)\n\tat Problem.main(tmp7h9irzxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpihlo6rfs.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpihlo6rfs.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpihlo6rfs.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\n        }\n    \
    \    var result = 0L\n        for (i <- 0 until n) {\n            var j = i +\
    \ 1\n            while (j < n && dp(j) >= i) {\n                result += arr(i)\n\
    \                j = dp(j) + 1\n            }\n        }\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        var j = n - 1\n        var count = 0\n        while\
    \ (i < j) {\n            if (sorted(i) + sorted(j) == 0) {\n                count\
    \ += 1\n                i += 1\n                j -= 1\n            } else if\
    \ (sorted(i) + sorted(j) < 0) {\n                i += 1\n            } else {\n\
    \                j -= 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz05yaxfc.scala:29)\n\tat Problem.main(tmpz05yaxfc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            val x =\
    \ arr(i)\n            if (x == m) dp(i) = 1\n            else {\n            \
    \    var j = i - 1\n                while (j >= 0 && arr(j) >= x) j -= 1\n   \
    \             if (j >= 0) dp(i) = dp(j) + 1\n            }\n        }\n      \
    \  dp.max\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi9ez62s4.scala:25)\n\tat Problem.main(tmpi9ez62s4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val min = sorted(0)\n        val max = sorted(n - 1)\n        val sum\
    \ = sorted.sum\n        if (sum % 2 == 1) return 0\n        val target = sum /\
    \ 2\n        if (min == max) {\n            if (min * n == target) return 1\n\
    \            else return 0\n        }\n        val diff = max - min\n        if\
    \ (diff > target) return 0\n        if (diff == target) return 1\n        val\
    \ m = target - diff\n        val count = Array.fill(target.toInt + 1)(0)\n   \
    \     count(0) = 1\n        for (i <- 0 until n) {\n            val x = sorted(i)\n\
    \            for (j <- target.toInt to x.toInt by -1) {\n                count(j)\
    \ += count(j - x.toInt)\n            }\n        }\n        return count(target.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_72n3yy.scala:36)\n\tat Problem.main(tmpn_72n3yy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val sortedReverse = sorted.reverse\n\
    \        val sum = sorted.sum\n        if (sum % 2 == 1) return -1\n        val\
    \ half = sum / 2\n        val dp = Array.fill(half + 1)(0L)\n        dp(0) = 1\n\
    \        for (i <- 0 until sorted.length) {\n            for (j <- half to sorted(i)\
    \ by -1) {\n                dp(j) += dp(j - sorted(i))\n            }\n      \
    \  }\n        var result = 0L\n        for (i <- 0 until sortedReverse.length)\
    \ {\n            val j = half - sortedReverse(i)\n            if (j >= 0) result\
    \ += dp(j)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6m8u4xyo.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6m8u4xyo.scala:19:19\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - sorted(i))\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6m8u4xyo.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - sorted(i))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6m8u4xyo.scala:25:31 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (j >= \e[31m0\e[0m) result += dp(j)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               value += is not a member of Long - did you mean Long.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6m8u4xyo.scala:25:37 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (j >= \e[31m0\e[0m) result\
    \ += dp(j)\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\
    \e[31m   |\e[0m                                     Found:    (j : Long)\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        while (i < n - 1) {\n            if (sorted(i) * 2 !=\
    \ sorted(i + 1)) return -1\n            i += 2\n        }\n        return 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13y10b07.scala:20)\n\tat Problem.main(tmp13y10b07.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(half\
    \ + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until n) {\n            val\
    \ x = arr(i)\n            for (j <- half to x by -1) {\n                dp(j)\
    \ += dp(j - x)\n            }\n        }\n        dp(half)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilyjlv4w.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilyjlv4w.scala:19:19\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilyjlv4w.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    Long\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpilyjlv4w.scala:22:11 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > n - 1) return -1\n        val count = Array.fill(n)(0L)\n        for (i\
    \ <- 0 until n) count(arr(i).toInt - min.toInt) += 1\n        var result = 0L\n\
    \        for (i <- 0 until n) {\n            if (count(i) > 0) {\n           \
    \     val d = min + i\n                val m = (n - 1 - i) min count(i)\n    \
    \            result += m\n                count(i) -= m\n                count(n\
    \ - 1 - i) -= m\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk09v7olr.scala:21:45\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m\
    \ \e[36mm\e[0m = (n - \e[31m1\e[0m - i) min count(i)\n\e[31m\e[31m   |\e[0m  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                Found:    Long\n\e[31m   |\e[0m             \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n            if (j\
    \ == -1) dp(i) = 1\n            else dp(i) = dp(j) + 1\n        }\n        dp.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6high28.scala:22)\n\tat Problem.main(tmpy6high28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = dp(i\
    \ - 1) + arr(i)\n        }\n        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            val x = arr(i)\n            val y = dp(n - 1) - dp(i)\n  \
    \          if (x == y) result += 1\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpetx36aok.scala:25)\n\tat Problem.main(tmpetx36aok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            if (i % 2 == 0) sum += arr3(i)\n            else sum -= arr3(i)\n\
    \        }\n        if (sum % 2 == 0) sum / 2 else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpouumms8l.scala:21)\n\tat Problem.main(tmpouumms8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val diff = max - min\n        val count\
    \ = arr.length\n        if (diff % (count - 1) != 0) return -1\n        val step\
    \ = diff / (count - 1)\n        var i = 0\n        while (i < count) {\n     \
    \       if (sorted(i) != min + i * step) return -1\n            i += 1\n     \
    \   }\n        return min\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mxepiw8.scala:25)\n\tat Problem.main(tmp3mxepiw8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sum = arr.sum\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(n\
    \ + 1, half + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n    \
    \        for (j <- 0 to half) {\n                dp(i)(j) = dp(i - 1)(j)\n   \
    \             if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i - 1))\n   \
    \         }\n        }\n        return dp(n)(half)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdsbh456q.scala:14:35\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdsbh456q.scala:17:27 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdsbh456q.scala:19:46 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpdsbh456q.scala:19:59 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m                \e[33mif\e[0m (j >= arr(i - \e[31m1\e[0m)) dp(i)(j)\
    \ += dp(i - \e[31m1\e[0m)(j - arr(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdsbh456q.scala:22:21\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mreturn\e[0m dp(n)(half)\n\
    \e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659978418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var sum = 0L\n        for (i <- arr) sum += i\n        if\
    \ (sum % 2 == 1) return 0\n        val n = arr.length\n        val dp = Array.fill(n\
    \ + 1, (sum / 2 + 1).toInt)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to\
    \ n) {\n            for (j <- 0 to sum / 2) {\n                dp(i)(j) = dp(i\
    \ - 1)(j)\n                if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j - arr(i\
    \ - 1).toInt)\n            }\n        }\n        dp(n)(sum / 2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7icsfyt.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m0\e[0m to sum / \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m            \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe7icsfyt.scala:22:14 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        dp(n)(sum / \e[31m2\e[0m)\n\e[31m\e[31m   |\e\
    [0m              ^^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    Long\n\e\
    [31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = dp(i\
    \ - 1) + arr(i)\n        }\n        var max = 0L\n        for (i <- 0 until n)\
    \ {\n            var l = 0\n            var r = n - 1\n            while (l <=\
    \ r) {\n                val m = (l + r) / 2\n                if (dp(m) - dp(i)\
    \ + arr(i) <= arr(i)) {\n                    max = max max (m - i + 1)\n     \
    \               l = m + 1\n                } else {\n                    r = m\
    \ - 1\n                }\n            }\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpax37vot7.scala:33)\n\tat Problem.main(tmpax37vot7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        val max = sorted(n - 1)\n        val min = sorted(0)\n        val diff\
    \ = max - min\n        if (diff % 2 == 0) {\n            val half = diff / 2\n\
    \            val minIndex = sorted.indexOf(min + half)\n            val maxIndex\
    \ = sorted.indexOf(max - half)\n            if (minIndex != -1 && maxIndex !=\
    \ -1) {\n                if (minIndex == maxIndex) {\n                    if (sorted.count(_\
    \ == min + half) >= 2) {\n                        return 1\n                 \
    \   }\n                } else {\n                    return 1\n              \
    \  }\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuq9gfl97.scala:32)\n\tat Problem.main(tmpuq9gfl97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val range = max - min + 1\n        if\
    \ (range > arr.length) return -1\n        var count = 0\n        var i = 0\n \
    \       while (i < arr.length) {\n            if (sorted(i) == min + i) count\
    \ += 1\n            i += 1\n        }\n        if (count == range) return arr.length\
    \ - range\n        return -1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb_eaaj86.scala:25)\n\tat Problem.main(tmpb_eaaj86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val sum =\
    \ sorted.sum\n        val diff = max - min\n        if (diff == 0) {\n       \
    \     if (sum % 2 == 0) {\n                return 1\n            } else {\n  \
    \              return 0\n            }\n        }\n        if (diff == 1) {\n\
    \            if (sum % 2 == 0) {\n                return 2\n            } else\
    \ {\n                return 0\n            }\n        }\n        if (diff == 2)\
    \ {\n            if (sum % 2 == 0) {\n                return 3\n            }\
    \ else {\n                return 1\n            }\n        }\n        if (diff\
    \ == 3) {\n            if (sum % 2 == 0) {\n                return 4\n       \
    \     } else {\n                return 2\n            }\n        }\n        if\
    \ (diff == 4) {\n            if (sum % 2 == 0) {\n                return 5\n \
    \           } else {\n                return 3\n            }\n        }\n   \
    \     if (diff == 5) {\n            if (sum % 2 == 0) {\n                return\
    \ 6\n            } else {\n                return 4\n            }\n        }\n\
    \        if (diff == 6) {\n            if (sum % 2 == 0) {\n                return\
    \ 7\n            } else {\n                return 5\n            }\n        }\n\
    \        if (diff == 7) {\n            if (sum % 2 == 0) {\n                return\
    \ 8\n            } else {\n                return 6\n            }\n        }\n\
    \        if (diff == 8) {\n            if (sum % 2 == 0) {\n                return\
    \ 9\n            } else {\n                return 7\n            }\n        }\n\
    \        if (diff == 9) {\n            if (sum % 2 == 0) {\n                return\
    \ 10\n            } else {\n                return 8\n            }\n        }\n\
    \        if (diff == 10) {\n            if (sum % 2 == 0) {\n                return\
    \ 11\n            } else {\n                return 9\n            }\n        }\n\
    \        if (diff == 11) {\n            if (sum % 2 == 0) {\n                return\
    \ 12\n            } else {\n                return 10\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp47kr1d4l.scala:109:0 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp47kr1d4l.scala:93:8\
    \ ---------------------\e[0m\e[0m\n\e[31m 93 |\e[0m        \e[33mif\e[0m (diff\
    \ == \e[31m11\e[0m) {\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m\
    \        Found:    Unit\n\e[31m    |\e[0m        Required: Long\n\e[31m    |\e\
    [0m        Maybe you are missing an else part for the conditional?\n\e[31m 94\
    \ |\e[0m            \e[33mif\e[0m (sum % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\
    \ 95 |\e[0m                \e[33mreturn\e[0m \e[31m12\e[0m\n\e[31m 96 |\e[0m \
    \           } \e[33melse\e[0m {\n\e[31m 97 |\e[0m                \e[33mreturn\e\
    [0m \e[31m10\e[0m\n\e[31m 98 |\e[0m    }\n\e[31m 99 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m100\
    \ |\e[0m    assert(canArrange((List[\e[35mLong\e[0m](\e[31m1l\e[0m.toLong, \e\
    [31m2l\e[0m.toLong, \e[31m4l\e[0m.toLong, \e[31m3l\e[0m.toLong, \e[31m5l\e[0m.toLong)))\
    \ == (\e[31m3l\e[0m));\n\e[31m101 |\e[0m    assert(canArrange((List[\e[35mLong\e\
    [0m](\e[31m1l\e[0m.toLong, \e[31m2l\e[0m.toLong, \e[31m4l\e[0m.toLong, \e[31m5l\e\
    [0m.toLong))) == (-\e[31m1l\e[0m));\n\e[31m102 |\e[0m    assert(canArrange((List[\e\
    [35mLong\e[0m](\e[31m1l\e[0m.toLong, \e[31m4l\e[0m.toLong, \e[31m2l\e[0m.toLong,\
    \ \e[31m5l\e[0m.toLong, \e[31m6l\e[0m.toLong, \e[31m7l\e[0m.toLong, \e[31m8l\e\
    [0m.toLong, \e[31m9l\e[0m.toLong, \e[31m10l\e[0m.toLong))) == (\e[31m2l\e[0m));\n\
    \e[31m103 |\e[0m    assert(canArrange((List[\e[35mLong\e[0m](\e[31m4l\e[0m.toLong,\
    \ \e[31m8l\e[0m.toLong, \e[31m5l\e[0m.toLong, \e[31m7l\e[0m.toLong, \e[31m3l\e\
    [0m.toLong))) == (\e[31m4l\e[0m));\n\e[31m104 |\e[0m    assert(canArrange((List[\e\
    [35mLong\e[0m]())) == (-\e[31m1l\e[0m));\n\e[31m105 |\e[0m    }\n\e[31m106 |\e\
    [0m}\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val range = max - min + 1\n        val\
    \ count = Array.fill(range.toInt)(0)\n        for (x <- sorted) count(x.toInt\
    \ - min.toInt) += 1\n        var result = 0L\n        for (i <- 0 until range.toInt)\
    \ {\n            if (count(i) > 0) {\n                val x = min + i\n      \
    \          val y = 2 * x\n                if (y <= max) {\n                  \
    \  result += count(i) * count(y.toInt - min.toInt)\n                }\n      \
    \      }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7waa1mjd.scala:29)\n\tat Problem.main(tmp7waa1mjd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = 1\n        for (i <- 1 until n) {\n            val x = arr(i)\n\
    \            var j = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n\
    \            if (j == -1) dp(i) = dp(i - 1)\n            else dp(i) = dp(i - 1)\
    \ + dp(j)\n        }\n        dp(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg7ecjsc4.scala:23)\n\tat Problem.main(tmpg7ecjsc4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val a = arr.sorted\n       \
    \ val b = arr.sorted.reverse\n        var i = 0\n        var j = 0\n        var\
    \ sum = 0L\n        while (i < n && j < n) {\n            if (i != j) {\n    \
    \            sum += a(i) * b(j)\n            }\n            i += 1\n         \
    \   j += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqdqft7rb.scala:26)\n\tat Problem.main(tmpqdqft7rb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val diffs\
    \ = sorted.zip(sorted.tail).map(x => x._2 - x._1)\n        val minDiff = diffs.min\n\
    \        val maxDiff = diffs.max\n        val minDiffCount = diffs.count(_ ==\
    \ minDiff)\n        val maxDiffCount = diffs.count(_ == maxDiff)\n        if (minDiff\
    \ == maxDiff) {\n            val n = diffs.length\n            val k = minDiffCount\n\
    \            val r = n - k\n            if (k == r) (k * (k - 1)) / 2\n      \
    \      else k * r\n        } else {\n            minDiffCount * maxDiffCount\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzh5kfrud.scala:30)\n\tat Problem.main(tmpzh5kfrud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    var i = 0\n        while (i < n - 1) {\n            if (arr2(i) == arr2(i\
    \ + 1)) return 0\n            i += 1\n        }\n        var sum = 0L\n      \
    \  i = 0\n        while (i < n) {\n            sum += arr2(i)\n            i +=\
    \ 1\n        }\n        if (sum % 2 == 1) return 0\n        val half = sum / 2\n\
    \        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        i = 0\n  \
    \      while (i < n) {\n            var j = n\n            while (j >= 0) {\n\
    \                if (dp(j) == 1 && j + arr2(i) <= n) dp(j + arr2(i).toInt) = 1\n\
    \                j -= 1\n            }\n            if (dp(half.toInt) == 1) return\
    \ 1\n            i += 1\n        }\n        0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_a1vgr7q.scala:40)\n\tat Problem.main(tmp_a1vgr7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var max = -1L\n        var min = Long.MaxValue\n       \
    \ for (i <- arr) {\n            max = max max i\n            min = min min i\n\
    \        }\n        if (max - min > arr.length) return -1\n        val count =\
    \ new Array[Long](arr.length)\n        for (i <- arr) count(i.toInt - min.toInt)\
    \ += 1\n        var i = 0\n        var j = 0\n        while (i < arr.length) {\n\
    \            if (count(i) > 0) {\n                arr(j) = i + min\n         \
    \       j += 1\n                count(i) -= 1\n            }\n            else\
    \ i += 1\n        }\n        var result = 0L\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < arr(i - 1)) result += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqz7z57c.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                arr(j) = i + min\n\e[31m\e[31m   |\e\
    [0m                ^^^\e[0m\n\e[31m   |\e[0m  value update is not a member of\
    \ List[Long] - did you mean arr.updated?\n1 error found\n"
  stdout: ''
  timestamp: 1659978419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val max = arr.max\n        val\
    \ min = arr.min\n        if (max - min > n) return -1\n        val count = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) count(arr(i).toInt - min.toInt) += 1\n        var\
    \ i = 0\n        var j = 0\n        while (i < n) {\n            if (count(i)\
    \ > 0) {\n                if (count(i) > 1) return -1\n                if (i +\
    \ min > arr(j)) return -1\n                count(i) -= 1\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        return j.toLong\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvlbpw1lx.scala:30)\n\tat Problem.main(tmpvlbpw1lx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = arr.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(half + 1)(0L)\n        dp(0) = 1\n  \
    \      for (i <- 0 until n) {\n            val x = sorted(i)\n            for\
    \ (j <- half to x by -1) {\n                dp(j) += dp(j - x)\n            }\n\
    \        }\n        dp(half)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3lefe63g.scala:15:28\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3lefe63g.scala:20:19\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3lefe63g.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                dp(j) += dp(j\
    \ - x)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    Long\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3lefe63g.scala:23:11 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            val x = arr(i)\n            var j\
    \ = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n            dp(i)\
    \ = j + 1\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n \
    \           val x = arr(i)\n            var j = i - 1\n            while (j >=\
    \ 0 && arr(j) > x) j -= 1\n            if (j >= 0) ans += (j - dp(i) + 1)\n  \
    \      }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6778g26h.scala:28)\n\tat Problem.main(tmp6778g26h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val sum = sorted.sum\n\
    \        if (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp\
    \ = Array.fill(half.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 0 until\
    \ sorted.length) {\n            for (j <- half to sorted(i).toInt by -1) {\n \
    \               dp(j) += dp(j - sorted(i).toInt)\n            }\n        }\n \
    \       dp(half.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q_o926g.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                dp(j) += dp(j\
    \ - sorted(i).toInt)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m \
    \  |\e[0m                   Found:    (j : Long)\n\e[31m   |\e[0m            \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q_o926g.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                dp(j) += dp(j\
    \ - sorted(i).toInt)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m\
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff % (n - 1) != 0) -1\n        else {\n         \
    \   var i = 0\n            var j = n - 1\n            var count = 0\n        \
    \    while (i < j) {\n                val a = sorted(i)\n                val b\
    \ = sorted(j)\n                if (a + b == diff) {\n                    count\
    \ += 1\n                    i += 1\n                    j -= 1\n             \
    \   }\n                else if (a + b < diff) i += 1\n                else j -=\
    \ 1\n            }\n            count\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp05jrb2lu.scala:35)\n\tat Problem.main(tmp05jrb2lu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ dp = Array.fill(n + 1, m.toInt + 1)(0L)\n        dp(0)(0) = 1\n        for (i\
    \ <- 1 to n) {\n            for (j <- 0 to m.toInt) {\n                dp(i)(j)\
    \ = dp(i - 1)(j)\n                if (j >= arr(i - 1)) dp(i)(j) += dp(i - 1)(j\
    \ - arr(i - 1).toInt)\n            }\n        }\n        dp(n)(m.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60ego44d.scala:24)\n\tat Problem.main(tmp60ego44d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ dp = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            dp(i) =\
    \ arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i))\
    \ dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n        dp.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqkf2arnh.scala:22)\n\tat Problem.main(tmpqkf2arnh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = dp(i\
    \ - 1) + arr(i)\n        }\n        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            val j = i - 1\n            if (j >= 0 && dp(i) - dp(j) >=\
    \ arr(i)) result += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1prfvhb.scala:24)\n\tat Problem.main(tmpg1prfvhb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        val n = sorted.length\n\
    \        for (i <- 0 until n) {\n            if (sorted(i) != sorted(n - 1 - i))\
    \ return -1\n        }\n        return 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt8slnpmy.scala:18)\n\tat Problem.main(tmpt8slnpmy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        var sum = 0L\n        for (i <- arr) sum += i\n        if\
    \ (sum % 2 == 1) return 0\n        val half = sum / 2\n        val dp = Array.fill(half\
    \ + 1)(0L)\n        dp(0) = 1\n        for (i <- arr) {\n            for (j <-\
    \ half to i by -1) {\n                dp(j) += dp(j - i)\n            }\n    \
    \    }\n        dp(half)\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjw4iptk.scala:14:28\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjw4iptk.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                dp(j) += dp(j\
    \ - i)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m      \
    \             Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjw4iptk.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                dp(j) += dp(j\
    \ - i)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Found:    Long\n\e[31m   |\e[0m          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdjw4iptk.scala:21:11 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        dp(half)\n\e[31m\e[31m   |\e[0m           ^^^^\e[0m\n\e[31m  \
    \ |\e[0m           Found:    (half : Long)\n\e[31m   |\e[0m           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978424
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val arr2 = arr.sorted\n    \
    \    val arr3 = arr2.reverse\n        var i = 0\n        var j = n - 1\n     \
    \   var count = 0\n        while (i < j) {\n            if (arr2(i) + arr3(j)\
    \ == 0) {\n                count += 1\n                i += 1\n              \
    \  j -= 1\n            } else if (arr2(i) + arr3(j) > 0) {\n                j\
    \ -= 1\n            } else {\n                i += 1\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx78fd04.scala:30)\n\tat Problem.main(tmpqx78fd04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max == min) {\n            if (max == 0) return\
    \ (n * (n - 1)) / 2\n            if (max == 1) return (n * (n - 1)) / 2\n    \
    \    }\n        var count = 0L\n        for (i <- 0 until n) {\n            if\
    \ (sorted(i) == max) {\n                count += n - i - 1\n            }\n  \
    \          else {\n                count += n - i\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeoounyze.scala:31)\n\tat Problem.main(tmpeoounyze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        val diff\
    \ = max - min\n        if (diff % (n - 1) != 0) return -1\n        val d = diff\
    \ / (n - 1)\n        var i = 0\n        while (i < n - 1) {\n            if (sorted(i\
    \ + 1) - sorted(i) != d) return -1\n            i += 1\n        }\n        return\
    \ max\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmd91dklw.scala:25)\n\tat Problem.main(tmpmd91dklw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val sorted = arr.sorted\n        var i = 0\n        while\
    \ (i < sorted.length - 1) {\n            if (sorted(i) == sorted(i + 1)) return\
    \ 0\n            i += 1\n        }\n        var j = 0\n        while (j < sorted.length\
    \ - 1) {\n            if (sorted(j) + 1 != sorted(j + 1)) return 0\n         \
    \   j += 1\n        }\n        return 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp31xc5j3c.scala:24)\n\tat Problem.main(tmp31xc5j3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      var i = 0\n        while (i < n) {\n            if (sorted(i) >= 0) {\n\
    \                if (i == 0 || sorted(i) > sorted(i - 1)) return -1\n        \
    \        else return sorted(i - 1)\n            }\n            i += 1\n      \
    \  }\n        return sorted(n - 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe3ltp3m.scala:23)\n\tat Problem.main(tmpfe3ltp3m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.last\n        val min = sorted.head\n        if (max -\
    \ min > 1) return -1\n        if (max == min) {\n            if (max == 0) return\
    \ (n * (n - 1)) / 2\n            if (max % 2 == 0) return (n * (n - 1)) / 2\n\
    \            return -1\n        }\n        val count = new Array[Long](2)\n  \
    \      for (i <- 0 until n) {\n            if (sorted(i) == 0) count(0) += 1\n\
    \            else count(1) += 1\n        }\n        if (count(0) % 2 == 1) return\
    \ -1\n        return (count(0) * (count(0) - 1)) / 2 + (count(1) * (count(1) -\
    \ 1)) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb68ucf69.scala:29)\n\tat Problem.main(tmpb68ucf69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val m = arr.max\n        val\
    \ a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n) a(arr(i).toInt)\
    \ += 1\n        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            sum\
    \ += a(i) * i\n            a(i) = 0\n        }\n        if (sum % 2 == 1) return\
    \ 0\n        val half = sum / 2\n        var dp = Array.fill(half + 1)(0L)\n \
    \       dp(0) = 1\n        for (i <- 0 to m.toInt) {\n            for (j <- half\
    \ to i by -1) {\n                dp(j) += dp(j - i) * a(i)\n            }\n  \
    \      }\n        dp(half) / 2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjfr585zr.scala:21:28\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mdp\e\
    [0m = Array.fill(half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Long\n\e[31m   |\e[0m                            Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjfr585zr.scala:25:19\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                dp(j) += dp(j\
    \ - i) * a(i)\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (j : Long)\n\e[31m   |\e[0m                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjfr585zr.scala:25:28\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                dp(j) += dp(j\
    \ - i) * a(i)\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    Long\n\e[31m   |\e[0m     \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjfr585zr.scala:28:11 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        dp(half) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m   \
    \        ^^^^\e[0m\n\e[31m   |\e[0m           Found:    (half : Long)\n\e[31m\
    \   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val max = sorted.max\n        val min = sorted.min\n        if (max - min\
    \ > 1) return -1\n        if (max == min) return (n - 1) / 2\n        val cnt\
    \ = sorted.groupBy(x => x).mapValues(_.length)\n        val cnt0 = cnt.getOrElse(min,\
    \ 0)\n        val cnt1 = cnt.getOrElse(max, 0)\n        if (cnt0 > cnt1) return\
    \ -1\n        if (cnt0 == cnt1) return (n - 1) / 2\n        val diff = cnt1 -\
    \ cnt0\n        if (diff % 2 == 1) return -1\n        val k = diff / 2\n     \
    \   var i = 0\n        var j = 0\n        while (i < n && j < n) {\n         \
    \   if (sorted(i) == min) i += 1\n            else if (sorted(j) == max) j +=\
    \ 1\n            else {\n                if (sorted(i) == sorted(j)) {\n     \
    \               i += 1\n                    j += 1\n                } else if\
    \ (sorted(i) < sorted(j)) {\n                    i += 1\n                    k\
    \ -= 1\n                } else {\n                    j += 1\n               \
    \     k -= 1\n                }\n            }\n            if (k == 0) return\
    \ i - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong,\
    \ 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3iblexir.scala:35:22 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    k -= \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ -= is not a member of Int - did you mean k.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3iblexir.scala:38:22 ------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m                    k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                    value -= is not a member\
    \ of Int - did you mean k.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which returns the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\
    \ If\n    // no such element exists then return -1. The given array will not contain\n\
    \    // duplicate values.\n    // Examples:\n    def canArrange(arr : List[Long])\
    \ : Long = {\n        val n = arr.length\n        val sorted = arr.sorted\n  \
    \      val sum = sorted.sum\n        if (sum % 2 == 1) return 0\n        val half\
    \ = sum / 2\n        val dp = Array.fill(n + 1, half + 1)(0L)\n        dp(0)(0)\
    \ = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to half) {\n     \
    \           dp(i)(j) = dp(i - 1)(j)\n                if (j >= sorted(i - 1)) dp(i)(j)\
    \ += dp(i - 1)(j - sorted(i - 1))\n            }\n        }\n        dp(n)(half)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))) == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong,\
    \ 5l.toLong, 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]()))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.fill(n + \e[31m1\e[0m, half + \e[31m1\e[0m)(\e[31m0L\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Long\n\e[31m   |\e[0m          \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpihlo6rfs.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (j <- \e[31m0\e[0m to half) {\n\
    \e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    (half : Long)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpihlo6rfs.scala:20:49 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e[0m)) dp(i)(j) += dp(i\
    \ - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpihlo6rfs.scala:20:62 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m (j >= sorted(i - \e[31m1\e\
    [0m)) dp(i)(j) += dp(i - \e[31m1\e[0m)(j - sorted(i - \e[31m1\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpihlo6rfs.scala:23:14 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        dp(n)(half)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1659978350
