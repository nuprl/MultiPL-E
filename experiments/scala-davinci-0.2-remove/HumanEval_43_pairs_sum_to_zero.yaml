name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are two distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val set = new HashSet[Long]\n        for (x <- l) {\n     \
    \       if (set.contains(-x)) return true\n            set += x\n        }\n \
    \       return false", "        val s = l.toSet\n        for (x <- s) {\n    \
    \        if (s.contains(-x)) return true\n        }\n        return false", " \
    \       val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val s = l.toSet\n  \
    \      for (x <- s) {\n            if (s.contains(-x)) return true\n        }\n\
    \        return false", "        val set = new HashSet[Long]\n        for (i <-\
    \ l) {\n            if (set.contains(-i)) return true\n            set += i\n\
    \        }\n        return false", "        val set = new HashSet[Long]\n    \
    \    for (x <- l) {\n            if (set.contains(-x)) return true\n         \
    \   set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val s = l.toSet\n        for (x\
    \ <- s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val s = l.toSet\n  \
    \      for (x <- s) {\n            if (s.contains(-x)) return true\n        }\n\
    \        return false", "        val set = new HashSet[Long]\n        for (i <-\
    \ l) {\n            if (set.contains(-i)) return true\n            set += i\n\
    \        }\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            if (s.contains(-i)) return true\n        }\n        return\
    \ false", "        val s = Set[Long]()\n        for (x <- l) {\n            if\
    \ (s.contains(-x)) return true\n            s += x\n        }\n        return\
    \ false", "        val s = new HashSet[Long]\n        for (x <- l) {\n       \
    \     if (s.contains(-x)) return true\n            s += x\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (i <- s) {\n          \
    \  if (s.contains(-i)) return true\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (x <- s) {\n            if (s.contains(-x)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (x <- s) {\n          \
    \  if (s.contains(-x)) return true\n        }\n        return false", "      \
    \  val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = l.toSet\n\
    \        for (x <- set) {\n            if (set.contains(-x)) return true\n   \
    \     }\n        return false", "        val s = l.toSet\n        for (i <- s)\
    \ {\n            if (s.contains(-i)) return true\n        }\n        return false",
  "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val m = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (m.contains(-i)) return true\n       \
    \     m += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) return true\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ {\n                return true\n            }\n            set += x\n      \
    \  }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (i <- l) {\n\
    \            if (s.contains(-i)) return true\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (x <- l) {\n            if (set.contains(-x)) return true\n            set +=\
    \ x\n        }\n        return false", "        val s = l.toSet\n        for (x\
    \ <- s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        val set = l.toSet\n        for (x <- set) {\n            if\
    \ (set.contains(-x)) return true\n        }\n        return false", "        val\
    \ set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (x <- s) {\n            if (s.contains(-x)) return true\n        }\n       \
    \ return false", "        val set = new HashSet[Long]\n        for (i <- l) {\n\
    \            if (set.contains(-i)) return true\n            set += i\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val s = l.toSet\n        for (e\
    \ <- s) {\n            if (s.contains(-e)) return true\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ return true\n        }\n        return false", "        val s = l.toSet\n  \
    \      for (i <- l) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        val s = l.toSet\n        for (x <- s) {\n   \
    \         if (s.contains(-x)) return true\n        }\n        return false", " \
    \       val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ return true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val s = l.toSet\n        for (x\
    \ <- s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (x <- l) {\n            if (set.contains(-x)) return true\n            set +=\
    \ x\n        }\n        return false", "        val s = l.toSet\n        for (x\
    \ <- s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        var s = Set[Long]()\n        for (i <- l)\
    \ {\n            if (s.contains(-i)) return true\n            s += i\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (x <- l) {\n            if (set.contains(-x)) return true\n            set +=\
    \ x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val h = HashSet[Long]()\n        for (x <-\
    \ l) {\n            if (h.contains(-x)) return true\n            h += x\n    \
    \    }\n        return false", "        var s = Set[Long]()\n        for (i <-\
    \ l) {\n            if (s.contains(-i)) return true\n            s += i\n    \
    \    }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (x <- l) {\n            if (set.contains(-x)) return true\n            set +=\
    \ x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) return true\n        }\n        return false",
  "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) return true\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (i <- s) {\n            if (s.contains(-i)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (i <- s) {\n          \
    \  if (s.contains(-i)) return true\n        }\n        return false", "      \
    \  val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (x <- l) {\n            if (set.contains(-x)) return true\n            set +=\
    \ x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        var h = HashSet[Long]()\n        for (i <-\
    \ l) {\n            if (h.contains(-i)) return true\n            h += i\n    \
    \    }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val s = l.toSet\n        for (i\
    \ <- s) {\n            if (s.contains(-i)) return true\n        }\n        return\
    \ false", "        val set = new HashSet[Long]\n        for (i <- l) {\n     \
    \       if (set.contains(-i)) return true\n            set += i\n        }\n \
    \       return false", "        val set = new HashSet[Long]\n        for (i <-\
    \ l) {\n            if (set.contains(-i)) return true\n            set += i\n\
    \        }\n        return false", "        val s = l.toSet\n        for (x <-\
    \ s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        // we use a hashset to store the numbers we've seen so far.\n\
    \        // we can check if a number is in the hashset in O(1) time.\n       \
    \ val seen = new HashSet[Long]\n        for (i <- l) {\n            // if we've\
    \ seen the number -i before, then we've found a pair\n            // that sums\
    \ to zero.\n            if (seen.contains(-i)) return true\n            // otherwise,\
    \ add i to the hashset.\n            seen += i\n        }\n        // if we didn't\
    \ find a pair that sums to zero, return false.\n        false", "        val set\
    \ = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (i <- l) {\n            if (s.contains(-i)) return true\n        }\n       \
    \ return false", "        val set = new HashSet[Long]\n        for (i <- l) {\n\
    \            if (set.contains(-i)) return true\n            set += i\n       \
    \ }\n        return false", "        val m = new HashSet[Long]\n        for (i\
    \ <- l) {\n            if (m.contains(-i)) return true\n            m += i\n \
    \       }\n        return false", "        val s = l.toSet\n        for (x <-\
    \ s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ return true\n        }\n        return false", "        val s = l.toSet\n  \
    \      for (i <- l) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        val s = new HashSet[Long]\n        for (x <-\
    \ l) {\n            if (s.contains(-x)) return true\n            s += x\n    \
    \    }\n        return false", "        val s = l.toSet\n        for (x <- s)\
    \ {\n            if (s.contains(-x)) return true\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (i <- l) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val m = new HashSet[Long]\n        for (i\
    \ <- l) {\n            if (m.contains(-i)) return true\n            m += i\n \
    \       }\n        return false", "        val set = new HashSet[Long]\n     \
    \   for (x <- l) {\n            if (set.contains(-x)) return true\n          \
    \  set += x\n        }\n        return false", "        val s = l.toSet\n    \
    \    for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         if (s.contains(-i)) return true\n        }\n        return false", " \
    \       val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (i <- s) {\n            if (s.contains(-i)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (i <- s) {\n          \
    \  if (s.contains(-i)) return true\n        }\n        return false", "      \
    \  val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (x <- s) {\n            if (s.contains(-x)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (i <- s) {\n          \
    \  if (s.contains(-i)) return true\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (x <- s) {\n            if (s.contains(-x)) return true\n        }\n       \
    \ return false", "        val set = new HashSet[Long]\n        for (i <- l) {\n\
    \            if (set.contains(-i)) return true\n            set += i\n       \
    \ }\n        return false", "        val set = l.toSet\n        for (x <- set)\
    \ {\n            if (set.contains(-x)) return true\n        }\n        return\
    \ false", "        val set = new HashSet[Long]\n        for (x <- l) {\n     \
    \       if (set.contains(-x)) return true\n            set += x\n        }\n \
    \       return false", "        val s = l.toSet\n        for (x <- s) {\n    \
    \        if (s.contains(-x)) return true\n        }\n        return false", " \
    \       val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        val s = l.toSet\n  \
    \      for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         if (s.contains(-i)) return true\n        }\n        return false", " \
    \       val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   // we use a hashmap to store the elements of the list.\n        // the key\
    \ is the element, and the value is the number of times\n        // that element\
    \ appears in the list.\n        val map = new HashMap[Long, Int]\n        for\
    \ (x <- l) {\n            if (map.contains(x)) map(x) += 1\n            else map(x)\
    \ = 1\n        }\n        // we iterate through the keys of the hashmap.\n   \
    \     // if the key is zero, we check if it appears at least twice.\n        //\
    \ if the key is not zero, we check if the negative of the key\n        // appears\
    \ in the hashmap.\n        for (x <- map.keys) {\n            if (x == 0) {\n\
    \                if (map(x) >= 2) return true\n            }\n            else\
    \ if (map.contains(-x)) return true\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        for\
    \ (x <- s) {\n            if (s.contains(-x)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (i <- s) {\n          \
    \  if (s.contains(-i)) return true\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set +=\
    \ i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) return true\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (x <- s) {\n\
    \            if (s.contains(-x)) return true\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set += i\n        }\n        return false", "     \
    \   val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        // TODO: implement this function\n\
    \        return false", "        val set = new HashSet[Long]\n        for (x <-\
    \ l) {\n            if (set.contains(-x)) return true\n            set += x\n\
    \        }\n        return false", "        val h = HashSet[Long]()\n        for\
    \ (i <- l) {\n            if (h.contains(-i)) return true\n            h += i\n\
    \        }\n        return false", "        val set = new HashSet[Long]\n    \
    \    for (i <- l) {\n            if (set.contains(-i)) return true\n         \
    \   set += i\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
