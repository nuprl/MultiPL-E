name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    def orderByPoints(nums : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val points = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        points.sortBy(x => (x._2, x._1)).map(_._1)", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        var map = Map[Long,\
    \ Long]()\n        for (i <- 0 until nums.length) {\n            var sum = 0L\n\
    \            var n = nums(i)\n            while (n > 0) {\n                sum\
    \ += n % 10\n                n /= 10\n            }\n            map += (sum ->\
    \ nums(i))\n        }\n        map.toList.sortBy(_._1).map(_._2)", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = sumDigits(a)\n            val bSum = sumDigits(b)\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) ==
    sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (i <- 0 until nums.length) {\n            val sum =\
    \ sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum) = List(nums(i))\n\
    \            else map(sum) = map(sum) :+ nums(i)\n        }\n        val keys\
    \ = map.keys.toList.sorted\n        var result = List[Long]()\n        for (key\
    \ <- keys) result = result ::: map(key)\n        result", "        val sorted\
    \ = nums.sortWith((a, b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)\n\
    \        sorted", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        val map = new HashMap[Long, List[Long]]\n    \
    \    for (num <- nums) {\n            val sum = sumDigits(num)\n            if\
    \ (map.contains(sum)) {\n                map(sum) = num :: map(sum)\n        \
    \    } else {\n                map(sum) = List(num)\n            }\n        }\n\
    \        val sorted = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (key <- sorted) {\n            result ++= map(key)\n        }\n \
    \       result.toList", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val keys = map.keys.toList.sorted\n        val result = new\
    \ ListBuffer[Long]\n        for (key <- keys) {\n            result ++= map(key)\n\
    \        }\n        result.toList", "        nums.sortWith((a, b) => {\n     \
    \       val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        val\
    \ list = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum, x._2)).sortBy(x\
    \ => (x._2, x._3))\n        list.map(_._1)", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val points = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        points.sortBy(x => (x._2, x._1)).map(_._1)", "        val sorted = nums.sortWith((a,\
    \ b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)\n     \
    \   sorted", "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", '        nums.sortWith((a, b) =>
    sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        val map = new HashMap[Long, List[Long]]\n     \
    \   for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (key <- keys) result ++=\
    \ map(key)\n        result.toList", "        nums.sortWith((a, b) => {\n     \
    \       val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n       \
    \ numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        val map = new\
    \ HashMap[Long, Long]\n        for (i <- 0 until nums.length) {\n            val\
    \ sum = nums(i).toString.map(_.asDigit).sum\n            if (map.contains(sum))\
    \ {\n                map(sum) = min(map(sum), nums(i))\n            } else {\n\
    \                map(sum) = nums(i)\n            }\n        }\n        map.toList.sortBy(_._1).map(_._2)",
  "        val numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((x, y) => {\n            val xs =\
    \ x.toString.map(_.asDigit).sum\n            val ys = y.toString.map(_.asDigit).sum\n\
    \            if (xs == ys) x < y else xs < ys\n        })", "        val map =\
    \ new HashMap[Long, List[Long]]()\n        for (i <- 0 until nums.length) {\n\
    \            val x = nums(i)\n            val sum = sumDigits(x)\n           \
    \ val list = map.getOrElse(sum, List())\n            map.put(sum, list :+ x)\n\
    \        }\n        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        val sorted = nums.sortWith((a, b) => a.toString.map(_.asDigit).sum\
    \ < b.toString.map(_.asDigit).sum)\n        sorted", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        val map = new HashMap[Long, List[Long]]()\n   \
    \     for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List()\n            map(sum) =\
    \ map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))',
  "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", '        nums.sortWith((a, b) =>
    sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        val map = new HashMap[Long, Long]\n        for (i <- 0 until\
    \ nums.length) {\n            val sum = nums(i).toString.map(_.asDigit).sum\n\
    \            map += (i -> sum)\n        }\n        nums.zipWithIndex.sortBy(x\
    \ => (map(x._2), x._2)).map(_._1)", "        nums.sortWith((a, b) => {\n     \
    \       val sumA = sumDigits(a)\n            val sumB = sumDigits(b)\n       \
    \     if (sumA == sumB) a < b else sumA < sumB\n        })", "        val numsWithPoints\
    \ = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(x\
    \ => (x._2, x._1)).map(_._1)", "        nums.sortWith((a, b) => {\n          \
    \  val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = nums(i).toString.map(_.asDigit).sum\n            if\
    \ (!map.contains(sum)) map(sum) = List(nums(i))\n            else map(sum) = map(sum)\
    \ :+ nums(i)\n        }\n        map.toList.sortBy(_._1).flatMap(_._2)", '        nums.sortWith((a,
    b) => sumOfDigits(a) < sumOfDigits(b) || (sumOfDigits(a) == sumOfDigits(b) &&
    nums.indexOf(a) < nums.indexOf(b)))', "        val points = nums.map(x => (x,\
    \ x.toString.map(_.asDigit).sum))\n        points.sortBy(x => (x._2, x._1)).map(_._1)",
  '        nums.sortWith((a, b) => sumOfDigits(a) < sumOfDigits(b) || (sumOfDigits(a)
    == sumOfDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        val map =\
    \ new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length) {\n  \
    \          val sum = sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum)\
    \ = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n        }\n\
    \        val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (key <- keys) {\n            val list = map(key)\n            for\
    \ (i <- 0 until list.length) result += list(i)\n        }\n        result.toList",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (map.contains(sum)) {\n                val old = map(sum)\n  \
    \              map(sum) = old + nums(i) * pow(10, numDigits(nums(i))).toLong\n\
    \            } else {\n                map(sum) = nums(i)\n            }\n   \
    \     }\n        map.toList.sortBy(_._1).map(x => x._2).map(x => {\n         \
    \   var result = List[Long]()\n            while (x > 0) {\n                result\
    \ = (x % 10) :: result\n                x /= 10\n            }\n            result\n\
    \        }).flatten", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a,
    b) => (a.toString.map(_.asDigit).sum, a) < (b.toString.map(_.asDigit).sum, b))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val numsWithPoints = nums.map(x\
    \ => (x, x.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(x => (x._2,\
    \ x._1)).map(_._1)", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        val map = new HashMap[Long, List[Long]]()\n        for (i\
    \ <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n      \
    \      if (!map.contains(sum)) map(sum) = List(nums(i))\n            else map(sum)\
    \ = map(sum) :+ nums(i)\n        }\n        val sortedKeys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (k <- sortedKeys) result = result\
    \ ::: map(k)\n        result", "        nums.sortWith((x, y) => {\n          \
    \  val xSum = x.toString.map(_.asDigit).sum\n            val ySum = y.toString.map(_.asDigit).sum\n\
    \            if (xSum == ySum) x < y else xSum < ySum\n        })", "        val\
    \ map = new HashMap[Long, Long]\n        for (i <- 0 until nums.length) {\n  \
    \          val sum = nums(i).toString.map(x => x.asDigit).sum\n            if\
    \ (map.contains(sum)) {\n                map(sum) = map(sum) * 10 + i\n      \
    \      } else {\n                map(sum) = i\n            }\n        }\n    \
    \    val keys = map.keys.toList.sorted\n        val result = new Array[Long](nums.length)\n\
    \        for (i <- 0 until keys.length) {\n            val index = map(keys(i))\n\
    \            val num = nums(index.toInt)\n            result(i) = num\n      \
    \  }\n        result.toList", "        nums.sortWith((a, b) => {\n           \
    \ val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, Long]\n        for (i <- 0 until nums.length) {\n  \
    \          val sum = nums(i).toString.map(_.asDigit).sum\n            if (map.contains(sum))\
    \ {\n                val old = map(sum)\n                if (old > i) map(sum)\
    \ = i\n            } else map(sum) = i\n        }\n        nums.sortWith((a, b)\
    \ => {\n            val sumA = a.toString.map(_.asDigit).sum\n            val\
    \ sumB = b.toString.map(_.asDigit).sum\n            if (sumA != sumB) sumA < sumB\n\
    \            else map(sumA) < map(sumB)\n        })", "        val points = nums.map(x\
    \ => (x, x.toString.toList.map(x => x.asDigit).sum))\n        points.sortBy(x\
    \ => (x._2, x._1)).map(x => x._1)", "        nums.sortWith((a, b) => {\n     \
    \       val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum != bSum) aSum < bSum else a < b\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val (sumA, sumB) = (sumDigits(a), sumDigits(b))\n     \
    \       if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xs = x.toString.map(_.asDigit).sum\n            val\
    \ ys = y.toString.map(_.asDigit).sum\n            if (xs == ys) x < y else xs\
    \ < ys\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        val map = new HashMap[Long, List[Long]]\n        for (i <-\
    \ 0 until nums.length) {\n            val sum = nums(i).toString.map(_.asDigit).sum\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", "        nums.sortWith((a, b) => {\n        \
    \    val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) result = result ::: map(key)\n        result", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        val map = new HashMap[Long, List[Long]]\n     \
    \   for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]\n        for (key <- keys) {\n    \
    \        val list = map(key)\n            for (i <- 0 until list.length) result\
    \ += list(i)\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (i <- 0 until nums.length) {\n            val sum =\
    \ sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum) = List(nums(i))\n\
    \            else map(sum) = map(sum) :+ nums(i)\n        }\n        val keys\
    \ = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n      \
    \  for (key <- keys) {\n            result ++= map(key)\n        }\n        result.toList",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) ==
    sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        // Write\
    \ your code here\n        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", '        nums.sortWith((a, b) =>
    sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', '        nums.sortWith((x, y) => (x.toString.map(_.asDigit).sum,
    x) < (y.toString.map(_.asDigit).sum, y))', "        val map = new HashMap[Long,\
    \ List[Long]]()\n        for (num <- nums) {\n            val sum = sumDigits(num)\n\
    \            if (!map.contains(sum)) map(sum) = List()\n            map(sum) =\
    \ map(sum) :+ num\n        }\n        val keys = map.keys.toList.sorted\n    \
    \    val result = new ListBuffer[Long]()\n        for (key <- keys) {\n      \
    \      result ++= map(key)\n        }\n        result.toList", "        val map\
    \ = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length) {\n\
    \            val sum = nums(i).toString.map(_.asDigit).sum\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val sorted = map.keys.toList.sorted\n        var result =\
    \ List[Long]()\n        for (i <- 0 until sorted.length) {\n            val list\
    \ = map(sorted(i))\n            for (j <- 0 until list.length) result = result\
    \ :+ list(j)\n        }\n        result", "        nums.sortWith((a, b) => {\n\
    \            val (a1, b1) = (a.toString.map(_.asDigit).sum, b.toString.map(_.asDigit).sum)\n\
    \            if (a1 == b1) a < b else a1 < b1\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n            val\
    \ sumB = b.toString.map(_.asDigit).sum\n            if (sumA == sumB) a < b else\
    \ sumA < sumB\n        })", "        val map = new HashMap[Long, Long]()\n   \
    \     for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (map.contains(sum)) {\n                map(sum) = map(sum) * 10\
    \ + i\n            } else {\n                map(sum) = i\n            }\n   \
    \     }\n        val sorted = map.toList.sortBy(_._1)\n        val result = new\
    \ Array[Long](nums.length)\n        for (i <- 0 until sorted.length) {\n     \
    \       var index = sorted(i)._2\n            while (index > 0) {\n          \
    \      result(index % 10) = sorted(i)._1\n                index /= 10\n      \
    \      }\n        }\n        result.toList", "        val numsWithPoints = nums.map(x\
    \ => (x, x.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(x => (x._2,\
    \ x._1)).map(_._1)", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val sorted = map.toList.sortBy(_._1)\n        sorted.map(x\
    \ => x._2).flatten", '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum,
    x._2)).map(_._1)', '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', '        nums.sortWith((a,
    b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)', "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)
    == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ numsWithPoints = nums.map(num => (num, num.toString.map(_.asDigit).sum))\n \
    \       numsWithPoints.sortBy(numWithPoints => (numWithPoints._2, numWithPoints._1)).map(_._1)",
  "        val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val list = map.toList.sortBy(_._1)\n        list.map(x =>\
    \ x._2).flatten", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- 0 until nums.length) {\n            val sum = nums(i).toString.map(_.asDigit).sum\n\
    \            if (map.contains(sum)) map(sum) = min(map(sum), nums(i))\n      \
    \      else map(sum) = nums(i)\n        }\n        map.toList.sortBy(_._1).map(_._2)",
  "        val map = new HashMap[Long, List[Long]]()\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) result = result ::: map(key)\n        result", "  \
    \      nums.sortWith((a, b) => {\n            val sumA = sumDigits(a)\n      \
    \      val sumB = sumDigits(b)\n            if (sumA == sumB) {\n            \
    \    nums.indexOf(a) < nums.indexOf(b)\n            } else {\n               \
    \ sumA < sumB\n            }\n        })", "        nums.sortWith((a, b) => {\n\
    \            val aSum = a.toString.map(_.asDigit).sum\n            val bSum =\
    \ b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((x, y) =>\
    \ {\n            val xSum = x.toString.map(_.asDigit).sum\n            val ySum\
    \ = y.toString.map(_.asDigit).sum\n            if (xSum == ySum) x < y else xSum\
    \ < ySum\n        })", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- 0 until nums.length) {\n            val sum = nums(i).toString.map(_.asDigit).sum\n\
    \            if (map.contains(sum)) {\n                val index = map(sum)\n\
    \                if (index > i) map(sum) = i\n            } else map(sum) = i\n\
    \        }\n        val sorted = map.toList.sortBy(_._1)\n        sorted.map(x\
    \ => nums(x._2))", "        val numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val map = new HashMap[Long, List[Long]]()\n\
    \        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List()\n            map(sum) =\
    \ map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        val result = new ListBuffer[Long]()\n        for (key <- keys) result\
    \ ++= map(key)\n        result.toList", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", "        nums.sortWith((a, b) => {\n        \
    \    val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum,
    x._2)).map(_._1)', "        val sums = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        sums.sortBy(x => (x._2, x._1)).map(_._1)", "        val map = new HashMap[Long,\
    \ Long]()\n        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (map.contains(sum)) {\n                map(sum) = map(sum) * 10\
    \ + i\n            } else {\n                map(sum) = i\n            }\n   \
    \     }\n        val sorted = map.toList.sortBy(_._1)\n        sorted.map(x =>\
    \ nums(x._2.toInt))", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- 0 until nums.length) {\n            val sum = nums(i).toString.map(x =>\
    \ x.asDigit).sum\n            map(sum) = nums(i)\n        }\n        map.toList.sortBy(_._1).map(_._2)",
  "        val points = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n      \
    \  points.sortBy(x => (x._2, x._1)).map(_._1)", "        nums.sortWith((a, b)\
    \ => {\n            val aSum = sumDigits(a)\n            val bSum = sumDigits(b)\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val sorted = nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })\n        sorted", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a, b) =>
    sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((x,
    y) => (x.toString.map(_.asDigit).sum, x) < (y.toString.map(_.asDigit).sum, y))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(x => x.asDigit).sum\n            val\
    \ bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum) a <\
    \ b else aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n      \
    \      val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      nums.sortWith((a, b) => {\n            val aSum = a.toString.toList.map(_.asDigit).sum\n\
    \            val bSum = b.toString.toList.map(_.asDigit).sum\n            if (aSum\
    \ == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b)\
    \ => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum
    < b.toString.map(_.asDigit).sum)', "        val map = new HashMap[Long, List[Long]]\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (map.contains(sum)) map(sum) = num :: map(sum)\n            else map(sum)\
    \ = List(num)\n        }\n        val sorted = map.keys.toList.sorted\n      \
    \  val result = new ListBuffer[Long]\n        for (key <- sorted) result ++= map(key)\n\
    \        result.toList", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((a, b) => {\n            val sumA\
    \ = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val points = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n\
    \        points.sortBy(x => (x._2, x._1)).map(_._1)", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xsum = x.toString.map(_.asDigit).sum\n            val\
    \ ysum = y.toString.map(_.asDigit).sum\n            if (xsum == ysum) {\n    \
    \            nums.indexOf(x) < nums.indexOf(y)\n            } else {\n       \
    \         xsum < ysum\n            }\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (i <- 0 until nums.length) {\n            val sum =\
    \ sumDigits(nums(i))\n            if (!map.contains(sum)) map(sum) = List(nums(i))\n\
    \            else map(sum) = map(sum) :+ nums(i)\n        }\n        val keys\
    \ = map.keys.toList.sorted\n        var result = List[Long]()\n        for (key\
    \ <- keys) result = result ::: map(key)\n        result", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        // Write your code here\n    \
    \    nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]\n        for (i <- 0 until nums.length) {\n            val sum =\
    \ nums(i).toString.map(_.asDigit).sum\n            if (!map.contains(sum)) map(sum)\
    \ = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n        }\n\
    \        val keys = map.keys.toList.sorted\n        val result = new ListBuffer[Long]\n\
    \        for (key <- keys) result ++= map(key)\n        result.toList", "    \
    \    nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val map = new HashMap[Long,\
    \ List[Long]]()\n        for (num <- nums) {\n            val sum = sumDigits(num)\n\
    \            if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum)\
    \ = map(sum) :+ num\n        }\n        val keys = map.keys.toList.sorted\n  \
    \      val result = new ListBuffer[Long]()\n        for (key <- keys) result ++=\
    \ map(key)\n        result.toList", "        nums.sortWith((a, b) => {\n     \
    \       val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ points = nums.map(x => (x, x.toString.map(_.asDigit).sum)).sortBy(_._2)\n  \
    \      points.map(_._1)", "        val map = new HashMap[Long, List[Long]]()\n\
    \        for (num <- nums) {\n            val sum = sumDigits(num)\n         \
    \   if (!map.contains(sum)) map(sum) = List(num)\n            else map(sum) =\
    \ map(sum) :+ num\n        }\n        val sorted = map.toList.sortBy(_._1)\n \
    \       sorted.flatMap(_._2)", "        nums.sortWith((a, b) => {\n          \
    \  val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val sorted = map.toList.sortBy(_._1)\n        sorted.flatMap(_._2)",
  '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)',
  "        val map = new HashMap[Long, List[Long]]()\n        for (num <- nums) {\n\
    \            val sum = sumDigits(num)\n            if (!map.contains(sum)) map(sum)\
    \ = List(num)\n            else map(sum) = num :: map(sum)\n        }\n      \
    \  val sorted = map.toList.sortWith((a, b) => a._1 < b._1)\n        sorted.flatMap(x\
    \ => x._2)", "        val map = new HashMap[Long, Long]\n        for (i <- 0 until\
    \ nums.length) {\n            val sum = nums(i).toString.map(x => x.asDigit).sum\n\
    \            map(sum) = nums(i)\n        }\n        map.toList.sortBy(_._1).map(_._2)",
  "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums.length)\
    \ {\n            val num = nums(i)\n            var sum = 0L\n            var\
    \ temp = num\n            while (temp > 0) {\n                sum += temp % 10\n\
    \                temp /= 10\n            }\n            map += (sum -> num)\n\
    \        }\n        map.toList.sortBy(_._1).map(_._2)", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = sumDigits(a)\n            val bSum = sumDigits(b)\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        val map = new HashMap[Long, List[Long]]\n\
    \        for (i <- 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n\
    \            if (!map.contains(sum)) map(sum) = List(nums(i))\n            else\
    \ map(sum) = map(sum) :+ nums(i)\n        }\n        val list = map.toList.sortBy(_._1)\n\
    \        list.map(x => x._2).flatten", "        nums.sortWith((a, b) => {\n  \
    \          val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) result = result ::: map(key)\n        result", "  \
    \      val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until nums.length)\
    \ {\n            val sum = sumDigits(nums(i))\n            if (!map.contains(sum))\
    \ map(sum) = List(nums(i))\n            else map(sum) = map(sum) :+ nums(i)\n\
    \        }\n        val keys = map.keys.toList.sorted\n        var result = List[Long]()\n\
    \        for (key <- keys) result = result ::: map(key)\n        result", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ numsWithPoints = nums.map(n => (n, n.toString.map(_.asDigit).sum))\n       \
    \ numsWithPoints.sortBy(_._2).map(_._1)", "        val map = new HashMap[Long,\
    \ List[Long]]()\n        for (n <- nums) {\n            val sum = sumDigits(n)\n\
    \            if (!map.contains(sum)) map(sum) = List(n)\n            else map(sum)\
    \ = map(sum) :+ n\n        }\n        val sorted = map.keys.toList.sorted\n  \
    \      var result = List[Long]()\n        for (k <- sorted) result = result :::\
    \ map(k)\n        result", '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum
    < b.toString.map(_.asDigit).sum)', "        nums.sortWith((a, b) => {\n      \
    \      val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        val\
    \ numsWithPoints = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n       \
    \ numsWithPoints.sortBy(x => (x._2, x._1)).map(_._1)", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a)
    < nums.indexOf(b)))', '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      val points = nums.map(x => (x, x.toString.map(_.asDigit).sum))\n      \
    \  points.sortBy(x => (x._2, x._1)).map(_._1)", '        nums.sortWith((x, y)
    => (x.toString.map(_.asDigit).sum, x) < (y.toString.map(_.asDigit).sum, y))',
  "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) ==
    sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        val map = new HashMap[Long, List[Long]]\n        for (i <-\
    \ 0 until nums.length) {\n            val sum = sumDigits(nums(i))\n         \
    \   if (!map.contains(sum)) map(sum) = List(nums(i))\n            else map(sum)\
    \ = map(sum) :+ nums(i)\n        }\n        val keys = map.keys.toList.sorted\n\
    \        var result = List[Long]()\n        for (key <- keys) result = result\
    \ ::: map(key)\n        result", "        nums.sortWith((a, b) => {\n        \
    \    val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val sumA = sumDigits(a)\n            val sumB = sumDigits(b)\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", '        nums.sortWith((a,
    b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)', "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        val numsWithPoints = nums.map(x\
    \ => (x, x.toString.map(_.asDigit).sum))\n        numsWithPoints.sortBy(x => (x._2,\
    \ x._1)).map(_._1)"]
stop_tokens:
- "\n    }\n"
