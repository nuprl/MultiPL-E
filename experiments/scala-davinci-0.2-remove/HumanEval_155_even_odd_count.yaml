name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    def evenOddCount(num : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        var evenCount = 0L\n        var oddCount = 0L\n        var\
    \ n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            val digit = n % 10\n     \
    \       if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n \
    \           n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            if (numCopy % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0L\n       \
    \ var oddCount = 0L\n        var temp = num\n        while (temp > 0) {\n    \
    \        if (temp % 2 == 0) evenCount += 1\n            else oddCount += 1\n \
    \           temp /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n    \
    \    var oddCount = 0L\n        var n = num\n        while (n > 0) {\n       \
    \     if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n       \
    \     n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var temp = num\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0\n        var oddCount = 0\n        var temp = num\n\
    \        while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0L\n       \
    \ var oddCount = 0L\n        var n = num\n        while (n > 0) {\n          \
    \  val digit = n % 10\n            if (digit % 2 == 0) evenCount += 1\n      \
    \      else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(c => c.toString.toInt\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(c => c.toString.toInt\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n    \
    \    while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n     \
    \       else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(c => (c - '0') % 2\
    \ == 0).length\n        val oddCount = num.toString.filter(c => (c - '0') % 2\
    \ == 1).length\n        (evenCount, oddCount)", "        var even = 0L\n     \
    \   var odd = 0L\n        var n = num\n        while (n > 0) {\n            if\
    \ (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n   \
    \     }\n        (even, odd)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        val evenCount = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var n = num\n        while (n > 0) {\n    \
    \        if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n    \
    \        n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n \
    \       while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n        \
    \    else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            if (numCopy % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var even = 0L\n        var odd = 0L\n\
    \        var n = num\n        while (n > 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        return\
    \ (even, odd)", "        var evenCount = 0L\n        var oddCount = 0L\n     \
    \   var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        val evenCount = num.toString.filter(x =>\
    \ x.asDigit % 2 == 0).length\n        val oddCount = num.toString.filter(x =>\
    \ x.asDigit % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val evens = num.toString.filter(c => c.asDigit % 2 == 0).length\n     \
    \   val odds = num.toString.filter(c => c.asDigit % 2 == 1).length\n        (evens,\
    \ odds)", "        var evenCount = 0L\n        var oddCount = 0L\n        var\
    \ n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var numCopy = num\n        while (numCopy > 0) {\n            if (numCopy %\
    \ 2 == 0) evenCount += 1\n            else oddCount += 1\n            numCopy\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        return (evenCount, oddCount)", "       \
    \ var even = 0L\n        var odd = 0L\n        var n = num\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        val digits = num.toString.map(_.asDigit)\n\
    \        val evenCount = digits.filter(_ % 2 == 0).length\n        val oddCount\
    \ = digits.filter(_ % 2 == 1).length\n        (evenCount, oddCount)", "      \
    \  var evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n   \
    \     while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n    \
    \        else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n > 0) {\n            if (n\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n    \
    \    var oddCount = 0L\n        var n = num\n        while (n > 0) {\n       \
    \     if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n       \
    \     n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var temp = num\n        while (temp >\
    \ 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0\n        var oddCount = 0\n        var temp = num\n\
    \        while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.toList.filter(x => x.asDigit\
    \ % 2 == 0).length\n        val oddCount = num.toString.toList.filter(x => x.asDigit\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            val digit = numCopy % 10\n       \
    \     if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         numCopy /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ even = 0L\n        var odd = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var temp = num\n   \
    \     while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n    \
    \        else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0L\n       \
    \ var oddCount = 0L\n        var n = num\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ val str = num.toString\n        var evenCount = 0\n        var oddCount = 0\n\
    \        for (i <- 0 until str.length) {\n            val digit = str(i).asDigit\n\
    \            if (digit % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        val evenCount\
    \ = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var temp = num\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0\n        var oddCount = 0\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            if (numCopy % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0L\n       \
    \ var oddCount = 0L\n        var n = num\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ val evenCount = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var temp = num\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0L\n        var oddCount = 0L\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            val digit = numCopy % 10\n       \
    \     if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         numCopy /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var num2 = num\n\
    \        while (num2 > 0) {\n            if (num2 % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            num2 /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        return\
    \ (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount =\
    \ 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0L\n        var\
    \ oddCount = 0L\n        var temp = num\n        while (temp > 0) {\n        \
    \    val digit = temp % 10\n            if (digit % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            val digit =\
    \ n % 10\n            if (digit % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    def helper(num : Long, even : Long, odd : Long) : Tuple2[Long, Long] = {\n\
    \            if (num == 0) (even, odd)\n            else {\n                val\
    \ digit = num % 10\n                if (digit % 2 == 0) helper(num / 10, even\
    \ + 1, odd)\n                else helper(num / 10, even, odd + 1)\n          \
    \  }\n        }\n        helper(num, 0, 0)", "        val digits = num.toString.toList.map(_.asDigit)\n\
    \        (digits.count(_ % 2 == 0), digits.count(_ % 2 == 1))", "        var evenCount\
    \ : Long = 0\n        var oddCount : Long = 0\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var n = num\n      \
    \  while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount : Long = 0\n        var oddCount : Long = 0\n        var\
    \ numCopy : Long = num\n        while (numCopy > 0) {\n            if (numCopy\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            numCopy\
    \ /= 10\n        }\n        return (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var temp = num\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0\n        var oddCount = 0\n        var n = num\n   \
    \     while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val digits = num.toString.map(x => x.asDigit)\n        val evenCount =\
    \ digits.filter(x => x % 2 == 0).length\n        val oddCount = digits.filter(x\
    \ => x % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            if (numCopy % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n > 0) {\n            val\
    \ digit = n % 10\n            if (digit % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val evenCount = num.toString.filter(x => x.asDigit % 2 == 0).length\n \
    \       val oddCount = num.toString.filter(x => x.asDigit % 2 == 1).length\n \
    \       (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0L\n       \
    \ var oddCount = 0L\n        var n = num\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var even = 0L\n        var odd = 0L\n        var n = num\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var temp = num\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0L\n        var oddCount = 0L\n        var numCopy = num\n\
    \        while (numCopy > 0) {\n            if (numCopy % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0L\n      \
    \  var oddCount = 0L\n        var n = num\n        while (n > 0) {\n         \
    \   if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n         \
    \   n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val evenCount = num.toString.filter(x => x.asDigit % 2 == 0).length\n \
    \       val oddCount = num.toString.filter(x => x.asDigit % 2 == 1).length\n \
    \       (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0L\n       \
    \ var oddCount = 0L\n        var n = num\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    val evenCount = num.toString.filter(c => c.toString.toInt % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(c => c.toString.toInt % 2 == 1).length\n\
    \        (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n > 0) {\n            if (n\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        // Solution 1:\n        //\
    \ val str = num.toString\n        // val evenCount = str.filter(c => c.asDigit\
    \ % 2 == 0).length\n        // val oddCount = str.filter(c => c.asDigit % 2 ==\
    \ 1).length\n        // (evenCount, oddCount)\n        // Solution 2:\n      \
    \  // var evenCount = 0\n        // var oddCount = 0\n        // var n = num\n\
    \        // while (n > 0) {\n        //     if (n % 2 == 0) evenCount += 1\n \
    \       //     else oddCount += 1\n        //     n /= 10\n        // }\n    \
    \    // (evenCount, oddCount)\n        // Solution 3:\n        var evenCount =\
    \ 0\n        var oddCount = 0\n        var n = num\n        while (n > 0) {\n\
    \            if ((n & 1) == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n >>= 1\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0\n     \
    \   var oddCount = 0\n        var n = num\n        while (n > 0) {\n         \
    \   if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n         \
    \   n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        return (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n \
    \       while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var temp = num\n        while (temp > 0) {\n            if (temp\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            temp /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0\n        var oddCount = 0\n        var n = num\n   \
    \     while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n\
    \        while (temp > 0) {\n            val digit = temp % 10\n            if\
    \ (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  temp /= 10\n        }\n        return (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        return (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        def helper(num : Long, even\
    \ : Long, odd : Long) : Tuple2[Long, Long] = {\n            if (num == 0) (even,\
    \ odd)\n            else {\n                val digit = num % 10\n           \
    \     if (digit % 2 == 0) helper(num / 10, even + 1, odd)\n                else\
    \ helper(num / 10, even, odd + 1)\n            }\n        }\n        helper(num,\
    \ 0, 0)", "        var evenCount = 0\n        var oddCount = 0\n        var temp\
    \ = num\n        while (temp > 0) {\n            if (temp % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            temp /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n > 0) {\n            if (n\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var temp = num\n        while (temp > 0) {\n     \
    \       if (temp % 2 == 0) evenCount += 1\n            else oddCount += 1\n  \
    \          temp /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n        while\
    \ (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var temp = num\n        while (temp >\
    \ 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n\
    \        while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var temp = num\n        while (temp > 0) {\n            if (temp % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            temp /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var temp = num\n        while (temp > 0) {\n            if (temp\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            temp /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        for (digit <- num.toString) {\n     \
    \       if (digit.toInt % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var n = num\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var numCopy = num\n        while (numCopy\
    \ > 0) {\n            if (numCopy % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            numCopy /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var temp = num\n\
    \        while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var numCopy = num\n        while (numCopy > 0) {\n            if (numCopy %\
    \ 2 == 0) evenCount += 1\n            else oddCount += 1\n            numCopy\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var temp = num\n        while (temp > 0) {\n\
    \            if (temp % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            temp /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n    \
    \    var oddCount = 0L\n        var n = num\n        while (n > 0) {\n       \
    \     if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n       \
    \     n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n \
    \       while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n    \
    \    var oddCount = 0L\n        var temp = num\n        while (temp > 0) {\n \
    \           if (temp % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            temp /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0L\n        var oddCount = 0L\n        var n = num\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n  \
    \      while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0L\n    \
    \    var oddCount = 0L\n        var n = num\n        while (n > 0) {\n       \
    \     if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n       \
    \     n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var temp = num\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0L\n        var oddCount = 0L\n        var n = num\n \
    \       while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n        \
    \    else oddCount += 1\n            n /= 10\n        }\n        return (evenCount,\
    \ oddCount)", "        var evenCount = 0L\n        var oddCount = 0L\n       \
    \ var n = num\n        while (n > 0) {\n            val digit = n % 10\n     \
    \       if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n \
    \           n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0L\n        var oddCount = 0L\n        var n = num\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0\n        var oddCount = 0\n        var temp = num\n      \
    \  while (temp > 0) {\n            if (temp % 2 == 0) evenCount += 1\n       \
    \     else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.toList.filter(x => x.asDigit\
    \ % 2 == 0).length\n        val oddCount = num.toString.toList.filter(x => x.asDigit\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0L\n\
    \        var oddCount = 0L\n        var temp = num\n        while (temp > 0) {\n\
    \            if (temp % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            temp /= 10\n        }\n        (evenCount, oddCount)"]
stop_tokens:
- "\n    }\n"
