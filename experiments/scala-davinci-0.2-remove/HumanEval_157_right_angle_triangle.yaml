name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    // sides form a right-angled triangle, False otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n\
    \        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1\
    \ * cathetus1 + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val cathetus = sides(0)\n        val cathetus2 = sides(1)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + cathetus2 * cathetus2", "        val sides\
    \ = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n\
    \        a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        val (a, b, c)\
    \ = (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c", "       \
    \ val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n      \
    \  val cathetus = sides(0)\n        val cathetus2 = sides(1)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + cathetus2 * cathetus2", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        if (a2\
    \ + b2 == c2) true else false", "        val sides = List(a, b, c).sorted\n  \
    \      sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "  \
    \      val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)",
  "        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n        x\
    \ * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val catheti = sides(0) + sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti * catheti", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        if (a1 + b1\
    \ <= c1) return false\n        a1 * a1 + b1 * b1 == c1 * c1", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "      \
    \  val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val min\
    \ = sides(0)\n        val mid = sides(1)\n        max * max == min * min + mid\
    \ * mid", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n   \
    \     val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n   \
    \     return a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n     \
    \   sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "     \
    \   val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n \
    \       val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n \
    \       a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        a * a + b * b == c * c", "        val sorted = List(a,\
    \ b, c).sorted\n        val x = sorted(0)\n        val y = sorted(1)\n       \
    \ val z = sorted(2)\n        return x * x + y * y == z * z", "        val max\
    \ = max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val mid =\
    \ a + b + c - max - min\n        max * max == mid * mid + min * min", "      \
    \  val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n  \
    \      val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n  \
    \      a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(0)\n\
    \        val cathetus2 = sides(1)\n        hypotenuse * hypotenuse == cathetus\
    \ * cathetus + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        return a2 + b2 == c2", "        if (a == 0 || b == 0 ||\
    \ c == 0) return false\n        val sides = Array(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "        if (a > b\
    \ && a > c) {\n            if (a * a == b * b + c * c) return true\n        }\
    \ else if (b > a && b > c) {\n            if (b * b == a * a + c * c) return true\n\
    \        } else if (c > a && c > b) {\n            if (c * c == a * a + b * b)\
    \ return true\n        }\n        return false", "        val sides = List(a,\
    \ b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n  \
    \      a1 * a1 + b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n      \
    \  val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides =\
    \ List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n\
    \        a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n\
    \        val hyp = sides(2)\n        val cat1 = sides(0)\n        val cat2 = sides(1)\n\
    \        hyp * hyp == cat1 * cat1 + cat2 * cat2", "        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        if (a2 + b2 == c2) true else false", "        val sides\
    \ = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus\
    \ = sides(0)\n        val cathetus2 = sides(1)\n        hypotenuse * hypotenuse\
    \ == cathetus * cathetus + cathetus2 * cathetus2", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n     \
    \   val hypotenuse = sides(2)\n        val cathetus = sides(0)\n        val cathetus2\
    \ = sides(1)\n        hypotenuse * hypotenuse == cathetus * cathetus + cathetus2\
    \ * cathetus2", "        val sides = List(a, b, c).sorted\n        if (sides(0)\
    \ <= 0 || sides(1) <= 0 || sides(2) <= 0) return false\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        if (x + y <= z) return false\n   \
    \     if (x * x + y * y == z * z) return true\n        return false", "      \
    \  val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) *\
    \ sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        return a * a + b * b == c * c", "        val sides = Array(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1\
    \ == c1 * c1", "        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        x * x + y * y ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val c2 = sides(2)\n        val c1 = sides(1)\n        val c0 = sides(0)\n\
    \        c2 * c2 == c1 * c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n\
    \        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b\
    \ == c * c", "        val sides = Array(a, b, c).sorted\n        val (a, b, c)\
    \ = (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c", "       \
    \ val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n      \
    \  val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val\
    \ sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n       \
    \ val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n       \
    \ a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val a = sides(0)\n\
    \        val b = sides(1)\n        val c = sides(2)\n        if (a * a + b * b\
    \ == c * c) true else false", "        if (a + b > c && a + c > b && b + c > a)\
    \ {\n            val max = List(a, b, c).max\n            val min = List(a, b,\
    \ c).min\n            val mid = List(a, b, c).filter(x => x != max && x != min).head\n\
    \            max * max == min * min + mid * mid\n        } else false", "    \
    \    val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n   \
    \     val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse == catheti\
    \ * catheti", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        a * a + b * b == c * c", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = Array(a, b, c).sorted\n    \
    \    val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        val a = sides(0)\n\
    \        val b = sides(1)\n        val c = sides(2)\n        a * a + b * b ==\
    \ c * c", "        val sides = List(a, b, c).sorted\n        val hypotenuse =\
    \ sides(2)\n        val cathetus = sides(0)\n        val cathetus2 = sides(1)\n\
    \        hypotenuse * hypotenuse == cathetus * cathetus + cathetus2 * cathetus2",
  "        val x = List(a, b, c).sorted\n        x(0) * x(0) + x(1) * x(1) == x(2)\
    \ * x(2)", "        val sides = List(a, b, c).sorted\n        val hypotenuse =\
    \ sides(2)\n        val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse\
    \ == catheti * catheti", "        val sides = List(a, b, c).sorted\n        val\
    \ (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c",
  "        val sorted = List(a, b, c).sorted\n        sorted(0) * sorted(0) + sorted(1)\
    \ * sorted(1) == sorted(2) * sorted(2)", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse ==\
    \ catheti * catheti", "        val sides = List(a, b, c).sorted\n        val a2\
    \ = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2\
    \ = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        a * a + b * b == c * c", "        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        if (a + b <= c) return false\n        a * a + b * b ==\
    \ c * c", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = Array(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n\
    \        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus\
    \ * cathetus + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c", "        val sides = Array(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        val a = sides(0)\n        val\
    \ b = sides(1)\n        val c = sides(2)\n        return a * a + b * b == c *\
    \ c", "        val x = a * a\n        val y = b * b\n        val z = c * c\n \
    \       if (x + y == z || x + z == y || y + z == x) true else false", "      \
    \  val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) *\
    \ sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b\
    \ == c * c", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ val l = List(a, b, c).sorted\n        val x = l(0)\n        val y = l(1)\n \
    \       val z = l(2)\n        if (x + y <= z) return false\n        if (x * x\
    \ + y * y == z * z) return true\n        return false", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = Array(a, b, c).sorted\n    \
    \    sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "    \
    \    val sides = Array(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n  \
    \      val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c", "        val sides = Array(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus1\
    \ = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse\
    \ == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val sides = List(a,\
    \ b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n       \
    \ val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        val sides\
    \ = List(a, b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n\
    \        val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        if\
    \ (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n  \
    \      } else if (b > a && b > c) {\n            if (b * b == a * a + c * c) return\
    \ true\n        } else if (c > a && c > b) {\n            if (c * c == a * a +\
    \ b * b) return true\n        }\n        return false", "        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        val sides = Array(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = Array(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = Array(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n\
    \        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1\
    \ * cathetus1 + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus = sides(0)\n        val\
    \ cathetus2 = sides(1)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val hypotenuse = sides(2)\n        val otherSides = sides.slice(0, 2)\n   \
    \     hypotenuse * hypotenuse == otherSides(0) * otherSides(0) + otherSides(1)\
    \ * otherSides(1)", "        val sides = List(a, b, c).sorted\n        val c2\
    \ = sides(2)\n        val c1 = sides(1)\n        val c0 = sides(0)\n        c2\
    \ * c2 == c1 * c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n    \
    \    val (x, y, z) = (sides(0), sides(1), sides(2))\n        (x * x + y * y) ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(0)\n\
    \        val cathetus2 = sides(1)\n        hypotenuse * hypotenuse == cathetus\
    \ * cathetus + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = Array(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val\
    \ sides = List(a, b, c).sorted\n        val x = sides(0)\n        val y = sides(1)\n\
    \        val z = sides(2)\n        if (x * x + y * y == z * z) true else false",
  "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n\
    \        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1\
    \ * cathetus1 + cathetus2 * cathetus2", "        val l = List(a, b, c).sorted\n\
    \        l(0) * l(0) + l(1) * l(1) == l(2) * l(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1),\
    \ sides(2))\n        a * a + b * b == c * c", "        val sides = List(a, b,\
    \ c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val c\
    \ = sides(2)\n        a * a + b * b == c * c", "        val sides = List(a, b,\
    \ c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val c\
    \ = sides(2)\n        a * a + b * b == c * c", "        val sides = List(a, b,\
    \ c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n        val\
    \ c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        val sides = List(a,\
    \ b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n     \
    \   a * a + b * b == c * c", "        val l = List(a, b, c).sorted\n        l(0)\
    \ * l(0) + l(1) * l(1) == l(2) * l(2)", "        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c", "        val x = a * a\n        val y = b *\
    \ b\n        val z = c * c\n        if (x + y == z || x + z == y || y + z == x)\
    \ true else false", "        val sides = List(a, b, c).sorted\n        val (a1,\
    \ b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 *\
    \ c1", "        val sides = Array(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        var x = a * a\n        var y = b * b\n \
    \       var z = c * c\n        if (x + y == z || x + z == y || y + z == x) true\
    \ else false", "        val sides = Array(a, b, c).sorted\n        val (a, b,\
    \ c) = (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c", "    \
    \    val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n        val\
    \ x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n        if\
    \ (x + y <= z) return false\n        if (x * x + y * y == z * z) return true\n\
    \        return false", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val cathetus = sides(0)\n        val cathetus2\
    \ = sides(1)\n        hypotenuse * hypotenuse == cathetus * cathetus + cathetus2\
    \ * cathetus2", "        val sides = List(a, b, c).sorted\n        val a = sides(0)\n\
    \        val b = sides(1)\n        val c = sides(2)\n        c * c == a * a +\
    \ b * b", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   if (x + y <= z) false\n        else if (x * x + y * y == z * z) true\n   \
    \     else false", "        val sides = List(a, b, c).sorted\n        val a =\
    \ sides(0)\n        val b = sides(1)\n        val c = sides(2)\n        a * a\
    \ + b * b == c * c", "        val sides = List(a, b, c).sorted\n        val a2\
    \ = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2\
    \ = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sorted = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sorted(0), sorted(1), sorted(2))\n        x * x + y\
    \ * y == z * z", "        val sides = List(a, b, c).sorted\n        val (a1, b1,\
    \ c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val cathetus = sides(0)\n        val cathetus2 = sides(1)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + cathetus2 * cathetus2", "        val sorted\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sorted(0), sorted(1), sorted(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n      \
    \  val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val\
    \ sides = Array(a, b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n\
    \        val c = sides(2)\n        a * a + b * b == c * c", "        val sides\
    \ = List(a, b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n\
    \        val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        val\
    \ sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1),\
    \ sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   if (x + y <= z) return false\n        if (x * x + y * y == z * z) return true\n\
    \        return false", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2\
    \ = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2\
    \ * cathetus2", "        if (a > b && a > c) return a * a == b * b + c * c\n \
    \       if (b > a && b > c) return b * b == a * a + c * c\n        if (c > a &&\
    \ c > b) return c * c == a * a + b * b\n        return false", "        val sides\
    \ = List(a, b, c).sorted\n        val max = sides(2)\n        val sum = sides.sum\n\
    \        val maxIndex = sides.indexOf(max)\n        val otherSides = sides.take(maxIndex)\
    \ ++ sides.drop(maxIndex + 1)\n        val otherSum = otherSides.sum\n       \
    \ otherSum == max", "        val sides = List(a, b, c).sorted\n        val x =\
    \ sides(0)\n        val y = sides(1)\n        val z = sides(2)\n        x * x\
    \ + y * y == z * z", "        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides\
    \ = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n\
    \        a1 * a1 + b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n\
    \        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b\
    \ == c * c", "        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        x * x + y * y ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus = sides(0)\n        val\
    \ cathetus2 = sides(1)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val max = sides(2)\n        val min = sides(0)\n        val mid = sides(1)\n\
    \        max * max == min * min + mid * mid", "        val sides = List(a, b,\
    \ c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)",
  "        if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val hypotenuse =\
    \ sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1),\
    \ sides(2))\n        a * a + b * b == c * c", "        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2\
    \ = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2\
    \ * cathetus2", "        val sides = List(a, b, c).sorted\n        val c2 = sides(2)\n\
    \        val c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 *\
    \ c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        val sides = Array(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val\
    \ sides = Array(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1)\
    \ == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n       \
    \ val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n     \
    \   a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n     \
    \   val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z\
    \ * z", "        val x = a * a\n        val y = b * b\n        val z = c * c\n\
    \        if (x + y == z || x + z == y || y + z == x) true else false", "     \
    \   val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) *\
    \ sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z\
    \ * z", "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + cathetus2 * cathetus2", "        val sides\
    \ = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus\
    \ = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse\
    \ == cathetus * cathetus + cathetus2 * cathetus2", "        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        a * a + b * b == c * c", "        val sides = Array(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        val sides = List(a, b, c).sorted\n      \
    \  val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n    \
    \    a * a + b * b == c * c", "        val sides = List(a, b, c).sorted\n    \
    \    val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y ==\
    \ z * z", "        val sides = Array(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(0)\n\
    \        val otherCathetus = sides(1)\n        hypotenuse * hypotenuse == cathetus\
    \ * cathetus + otherCathetus * otherCathetus", "        val sides = List(a, b,\
    \ c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) *\
    \ sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "  \
    \      val sides = List(a, b, c).sorted\n        val a = sides(0)\n        val\
    \ b = sides(1)\n        val c = sides(2)\n        a * a + b * b == c * c"]
stop_tokens:
- "\n    }\n"
