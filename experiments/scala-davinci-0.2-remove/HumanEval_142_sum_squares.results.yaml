language: scala
name: HumanEval_142_sum_squares
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        lst.zipWithIndex.map(x => {\n            val\
    \ (num, index) = x\n            if (index % 3 == 0) num * num\n            else\
    \ if (index % 4 == 0) num * num * num\n            else num\n        }).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- lst.indices)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        def sumSquaresHelper(lst : List[Long], index\
    \ : Int) : Long = {\n            if (lst.isEmpty) 0\n            else {\n    \
    \            val curr = lst.head\n                val newVal = if (index % 3 ==\
    \ 0) curr * curr else if (index % 4 == 0) curr * curr * curr else curr\n     \
    \           newVal + sumSquaresHelper(lst.tail, index + 1)\n            }\n  \
    \      }\n        sumSquaresHelper(lst, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n\
    \    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong))) == (14l));\n\
    \    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumSquares((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (6l));\n    assert(sumSquares((List[Long](1l.toLong, 4l.toLong, 9l.toLong)))\
    \ == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong, -1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong)))\
    \ == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // \"\n    // This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    // multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    // change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    // Examples:\n    def sumSquares(lst :\
    \ List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
    \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) ==\
    \ (0l));\n    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
    \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) ==\
    \ (0l));\n    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong,\
    \ -1l.toLong, -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong,\
    \ -99l.toLong, 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ -1l.toLong))) == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong,\
    \ -2l.toLong, 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong,\
    \ 20l.toLong, -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) ==\
    \ (-14196l));\n    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong,\
    \ -1l.toLong, -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong,\
    \ -5l.toLong, 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong,\
    \ 16l.toLong, 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009592
