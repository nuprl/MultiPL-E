name: HumanEval_112_reverse_delete
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n    // then check if the\
  \ result string is palindrome.\n    // A string is called palindrome if it reads\
  \ the same backward as forward.\n    // You should return a tuple containing the\
  \ result string and True/False for the check.\n    // Example\n    def reverseDelete(s\
  \ : String, c : String) : Tuple2[String, Boolean] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
  abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
  ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
  ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"),\
  \ (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\"\
  )).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"\
  abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\"\
  , true))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        var result = s\n        for\
    \ (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        var check = true\n        for (i <- 0 until result.length\
    \ / 2) {\n            if (result(i) != result(result.length - 1 - i)) {\n    \
    \            check = false\n            }\n        }\n        return (result,\
    \ check)", "        val sb = new StringBuilder\n        for (i <- 0 until s.length)\
    \ {\n            if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val\
    \ result = sb.toString\n        (result, result == result.reverse)", "       \
    \ val result = s.filter(!c.contains(_))\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val palindrome = result.reverse\
    \ == result\n        (result, palindrome)", "        val result = s.filter(x =>\
    \ !c.contains(x))\n        val result2 = result.reverse\n        return (result,\
    \ result == result2)", "        val sb = new StringBuilder\n        for (i <-\
    \ 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n  \
    \      }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n        (s2,\
    \ s2 == s3)", "        val sb = new StringBuilder\n        for (i <- 0 until s.length)\
    \ {\n            if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val\
    \ res = sb.toString\n        (res, res == res.reverse)", "        val sb = new\
    \ StringBuilder\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ sb.append(s(i))\n        }\n        val res = sb.toString\n        val isPalindrome\
    \ = res == res.reverse\n        (res, isPalindrome)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        (res, res == res.reverse)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.reverse == result\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 = sb.toString\n\
    \        (s2, s2 == s2.reverse)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val result = s.filter(!c.contains(_))\n\
    \        return (result, result == result.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)", "        val\
    \ result = s.filter(x => !c.contains(x))\n        (result, result == result.reverse)",
  "        val s1 = s.filterNot(c.contains(_))\n        val s2 = s1.reverse\n    \
    \    (s1, s1 == s2)", "        val sb = new StringBuilder\n        for (i <- 0\
    \ until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n    \
    \    }\n        val res = sb.toString\n        (res, res == res.reverse)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        val s3 = s2.reverse\n        (s2, s2 == s3)", "       \
    \ // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val t = sb.toString\n        (t, t == t.reverse)", "     \
    \   val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n      \
    \      if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        val isPalindrome = res == res.reverse\n        (res, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        val palindrome = res == res.reverse\n        (res, palindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val s1 = s.filter(x => !c.contains(x))\n        val s2 = s1.reverse\n \
    \       if (s1 == s2) return (s1, true)\n        else return (s1, false)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        val s3 = s2.reverse\n        return (s2, s2 == s3)", " \
    \       val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        (result, isPalindrome)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result = sb.toString\n\
    \        val isPalindrome = result == result.reverse\n        (result, isPalindrome)",
  "        val sb = new StringBuilder()\n        for (i <- 0 until s.length) {\n \
    \           if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result\
    \ = sb.toString\n        val isPalindrome = result == result.reverse\n       \
    \ (result, isPalindrome)", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val t = sb.toString\n        (t, t == t.reverse)", "     \
    \   val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        val s3 = s2.reverse\n        (s2, s2 == s3)", "       \
    \ val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n        \
    \    if (!c.contains(s(i))) sb.append(s(i))\n        }\n        (sb.toString,\
    \ sb.toString == sb.toString.reverse)", "        val result = s.filter(x => !c.contains(x))\n\
    \        return (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filter(!c.contains(_))\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        val s3 = s2.reverse\n        (s2, s2 == s3)", "       \
    \ val sb = new StringBuilder\n        s.foreach(x => if (!c.contains(x)) sb.append(x))\n\
    \        val result = sb.toString\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val result2 = result.reverse\n\
    \        return (result, result == result2)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)", "    \
    \    val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n     \
    \       if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result\
    \ = sb.toString\n        val isPalindrome = result == result.reverse\n       \
    \ (result, isPalindrome)", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val sb2 =\
    \ new StringBuilder\n        for (i <- 0 until sb.length) {\n            sb2.append(sb(sb.length\
    \ - 1 - i))\n        }\n        (sb.toString, sb.toString == sb2.toString)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res\
    \ = sb.toString\n        (res, res == res.reverse)", "        val s1 = s.filterNot(c.contains(_))\n\
    \        val s2 = s1.reverse\n        if (s1 == s2) (s1, true) else (s1, false)",
  "        val s1 = s.filter(x => !c.contains(x))\n        val s2 = s1.reverse\n \
    \       return (s1, s1 == s2)", "        val result = s.filter(x => !c.contains(x))\n\
    \        (result, result == result.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val sb = new StringBuilder\n      \
    \  for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)", " \
    \       val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        (result, isPalindrome)", "        //\
    \ Write your code here\n        val result = s.filter(x => !c.contains(x))\n \
    \       val palindrome = result.equals(result.reverse)\n        (result, palindrome)",
  "        // Write your code here\n        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        (result, isPalindrome)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result = sb.toString\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val isPalindrome = res == res.reverse\n\
    \        (res, isPalindrome)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.reverse == result\n  \
    \      (result, isPalindrome)", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)", " \
    \       var result = s\n        for (i <- 0 until c.length) {\n            result\
    \ = result.replaceAll(c(i).toString, \"\")\n        }\n        return (result,\
    \ result == result.reverse)", "        val sb = new StringBuilder(s)\n       \
    \ for (i <- 0 until sb.length) {\n            if (c.contains(sb(i))) {\n     \
    \           sb.deleteCharAt(i)\n                i -= 1\n            }\n      \
    \  }\n        (sb.toString, sb.toString == sb.reverse.toString)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        val pal = res == res.reverse\n        (res, pal)", "        val sb =\
    \ new StringBuilder\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ sb.append(s(i))\n        }\n        val result = sb.toString\n        (result,\
    \ result == result.reverse)", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)", " \
    \       val result = s.filter(x => !c.contains(x))\n        val result2 = result.reverse\n\
    \        (result, result == result2)", "        val sb = new StringBuilder\n \
    \       for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n      \
    \  (s2, s2 == s3)", "        val result = s.filter(x => !c.contains(x))\n    \
    \    val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        s.foreach(x => if (!c.contains(x)) sb.append(x))\n        val result\
    \ = sb.toString\n        (result, result == result.reverse)", "        val sb\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ sb.append(s(i))\n        }\n        val str = sb.toString\n        (str, str\
    \ == str.reverse)", "        val sb = new StringBuilder\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n        }\n\
    \        (sb.toString, sb.toString == sb.toString.reverse)", "        val sb =\
    \ new StringBuilder\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ sb.append(s(i))\n        }\n        val result = sb.toString\n        val isPalindrome\
    \ = result == result.reverse\n        (result, isPalindrome)", "        val sb\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ sb.append(s(i))\n        }\n        val res = sb.toString\n        (res, res\
    \ == res.reverse)", "        val result = s.filterNot(c.contains(_))\n       \
    \ (result, result == result.reverse)", "        val sb = new StringBuilder\n \
    \       for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val palindrome = result.reverse\
    \ == result\n        (result, palindrome)", "        val result = s.filter(x =>\
    \ !c.contains(x))\n        (result, result == result.reverse)", "        // Write\
    \ your code here\n        val s1 = s.filter(ch => !c.contains(ch))\n        val\
    \ s2 = s1.reverse\n        (s1, s1 == s2)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val resultReverse =\
    \ result.reverse\n        val isPalindrome = result == resultReverse\n       \
    \ return (result, isPalindrome)", "        val sb = new StringBuilder\n      \
    \  for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val sb2 = new StringBuilder\n        for (i <- 0 until sb.length)\
    \ {\n            sb2.append(sb(sb.length - 1 - i))\n        }\n        (sb.toString,\
    \ sb.toString == sb2.toString)", "        val s1 = s.filter(!c.contains(_))\n\
    \        val s2 = s1.reverse\n        (s1, s1 == s2)", "        // Write your\
    \ code here\n        return (s, true)", "        // Write your code here\n   \
    \     val result = s.filter(x => !c.contains(x))\n        (result, result == result.reverse)",
  "        // Write your code here\n        return null", "        val result = s.filter(x\
    \ => !c.contains(x))\n        (result, result == result.reverse)", "        val\
    \ result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val palindrome = result.reverse == result\n        (result, palindrome)",
  "        val sb = new StringBuilder(s)\n        for (i <- 0 until sb.length) {\n\
    \            if (c.contains(sb(i))) {\n                sb.deleteCharAt(i)\n  \
    \              i -= 1\n            }\n        }\n        val sb2 = new StringBuilder(sb.toString)\n\
    \        sb2.reverse\n        (sb.toString, sb.toString == sb2.toString)", " \
    \       val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.reverse == result\n        (result, isPalindrome)", "        val result\
    \ = s.filter(x => !c.contains(x))\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        (result, isPalindrome)", "        val\
    \ s1 = s.filter(x => !c.contains(x))\n        val s2 = s1.reverse\n        return\
    \ (s1, s1 == s2)", "        val result = s.filter(x => !c.contains(x))\n     \
    \   val isPalindrome = result.reverse == result\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        val isPalindrome = res == res.reverse\n        (res, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result\
    \ = sb.toString\n        return (result, result == result.reverse)", "       \
    \ val s2 = s.filter(x => !c.contains(x))\n        val s3 = s2.reverse\n      \
    \  return (s2, s2 == s3)", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n      \
    \  (s2, s2 == s3)", "        val s1 = s.filter(x => !c.contains(x))\n        (s1,\
    \ s1 == s1.reverse)", "        val result = s.filterNot(c.contains(_))\n     \
    \   val isPalindrome = result == result.reverse\n        (result, isPalindrome)",
  "        val s1 = s.filter(x => !c.contains(x))\n        val s2 = s1.reverse\n \
    \       return (s1, s1 == s2)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val palindrome = result.equals(result.reverse)\n        return (result,\
    \ palindrome)", "        val sb = new StringBuilder(s)\n        for (i <- 0 until\
    \ sb.length) {\n            if (c.contains(sb(i))) {\n                sb.deleteCharAt(i)\n\
    \                i -= 1\n            }\n        }\n        val s2 = sb.toString\n\
    \        (s2, s2 == s2.reverse)", "        val sb = new StringBuilder\n      \
    \  for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        val isPalindrome = res == res.reverse\n        (res, isPalindrome)",
  "        val result = s.filter(!c.contains(_))\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val check = result.equals(result.reverse)\n\
    \        (result, check)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.reverse == result\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        val palindrome = res == res.reverse\n        (res, palindrome)",
  "        var result = s\n        for (i <- 0 until c.length) {\n            result\
    \ = result.replaceAll(c(i).toString, \"\")\n        }\n        return (result,\
    \ result == result.reverse)", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val isPalindrome = res == res.reverse\n\
    \        (res, isPalindrome)", "        val result = s.filter(x => !c.contains(x))\n\
    \        (result, result == result.reverse)", "        val result = s.filter(x\
    \ => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val sb = new StringBuilder\n      \
    \  for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        val isPalindrome = res == res.reverse\n        (res, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result\
    \ = sb.toString\n        return (result, result == result.reverse)", "       \
    \ val s_ = s.filter(x => !c.contains(x))\n        (s_, s_ == s_.reverse)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        val s3 = s2.reverse\n        (s2, s2 == s3)", "       \
    \ val result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.reverse\
    \ == result\n        (result, isPalindrome)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val t = sb.toString\n        (t, t == t.reverse)", "     \
    \   // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val str = sb.toString\n        val res = str.reverse == str\n\
    \        (str, res)", "        // Write your code here\n        var result = s\n\
    \        for (i <- 0 until c.length) {\n            result = result.replaceAll(c(i).toString,\
    \ \"\")\n        }\n        return (result, result == result.reverse)", "    \
    \    val result = s.filter(!c.contains(_))\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val result2 = result.reverse\n\
    \        val result3 = result == result2\n        return (result, result3)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val result\
    \ = sb.toString\n        val isPalindrome = result == result.reverse\n       \
    \ (result, isPalindrome)", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n      \
    \  (s2, s2 == s3)", "        val sb = new StringBuilder\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n        }\n\
    \        val result = sb.toString\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        (s2, s2 == s2.reverse)", "        val r = s.filterNot(c.contains(_))\n\
    \        (r, r == r.reverse)", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val isPalindrome = res == res.reverse\n\
    \        (res, isPalindrome)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val palindrome = result.equals(result.reverse)\n        (result, palindrome)",
  "        val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        var result = s\n        for (i <- 0 until c.length) {\n            result\
    \ = result.replaceAll(c(i).toString, \"\")\n        }\n        return (result,\
    \ result == result.reverse)", "        // Write your code here\n        val result\
    \ = s.filterNot(c.contains(_))\n        (result, result == result.reverse)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res\
    \ = sb.toString\n        (res, res == res.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        return (res, res == res.reverse)",
  "        val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        return (result, isPalindrome)", "   \
    \     val result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val result = s.filter(x => !c.contains(x))\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        return (result, isPalindrome)", "   \
    \     val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n    \
    \        if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)", "        val r = s.filter(!c.contains(_))\n\
    \        (r, r == r.reverse)", "        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        s.foreach(ch => if (!c.contains(ch))\
    \ sb.append(ch))\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)",
  "        val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        val result = s.filter(x => !c.contains(x))\n        val isPalindrome =\
    \ result.equals(result.reverse)\n        (result, isPalindrome)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 = sb.toString\n\
    \        val s3 = s2.reverse\n        (s2, s2 == s3)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)", "    \
    \    val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n     \
    \       if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        (res, res == res.reverse)", "        val sb = new StringBuilder\n   \
    \     for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n      \
    \  (s2, s2 == s3)", "        val sb = new StringBuilder\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n        }\n\
    \        val s2 = sb.toString\n        (s2, s2 == s2.reverse)", "        val result\
    \ = s.filter(x => !c.contains(x))\n        val palindrome = result.equals(result.reverse)\n\
    \        (result, palindrome)", "        val s_ = s.filter(x => !c.contains(x))\n\
    \        val s_rev = s_.reverse\n        return (s_, s_ == s_rev)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        val isPalindrome = res == res.reverse\n        (res, isPalindrome)",
  "        // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        (result, result == result.reverse)", "        val s1 = s.filter(x =>\
    \ !c.contains(x))\n        val s2 = s1.reverse\n        if (s1 == s2) (s1, true)\
    \ else (s1, false)", "        val sb = new StringBuilder(s)\n        for (i <-\
    \ 0 until sb.length) {\n            if (c.contains(sb(i))) {\n               \
    \ sb.deleteCharAt(i)\n                i -= 1\n            }\n        }\n     \
    \   val result = sb.toString\n        return (result, result == result.reverse)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        (s2, s2 == s2.reverse)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)",
  "        val sb = new StringBuilder(s)\n        for (i <- 0 until sb.length) {\n\
    \            if (c.contains(sb(i))) {\n                sb.deleteCharAt(i)\n  \
    \              i -= 1\n            }\n        }\n        (sb.toString, sb.toString\
    \ == sb.reverse.toString)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.reverse == result\n        (result, isPalindrome)",
  "        // Write your code here\n        // Return a tuple containing the result\
    \ string and True/False for the check.\n        // Example\n        // reverseDelete(\"\
    abacaba\", \"b\") = (\"aca\", True)\n        // reverseDelete(\"abacaba\", \"\
    c\") = (\"ababa\", True)\n        // reverseDelete(\"abacaba\", \"a\") = (\"bcbcb\"\
    , False)\n        // reverseDelete(\"abacaba\", \"ab\") = (\"c\", True)\n    \
    \    // reverseDelete(\"abacaba\", \"ba\") = (\"c\", True)\n        // reverseDelete(\"\
    abacaba\", \"abc\") = (\"\", True)\n        // reverseDelete(\"abacaba\", \"\"\
    ) = (\"abacaba\", True)\n        // reverseDelete(\"\", \"ab\") = (\"\", True)\n\
    \        // reverseDelete(\"\", \"\") = (\"\", True)\n        // reverseDelete(\"\
    abacaba\", \"abacaba\") = (\"\", True)\n        // reverseDelete(\"abacaba\",\
    \ \"acb\") = (\"abab\", True)\n        // reverseDelete(\"abacaba\", \"bac\")\
    \ = (\"abab\", True)\n        // reverseDelete(\"abacaba\", \"cab\") = (\"abab\"\
    , True)\n        // reverseDelete(\"abacaba\", \"abc\") = (\"\", True)\n     \
    \   // reverseDelete(\"abacaba\", \"acb\") = (\"abab\", True)\n        // reverseDelete(\"\
    abacaba\", \"bac\") = (\"abab\", True)\n        // reverseDelete(\"abacaba\",\
    \ \"cab\") = (\"abab\", True)\n        // reverseDelete(\"abacaba\", \"abc\")\
    \ = (\"\", True)\n        // reverseDelete(\"abacaba\", \"acb\") = (\"abab\",\
    \ True)\n        // reverseDelete(\"abacaba\", \"bac\") = (\"abab\", True)\n \
    \       // reverseDelete(\"abacaba\", \"cab\") = (\"abab\", True)\n        //\
    \ reverseDelete(\"abacaba\", \"abc\") = (\"\", True)\n        // reverseDelete(\"\
    abacaba\", \"acb\") = (\"abab\", True)\n        // reverseDelete(\"abacaba\",\
    \ \"bac\") = (\"abab\", True)\n        // reverseDelete(\"abacaba\", \"cab", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res\
    \ = sb.toString\n        val isPalindrome = res == res.reverse\n        (res,\
    \ isPalindrome)", "        val s1 = s.filter(x => !c.contains(x))\n        val\
    \ s2 = s1.reverse\n        (s1, s1 == s2)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)", "    \
    \    val result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.equals(result.reverse)\n\
    \        (result, isPalindrome)", "        val sb = new StringBuilder\n      \
    \  for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        (sb.toString, sb.toString == sb.toString.reverse)", "    \
    \    val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n     \
    \       if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        (res, res == res.reverse)", "        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)", "        // Write your code here\n\
    \        val result = s.filter(x => !c.contains(x))\n        val isPalindrome\
    \ = result.equals(result.reverse)\n        (result, isPalindrome)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 = sb.toString\n\
    \        (s2, s2 == s2.reverse)", "        // Write your code here\n        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res = sb.toString\n\
    \        (res, res == res.reverse)", "        val result = s.filter(!c.contains(_))\n\
    \        (result, result == result.reverse)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        (res, res == res.reverse)",
  "        val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        val s1 = s.filterNot(c.contains(_))\n        val s2 = s1.reverse\n    \
    \    (s1, s1 == s2)", "        val sb = new StringBuilder\n        for (i <- 0\
    \ until s.length) {\n            if (!c.contains(s(i))) {\n                sb.append(s(i))\n\
    \            }\n        }\n        val s2 = sb.toString\n        val s3 = s2.reverse\n\
    \        return (s2, s2 == s3)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 =\
    \ sb.toString\n        val s3 = s2.reverse\n        (s2, s2 == s3)", "       \
    \ val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)",
  "        // Write your code here\n        val sb = new StringBuilder\n        for\
    \ (i <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)", " \
    \       val s1 = s.filter(x => !c.contains(x))\n        val s2 = s1.reverse\n\
    \        (s1, s1 == s2)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)",
  "        val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val res =\
    \ sb.toString\n        (res, res == res.reverse)"]
stop_tokens:
- "\n    }\n"
