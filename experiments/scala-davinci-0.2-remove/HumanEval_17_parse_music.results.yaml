language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var count = 0\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                beats += 4\n                count\
    \ += 4\n            }\n            else if (c == '|') {\n                beats\
    \ += count\n                count = 0\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpya1osk22.scala:29)\n\tat Problem.main(tmpya1osk22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val result\
    \ = new ListBuffer[Long]\n        for (c <- music_string) {\n            if (c\
    \ == 'o') result += 4\n            else if (c == '|') result(result.length - 1)\
    \ += 2\n            else if (c == '.') result(result.length - 1) += 1\n      \
    \  }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp1t9csdwt.scala:16)\n\tat Problem$.parseMusic$$anonfun$adapted$1(tmp1t9csdwt.scala:17)\n\
    \tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\tat\
    \ Problem$.parseMusic(tmp1t9csdwt.scala:17)\n\tat Problem$.main(tmp1t9csdwt.scala:23)\n\
    \tat Problem.main(tmp1t9csdwt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunne"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note == \"o\") 4\n            else if (note == \"o|\") 2\n  \
    \          else if (note == \".|\") 1\n            else 0\n        })\n      \
    \  beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9v_pm5n.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note == \"o\") 4\n            else if (note == \"o|\") 2\n  \
    \          else if (note == \".|\") 1\n            else 0\n        })\n      \
    \  beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9v_pm5n.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // TODO: Implement\
    \ this function\n        return List()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7dj41dpj.scala:17)\n\tat Problem.main(tmp7dj41dpj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_s55e90.scala:20)\n\tat Problem.main(tmp2_s55e90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o\")) {\n          \
    \      beats += 4\n            } else if (note.contains(\"|\")) {\n          \
    \      beats += 2\n            } else {\n                beats += 1\n        \
    \    }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mt1d__f.scala:26)\n\tat Problem.main(tmp8mt1d__f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' | '|' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 1\n                }\n                case _ => {}\n    \
    \        }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpznumjazz.scala:35)\n\tat Problem.main(tmpznumjazz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // Fill in\
    \ your code here\n        val map = Map('o' -> 4, '.' -> 1, '|' -> 0)\n      \
    \  music_string.split(\" \").map(x => x.map(map(_)).sum).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl373r1lo.scala:14:60\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x.map(map(_)).sum).toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m  \
    \      Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note == \"o\") 4\n            else if (note == \"o|\") 2\n            else\
    \ if (note == \".|\") 1\n            else 0\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1u54kve.scala:21)\n\tat Problem.main(tmpt1u54kve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' | '|' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 1\n                }\n                case _ => {\n     \
    \               // do nothing\n                }\n            }\n        }\n \
    \       beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiq_7af9b.scala:37)\n\tat Problem.main(tmpiq_7af9b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        var result = List[Long]()\n        for (note\
    \ <- notes) {\n            if (note == \"o\") result = result :+ 4\n         \
    \   else if (note == \"o|\") result = result :+ 2\n            else if (note ==\
    \ \".|\") result = result :+ 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n     \
    \       else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028711
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == '.') {\n\
    \                result = result :+ 1\n                i += 2\n            } else\
    \ if (music_string(i) == 'o') {\n                result = result :+ 2\n      \
    \          i += 2\n            }\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // Your code\
    \ here\n        val beats = ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < music_string.length) {\n            if (music_string(i) == 'o') {\n   \
    \             beats += 4\n                i += 1\n            } else if (music_string(i)\
    \ == '.') {\n                beats += 1\n                i += 2\n            }\
    \ else if (music_string(i) == 'o') {\n                beats += 2\n           \
    \     i += 2\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        var result = List[Long]()\n      \
    \  for (note <- notes) {\n            if (note == \"o\") result = result :+ 4\n\
    \            else if (note == \"o|\") result = result :+ 2\n            else if\
    \ (note == \".|\") result = result :+ 1\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == '.') {\n\
    \                result = result :+ 1\n                i += 2\n            } else\
    \ {\n                result = result :+ 2\n                i += 2\n          \
    \  }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx037ydt5.scala:30)\n\tat Problem.main(tmpx037ydt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note.contains(\"o\")) 4\n            else if (note.contains(\"\
    |\")) 2\n            else 1\n        })\n        beats\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp59b79tww.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' | '|' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 1\n                }\n                case _ => {}\n    \
    \        }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpznumjazz.scala:35)\n\tat Problem.main(tmpznumjazz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_s55e90.scala:20)\n\tat Problem.main(tmp2_s55e90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val result = new ListBuffer[Long]\n     \
    \   for (note <- notes) {\n            if (note == \"o\") result += 4\n      \
    \      else if (note == \"o|\") result += 2\n            else if (note == \".|\"\
    ) result += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var current = 0L\n        for (c <- music_string) {\n\
    \            c match {\n                case 'o' => {\n                    result\
    \ = result :+ current\n                    current = 4\n                }\n  \
    \              case 'o' => {\n                    result = result :+ current\n\
    \                    current = 2\n                }\n                case '.'\
    \ => {\n                    result = result :+ current\n                    current\
    \ = 1\n                }\n                case '|' => {\n                    current\
    \ = 0\n                }\n            }\n        }\n        result = result :+\
    \ current\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7xvtcu72.scala:37)\n\tat Problem.main(tmp7xvtcu72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n\
    \            else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '.') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhoocwb7.scala:23)\n\tat Problem.main(tmpbhoocwb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '.') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhoocwb7.scala:23)\n\tat Problem.main(tmpbhoocwb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note == \"o\") 4\n            else if (note == \"o|\") 2\n  \
    \          else if (note == \".|\") 1\n            else 0\n        })\n      \
    \  beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9v_pm5n.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') result = 4 :: result\n            else if\
    \ (music_string(i) == '.') result = 1 :: result\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_84p1p5h.scala:23)\n\tat Problem.main(tmp_84p1p5h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val beats = new ListBuffer[Long]\n  \
    \      for (note <- notes) {\n            if (note.contains(\"o\")) beats += 4\n\
    \            else if (note.contains(\".\")) beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplvm8nm60.scala:22)\n\tat Problem.main(tmplvm8nm60.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.contains(\"o\")) beats += 4\n      \
    \      else if (note.contains(\"o|\")) beats += 2\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2mso0pof.scala:25)\n\tat Problem.main(tmp2mso0pof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' | '|' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 1\n                }\n                case _ => {\n     \
    \               // Do nothing\n                }\n            }\n        }\n \
    \       beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b4viqr3.scala:37)\n\tat Problem.main(tmp1b4viqr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ music_string.split(\"\\\\|\").map(x => x.length).toList\n        beats\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp721aa70u.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.charAt(0) == 'o') {\n         \
    \       if (note.length == 1) beats += 4\n                else beats += 2\n  \
    \          }\n            else beats += 1\n        }\n        beats.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpkifnx7a6.scala:15)\n\tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\
    \tat Problem$.parseMusic(tmpkifnx7a6.scala:20)\n\tat Problem$.main(tmpkifnx7a6.scala:24)\n\
    \tat Problem.main(tmpkifnx7a6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var curr_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += curr_beat\n       \
    \         curr_beat = 0\n            }\n            else if (c == '|') {\n   \
    \             curr_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzly9pt8.scala:27)\n\tat Problem.main(tmpbzly9pt8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == '.') {\n\
    \                result = result :+ 1\n                i += 2\n            } else\
    \ if (music_string(i) == 'o') {\n                result = result :+ 2\n      \
    \          i += 2\n            }\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                beats += 4\n                beat\
    \ += 4\n            } else if (c == '|') {\n                beats += beat\n  \
    \              beat = 0\n            } else if (c == '.') {\n                beat\
    \ += 1\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuo7go4_.scala:31)\n\tat Problem.main(tmpnuo7go4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => beats += (current_beat\
    \ + 4); current_beat += 4\n                case 'o' | '|' => beats += (current_beat\
    \ + 2); current_beat += 2\n                case '.' | '|' => beats += (current_beat\
    \ + 1); current_beat += 1\n                case _ =>\n            }\n        }\n\
    \        beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvid0l3p7.scala:26)\n\tat Problem.main(tmpvid0l3p7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // TODO: Implement\
    \ this function.\n        // Hint: You can use regular expressions to parse the\
    \ string.\n        // Hint: You can use map function to convert a list of strings\
    \ to a list of integers.\n        // Hint: You can use foldLeft to accumulate\
    \ the sum of all elements in a list.\n        // Hint: You can use toList to convert\
    \ a string to a list of characters.\n        // Hint: You can use toString to\
    \ convert a character to a string.\n        // Hint: You can use zipWithIndex\
    \ to get a list of pairs (character, index).\n        // Hint: You can use filter\
    \ to get a list of elements that satisfy a predicate.\n        // Hint: You can\
    \ use map to convert a list of pairs to a list of integers.\n        // Hint:\
    \ You can use map to convert a list of integers to a list of strings.\n      \
    \  // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint: You can use map to convert a list of strings to a list of integers.\n\
    \        // Hint: You can use map to convert a list of integers to a list of strings.\n\
    \        // Hint\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfotv4ghj.scala:11:57\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mparseMusic\e\
    [0m(\e[36mmusic_string\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \          Found:    Unit\n\e[31m   |\e[0m                                   \
    \                 Required: List[Long]\n\e[31m12 |\e[0m        \e[34m// TODO:\
    \ Implement this function.\e[0m\n\e[31m13 |\e[0m        \e[34m// Hint: You can\
    \ use regular expressions to parse the string.\e[0m\n\e[31m14 |\e[0m        \e\
    [34m// Hint: You can use map function to convert a list of strings to a list of\
    \ integers.\e[0m\n\e[31m15 |\e[0m        \e[34m// Hint: You can use foldLeft to\
    \ accumulate the sum of all elements in a list.\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// Hint: You can use toList to convert a string to a list of characters.\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// Hint: You can use toString to convert a character\
    \ to a string.\e[0m\n\e[31m18 |\e[0m        \e[34m// Hint: You can use zipWithIndex\
    \ to get a list of pairs (character, index).\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ Hint: You can use filter to get a list of elements that satisfy a predicate.\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// Hint: You can use map to convert a list of\
    \ pairs to a list of integers.\e[0m\n\e[31m21 |\e[0m        \e[34m// Hint: You\
    \ can use map to convert a list of integers to a list of strings.\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// Hint: You can use map to convert a list of strings to\
    \ a list of integers.\e[0m\n\e[31m23 |\e[0m        \e[34m// Hint: You can use\
    \ map to convert a list of integers to a list of strings.\e[0m\n\e[31m24 |\e[0m\
    \        \e[34m// Hint: You can use map to convert a list of strings to a list\
    \ of integers.\e[0m\n\e[31m25 |\e[0m        \e[34m// Hint: You can use map to\
    \ convert a list of integers to a list of strings.\e[0m\n\e[31m26 |\e[0m     \
    \   \e[34m// Hint: You can use map to convert a list of strings to a list of integers.\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// Hin"
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val result\
    \ = new ListBuffer[Long]()\n        for (c <- music_string) {\n            c match\
    \ {\n                case 'o' => result += 4\n                case 'o' | '|' =>\
    \ result += 2\n                case '.' | '|' => result += 1\n               \
    \ case _ =>\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdiz4r26i.scala:26)\n\tat Problem.main(tmpdiz4r26i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                beats += 4\n \
    \               i += 1\n            } else if (music_string(i) == '.') {\n   \
    \             beats += 1\n                i += 2\n            } else if (music_string(i)\
    \ == 'o') {\n                beats += 2\n                i += 2\n            }\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.length == 1) {\n                beats\
    \ += 4\n            } else if (note.length == 2) {\n                beats += 2\n\
    \            } else if (note.length == 3) {\n                beats += 1\n    \
    \        }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuu5m_yrm.scala:28)\n\tat Problem.main(tmpuu5m_yrm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string) {\n\
    \            c match {\n                case 'o' => {\n                    beats\
    \ += beat\n                    beat = 0\n                }\n                case\
    \ '.' => beat += 1\n                case '|' => beat += 2\n                case\
    \ _ =>\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeu47ga1q.scala:29)\n\tat Problem.main(tmpeu47ga1q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var count = 0\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                beats += 4\n                count\
    \ += 4\n            }\n            else if (c == '|') {\n                beats\
    \ += count\n                count = 0\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpya1osk22.scala:29)\n\tat Problem.main(tmpya1osk22.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var current = 0L\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                result = result :+ current\n   \
    \             current = 0\n            }\n            else if (c == '.') {\n \
    \               current += 1\n            }\n            else if (c == '|') {\n\
    \                current += 2\n            }\n        }\n        result = result\
    \ :+ current\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_jp6qmv.scala:30)\n\tat Problem.main(tmpj_jp6qmv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                beats += 4\n                beat\
    \ += 4\n            } else if (c == '|') {\n                if (beat % 2 == 0)\
    \ {\n                    beats += 2\n                    beat += 2\n         \
    \       } else {\n                    beats += 1\n                    beat +=\
    \ 1\n                }\n            } else if (c == '.') {\n                beats\
    \ += 1\n                beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeyxyzjht.scala:36)\n\tat Problem.main(tmpeyxyzjht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.toList\n        val beats = ListBuffer[Long]()\n        var i =\
    \ 0\n        while (i < notes.length) {\n            if (notes(i) == 'o') {\n\
    \                beats += 4\n                i += 1\n            } else if (notes(i)\
    \ == 'o' && notes(i + 1) == '|') {\n                beats += 2\n             \
    \   i += 2\n            } else if (notes(i) == '.' && notes(i + 1) == '|') {\n\
    \                beats += 1\n                i += 2\n            }\n        }\n\
    \        beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        for (i <- 0 until music_string.length) {\n         \
    \   if (music_string(i) == 'o') result = 4 :: result\n            else if (music_string(i)\
    \ == '.') result = 1 :: result\n        }\n        result.reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppwglm91i.scala:23)\n\tat Problem.main(tmppwglm91i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (c <- music_string) {\n            c match {\n\
    \                case 'o' => beats += 4\n                case 'o' | '|' => beats\
    \ += 2\n                case '.' | '|' => beats += 1\n                case _ =>\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpes8o7pt7.scala:26)\n\tat Problem.main(tmpes8o7pt7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        for (i <- 0 until music_string.length) {\n         \
    \   if (music_string(i) == 'o') {\n                result = 4 :: result\n    \
    \        } else if (music_string(i) == '.') {\n                result = 1 :: result\n\
    \            } else if (music_string(i) == '|') {\n                result = 2\
    \ :: result\n            }\n        }\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps5iu4xsk.scala:27)\n\tat Problem.main(tmps5iu4xsk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n\
    \            else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       music_string(i) match {\n                case 'o' => beats += 4\n    \
    \            case 'o' => beats += 2\n                case '.' => beats += 1\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpf49lcj4u.scala:17)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpf49lcj4u.scala:19)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.parseMusic(tmpf49lcj4u.scala:19)\n\tat Problem$.main(tmpf49lcj4u.scala:24)\n\
    \tat Problem.main(tmpf49lcj4u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ArrayBuffer[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                beats += 4\n \
    \               i += 1\n            } else if (music_string(i) == '.') {\n   \
    \             beats += 1\n                i += 2\n            } else {\n     \
    \           beats += 2\n                i += 2\n            }\n        }\n   \
    \     beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwt1u0gi0.scala:30)\n\tat Problem.main(tmpwt1u0gi0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028731
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        var result = List[Long]()\n        for (note\
    \ <- notes) {\n            if (note == \"o\") result = 4 :: result\n         \
    \   else if (note == \"o|\") result = 2 :: result\n            else if (note ==\
    \ \".|\") result = 1 :: result\n        }\n        result.reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == '.') {\n\
    \                result = result :+ 1\n                i += 2\n            } else\
    \ {\n                result = result :+ 2\n                i += 2\n          \
    \  }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx037ydt5.scala:30)\n\tat Problem.main(tmpx037ydt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ArrayBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4\n               \
    \ beat += 4\n            } else if (c == 'o' && music_string(music_string.indexOf(c)\
    \ + 1) == '|') {\n                beats += 2\n                beat += 2\n    \
    \        } else if (c == '.' && music_string(music_string.indexOf(c) + 1) == '|')\
    \ {\n                beats += 1\n                beat += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfgcr1os.scala:32)\n\tat Problem.main(tmpvfgcr1os.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += current_beat\n    \
    \            current_beat += 4\n            } else if (c == 'o' || c == '|') {\n\
    \                beats += current_beat\n                current_beat += 2\n  \
    \          } else if (c == '.' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvhnjohv.scala:30)\n\tat Problem.main(tmpnvhnjohv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       val c = music_string(i)\n            if (c == 'o') beats += 4\n      \
    \      else if (c == '.') beats += 1\n            else if (c == '|') beats +=\
    \ 0\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5cst7sf.scala:24)\n\tat Problem.main(tmpp5cst7sf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (c <- music_string) {\n            c match {\n\
    \                case 'o' => beats += 4\n                case 'o' => beats +=\
    \ 2\n                case '.' => beats += 1\n            }\n        }\n      \
    \  beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmp4rt2paa0.scala:17)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmp4rt2paa0.scala:19)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmp4rt2paa0.scala:19)\n\tat Problem$.main(tmp4rt2paa0.scala:24)\n\
    \tat Problem.main(tmp4rt2paa0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\s+\")\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptxf6rkp0.scala:17:11\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m14 |\e[0m            \e[33mif\e[0m (note.contains(\e[31m\"o|\"\
    \e[0m)) \e[31m2\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m\
    \ (note.contains(\e[31m\"o\"\e[0m)) \e[31m4\e[0m\n\e[31m16 |\e[0m            \e\
    [33melse\e[0m \e[31m1\e[0m\n\e[31m17 |\e[0m        }).toList\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\
    \e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028731
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o\")) {\n          \
    \      beats += 4\n            } else if (note.contains(\"|\")) {\n          \
    \      beats += 2\n            } else {\n                beats += 1\n        \
    \    }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mt1d__f.scala:26)\n\tat Problem.main(tmp8mt1d__f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                beats += beat\n\
    \                beat = 0\n            }\n            else if (music_string(i)\
    \ == '|') beat += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_3w9v9s_.scala:25)\n\tat Problem.main(tmp_3w9v9s_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n\
    \            else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o\")) {\n          \
    \      beats += 4\n            } else if (note.contains(\"o|\")) {\n         \
    \       beats += 2\n            } else if (note.contains(\".|\")) {\n        \
    \        beats += 1\n            }\n        }\n        beats.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9bb3hbv.scala:29)\n\tat Problem.main(tmpw9bb3hbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\s+\")\n        val result = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") result += 4\n \
    \           else if (note == \"o|\") result += 2\n            else if (note ==\
    \ \".|\") result += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })\n        beats\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr94q5of8.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ music_string.split(\"\\\\|\").map(x => x.length).toList\n        beats\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp721aa70u.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_s55e90.scala:20)\n\tat Problem.main(tmp2_s55e90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat_count = 0\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4\n               \
    \ beat_count += 4\n            } else if (c == '|') {\n                if (beat_count\
    \ == 4) {\n                    beats(beats.length - 1) = 2\n                 \
    \   beat_count = 2\n                } else if (beat_count == 2) {\n          \
    \          beats(beats.length - 1) = 1\n                    beat_count = 1\n \
    \               } else {\n                    beats += 1\n                   \
    \ beat_count = 1\n                }\n            } else if (c == '.') {\n    \
    \            beats += 1\n                beat_count = 1\n            }\n     \
    \   }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44hjqkgx.scala:39)\n\tat Problem.main(tmp44hjqkgx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += current_beat\n    \
    \            current_beat += 4\n            } else if (c == 'o' || c == '|') {\n\
    \                beats += current_beat\n                current_beat += 2\n  \
    \          } else if (c == '.' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvhnjohv.scala:30)\n\tat Problem.main(tmpnvhnjohv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // Write your\
    \ code here\n        val map = Map('o' -> 4, '.' -> 1, '|' -> 0)\n        music_string.split(\"\
    \\\\|\").map(x => x.map(map(_)).sum).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40viiexi.scala:14:62\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mx\e[0m => x.map(map(_)).sum).toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       music_string(i) match {\n                case 'o' => beats += 4\n    \
    \            case 'o' => beats += 2\n                case '.' => beats += 1\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpf49lcj4u.scala:17)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpf49lcj4u.scala:19)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.parseMusic(tmpf49lcj4u.scala:19)\n\tat Problem$.main(tmpf49lcj4u.scala:24)\n\
    \tat Problem.main(tmpf49lcj4u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o\")) {\n          \
    \      beats += 4\n            } else if (note.contains(\"|\")) {\n          \
    \      beats += 2\n            } else {\n                beats += 1\n        \
    \    }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mt1d__f.scala:26)\n\tat Problem.main(tmp8mt1d__f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val map = Map('o'\
    \ -> 4, 'o' -> 2, '.' -> 1)\n        music_string.split(\" \").map(x => map(x.charAt(0))).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplr33yynu.scala:13:59\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => map(x.charAt(\e[31m0\e[0m))).toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => beats += 4L\n        \
    \        case 'o' | '|' => beats += 2L\n                case '.' | '|' => beats\
    \ += 1L\n                case _ =>\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp984_mj8g.scala:27)\n\tat Problem.main(tmp984_mj8g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                beats += 4\n \
    \               i += 1\n            } else if (music_string(i) == 'o' && music_string(i\
    \ + 1) == '|') {\n                beats += 2\n                i += 2\n       \
    \     } else if (music_string(i) == '.' && music_string(i + 1) == '|') {\n   \
    \             beats += 1\n                i += 2\n            }\n        }\n \
    \       beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += current_beat\n    \
    \            current_beat += 4\n            } else if (c == 'o' || c == '|') {\n\
    \                beats += current_beat\n                current_beat += 2\n  \
    \          } else if (c == '.' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvhnjohv.scala:30)\n\tat Problem.main(tmpnvhnjohv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.charAt(0) == 'o') {\n         \
    \       if (note.length == 1) beats += 4\n                else beats += 2\n  \
    \          }\n            else beats += 1\n        }\n        beats.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpkifnx7a6.scala:15)\n\tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\
    \tat Problem$.parseMusic(tmpkifnx7a6.scala:20)\n\tat Problem$.main(tmpkifnx7a6.scala:24)\n\
    \tat Problem.main(tmpkifnx7a6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var currentBeat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4\n               \
    \ currentBeat += 4\n            } else if (c == 'o' && currentBeat == 0) {\n \
    \               beats += 4\n                currentBeat += 4\n            } else\
    \ if (c == 'o' && currentBeat != 0) {\n                beats += (4 - currentBeat)\n\
    \                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 4) {\n                beats += 0\n                currentBeat = 0\n     \
    \       } else if (c == 'o' && currentBeat == 2) {\n                beats += 2\n\
    \                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 1) {\n                beats += 3\n                currentBeat = 4\n     \
    \       } else if (c == 'o' && currentBeat == 3) {\n                beats += 1\n\
    \                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 5) {\n                beats += -1\n                currentBeat = 4\n    \
    \        } else if (c == 'o' && currentBeat == 6) {\n                beats +=\
    \ -2\n                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 7) {\n                beats += -3\n                currentBeat = 4\n    \
    \        } else if (c == 'o' && currentBeat == 8) {\n                beats +=\
    \ -4\n                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 9) {\n                beats += -5\n                currentBeat = 4\n    \
    \        } else if (c == 'o' && currentBeat == 10) {\n                beats +=\
    \ -6\n                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 11) {\n                beats += -7\n                currentBeat = 4\n   \
    \         } else if (c == 'o' && currentBeat == 12) {\n                beats +=\
    \ -8\n                currentBeat = 4\n            } else if (c == 'o' && currentBeat\
    \ == 13) {\n                beats += -9\n                currentBeat = 4\n   \
    \         } else if (c == 'o' &&\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp76njorkl.scala:63:34 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (c == \e\
    [31m'o'\e[0m &&\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\
    \e[31m   |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp76njorkl.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp76njorkl.scala:73:1 ---------------------\e[0m\e[0m\n\
    \e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp76njorkl.scala:65:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var curr = 0L\n        for (c <- music_string) {\n\
    \            c match {\n                case 'o' => {\n                    beats\
    \ += curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    curr = 0\n                }\n                case\
    \ 'o' => {\n                    beats += curr\n                    curr = 0\n\
    \                }\n                case 'o' => {\n                    beats +=\
    \ curr\n                    cur\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1etng30w.scala:109:0 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1etng30w.scala:98:20\
    \ ------------------------\e[0m\e[0m\n\e[31m98 |\e[0m                    cur\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m           \
    \         Not found: cur\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp1etng30w.scala:100:4\
    \ ---------------------------------------\e[0m\e[0m\n\e[33m100 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m    |\e[0m    ^\e[0m\n\e[33m    |\e[0m    Line is indented too far\
    \ to the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            val len = note.length\n            if (len == 1) 4\n            else\
    \ if (len == 2) 2\n            else 1\n        })\n        beats\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9de_wko.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var count = 0\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                count += 4\n \
    \           } else if (music_string(i) == '|') {\n                result = result\
    \ :+ count\n                count = 0\n            } else {\n                count\
    \ += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe3volnok.scala:28)\n\tat Problem.main(tmpe3volnok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(x => x.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp45s7spib.scala:16)\n\tat Problem.main(tmp45s7spib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => beats += 4L\n        \
    \        case 'o' => beats += 2L\n                case '.' => beats += 1L\n  \
    \              case '|' => current += beats.sum\n                case _ =>\n \
    \           }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfkw9invu.scala:29)\n\tat Problem.main(tmpfkw9invu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        var result = List[Long]()\n        for (note\
    \ <- notes) {\n            if (note == \"o\") result = 4 :: result\n         \
    \   else if (note == \"o|\") result = 2 :: result\n            else if (note ==\
    \ \".|\") result = 1 :: result\n        }\n        result.reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // Your code\
    \ here\n        val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n     \
    \       else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })\n        beats\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr94q5of8.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        notes.map(note => {\n            if (note\
    \ == \"o\") 4\n            else if (note == \"o|\") 2\n            else if (note\
    \ == \".|\") 1\n            else 0\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6fcf_sy8.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m14 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (note == \e[31m\".|\"\e[0m) \e[31m1\e[0m\n\e[31m17 |\e[0m  \
    \          \e[33melse\e[0m \e[31m0\e[0m\n\e[31m18 |\e[0m        }).toList\n\e\
    [31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e\
    [31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var current = 0L\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                current += 4\n\
    \            } else if (music_string(i) == '|') {\n                result = result\
    \ :+ current\n                current = 0\n            } else if (music_string(i)\
    \ == '.') {\n                current += 1\n            }\n        }\n        result\
    \ = result :+ current\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzwdsxtzd.scala:28)\n\tat Problem.main(tmpzwdsxtzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            val\
    \ beats = note.count(c => c == '|')\n            if (beats == 0) 4\n         \
    \   else if (beats == 1) 2\n            else 1\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnrd8g4o.scala:21)\n\tat Problem.main(tmppnrd8g4o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        var current_beat = 0\n        for (i <- 0 until\
    \ music_string.length) {\n            val c = music_string(i)\n            if\
    \ (c == 'o') {\n                beats += current_beat\n                current_beat\
    \ += 4\n            } else if (c == 'o' && music_string(i + 1) == '|') {\n   \
    \             beats += current_beat\n                current_beat += 2\n     \
    \           i += 1\n            } else if (c == '.' && music_string(i + 1) ==\
    \ '|') {\n                beats += current_beat\n                current_beat\
    \ += 1\n                i += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6_sbtt__.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6_sbtt__.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.length == 1) beats += 4\n     \
    \       else if (note.length == 2) beats += 2\n            else beats += 1\n \
    \       }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp062vtuox.scala:22)\n\tat Problem.main(tmp062vtuox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var current_beat = 0L\n        var current_note = 0L\n\
    \        var current_note_duration = 0L\n        for (c <- music_string) {\n \
    \           if (c == 'o') {\n                current_note_duration = 4\n     \
    \       } else if (c == '|') {\n                current_note_duration = current_note_duration\
    \ / 2\n            } else if (c == '.') {\n                current_note_duration\
    \ = current_note_duration / 2\n            } else if (c == ' ') {\n          \
    \      current_note += current_note_duration\n            } else if (c == '\\\
    n') {\n                result = result :+ current_note\n                current_note\
    \ = 0\n            }\n        }\n        result = result :+ current_note\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1o8aevqs.scala:34)\n\tat Problem.main(tmp1o8aevqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        for (c <- music_string) {\n            c match\
    \ {\n                case 'o' => beats += 4\n                case 'o' => beats\
    \ += 2\n                case '.' => beats += 1\n            }\n        }\n   \
    \     beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpnh2v1rox.scala:17)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpnh2v1rox.scala:19)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmpnh2v1rox.scala:19)\n\tat Problem$.main(tmpnh2v1rox.scala:24)\n\
    \tat Problem.main(tmpnh2v1rox.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4L\n              \
    \  current_beat += 4L\n            } else if (c == '|') {\n                beats\
    \ += current_beat\n                current_beat = 0L\n            } else if (c\
    \ == '.') {\n                beats += 1L\n                current_beat += 1L\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2gn8t0ba.scala:31)\n\tat Problem.main(tmp2gn8t0ba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })\n        beats\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr94q5of8.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_s55e90.scala:20)\n\tat Problem.main(tmp2_s55e90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ArrayBuffer[Long]\n     \
    \   for (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n\
    \            else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.contains(\"o\")) {\n               \
    \ beats += 4\n            } else if (note.contains(\"|\")) {\n               \
    \ beats += 2\n            } else {\n                beats += 1\n            }\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphfznj_e.scala:26)\n\tat Problem.main(tmpphfznj_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       music_string(i) match {\n                case 'o' => beats += 4\n    \
    \            case 'o' => beats += 2\n                case '.' => beats += 1\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpf49lcj4u.scala:17)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpf49lcj4u.scala:19)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.parseMusic(tmpf49lcj4u.scala:19)\n\tat Problem$.main(tmpf49lcj4u.scala:24)\n\
    \tat Problem.main(tmpf49lcj4u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val result = ListBuffer[Long]()\n       \
    \ for (note <- notes) {\n            if (note == \"o\") result += 4\n        \
    \    else if (note == \"o|\") result += 2\n            else if (note == \".|\"\
    ) result += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_s55e90.scala:20)\n\tat Problem.main(tmp2_s55e90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (i <- 0 until\
    \ music_string.length) {\n            val c = music_string(i)\n            if\
    \ (c == 'o') {\n                beats += current_beat\n                current_beat\
    \ += 4\n            } else if (c == 'o' && music_string(i + 1) == '|') {\n   \
    \             beats += current_beat\n                current_beat += 2\n     \
    \           i += 1\n            } else if (c == '.' && music_string(i + 1) ==\
    \ '|') {\n                beats += current_beat\n                current_beat\
    \ += 1\n                i += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp98hfk_tc.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp98hfk_tc.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var current_note = \"\"\n        for (c <- music_string)\
    \ {\n            if (c == '|') {\n                result = result :+ current_note.length\n\
    \                current_note = \"\"\n            } else {\n                current_note\
    \ = current_note + c\n            }\n        }\n        result = result :+ current_note.length\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5tde6a4.scala:26)\n\tat Problem.main(tmpp5tde6a4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string) {\n\
    \            c match {\n                case 'o' => {\n                    beats\
    \ += beat\n                    beat = 0\n                }\n                case\
    \ 'o' | '|' => {\n                    beat += 1\n                }\n         \
    \       case '.' => {\n                    beat += 1\n                }\n    \
    \        }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpbom73rsc.scala:25)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpbom73rsc.scala:27)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmpbom73rsc.scala:27)\n\tat Problem$.main(tmpbom73rsc.scala:32)\n\
    \tat Problem.main(tmpbom73rsc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (c <- music_string) {\n            c match {\n\
    \                case 'o' => beats += 4\n                case 'o' | '|' => beats\
    \ += 2\n                case '.' | '|' => beats += 1\n                case _ =>\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpes8o7pt7.scala:26)\n\tat Problem.main(tmpes8o7pt7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (c <- music_string) {\n            c match {\n\
    \                case 'o' => beats += 4\n                case 'o' | '|' => beats\
    \ += 2\n                case '.' | '|' => beats += 1\n                case _ =>\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpes8o7pt7.scala:26)\n\tat Problem.main(tmpes8o7pt7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\s+\")\n        val beats = new ListBuffer[Long]\n \
    \       for (note <- notes) {\n            if (note.contains(\"o\")) beats +=\
    \ 4\n            else if (note.contains(\"|\")) beats += 2\n            else beats\
    \ += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpavhlaiby.scala:22)\n\tat Problem.main(tmpavhlaiby.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var current = 0L\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                current += 4\n            } else\
    \ if (c == '|') {\n                result = result :+ current\n              \
    \  current = 0\n            } else if (c == '.') {\n                current +=\
    \ 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprbdud0rq.scala:28)\n\tat Problem.main(tmprbdud0rq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' | '|' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' | '|' => {\n                    beats += current_beat\n                \
    \    current_beat += 1\n                }\n                case _ => {\n     \
    \               // do nothing\n                }\n            }\n        }\n \
    \       beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiq_7af9b.scala:37)\n\tat Problem.main(tmpiq_7af9b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ListBuffer[Long]\n        var beat_count = 0\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += 4\n               \
    \ beat_count += 4\n            } else if (c == '|') {\n                if (beat_count\
    \ == 0) {\n                    beats += 2\n                    beat_count += 2\n\
    \                } else {\n                    beat_count = 0\n              \
    \  }\n            } else if (c == '.') {\n                beats += 1\n       \
    \         beat_count += 1\n            }\n        }\n        beats.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdfhsw6b0.scala:36)\n\tat Problem.main(tmpdfhsw6b0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028747
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string) {\n\
    \            if (c == 'o') {\n                beats += 4\n                beat\
    \ += 4\n            } else if (c == '|') {\n                beats += beat\n  \
    \              beat = 0\n            } else if (c == '.') {\n                beat\
    \ += 1\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuo7go4_.scala:31)\n\tat Problem.main(tmpnuo7go4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ArrayBuffer[Long]\n     \
    \   for (note <- notes) {\n            if (note == \"o\") beats += 4\n       \
    \     else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028749
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note.contains(\"o|\")) 2\n            else if (note.contains(\"\
    o\")) 4\n            else 1\n        })\n        beats\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr94q5of8.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        beats += current_beat\n                current_beat += 4\n          \
    \  } else if (music_string(i) == 'o' && music_string(i + 1) == '|') {\n      \
    \          beats += current_beat\n                current_beat += 2\n        \
    \        i += 1\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                beats += current_beat\n                current_beat\
    \ += 1\n                i += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxvp1pga.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                i += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxvp1pga.scala:25:18\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028747
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (c <- music_string) {\n            if (c ==\
    \ 'o') beats += 4\n            else if (c == '.') beats += 1\n            else\
    \ if (c == '|') beats(beats.length - 1) += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb1jtagx.scala:23)\n\tat Problem.main(tmpjb1jtagx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val result = new ListBuffer[Long]\n     \
    \   for (note <- notes) {\n            if (note == \"o\") result += 4\n      \
    \      else if (note == \"o|\") result += 2\n            else if (note == \".|\"\
    ) result += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.length == 1) beats += 4\n     \
    \       else beats += note.length - 1\n        }\n        beats.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ggvmans.scala:21)\n\tat Problem.main(tmp4ggvmans.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ : List[Long] = Nil\n        var current_note : Long = 0\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => current_note += 4\n  \
    \              case 'o' => current_note += 2\n                case '.' => current_note\
    \ += 1\n                case '|' => result = current_note :: result; current_note\
    \ = 0\n            }\n        }\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpf1ahl2y4.scala:19)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpf1ahl2y4.scala:21)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmpf1ahl2y4.scala:21)\n\tat Problem$.main(tmpf1ahl2y4.scala:26)\n\
    \tat Problem.main(tmpf1ahl2y4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o|\")) 2\n            else if (note.contains(\"o\")) 4\n  \
    \          else 1\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_s55e90.scala:20)\n\tat Problem.main(tmp2_s55e90.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.charAt(0) == 'o') {\n         \
    \       if (note.length == 1) beats += 4\n                else beats += 2\n  \
    \          }\n            else beats += 1\n        }\n        beats.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmpkifnx7a6.scala:15)\n\tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\
    \tat Problem$.parseMusic(tmpkifnx7a6.scala:20)\n\tat Problem$.main(tmpkifnx7a6.scala:24)\n\
    \tat Problem.main(tmpkifnx7a6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o\")) {\n          \
    \      beats += 4\n            } else if (note.contains(\"o|\")) {\n         \
    \       beats += 2\n            } else if (note.contains(\".|\")) {\n        \
    \        beats += 1\n            }\n        }\n        beats.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9bb3hbv.scala:29)\n\tat Problem.main(tmpw9bb3hbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        var result\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                result = result :+\
    \ 4\n                i += 1\n            } else if (music_string(i) == 'o' &&\
    \ music_string(i + 1) == '|') {\n                result = result :+ 2\n      \
    \          i += 2\n            } else if (music_string(i) == '.' && music_string(i\
    \ + 1) == '|') {\n                result = result :+ 1\n                i += 2\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val map = Map('o'\
    \ -> 4, '|' -> 2, '.' -> 1)\n        music_string.split(\" \").map(x => map(x.charAt(0))).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4pf3ucd2.scala:13:59\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => map(x.charAt(\e[31m0\e[0m))).toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o\")) {\n                if (note.contains(\"|\")) 4 else 2\n\
    \            } else {\n                1\n            }\n        })\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8rhlt_x.scala:22)\n\tat Problem.main(tmpe8rhlt_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat = 0\n             \
    \   }\n                case 'o' | '|' => {\n                    current_beat +=\
    \ 1\n                }\n                case '.' => {\n                    current_beat\
    \ += 1\n                }\n                case _ => {\n                    //\
    \ Do nothing\n                }\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkw1rkw6w.scala:35)\n\tat Problem.main(tmpkw1rkw6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '.') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhoocwb7.scala:23)\n\tat Problem.main(tmpbhoocwb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_string_list\
    \ = music_string.split(\" \").toList\n        val music_list = music_string_list.map(x\
    \ => x.replace(\"o\", \"o|\").replace(\".\", \"|.\"))\n        val music_list_length\
    \ = music_list.map(x => x.length)\n        val music_list_length_sum = music_list_length.foldLeft(0)(_\
    \ + _)\n        val music_list_length_sum_divided = music_list_length_sum / 4\n\
    \        val music_list_length_sum_divided_list = List.fill(music_list_length_sum_divided)(1)\n\
    \        val music_list_length_sum_divided_list_sum = music_list_length_sum_divided_list.foldLeft(0)(_\
    \ + _)\n        val music_list_length_sum_divided_list_sum_divided = music_list_length_sum_divided_list_sum\
    \ / music_list_length_sum_divided\n        val music_list_length_sum_divided_list_sum_divided_list\
    \ = List.fill(music_list_length_sum_divided)(music_list_length_sum_divided_list_sum_divided)\n\
    \        music_list_length_sum_divided_list_sum_divided_list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphdwkhawb.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        music_list_length_sum_divided_list_sum_divided_list\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (music_list_length_sum_divided_list_sum_divided_list\
    \ : List[Int])\n\e[31m   |\e[0mRequired: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note == \"o\") beats += 4\n            else\
    \ if (note == \"o|\") beats += 2\n            else if (note == \".|\") beats +=\
    \ 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '|') beats += 2\n            else if (music_string(i) == '.') beats += 1\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_kjtt9ku.scala:23)\n\tat Problem.main(tmp_kjtt9ku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = notes.map(note => {\n\
    \            if (note == \"o\") 4\n            else if (note == \"o|\") 2\n  \
    \          else if (note == \".|\") 1\n            else 0\n        })\n      \
    \  beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9v_pm5n.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') beats += 4\n            else if (music_string(i)\
    \ == '.') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhoocwb7.scala:23)\n\tat Problem.main(tmpbhoocwb7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = notes.map(note => {\n       \
    \     if (note == \"o\") 4\n            else if (note == \"o|\") 2\n         \
    \   else if (note == \".|\") 1\n            else 0\n        })\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptq_avp1a.scala:19:14\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ArrayBuffer[Long]\n     \
    \   for (note <- notes) {\n            if (note == \"o\") beats += 4\n       \
    \     else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028749
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val result = new ListBuffer[Long]\n     \
    \   for (note <- notes) {\n            if (note == \"o\") result += 4\n      \
    \      else if (note == \"o|\") result += 2\n            else if (note == \".|\"\
    ) result += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            c match {\n                case 'o' => {\n                  \
    \  beats += current_beat\n                    current_beat += 4\n            \
    \    }\n                case 'o' => {\n                    beats += current_beat\n\
    \                    current_beat += 2\n                }\n                case\
    \ '.' => {\n                    beats += current_beat\n                    current_beat\
    \ += 1\n                }\n                case '|' => {\n                   \
    \ current_beat += 1\n                }\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmpmosydcb_.scala:30)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmpmosydcb_.scala:32)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmpmosydcb_.scala:32)\n\tat Problem$.main(tmpmosydcb_.scala:37)\n\
    \tat Problem.main(tmpmosydcb_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // TODO: Implement\
    \ this function\n        val beats = ListBuffer[Long]()\n        var i = 0\n \
    \       while (i < music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                beats += 4\n                i += 1\n            } else\
    \ if (music_string(i) == 'o' && music_string(i + 1) == '|') {\n              \
    \  beats += 2\n                i += 2\n            } else if (music_string(i)\
    \ == '.' && music_string(i + 1) == '|') {\n                beats += 1\n      \
    \          i += 2\n            }\n        }\n        beats.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        // Your code\
    \ here\n        var result = List[Long]()\n        var count = 0\n        for\
    \ (i <- 0 until music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                result = result :+ 4\n                count += 4\n      \
    \      }\n            else if (music_string(i) == '.') {\n                result\
    \ = result :+ 1\n                count += 1\n            }\n            else if\
    \ (music_string(i) == '|') {\n                if (music_string(i - 1) == 'o')\
    \ {\n                    result = result :+ 2\n                    count += 2\n\
    \                }\n                else if (music_string(i - 1) == '.') {\n \
    \                   result = result :+ 0\n                    count += 0\n   \
    \             }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5s8e_bk3.scala:40)\n\tat Problem.main(tmp5s8e_bk3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        val beats = ListBuffer[Long]()\n \
    \       for (note <- notes) {\n            if (note == \"o\") beats += 4\n   \
    \         else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += current_beat\n    \
    \            current_beat += 4\n            } else if (c == 'o' || c == '|') {\n\
    \                beats += current_beat\n                current_beat += 2\n  \
    \          } else if (c == '.' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvhnjohv.scala:30)\n\tat Problem.main(tmpnvhnjohv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \").toList\n        notes.map(note => {\n            if\
    \ (note.contains(\"o\")) {\n                if (note.contains(\"|\")) 4 else 2\n\
    \            } else {\n                1\n            }\n        })\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8rhlt_x.scala:22)\n\tat Problem.main(tmpe8rhlt_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.toList\n        val beats = ListBuffer[Long]()\n        var current_note\
    \ = 0\n        for (note <- notes) {\n            if (note == 'o') {\n       \
    \         beats += 4\n                current_note = 0\n            } else if\
    \ (note == 'o' && current_note == 0) {\n                beats += 2\n         \
    \       current_note = 1\n            } else if (note == '.' && current_note ==\
    \ 1) {\n                beats += 1\n                current_note = 2\n       \
    \     } else if (note == '|' && current_note == 2) {\n                current_note\
    \ = 0\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6nt5kdpw.scala:34)\n\tat Problem.main(tmp6nt5kdpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.contains(\"o\")) {\n               \
    \ beats += 4\n            } else if (note.contains(\"|\")) {\n               \
    \ beats += 2\n            } else {\n                beats += 1\n            }\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphfznj_e.scala:26)\n\tat Problem.main(tmpphfznj_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n        for\
    \ (note <- notes) {\n            if (note.contains(\"o\")) beats += 4\n      \
    \      else if (note.contains(\"|\")) beats += 2\n            else beats += 1\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn9w_kx0n.scala:22)\n\tat Problem.main(tmpn9w_kx0n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note.contains(\"o|\")) beats += 2\n\
    \            else if (note.contains(\"o\")) beats += 4\n            else if (note.contains(\"\
    .|\")) beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var beat = 0L\n        for (c <- music_string) {\n\
    \            c match {\n                case 'o' => {\n                    beats\
    \ += beat\n                    beat = 0\n                }\n                case\
    \ 'o' | '|' => beat += 1\n                case '.' => {\n                    beats\
    \ += beat\n                    beat = 0\n                }\n                case\
    \ _ =>\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplu4et_g_.scala:32)\n\tat Problem.main(tmplu4et_g_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ new ArrayBuffer[Long]\n        var current_beat = 0L\n        for (i <- 0 until\
    \ music_string.length) {\n            music_string(i) match {\n              \
    \  case 'o' => {\n                    beats += current_beat\n                \
    \    current_beat += 4\n                }\n                case 'o' => {\n   \
    \                 beats += current_beat\n                    current_beat += 2\n\
    \                }\n                case '.' => {\n                    beats +=\
    \ current_beat\n                    current_beat += 1\n                }\n   \
    \             case '|' => {\n                    current_beat += 1\n         \
    \       }\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmp2uf2r01v.scala:30)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.parseMusic(tmp2uf2r01v.scala:32)\n\
    \tat Problem$.main(tmp2uf2r01v.scala:37)\n\tat Problem.main(tmp2uf2r01v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val beats =\
    \ ListBuffer[Long]()\n        var current_beat = 0L\n        for (c <- music_string)\
    \ {\n            if (c == 'o') {\n                beats += current_beat\n    \
    \            current_beat += 4\n            } else if (c == 'o' || c == '|') {\n\
    \                beats += current_beat\n                current_beat += 2\n  \
    \          } else if (c == '.' || c == '|') {\n                beats += current_beat\n\
    \                current_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvhnjohv.scala:30)\n\tat Problem.main(tmpnvhnjohv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
