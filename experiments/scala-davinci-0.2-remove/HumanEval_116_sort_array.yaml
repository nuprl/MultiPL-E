name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    def sortArray(arr : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        arr.sortWith((a, b) => {\n            val aones = a.toBinaryString.count(_\
    \ == '1')\n            val bones = b.toBinaryString.count(_ == '1')\n        \
    \    if (aones == bones) a < b else aones < bones\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val xones = x.toBinaryString.filter(_ == '1').length\n\
    \            val yones = y.toBinaryString.filter(_ == '1').length\n          \
    \  if (xones == yones) x < y else xones < yones\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y) => {\n \
    \           val xBinary = x.toBinaryString\n            val yBinary = y.toBinaryString\n\
    \            val xOnes = xBinary.count(_ == '1')\n            val yOnes = yBinary.count(_\
    \ == '1')\n            if (xOnes != yOnes) xOnes < yOnes\n            else x <\
    \ y\n        })", "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val onesA = a.toBinaryString.count(_ == '1')\n        \
    \    val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val xones = x.toBinaryString.count(_ == '1')\n        \
    \    val yones = y.toBinaryString.count(_ == '1')\n            if (xones == yones)\
    \ x < y else xones < yones\n        })", "        arr.sortWith((a, b) => {\n \
    \           val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((x, y) => {\n            val xones = x.toBinaryString.count(_\
    \ == '1')\n            val yones = y.toBinaryString.count(_ == '1')\n        \
    \    if (xones == yones) x < y else xones < yones\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            if (aBinary.count(_ == '1') == bBinary.count(_\
    \ == '1')) a < b\n            else aBinary.count(_ == '1') < bBinary.count(_ ==\
    \ '1')\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aBits = a.toBinaryString.count(_ == '1')\n           \
    \ val bBits = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits)\
    \ a < b else aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  '        arr.sortWith(compare)', "        arr.sortWith((a, b) => {\n           \
    \ val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n     \
    \       val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        def countOnes(n : Long)\
    \ : Int = {\n            var count = 0\n            var m = n\n            while\
    \ (m > 0) {\n                if (m % 2 == 1) count += 1\n                m /=\
    \ 2\n            }\n            count\n        }\n        arr.sortWith((a, b)\
    \ => {\n            val onesA = countOnes(a)\n            val onesB = countOnes(b)\n\
    \            if (onesA == onesB) a < b\n            else onesA < onesB\n     \
    \   })", "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            if (aBinary.count(_ == '1') == bBinary.count(_\
    \ == '1')) a < b\n            else aBinary.count(_ == '1') < bBinary.count(_ ==\
    \ '1')\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes != bOnes)\
    \ aOnes < bOnes\n            else a < b\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         if (aBinary.count(_ == '1') == bBinary.count(_ == '1')) a < b\n    \
    \        else aBinary.count(_ == '1') < bBinary.count(_ == '1')\n        })",
  "        arr.sortWith((x, y) => {\n            val xones = x.toBinaryString.count(_\
    \ == '1')\n            val yones = y.toBinaryString.count(_ == '1')\n        \
    \    if (xones == yones) x < y else xones < yones\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((x, y) => {\n            val\
    \ xOnes = x.toBinaryString.count(_ == '1')\n            val yOnes = y.toBinaryString.count(_\
    \ == '1')\n            if (xOnes == yOnes) x < y else xOnes < yOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val xOnes = x.toBinaryString.count(_ == '1')\n        \
    \    val yOnes = y.toBinaryString.count(_ == '1')\n            if (xOnes == yOnes)\
    \ x < y else xOnes < yOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            if (aBinary.count(_ ==\
    \ '1') == bBinary.count(_ == '1')) a < b\n            else aBinary.count(_ ==\
    \ '1') < bBinary.count(_ == '1')\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val ones = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        ones.map(_._1)", "        arr.sortWith((a, b) => {\n            val aOnes\
    \ = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            if (aBinary.count(_ ==\
    \ '1') == bBinary.count(_ == '1')) a < b\n            else aBinary.count(_ ==\
    \ '1') < bBinary.count(_ == '1')\n        })", "        val ones = arr.map(x =>\
    \ (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.map(_._1)",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        val ones = arr.map(x => (x,\
    \ x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.map(_._1)", " \
    \       arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.filter(_\
    \ == '1').length\n            val onesB = b.toBinaryString.filter(_ == '1').length\n\
    \            if (onesA == onesB) a < b else onesA < onesB\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aOnes = countOnes(a)\n        \
    \    val bOnes = countOnes(b)\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val aOnes\
    \ = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBits = a.toBinaryString.count(_\
    \ == '1')\n            val bBits = b.toBinaryString.count(_ == '1')\n        \
    \    if (aBits == bBits) a < b else aBits < bBits\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val onesA = a.toBinaryString.count(_ == '1')\n        \
    \    val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        val ones = arr.map(x => (x,\
    \ x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.map(_._1)", " \
    \       arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        val sorted\
    \ = arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y)\
    \ => {\n            val xones = x.toBinaryString.count(_ == '1')\n           \
    \ val yones = y.toBinaryString.count(_ == '1')\n            if (xones == yones)\
    \ x < y else xones < yones\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.filter(_ ==\
    \ '1').length\n            val bOnes = bBin.filter(_ == '1').length\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.filter(_ == '1').length\n           \
    \ val bOnes = b.toBinaryString.filter(_ == '1').length\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n     \
    \       val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            aBinary.count(_ == '1')\
    \ < bBinary.count(_ == '1') ||\n            (aBinary.count(_ == '1') == bBinary.count(_\
    \ == '1') && a < b)\n        })\n        sorted", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y) => {\n \
    \           val xBin = x.toBinaryString\n            val yBin = y.toBinaryString\n\
    \            if (xBin.count(_ == '1') == yBin.count(_ == '1')) x < y else xBin.count(_\
    \ == '1') < yBin.count(_ == '1')\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            aBin.count(_ == '1') < bBin.count(_\
    \ == '1') ||\n            (aBin.count(_ == '1') == bBin.count(_ == '1') && a <\
    \ b)\n        })", "        arr.sortWith((a, b) => {\n            val aOnes =\
    \ a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((x, y) => {\n            val xOnes = x.toBinaryString.count(_\
    \ == '1')\n            val yOnes = y.toBinaryString.count(_ == '1')\n        \
    \    if (xOnes == yOnes) x < y else xOnes < yOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = countOnes(a)\n            val bOnes = countOnes(b)\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val xOnes = x.toBinaryString.count(_ == '1')\n        \
    \    val yOnes = y.toBinaryString.count(_ == '1')\n            if (xOnes == yOnes)\
    \ x < y else xOnes < yOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ onesA = a.toBinaryString.count(_ == '1')\n            val onesB = b.toBinaryString.count(_\
    \ == '1')\n            if (onesA == onesB) a < b else onesA < onesB\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aOnes = a.toBinaryString.count(_ == '1')\n            val\
    \ bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aCount = aBin.count(_ ==\
    \ '1')\n            val bCount = bBin.count(_ == '1')\n            if (aCount\
    \ == bCount) a < b else aCount < bCount\n        })", "        val ones = arr.map(x\
    \ => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aOnes = a.toBinaryString.count(_ == '1')\n            val\
    \ bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.map(_._1)", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n     \
    \       val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes =\
    \ b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val xones = x.toBinaryString.count(_ == '1')\n        \
    \    val yones = y.toBinaryString.count(_ == '1')\n            if (xones == yones)\
    \ x < y else xones < yones\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ onesA = a.toBinaryString.count(_ == '1')\n            val onesB = b.toBinaryString.count(_\
    \ == '1')\n            if (onesA == onesB) a < b else onesA < onesB\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val onesA = a.toBinaryString.count(_ == '1')\n            val onesB\
    \ = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB) a < b else\
    \ onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n     \
    \       val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })\n        sorted",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aOnes = a.toBinaryString.count(_ == '1')\n            val\
    \ bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x,\
    \ y) => {\n            val xOnes = x.toBinaryString.count(_ == '1')\n        \
    \    val yOnes = y.toBinaryString.count(_ == '1')\n            if (xOnes == yOnes)\
    \ x < y else xOnes < yOnes\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n\
    \        sorted", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n           \
    \ val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val onesA = a.toBinaryString.count(_ == '1')\n        \
    \    val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val onesA = a.toBinaryString.count(_ == '1')\n        \
    \    val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aOnes = countOnes(a)\n            val bOnes = countOnes(b)\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        val ones = arr.map(x =>\
    \ (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.map(_._1)",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val onesA = a.toBinaryString.count(_ == '1')\n        \
    \    val onesB = b.toBinaryString.count(_ == '1')\n            if (onesA == onesB)\
    \ a < b else onesA < onesB\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val ones = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        ones.map(_._1)", "        arr.sortWith((a, b) => {\n            val aOnes\
    \ = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            if (aBin.count(_ == '1') == bBin.count(_ == '1')) a < b else aBin.count(_\
    \ == '1') < bBin.count(_ == '1')\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aOnes = a.toBinaryString.count(_ == '1')\n            val\
    \ bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aOnes = a.toBinaryString.count(_ == '1')\n            val bOnes\
    \ = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a, b) => {\n\
    \            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n\
    \        sorted", "        arr.sortWith((a, b) => {\n            val onesA = a.toBinaryString.count(_\
    \ == '1')\n            val onesB = b.toBinaryString.count(_ == '1')\n        \
    \    if (onesA == onesB) a < b else onesA < onesB\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })"]
stop_tokens:
- "\n    }\n"
