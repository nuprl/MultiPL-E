name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    def countDistinctCharacters(string : String) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ['        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.groupBy(identity).size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val distinctCharacters = string.toLowerCase.toCharArray.distinct\n    \
    \    distinctCharacters.length", '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  "        val distinctChars = new HashSet[Char]\n        for (char <- string) {\n\
    \            distinctChars += char.toLower\n        }\n        distinctChars.size",
  '        string.toLowerCase.distinct.length', "        val distinctChars = new HashSet[Char]\n\
    \        for (c <- string) distinctChars += c.toLower\n        distinctChars.size",
  "        val distinctCharacters = new HashSet[Char]\n        for (c <- string) distinctCharacters\
    \ += c.toLower\n        distinctCharacters.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', "        val distinctChars = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctChars += c.toLower\n       \
    \ }\n        distinctChars.size", '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  "        val distinctChars = string.toLowerCase.toSet\n        distinctChars.size",
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  "        val distinctCharacters = new HashSet[Char]\n        string.foreach(distinctCharacters\
    \ += _.toLower)\n        distinctCharacters.size", "        val distinctCharacters\
    \ = string.toLowerCase.toSet\n        distinctCharacters.size", '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.groupBy(identity).size',
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  "        val distinct = string.toLowerCase.distinct\n        distinct.length", " \
    \       val distinctChars = string.toLowerCase.toSet\n        distinctChars.size",
  "        val distinctChars = string.toLowerCase.toSet\n        distinctChars.size",
  '        string.toLowerCase.toSet.size', "        val distinctCharacters = string.toLowerCase.toSet\n\
    \        distinctCharacters.size", "        val distinctChars = string.toLowerCase.toSet\n\
    \        distinctChars.size", '        string.toLowerCase.toSet.size', "     \
    \   val distinctCharacters = string.toLowerCase.toCharArray.distinct\n       \
    \ distinctCharacters.length", '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val distinctCharacters = new HashSet[Char]\n        for (c <- string) {\n\
    \            distinctCharacters += c.toLower\n        }\n        distinctCharacters.size",
  '        string.toLowerCase.groupBy(identity).size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', "        var distinctCharacters =\
    \ new HashSet[Char]()\n        for (c <- string) {\n            distinctCharacters\
    \ += c.toLower\n        }\n        distinctCharacters.size", "        val distinctCharacters\
    \ = new HashSet[Char]\n        for (c <- string) distinctCharacters += c.toLower\n\
    \        distinctCharacters.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val chars = string.toLowerCase.toCharArray\n        val distinctChars =\
    \ chars.distinct\n        distinctChars.length", "        val distinctChars =\
    \ new HashSet[Char]\n        for (c <- string) distinctChars += c.toLower\n  \
    \      distinctChars.size", '        string.toLowerCase.groupBy(identity).size',
  '        string.toLowerCase.groupBy(identity).size', "        var distinctCharacters\
    \ = 0\n        var characters = new HashSet[Char]\n        for (c <- string) {\n\
    \            if (!characters.contains(c)) {\n                characters += c\n\
    \                distinctCharacters += 1\n            }\n        }\n        distinctCharacters",
  '        string.toLowerCase.toSet.size', "        val distinctCharacters = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctCharacters += c.toLower\n  \
    \      }\n        distinctCharacters.size", '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  "        val charMap = new HashMap[Char, Int]\n        for (char <- string) {\n\
    \            charMap(char.toLower) = 1\n        }\n        charMap.size", '        string.toLowerCase.distinct.length',
  "        val map = new HashMap[Char, Int]()\n        for (c <- string) {\n     \
    \       map(c.toLower) = 1\n        }\n        map.size", "        val distinctCharacters\
    \ = string.toLowerCase.toCharArray.distinct\n        distinctCharacters.length",
  "        val distinctChars = new HashSet[Char]\n        for (c <- string) {\n  \
    \          distinctChars += c.toLower\n        }\n        distinctChars.size",
  '        string.toLowerCase.distinct.length', "        val distinctChars = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctChars += c.toLower\n       \
    \ }\n        distinctChars.size", "        val distinctChars = string.toLowerCase.toSet\n\
    \        distinctChars.size", '        string.toLowerCase.distinct.length', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', "        val distinctCharacters =\
    \ string.toLowerCase.toSet\n        distinctCharacters.size", '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val charSet = new HashSet[Char]\n        for (c <- string) {\n        \
    \    charSet += c.toLower\n        }\n        charSet.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', "        val distinctCharacters = string.toLowerCase.toSet\n\
    \        distinctCharacters.size", '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val set = new HashSet[Char]\n        for (c <- string) {\n            set\
    \ += c.toLower\n        }\n        set.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.distinct.length',
  "        val distinctChars = string.toLowerCase.toCharArray.distinct\n        distinctChars.length",
  '        string.toLowerCase.toSet.size', "        val distinctCharacters = new HashSet[Char]\n\
    \        for (character <- string) distinctCharacters += character.toLower\n \
    \       distinctCharacters.size", "        val distinctCharacters = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctCharacters += c.toLower\n  \
    \      }\n        distinctCharacters.size", '        string.toLowerCase.toSet.size',
  "        val distinctCharacters = new HashSet[Char]\n        for (character <- string)\
    \ {\n            distinctCharacters += character.toLower\n        }\n        distinctCharacters.size",
  '        string.toLowerCase.toSet.size', "        val distinct = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinct += c.toLower\n        }\n \
    \       distinct.size", "        val distinctChars = new HashSet[Char]\n     \
    \   for (c <- string) {\n            distinctChars += c.toLower\n        }\n \
    \       distinctChars.size", "        val chars = string.toLowerCase.toCharArray.toSet\n\
    \        return chars.size", '        string.toLowerCase.distinct.length', " \
    \       var distinctChars = new HashSet[Char]()\n        for (i <- 0 until string.length)\
    \ {\n            distinctChars += string(i).toLower\n        }\n        distinctChars.size",
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', "        val distinctChars = string.toLowerCase.toSet\n\
    \        distinctChars.size", "        val distinctCharacters = string.toLowerCase.toSet\n\
    \        distinctCharacters.size", "        val distinctChars = string.toLowerCase.toCharArray.distinct\n\
    \        distinctChars.length", "        val distinctCharacters = string.toLowerCase.toSet\n\
    \        distinctCharacters.size", "        var distinctCharacters = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctCharacters += c.toLower\n  \
    \      }\n        distinctCharacters.size", '        string.toLowerCase.distinct.length',
  "        var set = new HashSet[Char]\n        for (c <- string) {\n            set\
    \ += c.toLower\n        }\n        set.size", '        string.toLowerCase.toSet.size',
  "        val distinctChars = string.toLowerCase.toSet\n        distinctChars.size",
  "        val distinctCharacters = new HashSet[Char]\n        for (c <- string) {\n\
    \            distinctCharacters += c.toLower\n        }\n        distinctCharacters.size",
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  '        string.toLowerCase.toSet.size', "        val distinctChars = string.toLowerCase.toSet\n\
    \        distinctChars.size", '        string.toLowerCase.toSet.size', "     \
    \   val distinctCharacters = new HashSet[Char]\n        for (c <- string) distinctCharacters\
    \ += c.toLower\n        distinctCharacters.size", '        string.toLowerCase.toSet.size',
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  "        val distinctChars = string.toLowerCase.toCharArray.toSet\n        distinctChars.size",
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val charSet = new HashSet[Char]\n        for (c <- string) {\n        \
    \    charSet += c.toLower\n        }\n        charSet.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.groupBy(identity).size', "        val distinctCharacters\
    \ = new HashSet[Char]\n        for (c <- string) {\n            distinctCharacters\
    \ += c.toLower\n        }\n        distinctCharacters.size", "        val distinctCharacters\
    \ = string.toLowerCase.distinct\n        distinctCharacters.length", '        string.toLowerCase.distinct.length',
  "        val distinctChars = string.toLowerCase.toSet\n        distinctChars.size",
  "        val distinct = string.toLowerCase.toSet\n        distinct.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.toSet.size', "        val distinctCharacters = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctCharacters += c.toLower\n  \
    \      }\n        distinctCharacters.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', '        string.toLowerCase.distinct.length',
  "        val distinctCharacters = new HashSet[Char]\n        for (c <- string) {\n\
    \            distinctCharacters += c.toLower\n        }\n        distinctCharacters.size",
  "        val distinctCharacters = string.toLowerCase.distinct\n        distinctCharacters.length",
  "        val distinctCharacters = string.toLowerCase.distinct\n        distinctCharacters.length",
  '        string.toLowerCase.distinct.length', "        val distinct = string.toLowerCase.toSet\n\
    \        distinct.size", "        val distinctChars = string.toLowerCase.distinct\n\
    \        distinctChars.length", "        val distinctChars = string.toLowerCase.distinct\n\
    \        distinctChars.length", '        string.toLowerCase.toSet.size', "   \
    \     val distinctChars = string.toLowerCase.toSet\n        distinctChars.size",
  "        val distinctCharacters = new HashSet[Char]\n        for (c <- string) {\n\
    \            distinctCharacters += c.toLower\n        }\n        distinctCharacters.size",
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  "        val count = new HashMap[Char, Int]\n        for (c <- string) {\n     \
    \       count(c.toLower) = count.getOrElse(c.toLower, 0) + 1\n        }\n    \
    \    count.size", '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  "        val distinct = string.toLowerCase.distinct\n        distinct.length", " \
    \       val distinctChars = new HashSet[Char]\n        for (char <- string) {\n\
    \            distinctChars += char.toLower\n        }\n        distinctChars.size",
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  "        var count = 0\n        var charSet = Set[Char]()\n        for (c <- string)\
    \ {\n            if (!charSet.contains(c)) {\n                count += 1\n   \
    \             charSet += c\n            }\n        }\n        count", '        string.toLowerCase.toSet.size',
  "        val charMap = new HashMap[Char, Int]\n        for (c <- string) {\n   \
    \         charMap(c.toLower) = 1\n        }\n        charMap.size", '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', "        val charSet = new HashSet[Char]\n\
    \        for (c <- string) {\n            charSet += c.toLower\n        }\n  \
    \      charSet.size", '        string.toLowerCase.distinct.length', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.toSet.size',
  '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', "        val distinctChars = string.toLowerCase.toSet\n\
    \        distinctChars.size", '        string.toLowerCase.toSet.size', "     \
    \   val distinctChars = string.toLowerCase.toCharArray.distinct\n        distinctChars.length",
  "        val distinctCharacters = string.toLowerCase.toSet\n        distinctCharacters.size",
  "        val set = new HashSet[Char]\n        for (c <- string) set += c.toLower\n\
    \        set.size", '        string.toLowerCase.distinct.length', "        val\
    \ distinct = new HashSet[Char]\n        for (c <- string) distinct += c.toLower\n\
    \        distinct.size", '        string.toLowerCase.toSet.size', '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.toSet.size', "        val distinctCharacters = new HashSet[Char]\n\
    \        for (c <- string) {\n            distinctCharacters += c.toLower\n  \
    \      }\n        distinctCharacters.size", '        string.toLowerCase.distinct.length',
  '        string.toLowerCase.distinct.length', "        val distinctChars = string.toLowerCase.toSet\n\
    \        distinctChars.size"]
stop_tokens:
- "\n    }\n"
