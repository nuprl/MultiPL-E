name: HumanEval_79_decimal_to_binary
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a number in decimal form and your task is to convert it\
  \ to\n    // binary format. The function should return a string, with each character\
  \ representing a binary\n    // number. Each character in the string will be '0'\
  \ or '1'.\n    // There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    // The extra characters are there to help with\
  \ the format.\n    // Examples:\n    def decimalToBinary(decimal : Long) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
  db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
  db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
  \    }\n\n}\n"
completions: ["        val binary = new StringBuilder()\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = decimal.toBinaryString\n\
    \        val db = \"db\"\n        db + binary + db", "        val binary = new\
    \ StringBuilder\n        var number = decimal\n        while (number > 0) {\n\
    \            binary.append(number % 2)\n            number /= 2\n        }\n \
    \       binary.reverse.toString", "        val binary = new StringBuilder\n  \
    \      var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   // Your code here\n        \"db\" + decimal.toBinaryString + \"db\"", "  \
    \      val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder\n \
    \       var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n  \
    \          binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val db = \"db\"\n        val binary\
    \ = decimal.toBinaryString\n        db + binary + db", "        def helper(decimal\
    \ : Long, acc : String) : String = {\n            if (decimal == 0) acc\n    \
    \        else helper(decimal / 2, (decimal % 2).toString + acc)\n        }\n \
    \       \"db\" + helper(decimal, \"\") + \"db\"", "        var binary = \"\"\n\
    \        var number = decimal\n        while (number > 0) {\n            binary\
    \ = (number % 2).toString + binary\n            number /= 2\n        }\n     \
    \   \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n     \
    \   var n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n\
    \            n /= 2\n        }\n        \"db\" + binary.reverse.toString + \"\
    db\"", "        val s = decimal.toBinaryString\n        \"db\" + s + \"db\"",
  "        var result = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           result = (n % 2).toString + result\n            n /= 2\n        }\n\
    \        \"db\" + result + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var d = decimal\n        while (d\
    \ > 0) {\n            binary.append(d % 2)\n            d /= 2\n        }\n  \
    \      binary.reverse.toString", "        var binary = \"\"\n        var n = decimal\n\
    \        while (n > 0) {\n            binary = (n % 2).toString + binary\n   \
    \         n /= 2\n        }\n        \"db\" + binary + \"db\"", "        val binary\
    \ = decimal.toBinaryString\n        \"db\" + binary + \"db\"", "        var binary\
    \ = \"\"\n        var n = decimal\n        while (n > 0) {\n            binary\
    \ = (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" +\
    \ binary + \"db\"", "        var binary = \"\"\n        var n = decimal\n    \
    \    while (n > 0) {\n            binary = (n % 2).toString + binary\n       \
    \     n /= 2\n        }\n        \"db\" + binary + \"db\"", "        val binary\
    \ = new StringBuilder\n        var d = decimal\n        while (d > 0) {\n    \
    \        binary.append(d % 2)\n            d /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder\n \
    \       var x = decimal\n        while (x > 0) {\n            binary.append(x\
    \ % 2)\n            x /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.toString.reverse", "     \
    \   val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary = (n % 2).toString + binary\n            n /= 2\n        }\n \
    \       \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n \
    \       var dec = decimal\n        while (dec > 0) {\n            binary.append(dec\
    \ % 2)\n            dec /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        var binary = \"\"\n   \
    \     var temp = decimal\n        while (temp > 0) {\n            binary = (temp\
    \ % 2).toString + binary\n            temp /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        \"db\" + binary.reverse.toString + \"db\"", "        var binary\
    \ = \"\"\n        var n = decimal\n        while (n > 0) {\n            binary\
    \ = (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" +\
    \ binary + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        var binary = \"\"\n   \
    \     var temp = decimal\n        while (temp > 0) {\n            binary = (temp\
    \ % 2).toString + binary\n            temp /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val sb = new StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n \
    \       }\n        sb.append(\"db\")\n        sb.reverse.toString", "        val\
    \ binary = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        \"db\"\
    \ + binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var binary = \"\"\n        var dec = decimal\n        while (dec > 0) {\n\
    \            binary = (dec % 2).toString + binary\n            dec /= 2\n    \
    \    }\n        \"db\" + binary + \"db\"", "        val s = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            s.append(n % 2)\n\
    \            n /= 2\n        }\n        s.reverse.toString", "        var binary\
    \ = \"\"\n        var d = decimal\n        while (d > 0) {\n            binary\
    \ = (d % 2).toString + binary\n            d /= 2\n        }\n        return \"\
    db\" + binary + \"db\"", "        val binary = new StringBuilder\n        var\
    \ n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n   \
    \         n /= 2\n        }\n        \"db\" + binary.reverse.toString + \"db\"",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        var binary = \"\"\n        var n =\
    \ decimal\n        while (n > 0) {\n            binary = (n % 2).toString + binary\n\
    \            n /= 2\n        }\n        \"db\" + binary + \"db\"", "        val\
    \ s = decimal.toBinaryString\n        \"db\" + s + \"db\"", "        var result\
    \ = \"\"\n        var decimal2 = decimal\n        while (decimal2 > 0) {\n   \
    \         result = (decimal2 % 2).toString + result\n            decimal2 /= 2\n\
    \        }\n        \"db\" + result + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        binary.append(\"db\")\n        var\
    \ n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n   \
    \         n /= 2\n        }\n        binary.append(\"db\")\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder\n \
    \       var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.toString.reverse", "   \
    \     val binary = new StringBuilder(\"db\")\n        var n = decimal\n      \
    \  while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n   \
    \     }\n        binary.append(\"db\").reverse.toString", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        \"db\" +\
    \ binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n  \
    \          binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val result = new StringBuilder\n        result.append(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            result.append(n\
    \ % 2)\n            n /= 2\n        }\n        result.append(\"db\")\n       \
    \ result.reverse.toString", "        var binary = \"\"\n        var n = decimal\n\
    \        while (n > 0) {\n            binary = (n % 2).toString + binary\n   \
    \         n /= 2\n        }\n        \"db\" + binary + \"db\"", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        \"db\" +\
    \ binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        \"db\" + binary.reverse.toString + \"db\"", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        \"db\" +\
    \ binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var remainder = decimal\n        while (remainder > 0) {\n          \
    \  binary.append(remainder % 2)\n            remainder /= 2\n        }\n     \
    \   binary.reverse.toString", "        var result = \"\"\n        var n = decimal\n\
    \        while (n > 0) {\n            result = (n % 2).toString + result\n   \
    \         n /= 2\n        }\n        \"db\" + result + \"db\"", "        val binary\
    \ = new StringBuilder\n        var x = decimal\n        while (x > 0) {\n    \
    \        binary.append(x % 2)\n            x /= 2\n        }\n        \"db\" +\
    \ binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var number = decimal\n\
    \        while (number > 0) {\n            binary.append(number % 2)\n       \
    \     number /= 2\n        }\n        binary.reverse.toString", "        var binary\
    \ = \"\"\n        var dec = decimal\n        while (dec > 0) {\n            binary\
    \ = (dec % 2).toString + binary\n            dec /= 2\n        }\n        \"db\"\
    \ + binary + \"db\"", "        val binary = new StringBuilder\n        var n =\
    \ decimal\n        while (n > 0) {\n            binary.append(n % 2)\n       \
    \     n /= 2\n        }\n        \"db\" + binary.reverse.toString + \"db\"", " \
    \       val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        \"db\" + binary.reverse.toString + \"db\"", "        val sb = new StringBuilder\n\
    \        sb.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            sb.append(n % 2)\n            n /= 2\n        }\n        sb.append(\"\
    db\")\n        sb.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val s = decimal.toBinaryString\n   \
    \     val zeros = \"0\" * (32 - s.length)\n        \"db\" + zeros + s + \"db\"",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder\n \
    \       var remainder = decimal\n        while (remainder > 0) {\n           \
    \ binary.append(remainder % 2)\n            remainder /= 2\n        }\n      \
    \  binary.reverse.toString", "        val binary = new StringBuilder\n       \
    \ var n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n\
    \            n /= 2\n        }\n        binary.reverse.toString", "        val\
    \ binary = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        \"db\"\
    \ + binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n  \
    \          binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        var binary = \"\"\n   \
    \     var decimal2 = decimal\n        while (decimal2 > 0) {\n            binary\
    \ = (decimal2 % 2).toString + binary\n            decimal2 /= 2\n        }\n \
    \       \"db\" + binary + \"db\"", "        var result = \"\"\n        var n =\
    \ decimal\n        while (n > 0) {\n            result = (n % 2).toString + result\n\
    \            n /= 2\n        }\n        \"db\" + result + \"db\"", "        var\
    \ binary = \"\"\n        var n = decimal\n        while (n > 0) {\n          \
    \  binary = (n % 2).toString + binary\n            n /= 2\n        }\n       \
    \ \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n       \
    \ var n = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n\
    \            n /= 2\n        }\n        binary.reverse.toString", "        val\
    \ binary = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        var binary = \"\"\n        var n = decimal\n        while (n != 0) {\n\
    \            binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val sb = new StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n \
    \       }\n        sb.append(\"db\")\n        sb.reverse.toString", "        val\
    \ binary = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        var result = \"db\"\n        var n\
    \ = decimal\n        while (n > 0) {\n            result = (n % 2).toString +\
    \ result\n            n /= 2\n        }\n        result + \"db\"", "        val\
    \ binary = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var result = \"\"\n        var decimal_ = decimal\n        while (decimal_\
    \ > 0) {\n            result = (decimal_ % 2).toString + result\n            decimal_\
    \ /= 2\n        }\n        return \"db\" + result + \"db\"", "        var binary\
    \ = \"\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ binary = (temp % 2).toString + binary\n            temp /= 2\n        }\n  \
    \      \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n  \
    \      var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        var binary = \"\"\n        var remainder = decimal\n   \
    \     while (remainder > 0) {\n            binary = (remainder % 2).toString +\
    \ binary\n            remainder /= 2\n        }\n        \"db\" + binary + \"\
    db\"", "        var binary = \"\"\n        var n = decimal\n        while (n >\
    \ 0) {\n            binary = (n % 2).toString + binary\n            n /= 2\n \
    \       }\n        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val s = \"db\" + decimal.toBinaryString\
    \ + \"db\"\n        s", "        val binary = new StringBuilder\n        var n\
    \ = decimal\n        while (n > 0) {\n            binary.append(n % 2)\n     \
    \       n /= 2\n        }\n        binary.reverse.toString", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        \"db\" + binary.reverse.toString + \"db\"", "        var binary = \"\"\
    \n        var n = decimal\n        while (n > 0) {\n            binary = (n %\
    \ 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      \"db\" + binary.reverse.toString + \"db\"", "        var result = \"\"\n\
    \        var decimal2 = decimal\n        while (decimal2 > 0) {\n            result\
    \ = (decimal2 % 2).toString + result\n            decimal2 /= 2\n        }\n \
    \       \"db\" + result + \"db\"", "        val binary = new StringBuilder\n \
    \       var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n  \
    \          binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        var binary = \"\"\n        var d\
    \ = decimal\n        while (d > 0) {\n            binary = (d % 2).toString +\
    \ binary\n            d /= 2\n        }\n        \"db\" + binary + \"db\"", " \
    \       var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n\
    \            binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        binary.append(\"db\")\n        var n = decimal\n        while (n > 0)\
    \ {\n            binary.append(n % 2)\n            n /= 2\n        }\n       \
    \ binary.append(\"db\")\n        binary.reverse.toString", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        \"db\" +\
    \ binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      \"db\" + binary.reverse.toString + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        var binary = \"\"\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary = (n % 2).toString + binary\n            n /=\
    \ 2\n        }\n        \"db\" + binary + \"db\"", "        var binary = \"\"\n\
    \        var n = decimal\n        while (n > 0) {\n            binary = (n % 2).toString\
    \ + binary\n            n /= 2\n        }\n        \"db\" + binary + \"db\"",
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n  \
    \          binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        binary.append(\"db\")\n        var n = decimal\n        while (n > 0)\
    \ {\n            binary.append(n % 2)\n            n /= 2\n        }\n       \
    \ binary.append(\"db\")\n        binary.reverse.toString", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        \"db\" + binary.reverse.toString + \"db\"", "        val binary = new\
    \ StringBuilder\n        var n = decimal\n        while (n > 0) {\n          \
    \  binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var decimal2 = decimal\n      \
    \  while (decimal2 > 0) {\n            binary.append(decimal2 % 2)\n         \
    \   decimal2 /= 2\n        }\n        binary.reverse.toString", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val result = new StringBuilder\n \
    \       result.append(\"db\")\n        var n = decimal\n        while (n > 0)\
    \ {\n            result.append(n % 2)\n            n /= 2\n        }\n       \
    \ result.append(\"db\")\n        result.reverse.toString", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        \"db\" +\
    \ binary.reverse.toString + \"db\"", "        val sb = new StringBuilder\n   \
    \     sb.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n  \
    \          sb.append(n % 2)\n            n /= 2\n        }\n        sb.append(\"\
    db\")\n        sb.reverse.toString", "        val binary = new StringBuilder\n\
    \        var d = decimal\n        while (d > 0) {\n            binary.append(d\
    \ % 2)\n            d /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder()\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder\n \
    \       var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", '        "db" + decimal.toBinaryString + "db"', "        val s =\
    \ decimal.toBinaryString\n        val sb = new StringBuilder\n        sb.append(\"\
    db\")\n        for (i <- 0 until 8 - s.length) sb.append(\"0\")\n        sb.append(s)\n\
    \        sb.append(\"db\")\n        sb.toString", "        val sb = new StringBuilder\n\
    \        sb.append(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            sb.append(n % 2)\n            n /= 2\n        }\n        sb.append(\"\
    db\")\n        sb.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var d = decimal\n        while (d\
    \ > 0) {\n            binary.append(d % 2)\n            d /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString", "     \
    \   val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        var result = \"\"\n        var n = decimal\n        while\
    \ (n > 0) {\n            result = (n % 2).toString + result\n            n /=\
    \ 2\n        }\n        \"db\" + result + \"db\"", "        var binary = \"\"\n\
    \        var n = decimal\n        while (n > 0) {\n            binary = (n % 2).toString\
    \ + binary\n            n /= 2\n        }\n        \"db\" + binary + \"db\"",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        \"db\" + binary.reverse.toString + \"db\"", "        val binary = new\
    \ StringBuilder\n        var n = decimal\n        while (n > 0) {\n          \
    \  binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        \"db\" + binary.reverse.toString + \"db\"", "        var binary = \"\"\
    \n        var n = decimal\n        while (n != 0) {\n            binary = (n %\
    \ 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        \"db\" + binary.reverse.toString + \"db\"", "        val binary\
    \ = new StringBuilder\n        var n = decimal\n        while (n > 0) {\n    \
    \        binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder\n \
    \       var temp = decimal\n        while (temp > 0) {\n            binary.append(temp\
    \ % 2)\n            temp /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.toString.reverse", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        binary.append(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\")\n       \
    \ binary.reverse.toString", "        val binary = decimal.toBinaryString\n   \
    \     \"db\" + binary + \"db\"", "        var binary = \"\"\n        var n = decimal\n\
    \        while (n > 0) {\n            binary = (n % 2).toString + binary\n   \
    \         n /= 2\n        }\n        \"db\" + binary + \"db\"", "        val binary\
    \ = new StringBuilder()\n        var n = decimal\n        while (n > 0) {\n  \
    \          binary.append(n % 2)\n            n /= 2\n        }\n        binary.reverse.toString",
  "        var binary = \"\"\n        var dec = decimal\n        while (dec > 0) {\n\
    \            binary = (dec % 2).toString + binary\n            dec /= 2\n    \
    \    }\n        \"db\" + binary + \"db\"", "        val s = decimal.toBinaryString\n\
    \        \"db\" + s + \"db\"", "        val sb = new StringBuilder\n        sb.append(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            sb.append(n\
    \ % 2)\n            n /= 2\n        }\n        sb.append(\"db\")\n        sb.reverse.toString",
  "        val binary = new StringBuilder\n        var n = decimal\n        while\
    \ (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n\
    \        binary.reverse.toString", "        val binary = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.append(\"db\").reverse.toString",
  "        val binary = new StringBuilder\n        var number = decimal\n        while\
    \ (number > 0) {\n            binary.append(number % 2)\n            number /=\
    \ 2\n        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val s = decimal.toBinaryString\n        \"db\" + s + \"db\"", "        val\
    \ sb = new StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n \
    \       }\n        sb.append(\"db\")\n        sb.reverse.toString", "        val\
    \ db = \"db\"\n        val binary = decimal.toBinaryString\n        db + binary\
    \ + db", "        val binary = new StringBuilder\n        var n = decimal\n  \
    \      while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      \"db\" + binary.reverse + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        \"db\" + binary.reverse.toString\
    \ + \"db\"", "        val binary = new StringBuilder\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.toString", "        val binary = new StringBuilder\n\
    \        var number = decimal\n        while (number > 0) {\n            binary.append(number\
    \ % 2)\n            number /= 2\n        }\n        binary.reverse.toString",
  "        var binary = \"\"\n        var n = decimal\n        while (n > 0) {\n \
    \           binary = (n % 2).toString + binary\n            n /= 2\n        }\n\
    \        \"db\" + binary + \"db\"", "        val binary = new StringBuilder\n\
    \        var n = decimal\n        while (n > 0) {\n            binary.append(n\
    \ % 2)\n            n /= 2\n        }\n        binary.reverse.toString", "   \
    \     val binary = new StringBuilder\n        var n = decimal\n        while (n\
    \ > 0) {\n            binary.append(n % 2)\n            n /= 2\n        }\n  \
    \      binary.reverse.toString", "        val binary = new StringBuilder\n   \
    \     var n = decimal\n        while (n > 0) {\n            binary.append(n %\
    \ 2)\n            n /= 2\n        }\n        binary.reverse.toString"]
stop_tokens:
- "\n    }\n"
