language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5_p92_3.scala:26)\n\tat Problem.main(tmpj5_p92_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (i + j + k) + 1\n        // = (i + j + k) * (i + j + k - 1 +\
    \ 1) + 1\n        // = (i + j + k) * (i + j + k + 1) + 1\n        // = (i + j\
    \ + k) * (i + j + k + 1) + (i + j + k) + 1\n        // = (i + j + k) * (i + j\
    \ + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j +\
    \ k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        //\
    \ = (i + j + k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n\
    \        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j\
    \ + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j +\
    \ k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        //\
    \ = (i + j + k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k +\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi2ebokvt.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + (i + j + k) + 1\e[0m\n\e[31m19\
    \ |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1 + 1) + 1\e[0m\n\e[31m20\
    \ |\e[0m        \e[34m// = (i + j + k) * (i + j + k + 1) + 1\e[0m\n\e[31m21 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k + 1) + (i + j + k) + 1\e[0m\n\e\
    [31m22 |\e[0m        \e[34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m24 |\e[0m    \
    \    \e[34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m25 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m26 |\e[0m        \e[34m// =\
    \ (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m27 |\e[0m        \e[34m// = (i + j\
    \ + k) * (i + j + k + 2)\e[0m\n\e[31m28 |\e[0m        \e[34m// = (i + j + k) *\
    \ (i + j + k + 2)\e[0m\n\e[31m29 |\e[0m        \e[34m// = (i + j + k) * (i + j\
    \ + k + 2)\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j + k) * (i + j + k +\
    \ 2)\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\
    \e[31m32 |\e[0m        \e[34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m33\
    \ |\e[0m        \e[34m// = (i + j + k) * (i + j + k + 2)\e[0m\n\e[31m34 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k +\e[0m\n\e[31m35 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found"
  stdout: ''
  timestamp: 1660028341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // Let's first find the number of triples where a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n        // a[i] + a[j] + a[k] = 3 * x\n        // a[i]\
    \ + a[j] = 3 * x - a[k]\n        // a[i] + a[j] = 3 * x - (i * i - i + 1)\n  \
    \      // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x\
    \ - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        //\
    \ a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j]\
    \ = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n  \
    \      // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x\
    \ - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        //\
    \ a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j]\
    \ = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n  \
    \      // a[i] + a[j] = 3 * x - i * i + i - 1\n        //\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0ezi7bm.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// Let's\
    \ first find the number of triples where a[i] + a[j] + a[k] is a multiple of 3.\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * x\e[0m\n\e[31m15\
    \ |\e[0m        \e[34m// a[i] + a[j] = 3 * x - a[k]\e[0m\n\e[31m16 |\e[0m    \
    \    \e[34m// a[i] + a[j] = 3 * x - (i * i - i + 1)\e[0m\n\e[31m17 |\e[0m    \
    \    \e[34m// a[i] + a[j] = 3 * x - i * i + i - 1\e[0m\n\e[31m18 |\e[0m      \
    \  \e[34m// a[i] + a[j] = 3 * x - i * i + i - 1\e[0m\n\e[31m19 |\e[0m        \e\
    [34m// a[i] + a[j] = 3 * x - i * i + i - 1\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ a[i] + a[j] = 3 * x - i * i + i - 1\e[0m\n\e[31m21 |\e[0m        \e[34m// a[i]\
    \ + a[j] = 3 * x - i * i + i - 1\e[0m\n\e[31m22 |\e[0m        \e[34m// a[i] +\
    \ a[j] = 3 * x - i * i + i - 1\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j]\
    \ = 3 * x - i * i + i - 1\e[0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] =\
    \ 3 * x - i * i + i - 1\e[0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] = 3\
    \ * x - i * i + i - 1\e[0m\n\e[31m26 |\e[0m        \e[34m// a[i] + a[j] = 3 *\
    \ x - i * i + i - 1\e[0m\n\e[31m27 |\e[0m        \e[34m// a[i] + a[j] = 3 * x\
    \ - i * i + i - 1\e[0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] = 3 * x -\
    \ i * i + i - 1\e[0m\n\e[31m29 |\e[0m        \e[34m// a[i] + a[j] = 3 * x - i\
    \ * i + i - 1\e[0m\n\e[31m30 |\e[0m        \e[34m// a[i] + a[j] = 3 * x - i *\
    \ i + i - 1\e[0m\n\e[31m31 |\e[0m        \e[34m// a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\e[0m\n\e[31m32 |\e[0m        \e[34m// a[i] + a[j] = 3 * x - i * i +\
    \ i - 1\e[0m\n\e[31m33 |\e[0m        \e[34m// a[i] + a[j] = 3 * x - i * i + i\
    \ - 1\e[0m\n\e[31m34 |\e[0m        \e[34m//\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a\
    \ += i * i - i + 1\n        var count = 0L\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            a += i * i - i + 1\n        }\n        var count = 0L\n        for\
    \ (i <- 0 until a.length - 2) {\n            for (j <- i + 1 until a.length -\
    \ 1) {\n                for (k <- j + 1 until a.length) {\n                  \
    \  if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a\
    \ += i * i - i + 1\n        var count = 0L\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            a += i * i - i + 1\n        }\n        var count = 0\n        for\
    \ (i <- 0 until a.length - 2) {\n            for (j <- i + 1 until a.length -\
    \ 1) {\n                for (k <- j + 1 until a.length) {\n                  \
    \  if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ count += 1\n                }\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupgbzln9.scala:26)\n\tat Problem.main(tmpupgbzln9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1 = i * (i - 1) + 1\n        // a[i] + a[j]\
    \ + a[k] = i * (i - 1) + j * (j - 1) + k * (k - 1) + 3\n        // a[i] + a[j]\
    \ + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j +\
    \ k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) *\
    \ (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k\
    \ - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1)\
    \ / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 +\
    \ 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\n \
    \       // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\n      \
    \  // a[i] + a[j] + a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1qrlgrll.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1 = i * (i - 1) + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = i * (i - 1) + j * (j - 1) + k * (k - 1) + 3\e[0m\n\e[31m15 |\e\
    [0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\e\
    [0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) / 2 + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ (i + j + k) * (i + j + k - 1) / 2 + 3\e[0m\n\e[31m18 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) / 2 + 3\e[0m\n\e[31m21 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ (i + j + k) * (i + j + k - 1) / 2 + 3\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) / 2 + 3\e[0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ (i + j + k) * (i + j + k - 1) / 2 + 3\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[\e[0m\n\e[31m27 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var result = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) result += 1\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (1 - 1)\n        // = (i + j + k)\
    \ * (i + j + k - 1) + (0)\n        // = (i + j + k) * (i + j + k - 1)\n      \
    \  // = (i + j + k) * (i + j + k - 1)\n        // = (i + j + k) * (i + j + k -\
    \ 1)\n        // = (i + j + k) * (i + j + k - 1)\n        // = (i + j + k) * (i\
    \ + j + k - 1)\n        // = (i + j + k) * (i + j + k - 1)\n        // = (i +\
    \ j + k) * (i + j + k - 1)\n        // = (i + j + k) * (i + j + k - 1)\n     \
    \   // = (i + j + k) * (i + j + k - 1)\n        // = (i + j + k)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_4vzohyb.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2 - 1)\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (1)\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (1 - 1)\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (0)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1)\e[0m\n\e[31m26 |\e[0m      \
    \  \e[34m// = (i + j + k) * (i + j + k - 1)\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ = (i + j + k) * (i + j + k - 1)\e[0m\n\e[31m28 |\e[0m        \e[34m// = (i +\
    \ j + k) * (i + j + k - 1)\e[0m\n\e[31m29 |\e[0m        \e[34m// = (i + j + k)\
    \ * (i + j + k - 1)\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j + k) * (i +\
    \ j + k - 1)\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k) * (i + j + k\
    \ - 1)\e[0m\n\e[31m32 |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1)\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1)\e[0m\n\e\
    [31m34 |\e[0m        \e[34m// = (i + j + k)\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var cnt = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) cnt += 1\n                }\n            }\n        }\n        cnt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipj7_09o.scala:26)\n\tat Problem.main(tmpipj7_09o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        //\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpveekwav9.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m16 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3\
    \ * (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m18 |\e[0m        \e[34m// = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m20 |\e[0m  \
    \      \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m26 |\e[0m  \
    \      \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = 3 * (i * i\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp53ehg3kc.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * i\e[0m\n\e[31m18 |\e[0m   \
    \     \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 *\
    \ i\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i\
    \ - 1) + 3 * (i - 1) + 3 * i\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\e[0m\n\e[31m21 |\e[0m \
    \       \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\
    \ * i\e[0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) *\
    \ (i - 1) + 3 * (i - 1) + 3 * i\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\e[0m\n\e[31m24 |\e[0m \
    \       \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\
    \ * i\e[0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) *\
    \ (i - 1) + 3 * (i - 1) + 3 * i\e[0m\n\e[31m26 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3\e[0m\n\e[31m27 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a\
    \ += i * i - i + 1\n        var count = 0\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a\
    \ += (i * i - i + 1)\n        var count = 0L\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            a += i * i - i + 1\n        }\n        var count = 0\n        for\
    \ (i <- 0 until a.length - 2) {\n            for (j <- i + 1 until a.length -\
    \ 1) {\n                for (k <- j + 1 until a.length) {\n                  \
    \  if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k -\
    \ 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j\
    \ + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k -\
    \ 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j\
    \ + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphv1oedn9.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m19 |\e[0m       \
    \ \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m20 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m22 |\e[0m        \e[34m// =\
    \ (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m23 |\e[0m        \e[34m// = (i\
    \ + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m24 |\e[0m        \e[34m// = (i +\
    \ j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m25 |\e[0m        \e[34m// = (i + j\
    \ + k) * (i + j + k - 1) + 2\e[0m\n\e[31m26 |\e[0m        \e[34m// = (i + j +\
    \ k) * (i + j + k - 1) + 2\e[0m\n\e[31m27 |\e[0m        \e[34m// = (i + j + k)\
    \ * (i + j + k - 1) + 2\e[0m\n\e[31m28 |\e[0m        \e[34m// = (i + j + k) *\
    \ (i + j + k - 1) + 2\e[0m\n\e[31m29 |\e[0m        \e[34m// = (i + j + k) * (i\
    \ + j + k - 1) + 2\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j + k) * (i +\
    \ j + k - 1) + 2\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k) * (i + j\
    \ + k - 1) + 2\e[0m\n\e[31m32 |\e[0m        \e[34m// = (i + j + k) * (i + j +\
    \ k - 1) + 2\e[0m\n\e[31m33 |\e[0m        \e[34m// = (i + j + k) * (i + j + k\
    \ - 1) + 2\e[0m\n\e[31m34 |\e[0m        \e[34m// = (i + j + k) * (\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error "
  stdout: ''
  timestamp: 1660028341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3 = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 * a[i]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[k]\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k]) / 3\n       \
    \ // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] =\
    \ a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n   \
    \     // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n \
    \       // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n \
    \       // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k]\
    \ = a[i] + a[j]\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8y_veozo.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3 = 3 * (i * i - i + 1)\e[0m\n\e[31m15 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * a[i]\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * a[j]\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ 3 * a[k]\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k]) / 3\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m21 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m26 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m27 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j] + a[k]\e[0m\n\e[31m29 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = a[i] + a[j]\e[0m\n\e[31m30 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028340
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // Let's first find the number of triples that are multiples of\
    \ 3.\n        // For each i, there are (n - i) / 3 possible j's, and (n - j) /\
    \ 3 possible k's.\n        // So the number of triples that are multiples of 3\
    \ is:\n        // sum(i = 1 to n) (n - i) / 3 * (n - i) / 3\n        // = sum(i\
    \ = 1 to n) (n^2 - 2n * i + i^2) / 9\n        // = sum(i = 1 to n) (n^2 - 2n *\
    \ i + i^2 - 9 * i + 9) / 9\n        // = sum(i = 1 to n) (n^2 - 2n * i + i^2 -\
    \ 9 * i + 9 - i^2 + i) / 9\n        // = sum(i = 1 to n) (n^2 - 2n * i - 8 * i\
    \ + 9) / 9\n        // = sum(i = 1 to n) (n^2 - 2n * i - 8 * i + 9 - n^2 + n)\
    \ / 9\n        // = sum(i = 1 to n) (n - 2 * i - 8 + 9 - n) / 9\n        // =\
    \ sum(i = 1 to n) (1 - 2 * i) / 9\n        // = (n - 2 * (1 + 2 + ... + n)) /\
    \ 9\n        // = (n - 2 * n * (n + 1) / 2) / 9\n        // = (n - n * (n + 1))\
    \ / 9\n        // = n * (n - 1) / 9\n        // = n * (n - 1) / 3 * 3 / 9\n  \
    \      // = n * (n - 1) / 3 * 1 / 3\n        // = n * (n - 1) / 9\n        val\
    \ triples = n * (n - 1) / 9\n        // Now let's find the number of triples that\
    \ are not multiples of 3.\n        // For each i, there are (n - i) / 3 possible\
    \ j's, and (n - j) / 3 possible k's.\n        // So the number of triples that\
    \ are not multiples of 3 is:\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph9zps8ev.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n  \
    \      // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i +\
    \ j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j\
    \ + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        //\
    \ = (i + j + k) * (i + j + k - 1) + (2)\n        // =\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmhhvr4_.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m22 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m24 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m26 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m27 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m28 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m32 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m33 |\e[0m\
    \        \e[34m// =\e[0m\n\e[31m34 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n        // = (i + j + k)\
    \ * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n  \
    \      // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i +\
    \ j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (2)\n       \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppm7xuke3.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m21 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m22 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m24 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m26 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m27 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m28 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m32 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m33 |\e[0m\
    \       \n\e[31m34 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5_p92_3.scala:26)\n\tat Problem.main(tmpj5_p92_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ count += 1\n                }\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupgbzln9.scala:26)\n\tat Problem.main(tmpupgbzln9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var ans = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) ans += 1\n\
    \                }\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n     \
    \                   count += 1\n                    }\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2g_6y0sl.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ a[\e[0m\n\e[31m31 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (1 - 1)\n        // = (i + j + k)\
    \ * (i + j + k - 1) + (0)\n        // = (i + j + k) * (i + j + k - 1)\n      \
    \  // = (i + j + k) * (i + j + k - 1) + (0)\n        // = (i + j + k) * (i + j\
    \ + k - 1) + (1 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (1)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n \
    \       // = (i + j + k) * (i + j + k - 1) + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppj_4a9rr.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2 - 1)\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (1)\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (1 - 1)\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (0)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1)\e[0m\n\e[31m26 |\e[0m      \
    \  \e[34m// = (i + j + k) * (i + j + k - 1) + (0)\e[0m\n\e[31m27 |\e[0m      \
    \  \e[34m// = (i + j + k) * (i + j + k - 1) + (1 - 1)\e[0m\n\e[31m28 |\e[0m  \
    \      \e[34m// = (i + j + k) * (i + j + k - 1) + (1)\e[0m\n\e[31m29 |\e[0m  \
    \      \e[34m// = (i + j + k) * (i + j + k - 1) + (2 - 1)\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m32 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + 1\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        //\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k\
    \ * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpveekwav9.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m16 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3\
    \ * (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m18 |\e[0m        \e[34m// = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m20 |\e[0m  \
    \      \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i * i\
    \ + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m26 |\e[0m  \
    \      \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = 3 * (i * i\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2g_6y0sl.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ a[\e[0m\n\e[31m31 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        //\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i + j\
    \ + k) * (i + j + k) - 3 * (i + j + k) + 3\n        // = 3 * (i + j + k) * (i\
    \ + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n     \
    \   // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) *\
    \ (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n  \
    \      // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n\
    \        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j +\
    \ k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n\
    \        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j +\
    \ k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n\
    \        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8kjd62v.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m16 |\e[0m        \e[34m// = 3 * (i + j + k) * (i + j + k) -\
    \ 3 * (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m18 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m20 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m21 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m22 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m25 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m26 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m27 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m28 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m29 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m30 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m31 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\e[0m\n\e[31m32 |\e[0m        \e[34m// = 3\e[0m\n\e[31m33\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // Let's say we have a triple (a[i], a[j], a[k]) where i < j <\
    \ k.\n        // Then a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j -\
    \ j + 1) + 3 * (k * k - k + 1)\n        // = 3 * (i * i + j * j + k * k - i -\
    \ j - k + 3)\n        // = 3 * (i + j + k) * (i + j + k - 3)\n        // So a[i]\
    \ + a[j] + a[k] is a multiple of 3 if and only if (i + j + k) * (i + j + k - 3)\
    \ is a multiple of 3.\n        // Let's say (i + j + k) * (i + j + k - 3) = 3\
    \ * m.\n        // Then i + j + k = 3 * m / (i + j + k - 3).\n        // So i\
    \ + j + k is a multiple of 3.\n        // Let's say i + j + k = 3 * l.\n     \
    \   // Then i + j + k - 3 = 3 * (l - 1).\n        // So i + j + k - 3 is a multiple\
    \ of 3.\n        // So i + j + k is a multiple of 3.\n        // So (i + j + k)\
    \ * (i + j + k - 3) is a multiple of 3.\n        // So a[i] + a[j] + a[k] is a\
    \ multiple of 3.\n        // So (a[i], a[j], a[k]) is a valid triple.\n      \
    \  // So we can conclude that a[i] + a[j] + a[k] is a multiple of 3 if and only\
    \ if i + j + k is a multiple of 3.\n        // So we can conclude that a[i] +\
    \ a[j] + a[k] is a multiple of 3 if and only if i, j, k are all multiples of 3.\n\
    \        // So we can conclude that a[i] + a[j] + a[k] is a multiple of 3 if and\
    \ only if i, j, k are\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbjmuml84.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// Let's\
    \ say we have a triple (a[i], a[j], a[k]) where i < j < k.\e[0m\n\e[31m14 |\e\
    [0m        \e[34m// Then a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j\
    \ - j + 1) + 3 * (k * k - k + 1)\e[0m\n\e[31m15 |\e[0m        \e[34m// = 3 * (i\
    \ * i + j * j + k * k - i - j - k + 3)\e[0m\n\e[31m16 |\e[0m        \e[34m// =\
    \ 3 * (i + j + k) * (i + j + k - 3)\e[0m\n\e[31m17 |\e[0m        \e[34m// So a[i]\
    \ + a[j] + a[k] is a multiple of 3 if and only if (i + j + k) * (i + j + k - 3)\
    \ is a multiple of 3.\e[0m\n\e[31m18 |\e[0m        \e[34m// Let's say (i + j +\
    \ k) * (i + j + k - 3) = 3 * m.\e[0m\n\e[31m19 |\e[0m        \e[34m// Then i +\
    \ j + k = 3 * m / (i + j + k - 3).\e[0m\n\e[31m20 |\e[0m        \e[34m// So i\
    \ + j + k is a multiple of 3.\e[0m\n\e[31m21 |\e[0m        \e[34m// Let's say\
    \ i + j + k = 3 * l.\e[0m\n\e[31m22 |\e[0m        \e[34m// Then i + j + k - 3\
    \ = 3 * (l - 1).\e[0m\n\e[31m23 |\e[0m        \e[34m// So i + j + k - 3 is a multiple\
    \ of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// So i + j + k is a multiple of 3.\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// So (i + j + k) * (i + j + k - 3) is a multiple\
    \ of 3.\e[0m\n\e[31m26 |\e[0m        \e[34m// So a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m27 |\e[0m        \e[34m// So (a[i], a[j], a[k]) is a valid\
    \ triple.\e[0m\n\e[31m28 |\e[0m        \e[34m// So we can conclude that a[i] +\
    \ a[j] + a[k] is a multiple of 3 if and only if i + j + k is a multiple of 3.\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// So we can conclude that a[i] + a[j] + a[k]\
    \ is a multiple of 3 if and only if i, j, k are all multiples of 3.\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// So we can conclude that a[i] + a[j] + a[k] is a multiple\
    \ of 3 if and only if i, j, k are\e[0m\n\e[31m31 |\e[0"
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        val a = new Array[Long](n.toInt)\n    \
    \    for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n        }\n\
    \        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt)\
    \ {\n                for (k <- j + 1 until n.toInt) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpab77u406.scala:28)\n\tat Problem.main(tmpab77u406.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        var count = 0L\n   \
    \     for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt)\
    \ {\n                if ((a(i) + a(j)) % 3 == 0) {\n                    for (k\
    \ <- j + 1 until n.toInt) {\n                        if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) {\n                            count += 1\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfpni9od.scala:32)\n\tat Problem.main(tmppfpni9od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        //\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i\
    \ + j * j + k * k - i - j - k) + 3\n        // = 3 * (i * i + j * j + k * k -\
    \ i - j - k + 1)\n        // = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i\
    \ + j + k) * (i + j + k) - (i + j + k) * (i + j + k))\n        // = 3 * (i * i\
    \ + j * j + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) *\
    \ (i + j + k))\n        // = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i +\
    \ j + k) * (i + j + k) - (i + j + k) * (i + j + k))\n        // = 3 * (i * i +\
    \ j * j + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i\
    \ + j + k))\n        // = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i + j\
    \ + k) * (i + j + k) - (i + j + k) * (i + j + k))\n        // = 3 * (i * i + j\
    \ * j + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i +\
    \ j + k))\n        // = 3 * (i * i +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4o7ldth8.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m16 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k - i -\
    \ j - k) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// = 3 * (i * i + j * j + k *\
    \ k - i - j - k + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// = 3 * (i * i + j *\
    \ j + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i + j\
    \ + k))\e[0m\n\e[31m19 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k - i\
    \ - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i + j + k))\e[0m\n\e\
    [31m20 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i\
    \ + j + k) * (i + j + k) - (i + j + k) * (i + j + k))\e[0m\n\e[31m21 |\e[0m  \
    \      \e[34m// = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i + j + k) * (i\
    \ + j + k) - (i + j + k) * (i + j + k))\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i\
    \ + j + k) * (i + j + k))\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i * i +\
    \ j * j + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i\
    \ + j + k))\e[0m\n\e[31m24 |\e[0m        \e[34m// = 3 * (i * i +\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // Let's say we have a[i] + a[j] + a[k] = 3 * x.\n        // Then,\
    \ i * i - i + 1 + j * j - j + 1 + k * k - k + 1 = 3 * x.\n        // Then, i *\
    \ i + j * j + k * k - i - j - k + 3 = 3 * x.\n        // Then, (i + j + k) * (i\
    \ + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j +\
    \ k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) -\
    \ (i + j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i +\
    \ j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i + j + k)\
    \ + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 =\
    \ 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n\
    \        // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n     \
    \   // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        //\
    \ Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then,\
    \ (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i +\
    \ j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        //\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf1w6orr4.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// Let's\
    \ say we have a[i] + a[j] + a[k] = 3 * x.\e[0m\n\e[31m14 |\e[0m        \e[34m//\
    \ Then, i * i - i + 1 + j * j - j + 1 + k * k - k + 1 = 3 * x.\e[0m\n\e[31m15\
    \ |\e[0m        \e[34m// Then, i * i + j * j + k * k - i - j - k + 3 = 3 * x.\e\
    [0m\n\e[31m16 |\e[0m        \e[34m// Then, (i + j + k) * (i + j + k) - (i + j\
    \ + k) + 3 = 3 * x.\e[0m\n\e[31m17 |\e[0m        \e[34m// Then, (i + j + k) *\
    \ (i + j + k) - (i + j + k) + 3 = 3 * x.\e[0m\n\e[31m18 |\e[0m        \e[34m//\
    \ Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// Then, (i + j + k) * (i + j + k) - (i + j\
    \ + k) + 3 = 3 * x.\e[0m\n\e[31m21 |\e[0m        \e[34m// Then, (i + j + k) *\
    \ (i + j + k) - (i + j + k) + 3 = 3 * x.\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// Then, (i + j + k) * (i + j + k) - (i + j\
    \ + k) + 3 = 3 * x.\e[0m\n\e[31m25 |\e[0m        \e[34m// Then, (i + j + k) *\
    \ (i + j + k) - (i + j + k) + 3 = 3 * x.\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\e[0m\n\e[31m27 |\e\
    [0m        \e[34m// Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\e\
    [0m\n\e[31m28 |\e[0m        \e[34m//\e[0m\n\e[31m29 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n       \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpigyjgzis.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// (1,\
    \ 7, 13)\e[0m\n\e[31m14 |\e[0m        \e[34m// (1, 7, 21)\e[0m\n\e[31m15 |\e[0m\
    \        \e[34m// (1, 13, 21)\e[0m\n\e[31m16 |\e[0m        \e[34m// (3, 7, 13)\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// (3, 13, 21)\e[0m\n\e[31m19 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e\
    [31m20 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ (1, 3, 13)\e[0m\n\e[31m22 |\e[0m        \e[34m// (1, 3, 21)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m24 |\e[0m        \e[34m// (1, 7, 21)\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// (1, 13, 21)\e[0m\n\e[31m26 |\e[0m       \
    \ \e[34m// (3, 7, 13)\e[0m\n\e[31m27 |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// (3, 13, 21)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ (7, 13, 21)\e[0m\n\e[31m30 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m31 |\e\
    [0m        \e[34m// (1, 3, 13)\e[0m\n\e[31m32 |\e[0m        \e[34m// (1, 3, 21)\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m34 |\e[0m        \e\
    [34m// (1, 7, 21)\e[0m\n\e[31m35 |\e[0m        \e[34m// (1, 13, 21)\e[0m\n\e[31m36\
    \ |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m37 |\e[0m        \e[34m// (3,\
    \ 7, 21)\e[0m\n\e[31m38 |\e[0m        \e[34m// (3, 13, 21)\e[0m\n\e[31m39 |\e\
    [0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m40 |\e[0m        \e[34m// (1, 3, 7)\e\
    [0m\n\e[31m41 |\e[0m        \e[34m// (1, 3, 13)\e[0m\n\e[31m42 |\e[0m        \e\
    [34m// (1, 3, 21)\e[0m\n\e[31m43 |\e[0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m44\
    \ |\e[0m        \e[34m// (1, 7, 21)\e[0m\n\e[31m45 |\e[0m        \e[34m// (1,\
    \ 13, 21)\e[0m\n\e[31m46 |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m47 |\e\
    [0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m48 |\e[0m        \e[34m// (3, 13, 21)\e\
    [0m\n\e[31m49 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m50 "
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            for\
    \ (j <- i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n       \
    \             if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3 = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 * a[i]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[k]\n        // a[i] + a[j] + a[k] = 3 * a[i] = 3 * a[j] = 3 * a[k]\n     \
    \   // a[i] = a[j] = a[k]\n        // a[i] = a[j] = a[k] = i * i - i + 1\n   \
    \     // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i +\
    \ 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i *\
    \ i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i - i +\
    \ 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i *\
    \ i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n      \
    \  // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n\
    \        // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i -\
    \ i + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 =\
    \ i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i -\
    \ i + 1 = i * i - i\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp48ck8q13.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3 = 3 * (i * i - i + 1)\e[0m\n\e[31m15 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * a[i]\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * a[j]\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ 3 * a[k]\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[i]\
    \ = 3 * a[j] = 3 * a[k]\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] = a[j] = a[k]\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// a[i] = a[j] = a[k] = i * i - i + 1\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m23 |\e[0m      \
    \  \e[34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m25 |\e[0m        \e[34m// i * i -\
    \ i + 1 = i * i - i + 1\e[0m\n\e[31m26 |\e[0m        \e[34m// i * i - i + 1 =\
    \ i * i - i + 1\e[0m\n\e[31m27 |\e[0m        \e[34m// i * i - i + 1 = i * i -\
    \ i + 1\e[0m\n\e[31m28 |\e[0m        \e[34m// i * i - i + 1 = i * i - i + 1\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m31 |\e[0m \
    \       \e[34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m32 |\e[0m        \e\
    [34m// i * i - i + 1 = i * i - i + 1\e[0m\n\e[31m33 |\e[0m        \e[34m// i *\
    \ i - i + 1 = i * i - i + 1\e[0m\n\e[31m34 |\e[0m        \e[34m// i * i - i +\
    \ 1 = i * i - i + 1\e[0m\n\e[31m35 |\e[0m        \e[34m// i * i - i + 1 = i *\
    \ i - i + 1\e[0m\n\e[31m36 |\e[0m        \e[34m// i * i - i + 1 = i * i - i +\
    \ 1\e[0m\n\e[31m37 |\e[0m        \e[34m// i * i - i + 1 = i * i - i\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2g_6y0sl.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ a[\e[0m\n\e[31m31 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        var count = 0L\n   \
    \     for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4x66r546.scala:30)\n\tat Problem.main(tmp4x66r546.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            for\
    \ (j <- i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n       \
    \             if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0L)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * a[i]\n        // a[i] + a[j] + a[k] = 3 * a[j]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[i] + 3 * a[j] + 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j]\
    \ + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        //\
    \ a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k]\
    \ = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j]\
    \ + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        //\
    \ a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k]\
    \ = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j]\
    \ + a[k])\n        // a[i] + a[j] + a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzlxydd70.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * a[i]\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[j]\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[k]\e[0m\n\e[31m19\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// a[i] + a[j] + a\e[0m\n\e[31m30 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var cnt = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) cnt += 1\n                }\n            }\n        }\n        cnt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        //\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i + j\
    \ + k) * (i + j + k) - 3 * (i + j + k) + 3\n        // = 3 * (i + j + k) * (i\
    \ + j + k - 1) + 1\n        // i + j + k = (a[i] + a[j] + a[k]) / 3\n        //\
    \ i + j + k - 1 = (a[i] + a[j] + a[k] - 3) / 3\n        // i + j + k - 1 = (a[i]\
    \ + a[j] + a[k] - 1) / 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] + 1)\
    \ / 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] + 2) / 3\n        // i +\
    \ j + k - 1 = (a[i] + a[j] + a[k] + 3) / 3\n        // i + j + k - 1 = (a[i] +\
    \ a[j] + a[k] + 4) / 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] + 5) /\
    \ 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] + 6) / 3\n        // i + j\
    \ + k - 1 = (a[i] + a[j] + a[k] + 7) / 3\n        // i + j + k - 1 = (a[i] + a[j]\
    \ + a[k] + 8) / 3\n        // i + j + k - 1 = (a[i] + a[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyjcvjag0.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\e[0m\n\e[31m16 |\e[0m        \e[34m// = 3 * (i + j + k) * (i + j + k) -\
    \ 3 * (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 1\e[0m\n\e[31m18 |\e[0m        \e[34m// i + j + k = (a[i]\
    \ + a[j] + a[k]) / 3\e[0m\n\e[31m19 |\e[0m        \e[34m// i + j + k - 1 = (a[i]\
    \ + a[j] + a[k] - 3) / 3\e[0m\n\e[31m20 |\e[0m        \e[34m// i + j + k - 1 =\
    \ (a[i] + a[j] + a[k] - 1) / 3\e[0m\n\e[31m21 |\e[0m        \e[34m// i + j + k\
    \ - 1 = (a[i] + a[j] + a[k] + 1) / 3\e[0m\n\e[31m22 |\e[0m        \e[34m// i +\
    \ j + k - 1 = (a[i] + a[j] + a[k] + 2) / 3\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ i + j + k - 1 = (a[i] + a[j] + a[k] + 3) / 3\e[0m\n\e[31m24 |\e[0m        \e\
    [34m// i + j + k - 1 = (a[i] + a[j] + a[k] + 4) / 3\e[0m\n\e[31m25 |\e[0m    \
    \    \e[34m// i + j + k - 1 = (a[i] + a[j] + a[k] + 5) / 3\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// i + j + k - 1 = (a[i] + a[j] + a[k] + 6) / 3\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// i + j + k - 1 = (a[i] + a[j] + a[k] + 7) / 3\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// i + j + k - 1 = (a[i] + a[j] + a[k] + 8) / 3\e[0m\n\
    \e[31m29 |\e[0m        \e[34m// i + j + k - 1 = (a[i] + a[\e[0m\n\e[31m30 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        var count = 0L\n   \
    \     for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxyyignll.scala:30)\n\tat Problem.main(tmpxyyignll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // (1, 7, 13)\n        // (1, 3, 7)\n        // (1, 3, 13)\n  \
    \      // (1, 7, 21)\n        // (1, 3, 21)\n        // (1, 13, 21)\n        //\
    \ (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n        // (7, 13,\
    \ 21)\n        // (1, 3, 7, 13)\n        // (1, 3, 7, 21)\n        // (1, 3, 13,\
    \ 21)\n        // (1, 7, 13, 21)\n        // (3, 7, 13, 21)\n        // (1, 3,\
    \ 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n   \
    \     // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7,\
    \ 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n      \
    \  // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13,\
    \ 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        //\
    \ (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n\
    \        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3,\
    \ 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n   \
    \     // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7,\
    \ 13, 21)\n        // (1, 3, 7, 13, 21)\n       \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprfqvkx_6.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// (1,\
    \ 7, 13)\e[0m\n\e[31m14 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m15 |\e[0m\
    \        \e[34m// (1, 3, 13)\e[0m\n\e[31m16 |\e[0m        \e[34m// (1, 7, 21)\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// (1, 3, 21)\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// (1, 13, 21)\e[0m\n\e[31m19 |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m20\
    \ |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m21 |\e[0m        \e[34m// (3,\
    \ 13, 21)\e[0m\n\e[31m22 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// (1, 3, 7, 13)\e[0m\n\e[31m24 |\e[0m        \e[34m// (1, 3,\
    \ 7, 21)\e[0m\n\e[31m25 |\e[0m        \e[34m// (1, 3, 13, 21)\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// (1, 7, 13, 21)\e[0m\n\e[31m27 |\e[0m        \e[34m// (3, 7,\
    \ 13, 21)\e[0m\n\e[31m28 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m29\
    \ |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ (1, 3, 7, 13, 21)\e[0m\n\e[31m31 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e\
    [0m\n\e[31m32 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m33 |\e[0m \
    \       \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m34 |\e[0m        \e[34m// (1, 3,\
    \ 7, 13, 21)\e[0m\n\e[31m35 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e\
    [31m36 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m37 |\e[0m        \e\
    [34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m38 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e\
    [0m\n\e[31m39 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m40 |\e[0m \
    \       \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m41 |\e[0m        \e[34m// (1, 3,\
    \ 7, 13, 21)\e[0m\n\e[31m42 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e\
    [31m43 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m44 |\e[0m        \e\
    [34m// (1, 3, 7, 13, 21)\e[0m\n\e[31m45 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e\
    [0m\n\e[31m46 |\e[0m        \e[34m// (1, 3, 7, 13, 21)\e"
  stdout: ''
  timestamp: 1660028362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // Let's say a[i] + a[j] + a[k] = 3m.\n        // Then, i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1 = 3m.\n        // Then, i * i + j * j\
    \ + k * k - i - j - k + 3 = 3m.\n        // Then, i * i + j * j + k * k - i -\
    \ j - k = 3m - 3.\n        // Then, i * i + j * j + k * k - i - j - k = 3(m -\
    \ 1).\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\n        // Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6aucu68h.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// Let's\
    \ say a[i] + a[j] + a[k] = 3m.\e[0m\n\e[31m14 |\e[0m        \e[34m// Then, i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1 = 3m.\e[0m\n\e[31m15 |\e[0m      \
    \  \e[34m// Then, i * i + j * j + k * k - i - j - k + 3 = 3m.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// Then, i * i + j * j + k * k - i - j - k = 3m - 3.\e[0m\n\e\
    [31m17 |\e[0m        \e[34m// Then, i * i + j * j + k * k - i - j - k = 3(m -\
    \ 1).\e[0m\n\e[31m18 |\e[0m        \e[34m// Then, i * i + j * j + k * k - i -\
    \ j - k = 3m' where m' = m - 1.\e[0m\n\e[31m19 |\e[0m        \e[34m// Then, i\
    \ * i + j * j + k * k - i - j - k = 3m' where m' = m - 1.\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\e[0m\n\e[31m21 |\e[0m        \e[34m// Then, i * i + j * j + k * k - i - j\
    \ - k = 3m' where m' = m - 1.\e[0m\n\e[31m22 |\e[0m        \e[34m// Then, i *\
    \ i + j * j + k * k - i - j - k = 3m' where m' = m - 1.\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\e[0m\n\e[31m24 |\e[0m        \e[34m// Then, i * i + j * j + k * k - i - j\
    \ - k = 3m' where m' = m - 1.\e[0m\n\e[31m25 |\e[0m        \e[34m// Then, i *\
    \ i + j * j + k * k - i - j - k = 3m' where m' = m - 1.\e[0m\n\e[31m26 |\e[0m\
    \        \e[34m// Then, i * i + j * j + k * k - i - j - k = 3m' where m' = m -\
    \ 1.\e[0m\n\e[31m27 |\e[0m        \e[34m// Then, i * i + j * j + k * k - i - j\
    \ - k = 3m' where m' = m - 1.\e[0m\n\e[31m28 |\e[0m        \e[34m// Then, i *\
    \ i + j * j + k * k - i - j - k = 3m' where m' = m\e[0m\n\e[31m29 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028361
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n   \
    \     // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) +\
    \ 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j\
    \ + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 *\
    \ (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k)\
    \ - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j +\
    \ k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j\
    \ * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3\
    \ * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpygxr6bj8.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k)\
    \ - 3 * (i + j + k) + 3\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m  \
    \      \e[34m// a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j\
    \ + k) + 3\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i *\
    \ i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\
    \e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\e[0m\n\e[31m21 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 *\
    \ (i * i + j * j + k * k) - 3 * (i + j + k) + 3\e[0m\n\e[31m24 |\e[0m        \e\
    [34m// a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i +\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3 = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 * a[i]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[k]\n        // a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\n     \
    \   // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] +\
    \ a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] +\
    \ a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n   \
    \     // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] +\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsp54gnt4.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3 = 3 * (i * i - i + 1)\e[0m\n\e[31m15 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * a[i]\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * a[j]\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ 3 * a[k]\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[i]\
    \ + 3 * a[j] + 3 * a[k]\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m21 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m23 |\e[0m        \e\
    [34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m24 |\e[0m   \
    \     \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m25 |\e\
    [0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e[0m\n\e\
    [31m27 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] +\e\
    [0m\n\e[31m29 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // The number of triples is equal to the number of pairs of numbers\n\
    \        // whose sum is divisible by 3.\n        // The number of pairs of numbers\
    \ whose sum is divisible by 3 is equal to\n        // the number of numbers whose\
    \ remainder is 0 plus the number of numbers\n        // whose remainder is 1 plus\
    \ the number of numbers whose remainder is 2.\n        // The number of numbers\
    \ whose remainder is 0 is equal to the number of\n        // numbers whose remainder\
    \ is 2.\n        // The number of numbers whose remainder is 1 is equal to the\
    \ number of\n        // numbers whose remainder is 2 plus 1.\n        // Therefore,\
    \ the number of pairs of numbers whose sum is divisible by 3 is\n        // equal\
    \ to the number of numbers whose remainder is 0 plus the number of\n        //\
    \ numbers whose remainder is 1 plus 2 * the number of numbers whose\n        //\
    \ remainder is 2.\n        // The number of numbers whose remainder is 0 is equal\
    \ to floor(n / 3).\n        // The number of numbers whose remainder is 1 is equal\
    \ to floor(n / 3) + 1.\n        // The number of numbers whose remainder is 2\
    \ is equal to floor(n / 3).\n        // Therefore, the number of pairs of numbers\
    \ whose sum is divisible by 3 is\n        // equal to floor(n / 3) + floor(n /\
    \ 3) + 1 + 2 * floor(n / 3) =\n        // 3 * floor(n / 3) + 1.\n        // The\
    \ number of triples is equal to the number of pairs of numbers whose\n       \
    \ // sum is divisible by 3.\n        // Therefore, the number of triples is equal\
    \ to 3 * floor(n / 3) + 1.\n        3 * (n / 3) + 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9o8n_bqd.scala:38)\n\tat Problem.main(tmp9o8n_bqd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            val\
    \ a = i * i - i + 1\n            for (j <- i + 1L to n - 1) {\n              \
    \  val b = j * j - j + 1\n                if ((a + b) % 3 == 0) {\n          \
    \          val k = (a + b) / 3\n                    if (k > j && k <= n) {\n \
    \                       count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1uomx3zv.scala:29)\n\tat Problem.main(tmp1uomx3zv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2g_6y0sl.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ a[\e[0m\n\e[31m31 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            for\
    \ (j <- i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n       \
    \             if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // We can see that the only valid triples are when a[i] + a[j]\
    \ + a[k] = 3.\n        // This means that a[i] + a[j] = 2.\n        // We can\
    \ see that a[i] = 1, a[j] = 1, a[k] = 1 is a valid triple.\n        // We can\
    \ also see that a[i] = 1, a[j] = 3, a[k] = 3 is a valid triple.\n        // We\
    \ can also see that a[i] = 1, a[j] = 5, a[k] = 5 is a valid triple.\n        //\
    \ We can also see that a[i] = 1, a[j] = 7, a[k] = 7 is a valid triple.\n     \
    \   // We can also see that a[i] = 1, a[j] = 9, a[k] = 9 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 11, a[k] = 11 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 13, a[k] = 13 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 15, a[k] = 15 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 17, a[k] = 17 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 19, a[k] = 19 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 21, a[k] = 21 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 23, a[k] = 23 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 25, a[k] = 25 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 27, a[k] = 27 is a valid triple.\n\
    \       \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl0adn4o.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// We\
    \ can see that the only valid triples are when a[i] + a[j] + a[k] = 3.\e[0m\n\e\
    [31m14 |\e[0m        \e[34m// This means that a[i] + a[j] = 2.\e[0m\n\e[31m15\
    \ |\e[0m        \e[34m// We can see that a[i] = 1, a[j] = 1, a[k] = 1 is a valid\
    \ triple.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can also see that a[i] = 1,\
    \ a[j] = 3, a[k] = 3 is a valid triple.\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ We can also see that a[i] = 1, a[j] = 5, a[k] = 5 is a valid triple.\e[0m\n\e\
    [31m18 |\e[0m        \e[34m// We can also see that a[i] = 1, a[j] = 7, a[k] =\
    \ 7 is a valid triple.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can also see that\
    \ a[i] = 1, a[j] = 9, a[k] = 9 is a valid triple.\e[0m\n\e[31m20 |\e[0m      \
    \  \e[34m// We can also see that a[i] = 1, a[j] = 11, a[k] = 11 is a valid triple.\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// We can also see that a[i] = 1, a[j] = 13,\
    \ a[k] = 13 is a valid triple.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can also\
    \ see that a[i] = 1, a[j] = 15, a[k] = 15 is a valid triple.\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// We can also see that a[i] = 1, a[j] = 17, a[k] = 17 is a valid\
    \ triple.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can also see that a[i] = 1,\
    \ a[j] = 19, a[k] = 19 is a valid triple.\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ We can also see that a[i] = 1, a[j] = 21, a[k] = 21 is a valid triple.\e[0m\n\
    \e[31m26 |\e[0m        \e[34m// We can also see that a[i] = 1, a[j] = 23, a[k]\
    \ = 23 is a valid triple.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can also see\
    \ that a[i] = 1, a[j] = 25, a[k] = 25 is a valid triple.\e[0m\n\e[31m28 |\e[0m\
    \        \e[34m// We can also see that a[i] = 1, a[j] = 27, a[k] = 27 is a valid\
    \ triple.\e[0m\n\e[31m29 |\e[0m       \n\e[31m30 |\e[0"
  stdout: ''
  timestamp: 1660028362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5_p92_3.scala:26)\n\tat Problem.main(tmpj5_p92_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // 3x + 2y + z = 0\n        // x + y + z = 0\n        // x + y\
    \ + z = 3\n        // x + y + z = 6\n        // x + y + z = 9\n        // x +\
    \ y + z = 12\n        // x + y + z = 15\n        // x + y + z = 18\n        //\
    \ x + y + z = 21\n        // x + y + z = 24\n        // x + y + z = 27\n     \
    \   // x + y + z = 30\n        // x + y + z = 33\n        // x + y + z = 36\n\
    \        // x + y + z = 39\n        // x + y + z = 42\n        // x + y + z =\
    \ 45\n        // x + y + z = 48\n        // x + y + z = 51\n        // x + y +\
    \ z = 54\n        // x + y + z = 57\n        // x + y + z = 60\n        // x +\
    \ y + z = 63\n        // x + y + z = 66\n        // x + y + z = 69\n        //\
    \ x + y + z = 72\n        // x + y + z = 75\n        // x + y + z = 78\n     \
    \   // x + y + z = 81\n        // x + y + z = 84\n        // x + y + z = 87\n\
    \        // x + y + z = 90\n        // x + y + z = 93\n        // x + y + z =\
    \ 96\n        // x + y + z = 99\n        // x + y + z = 102\n        // x + y\
    \ + z = 105\n        // x + y + z = 108\n        // x + y + z = 111\n        //\
    \ x + y + z = 114\n        // x + y + z = 117\n        // x + y + z = 120\n  \
    \      // x + y + z = 123\n        // x + y + z = 126\n        // x + y + z =\
    \ 129\n        // x + y + z = 132\n        // x + y + z = 135\n        // x +\
    \ y + z = 138\n        // x + y + z = 141\n        // x + y + z = 144\n      \
    \  // x + y + z = 147\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpll4g0t2t.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// 3x\
    \ + 2y + z = 0\e[0m\n\e[31m14 |\e[0m        \e[34m// x + y + z = 0\e[0m\n\e[31m15\
    \ |\e[0m        \e[34m// x + y + z = 3\e[0m\n\e[31m16 |\e[0m        \e[34m// x\
    \ + y + z = 6\e[0m\n\e[31m17 |\e[0m        \e[34m// x + y + z = 9\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// x + y + z = 12\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ x + y + z = 15\e[0m\n\e[31m20 |\e[0m        \e[34m// x + y + z = 18\e[0m\n\e\
    [31m21 |\e[0m        \e[34m// x + y + z = 21\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ x + y + z = 24\e[0m\n\e[31m23 |\e[0m        \e[34m// x + y + z = 27\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// x + y + z = 30\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ x + y + z = 33\e[0m\n\e[31m26 |\e[0m        \e[34m// x + y + z = 36\e[0m\n\e\
    [31m27 |\e[0m        \e[34m// x + y + z = 39\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ x + y + z = 42\e[0m\n\e[31m29 |\e[0m        \e[34m// x + y + z = 45\e[0m\n\e\
    [31m30 |\e[0m        \e[34m// x + y + z = 48\e[0m\n\e[31m31 |\e[0m        \e[34m//\
    \ x + y + z = 51\e[0m\n\e[31m32 |\e[0m        \e[34m// x + y + z = 54\e[0m\n\e\
    [31m33 |\e[0m        \e[34m// x + y + z = 57\e[0m\n\e[31m34 |\e[0m        \e[34m//\
    \ x + y + z = 60\e[0m\n\e[31m35 |\e[0m        \e[34m// x + y + z = 63\e[0m\n\e\
    [31m36 |\e[0m        \e[34m// x + y + z = 66\e[0m\n\e[31m37 |\e[0m        \e[34m//\
    \ x + y + z = 69\e[0m\n\e[31m38 |\e[0m        \e[34m// x + y + z = 72\e[0m\n\e\
    [31m39 |\e[0m        \e[34m// x + y + z = 75\e[0m\n\e[31m40 |\e[0m        \e[34m//\
    \ x + y + z = 78\e[0m\n\e[31m41 |\e[0m        \e[34m// x + y + z = 81\e[0m\n\e\
    [31m42 |\e[0m        \e[34m// x + y + z = 84\e[0m\n\e[31m43 |\e[0m        \e[34m//\
    \ x + y + z = 87\e[0m\n\e[31m44 |\e[0m        \e[34m// x + y + z = 90\e[0m\n\e\
    [31m45 |\e[0m        \e[34m// x + y + z = 93\e[0m\n\e[31m46 |\e[0m        \e[34m//\
    \ x + y + z = 96\e[0m\n\e[31m47 |\e[0m   "
  stdout: ''
  timestamp: 1660028363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            for\
    \ (j <- i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n       \
    \             if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1 to n.toInt) {\n           \
    \ for (j <- i + 1 to n.toInt) {\n                for (k <- j + 1 to n.toInt) {\n\
    \                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // = 3 * (i * i - i + 1)\n        // = 3 * a[i]\n \
    \       // a[i] + a[j] + a[k] = 3 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n\
    \        // a[j] + a[k] = 2 * (i * i - i + 1)\n        // a[j] + a[k] = 2 * i\
    \ * i - 2 * i + 2\n        // a[j] + a[k] = 2 * (i * i - i + 1)\n        // a[j]\
    \ + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k]\
    \ = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 *\
    \ a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n\
    \        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n      \
    \  // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j]\
    \ + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k]\
    \ = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 *\
    \ a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9pe_h8gt.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// = 3 * (i * i - i +\
    \ 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// = 3 * a[i]\e[0m\n\e[31m17 |\e[0m  \
    \      \e[34m// a[i] + a[j] + a[k] = 3 * a[i]\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m19 |\e[0m        \e[34m// a[j] + a[k]\
    \ = 2 * (i * i - i + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// a[j] + a[k] = 2\
    \ * i * i - 2 * i + 2\e[0m\n\e[31m21 |\e[0m        \e[34m// a[j] + a[k] = 2 *\
    \ (i * i - i + 1)\e[0m\n\e[31m22 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m26 |\e[0m        \e[34m// a[j] + a[k] = 2\
    \ * a[i]\e[0m\n\e[31m27 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m29 |\e[0m   \
    \     \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m30 |\e[0m        \e[34m// a[j]\
    \ + a[k] = 2 * a[i]\e[0m\n\e[31m31 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e\
    [0m\n\e[31m32 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m33 |\e\
    [0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m34 |\e[0m        \e[34m//\
    \ a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m35 |\e[0m        \e[34m// a[j] + a[k] = 2\
    \ * a[i]\e[0m\n\e[31m36 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e\
    [31m37 |\e[0m        \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m38 |\e[0m   \
    \     \e[34m// a[j] + a[k] = 2 * a[i]\e[0m\n\e[31m39 |\e[0m        \e[34m// a[\e\
    [0m\n\e[31m40 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`"
  stdout: ''
  timestamp: 1660028363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2g_6y0sl.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ a[\e[0m\n\e[31m31 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028351
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k) - (i + j + k) + 3\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k)\
    \ * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1)\
    \ + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n   \
    \     // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n        // a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] +\
    \ a[k] = (i + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k)\
    \ * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) + 2\n        // a[i\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6knis2fb.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\
    \e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k\
    \ - 1) + 2\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j +\
    \ k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k\
    \ - 1) + 2\e[0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j +\
    \ k) * (i + j + k - 1) + 2\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] +\
    \ a[k] = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\
    \e[31m26 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j + k\
    \ - 1) + 2\e[0m\n\e[31m27 |\e[0m        \e[34m// a[i\e[0m\n\e[31m28 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            for\
    \ (j <- i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n       \
    \             if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // The sum of the first n odd numbers is n^2.\n        // The sum\
    \ of the first n even numbers is n^2 - n.\n        // The sum of the first n numbers\
    \ is n(n + 1) / 2.\n        // The sum of the first n odd numbers is n^2.\n  \
    \      // The sum of the first n even numbers is n^2 - n.\n        // The sum\
    \ of the first n numbers is n(n + 1) / 2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even numbers is n^2 - n.\n\
    \        // The sum of the first n numbers is n(n + 1) / 2.\n        // The sum\
    \ of the first n odd numbers is n^2.\n        // The sum of the first n even numbers\
    \ is n^2 - n.\n        // The sum of the first n numbers is n(n + 1) / 2.\n  \
    \      // The sum of the first n odd numbers is n^2.\n        // The sum of the\
    \ first n even numbers is n^2 - n.\n        // The sum of the first n numbers\
    \ is n(n + 1) / 2.\n        // The sum of the first n odd numbers is n^2.\n  \
    \      // The sum of the first n even numbers is n^2 - n.\n        // The sum\
    \ of the first n numbers is n(n + 1) / 2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even numbers is n^2 - n.\n\
    \        // The sum of the first n numbers is n(n + 1) / 2.\n        // The sum\
    \ of the first n odd numbers is n^2.\n        // The sum of the first n even numbers\
    \ is n^2 - n.\n        // The sum of the first n numbers is n(n + 1) / 2.\n  \
    \      // The sum of the first n odd numbers is n^2.\n        // The sum of the\
    \ first n even numbers is n^2 - n.\n        // The sum of the first n numbers\
    \ is n(n + 1) / 2.\n        // The sum of the first n odd numbers is n^2.\n  \
    \      // The sum of the first n even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzetb1xjs.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// The\
    \ sum of the first n odd numbers is n^2.\e[0m\n\e[31m14 |\e[0m        \e[34m//\
    \ The sum of the first n even numbers is n^2 - n.\e[0m\n\e[31m15 |\e[0m      \
    \  \e[34m// The sum of the first n numbers is n(n + 1) / 2.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// The sum of the first n odd numbers is n^2.\e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// The sum of the first n even numbers is n^2 - n.\e[0m\n\
    \e[31m18 |\e[0m        \e[34m// The sum of the first n numbers is n(n + 1) / 2.\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// The sum of the first n odd numbers is n^2.\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// The sum of the first n even numbers is n^2\
    \ - n.\e[0m\n\e[31m21 |\e[0m        \e[34m// The sum of the first n numbers is\
    \ n(n + 1) / 2.\e[0m\n\e[31m22 |\e[0m        \e[34m// The sum of the first n odd\
    \ numbers is n^2.\e[0m\n\e[31m23 |\e[0m        \e[34m// The sum of the first n\
    \ even numbers is n^2 - n.\e[0m\n\e[31m24 |\e[0m        \e[34m// The sum of the\
    \ first n numbers is n(n + 1) / 2.\e[0m\n\e[31m25 |\e[0m        \e[34m// The sum\
    \ of the first n odd numbers is n^2.\e[0m\n\e[31m26 |\e[0m        \e[34m// The\
    \ sum of the first n even numbers is n^2 - n.\e[0m\n\e[31m27 |\e[0m        \e\
    [34m// The sum of the first n numbers is n(n + 1) / 2.\e[0m\n\e[31m28 |\e[0m \
    \       \e[34m// The sum of the first n odd numbers is n^2.\e[0m\n\e[31m29 |\e\
    [0m        \e[34m// The sum of the first n even numbers is n^2 - n.\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// The sum of the first n numbers is n(n + 1) / 2.\e[0m\n\
    \e[31m31 |\e[0m        \e[34m// The sum of the first n odd numbers is n^2.\e[0m\n\
    \e[31m32 |\e[0m        \e[34m// The sum of the first n even numbers is n^2 - n.\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// The sum of the first n numbers "
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var cnt = 0\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) cnt += 1\n                }\n            }\n        }\n        cnt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n  \
    \      // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i +\
    \ j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j\
    \ + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        //\
    \ = (i + j + k) * (i + j + k - 1) + (2)\n        // =\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgmhhvr4_.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m22 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m24 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m26 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m27 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m28 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m32 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m33 |\e[0m\
    \        \e[34m// =\e[0m\n\e[31m34 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028350
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5_p92_3.scala:26)\n\tat Problem.main(tmpj5_p92_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        var i = 1L\n        while (i <= n) {\n\
    \            var j = i + 1\n            while (j <= n) {\n                var\
    \ k = j + 1\n                while (k <= n) {\n                    if ((i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n            \
    \        k += 1\n                }\n                j += 1\n            }\n  \
    \          i += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028364
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n - 2) {\n            for\
    \ (j <- i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n       \
    \             if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_djrd_e.scala:26)\n\tat Problem.main(tmp8_djrd_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 -\
    \ 2)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i +\
    \ j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i + j + k -\
    \ 1) + (3 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k)\
    \ * (i + j + k - 1) + (3 - 1)\n        // = (i +\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxpe01p5b.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2 - 1)\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 2)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m25 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m27 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m28 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m29 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m30 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m31 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m32 |\e\
    [0m        \e[34m// = (i +\e[0m\n\e[31m33 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k\
    \ - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n\
    \        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i\
    \ + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 -\
    \ 2)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i +\
    \ j + k) * (i + j + k - 1) + (3)\n        // = (i + j + k) * (i + j + k - 1) +\
    \ (3 + 0)\n        // = (i + j + k) * (i + j + k - 1) + (3 + 1 - 1)\n        //\
    \ = (i + j + k) * (i + j + k - 1) + (3 + 2 - 2)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (3 + 3 - 3)\n        // = (i + j + k) * (i + j + k - 1) + (3\
    \ + 4 - 4)\n        // = (i + j + k) * (i + j + k - 1) + (3 + 5 - 5)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (3 + 6\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww4_to_u.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m15 |\e[0m        \e\
    [34m// = i * i + j * j + k * k - i - j - k + 3\e[0m\n\e[31m16 |\e[0m        \e\
    [34m// = (i + j + k) * (i + j + k) - (i + j + k) + 3\e[0m\n\e[31m17 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + 2\e[0m\n\e[31m18 |\e[0m     \
    \   \e[34m// = (i + j + k) * (i + j + k - 1) + 1 + 1\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// = (i + j + k) * (i + j + k - 1) + (1 + 1)\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2)\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (2 - 1)\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 2)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 - 1)\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3)\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 + 0)\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 + 1 - 1)\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 + 2 - 2)\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 + 3 - 3)\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1) + (3 + 4\
    \ - 4)\e[0m\n\e[31m30 |\e[0m        \e[34m// = (i + j + k) * (i + j + k - 1) +\
    \ (3 + 5 - 5)\e[0m\n\e[31m31 |\e[0m        \e[34m// = (i + j + k) * (i + j + k\
    \ - 1) + (3 + 6\e[0m\n\e[31m32 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n        // (1, 7, 21)\n        // (1, 13, 21)\n\
    \        // (3, 7, 13)\n        // (3, 7, 21)\n        // (3, 13, 21)\n      \
    \  // (7, 13, 21)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1,\
    \ 3, 21)\n        // (1, 7, 13)\n       \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpigyjgzis.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// (1,\
    \ 7, 13)\e[0m\n\e[31m14 |\e[0m        \e[34m// (1, 7, 21)\e[0m\n\e[31m15 |\e[0m\
    \        \e[34m// (1, 13, 21)\e[0m\n\e[31m16 |\e[0m        \e[34m// (3, 7, 13)\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// (3, 13, 21)\e[0m\n\e[31m19 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e\
    [31m20 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ (1, 3, 13)\e[0m\n\e[31m22 |\e[0m        \e[34m// (1, 3, 21)\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m24 |\e[0m        \e[34m// (1, 7, 21)\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// (1, 13, 21)\e[0m\n\e[31m26 |\e[0m       \
    \ \e[34m// (3, 7, 13)\e[0m\n\e[31m27 |\e[0m        \e[34m// (3, 7, 21)\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// (3, 13, 21)\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ (7, 13, 21)\e[0m\n\e[31m30 |\e[0m        \e[34m// (1, 3, 7)\e[0m\n\e[31m31 |\e\
    [0m        \e[34m// (1, 3, 13)\e[0m\n\e[31m32 |\e[0m        \e[34m// (1, 3, 21)\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m34 |\e[0m        \e\
    [34m// (1, 7, 21)\e[0m\n\e[31m35 |\e[0m        \e[34m// (1, 13, 21)\e[0m\n\e[31m36\
    \ |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m37 |\e[0m        \e[34m// (3,\
    \ 7, 21)\e[0m\n\e[31m38 |\e[0m        \e[34m// (3, 13, 21)\e[0m\n\e[31m39 |\e\
    [0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m40 |\e[0m        \e[34m// (1, 3, 7)\e\
    [0m\n\e[31m41 |\e[0m        \e[34m// (1, 3, 13)\e[0m\n\e[31m42 |\e[0m        \e\
    [34m// (1, 3, 21)\e[0m\n\e[31m43 |\e[0m        \e[34m// (1, 7, 13)\e[0m\n\e[31m44\
    \ |\e[0m        \e[34m// (1, 7, 21)\e[0m\n\e[31m45 |\e[0m        \e[34m// (1,\
    \ 13, 21)\e[0m\n\e[31m46 |\e[0m        \e[34m// (3, 7, 13)\e[0m\n\e[31m47 |\e\
    [0m        \e[34m// (3, 7, 21)\e[0m\n\e[31m48 |\e[0m        \e[34m// (3, 13, 21)\e\
    [0m\n\e[31m49 |\e[0m        \e[34m// (7, 13, 21)\e[0m\n\e[31m50 "
  stdout: ''
  timestamp: 1660028352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5_p92_3.scala:26)\n\tat Problem.main(tmpj5_p92_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        var count = 0L\n        for (i <- 1L to n) {\n            for (j\
    \ <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n              \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * a[i]\n        // a[i] + a[j] + a[k] = 3 * a[j]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[i] + 3 * a[j] + 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j]\
    \ + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        //\
    \ a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k]\
    \ = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j]\
    \ + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        //\
    \ a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k]\
    \ = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j]\
    \ + a[k])\n        // a[i] + a[j] + a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzlxydd70.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * a[i]\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[j]\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[k]\e[0m\n\e[31m19\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// a[i] + a[j] + a\e[0m\n\e[31m30 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n     \
    \   // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * i\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3\
    \ * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ - 1) * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1)\
    \ * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i\
    \ - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1)\
    \ + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3\
    \ * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmsszpeap.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3\e[0m\n\e[31m15 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i * i - i + 1)\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * i\e[0m\n\e[31m18 |\e[0m   \
    \     \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1)\
    \ + 3 * (i - 1) + 3\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j] + a[k] =\
    \ 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i -\
    \ 1) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1)\
    \ * (i - 1) + 3 * (i - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e[0m\n\e[31m25 |\e[0m     \
    \   \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\e[0m\n\
    \e[31m26 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3\
    \ * (\e[0m\n\e[31m27 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i\
    \ * i - 3 * i + 3 * j * j - 3 * j + 3 * k * k - 3 * k + 3\n        // = 3 * (i\
    \ * i - i + j * j - j + k * k - k) + 3\n        // = 3 * (i - j) * (i - j) + 3\
    \ * (j - k) * (j - k) + 3 * (k - i) * (k - i) + 3\n        // = 3 * (i - j) *\
    \ (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n        // = 3\
    \ * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n  \
    \      // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i -\
    \ k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i\
    \ - k) * (i - k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j -\
    \ k) + 3 * (i - k) * (i - k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j\
    \ - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n        // = 3 * (i - j) * (i -\
    \ j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n        // = 3 * (i\
    \ - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpztsa4460.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m13 |\e[0m        \e[34m// a[i]\
    \ = i * i - i + 1\e[0m\n\e[31m14 |\e[0m        \e[34m// a[i] + a[j] + a[k] = 3\
    \ * i * i - 3 * i + 3 * j * j - 3 * j + 3 * k * k - 3 * k + 3\e[0m\n\e[31m15 |\e\
    [0m        \e[34m// = 3 * (i * i - i + j * j - j + k * k - k) + 3\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 *\
    \ (k - i) * (k - i) + 3\e[0m\n\e[31m17 |\e[0m        \e[34m// = 3 * (i - j) *\
    \ (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\e[0m\n\e[31m18 |\e\
    [0m        \e[34m// = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i -\
    \ k) * (i - k) + 3\e[0m\n\e[31m19 |\e[0m        \e[34m// = 3 * (i - j) * (i -\
    \ j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k)\
    \ * (i - k) + 3\e[0m\n\e[31m21 |\e[0m        \e[34m// = 3 * (i - j) * (i - j)\
    \ + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\e[0m\n\e[31m22 |\e[0m  \
    \      \e[34m// = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k)\
    \ * (i - k) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// = 3 * (i - j) * (i - j)\
    \ + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\e[0m\n\e[31m24 |\e[0m  \
    \      \e[34m// = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k)\
    \ * (i - k)\e[0m\n\e[31m25 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028366
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    //\
    \ The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long\
    \ = {\n        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028342
