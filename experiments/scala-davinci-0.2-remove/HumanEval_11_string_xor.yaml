name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    def stringXor(a\
  \ : String, b : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val n = a.length\n        val m = b.length\n        val c = new Array[Char](max(n,\
    \ m))\n        for (i <- 0 until max(n, m)) {\n            if (i < n && i < m)\
    \ {\n                if (a(i) == b(i)) c(i) = '0'\n                else c(i) =\
    \ '1'\n            } else if (i < n) {\n                c(i) = a(i)\n        \
    \    } else {\n                c(i) = b(i)\n            }\n        }\n       \
    \ c.mkString", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n          \
    \  else result.append(\"1\")\n        }\n        result.toString", "        if\
    \ (a.length != b.length) throw new IllegalArgumentException(\"String lengths must\
    \ be equal\")\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n          \
    \  else result.append(\"1\")\n        }\n        result.toString", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\")\n       \
    \ }\n        sb.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\"\
    )\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val c = new StringBuilder\n        for (i <- 0 until a.length) {\n    \
    \        c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val sb = new StringBuilder\n       \
    \ for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"0\"\
    )\n            else sb.append(\"1\")\n        }\n        sb.toString", "     \
    \   val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val cBits = aBits.zip(bBits).map(p => if\
    \ (p._1 == p._2) 0 else 1)\n        cBits.map(c => if (c == 1) '1' else '0').mkString",
  "        val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val n = a.length\n       \
    \ val m = b.length\n        val c = new Array[Char](n)\n        for (i <- 0 until\
    \ n) {\n            if (a(i) == b(i)) c(i) = '0'\n            else c(i) = '1'\n\
    \        }\n        return c.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val sb = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) sb.append(\"0\")\n            else sb.append(\"1\")\n        }\n     \
    \   sb.toString", "        var result = \"\"\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        return result", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = (aBits zip bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val sb = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val n = a.length\n       \
    \ require(n == b.length)\n        val sb = new StringBuilder\n        for (i <-\
    \ 0 until n) {\n            val x = a(i) - '0'\n            val y = b(i) - '0'\n\
    \            sb.append((x ^ y).toString)\n        }\n        sb.toString", " \
    \       val a_array = a.split(\"\").map(_.toInt)\n        val b_array = b.split(\"\
    \").map(_.toInt)\n        val result = for (i <- 0 until a_array.length) yield\
    \ a_array(i) ^ b_array(i)\n        result.mkString(\"\")", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val sb = new StringBuilder\n       \
    \ for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"0\"\
    )\n            else sb.append(\"1\")\n        }\n        sb.toString", "     \
    \   var result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n    \
    \    return result", "        val aBits = a.map(c => c.toString.toInt)\n     \
    \   val bBits = b.map(c => c.toString.toInt)\n        val xor = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xor.map(i => i.toString).mkString", "        var result\
    \ = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i))\
    \ result += \"0\"\n            else result += \"1\"\n        }\n        return\
    \ result", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += '0'\n            else result\
    \ += '1'\n        }\n        result.toString", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n        }\n\
    \        c.toString", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += '0'\n      \
    \      else result += '1'\n        }\n        result.toString", "        val aBits\
    \ = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).mkString", "        val n = a.length\n \
    \       val m = b.length\n        if (n != m) {\n            println(\"Error:\
    \ input strings must have the same length.\")\n            return \"\"\n     \
    \   }\n        val c = new StringBuilder\n        for (i <- 0 until n) {\n   \
    \         if (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n\
    \        }\n        return c.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder()\n        for (i <- 0 until a.length) {\n      \
    \      if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val result = new StringBuilder\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBinary = a.toInt(2)\n        val bBinary = b.toInt(2)\n        val\
    \ xor = aBinary ^ bBinary\n        xor.toBinaryString", "        val aBits = a.map(_.toString.toInt)\n\
    \        val bBits = b.map(_.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(_.toString).reduce(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = \"\"\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   if (a.length != b.length) {\n            throw new IllegalArgumentException(\"\
    Strings must be of equal length\")\n        }\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) {\n    \
    \            sb.append('0')\n            } else {\n                sb.append('1')\n\
    \            }\n        }\n        sb.toString", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).mkString", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"0\")\n   \
    \         else sb.append(\"1\")\n        }\n        sb.toString", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        // Convert strings to integers\n        val aInt = Integer.parseInt(a,\
    \ 2)\n        val bInt = Integer.parseInt(b, 2)\n        // Perform XOR\n    \
    \    val result = aInt ^ bInt\n        // Convert result back to string\n    \
    \    return result.toBinaryString", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ n = a.length\n        val m = b.length\n        if (n != m) throw new IllegalArgumentException\n\
    \        val sb = new StringBuilder\n        for (i <- 0 until n) {\n        \
    \    val ai = a(i)\n            val bi = b(i)\n            if (ai == bi) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        cBits.map(c => c.toString).reduceLeft(_ + _)", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        result.map(i => i.toString).mkString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val result = for (i <- 0 until a.length) yield (aBits(i) ^ bBits(i))\n\
    \        result.mkString", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"0\")\n   \
    \         else sb.append(\"1\")\n        }\n        sb.toString", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until a.length)\n            sb.append((a(i)\
    \ - '0') ^ (b(i) - '0'))\n        sb.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val xorBits = aBits.zip(bBits).map(p =>\
    \ if (p._1 == p._2) 0 else 1)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        if (a.length\
    \ != b.length) throw new IllegalArgumentException(\"Inputs must be of same length\"\
    )\n        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aa = a.toCharArray\n        val bb = b.toCharArray\n        val cc\
    \ = new Array[Char](aa.length)\n        for (i <- 0 until aa.length) {\n     \
    \       if (aa(i) == bb(i)) cc(i) = '0'\n            else cc(i) = '1'\n      \
    \  }\n        return cc.mkString", "        val a_int = Integer.parseInt(a, 2)\n\
    \        val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^ b_int\n\
    \        val c = Integer.toBinaryString(c_int)\n        return c", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val aBits = a.toList.map(x => x.toString.toInt)\n \
    \       val bBits = b.toList.map(x => x.toString.toInt)\n        val xorBits =\
    \ aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_\
    \ + _)", "        val c = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"\
    1\")\n        }\n        c.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val result = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        result.map(i => i.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        if (a.length != b.length)\
    \ throw new IllegalArgumentException(\"Strings must be of equal length\")\n  \
    \      val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         val ai = a(i)\n            val bi = b(i)\n            if (ai == bi)\
    \ sb.append(\"0\")\n            else sb.append(\"1\")\n        }\n        sb.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        // Convert strings to integers\n        val\
    \ aInt = Integer.parseInt(a, 2)\n        val bInt = Integer.parseInt(b, 2)\n \
    \       // Perform XOR\n        val result = aInt ^ bInt\n        // Convert result\
    \ back to string\n        return Integer.toBinaryString(result)", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBinary = a.toInt(2)\n\
    \        val bBinary = b.toInt(2)\n        val result = aBinary ^ bBinary\n  \
    \      result.toBinaryString", "        val result = new StringBuilder\n     \
    \   for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            c.append((a(i)\
    \ - '0') ^ (b(i) - '0'))\n        }\n        c.toString", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(x => x.toString.toInt)\n\
    \        val bBits = b.map(x => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^\
    \ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_arr = a.toCharArray\n\
    \        val b_arr = b.toCharArray\n        val result = new Array[Char](a_arr.length)\n\
    \        for (i <- 0 until a_arr.length) {\n            if (a_arr(i) == b_arr(i))\
    \ result(i) = '0'\n            else result(i) = '1'\n        }\n        result.mkString",
  "        val aBits = a.map(c => c - '0')\n        val bBits = b.map(c => c - '0')\n\
    \        val cBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        cBits.map(b\
    \ => b + '0').mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\"\
    )\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(c\
    \ => if (c == '1') 1 else 0)\n        val bBits = b.toList.map(c => if (c == '1')\
    \ 1 else 0)\n        val xorBits = (aBits zip bBits).map(p => p._1 ^ p._2)\n \
    \       xorBits.map(b => if (b == 1) '1' else '0').mkString", "        val sb\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) sb.append(\"0\")\n            else sb.append(\"1\")\n        }\n  \
    \      sb.toString", "        val n = a.length\n        val m = b.length\n   \
    \     if (n != m) {\n            throw new Exception(\"Strings must be of equal\
    \ length\")\n        }\n        val sb = new StringBuilder\n        for (i <-\
    \ 0 until n) {\n            if (a(i) == b(i)) {\n                sb.append(\"\
    0\")\n            } else {\n                sb.append(\"1\")\n            }\n\
    \        }\n        sb.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = (aBits zip bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).mkString",
  "        // Convert strings to arrays of bytes.\n        val aBytes = a.getBytes\n\
    \        val bBytes = b.getBytes\n        // XOR each byte in the arrays.\n  \
    \      val xorBytes = aBytes.zip(bBytes).map(x => (x._1 ^ x._2).toByte)\n    \
    \    // Convert the result back to a string.\n        new String(xorBytes)", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n        }\n\
    \        c.toString", "        val n = a.length\n        val m = b.length\n  \
    \      if (n != m) throw new IllegalArgumentException(\"Strings must be of equal\
    \ length\")\n        val sb = new StringBuilder\n        for (i <- 0 until n)\
    \ {\n            if (a(i) == b(i)) sb.append('0')\n            else sb.append('1')\n\
    \        }\n        sb.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val c = new StringBuilder()\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) c.append('0')\n\
    \            else c.append('1')\n        }\n        c.toString", "        val\
    \ aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).reduce(_ + _)", "        val aBits\
    \ = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            val ai = a(i)\n          \
    \  val bi = b(i)\n            val xor = if (ai == bi) '0' else '1'\n         \
    \   result.append(xor)\n        }\n        result.toString", "        val sb =\
    \ new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) sb.append(\"0\")\n            else sb.append(\"1\")\n        }\n  \
    \      sb.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n  \
    \          else result.append(\"1\")\n        }\n        result.toString", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val sb = new StringBuilder\n    \
    \    for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\")\n       \
    \ }\n        sb.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\"\
    )\n            else result.append(\"1\")\n        }\n        result.toString",
  "        if (a.length != b.length) throw new IllegalArgumentException(\"Strings\
    \ must be of equal length\")\n        val result = new StringBuilder\n       \
    \ for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val n = a.length\n        val c = new Array[Char](n)\n        for (i <-\
    \ 0 until n) {\n            if (a(i) == b(i)) c(i) = '0'\n            else c(i)\
    \ = '1'\n        }\n        return c.mkString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = (aBits\
    \ zip bBits).map(c => c._1 ^ c._2)\n        xorBits.map(c => c.toString).reduceLeft(_\
    \ + _)", "        val a_arr = a.toCharArray\n        val b_arr = b.toCharArray\n\
    \        val c_arr = new Array[Char](a_arr.length)\n        for (i <- 0 until\
    \ a_arr.length) {\n            if (a_arr(i) == b_arr(i)) c_arr(i) = '0'\n    \
    \        else c_arr(i) = '1'\n        }\n        return c_arr.mkString", "   \
    \     val a_arr = a.toCharArray\n        val b_arr = b.toCharArray\n        val\
    \ result = new Array[Char](a_arr.length)\n        for (i <- 0 until a_arr.length)\
    \ {\n            if (a_arr(i) == b_arr(i)) result(i) = '0'\n            else result(i)\
    \ = '1'\n        }\n        result.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        var result = \"\"\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += \"0\"\n            else\
    \ result += \"1\"\n        }\n        return result", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val sb = new StringBuilder\n    \
    \    for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val n = a.length\n       \
    \ val c = new Array[Char](n)\n        for (i <- 0 until n) {\n            if (a(i)\
    \ == b(i)) c(i) = '0'\n            else c(i) = '1'\n        }\n        return\
    \ c.mkString", "        var result = \"\"\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        return result", "        val aBits = a.map(c => if\
    \ (c == '1') 1 else 0)\n        val bBits = b.map(c => if (c == '1') 1 else 0)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => if (b == 1) '1' else '0').mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val n = a.length\n        val m = b.length\n        if (n != m) throw\
    \ new Exception(\"Lengths of strings are not equal\")\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until n) {\n            if (a(i) == b(i)) sb.append(\"0\"\
    )\n            else sb.append(\"1\")\n        }\n        sb.toString", "     \
    \   val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val n = a.length\n       \
    \ var result = \"\"\n        for (i <- 0 until n) {\n            if (a(i) == b(i))\
    \ result += \"0\"\n            else result += \"1\"\n        }\n        result",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduce(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       require(a.length == b.length)\n        val sb = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append('0')\n\
    \            else sb.append('1')\n        }\n        sb.toString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       require(a.length == b.length)\n        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       if (a.length != b.length) throw new IllegalArgumentException(\"Inputs\
    \ must be of equal length\")\n        val result = new StringBuilder\n       \
    \ for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result += '0'\n            else result += '1'\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(x => x.toString.toInt)\n\
    \        val bBits = b.toList.map(x => x.toString.toInt)\n        val cBits =\
    \ aBits.zip(bBits).map(x => x._1 ^ x._2)\n        cBits.map(x => x.toString).reduceLeft(_\
    \ + _)", "        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += '0'\n            else result += '1'\n\
    \        }\n        result.toString", "        var result = \"\"\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n \
    \           else result += \"1\"\n        }\n        return result", "       \
    \ val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = (aBits zip bBits).map(p => p._1\
    \ ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val result = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        result.map(i\
    \ => i.toString).reduceLeft(_ + _)", "        val a_arr = a.toCharArray\n    \
    \    val b_arr = b.toCharArray\n        val result = new Array[Char](a_arr.length)\n\
    \        for (i <- 0 until a_arr.length) {\n            if (a_arr(i) == b_arr(i))\
    \ result(i) = '0'\n            else result(i) = '1'\n        }\n        result.mkString",
  "        val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val xorBits = aBits.zip(bBits).map(t =>\
    \ t._1 ^ t._2)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val n = a.length\n        val m = b.length\n        if (n != m) throw new\
    \ Exception(\"Inputs must be of equal length\")\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until n) {\n            if (a(i) == b(i)) sb.append(\"0\"\
    )\n            else sb.append(\"1\")\n        }\n        sb.toString", "     \
    \   if (a.length != b.length) {\n            throw new IllegalArgumentException(\"\
    a and b must be the same length\")\n        }\n        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) {\n    \
    \            sb.append('0')\n            } else {\n                sb.append('1')\n\
    \            }\n        }\n        sb.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val n = a.length\n       \
    \ val c = new Array[Char](n)\n        for (i <- 0 until n) {\n            if (a(i)\
    \ == b(i)) c(i) = '0'\n            else c(i) = '1'\n        }\n        c.mkString",
  "        val result = new StringBuilder()\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = \"\"\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   val result = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val sb = new StringBuilder\n        for (i <-\
    \ 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"0\")\n      \
    \      else sb.append(\"1\")\n        }\n        sb.toString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        result.map(i => i.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = \"\"\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).mkString", "        val sb = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            val ai = a(i)\n            val bi = b(i)\n\
    \            if (ai == bi) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString"]
stop_tokens:
- "\n    }\n"
