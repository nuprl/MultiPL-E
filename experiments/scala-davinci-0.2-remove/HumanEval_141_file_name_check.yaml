name: HumanEval_141_file_name_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which takes a string representing a file's name, and returns\n\
  \    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   \
  \ // A file's name is considered to be valid if and only if all the following conditions\
  \ \n    // are met:\n    // - There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n    // - The file's name contains exactly one dot '.'\n \
  \   // - The substring before the dot should not be empty, and it starts with a\
  \ letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
  \    def fileNameCheck(file_name : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        val file_name_parts = file_name.split(\"\\\\.\")\n        if\
    \ (file_name_parts.length != 2) return \"No\"\n        if (file_name_parts(0).length\
    \ == 0) return \"No\"\n        if (file_name_parts(0).count(c => c >= '0' && c\
    \ <= '9') > 3) return \"No\"\n        if (file_name_parts(0)(0) < 'a' || file_name_parts(0)(0)\
    \ > 'z') return \"No\"\n        if (file_name_parts(1) != \"txt\" && file_name_parts(1)\
    \ != \"exe\" && file_name_parts(1) != \"dll\") return \"No\"\n        return \"\
    Yes\"", "        val pattern = \"([a-zA-Z]+)([0-9]{0,3})(\\\\.[a-zA-Z]+)\".r\n\
    \        val pattern(a, b, c) = file_name\n        if (b.length > 3) \"No\"\n\
    \        else if (c != \".txt\" && c != \".exe\" && c != \".dll\") \"No\"\n  \
    \      else \"Yes\"", "        // Write your code here\n        val pattern =\
    \ \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val name_parts = file_name.split(\"\
    \\\\.\")\n        if (name_parts.length != 2) return \"No\"\n        val name\
    \ = name_parts(0)\n        val ext = name_parts(1)\n        if (name.length ==\
    \ 0 || name.length > 8) return \"No\"\n        if (name.count(c => c >= '0' &&\
    \ c <= '9') > 3) return \"No\"\n        if (name(0) < 'A' || name(0) > 'z' ||\
    \ (name(0) > 'Z' && name(0) < 'a')) return \"No\"\n        if (ext != \"txt\"\
    \ && ext != \"exe\" && ext != \"dll\") return \"No\"\n        \"Yes\"", "    \
    \    if (file_name.count(c => c >= '0' && c <= '9') > 3) return \"No\"\n     \
    \   val dot_index = file_name.indexOf('.')\n        if (dot_index == -1) return\
    \ \"No\"\n        if (dot_index == 0) return \"No\"\n        if (file_name.count(c\
    \ => c == '.') != 1) return \"No\"\n        if (file_name(dot_index - 1) == '.')\
    \ return \"No\"\n        if (file_name(dot_index + 1) == '.') return \"No\"\n\
    \        if (file_name(dot_index + 1) == '.') return \"No\"\n        if (file_name(0)\
    \ >= '0' && file_name(0) <= '9') return \"No\"\n        if (file_name(0) >= 'a'\
    \ && file_name(0) <= 'z') return \"Yes\"\n        if (file_name(0) >= 'A' && file_name(0)\
    \ <= 'Z') return \"Yes\"\n        return \"No\"", "        val pattern = \"\"\"\
    ([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n   \
    \         case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n   \
    \     }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        pattern.findFirstIn(file_name)\
    \ match {\n            case Some(x) => \"Yes\"\n            case None => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.([a-zA-Z]+)\"\
    \"\".r\n        val pattern(name, number, ext) = file_name\n        if (number.length\
    \ <= 3 && ext == \"txt\" || ext == \"exe\" || ext == \"dll\") \"Yes\" else \"\
    No\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n\
    \        pattern.findFirstIn(file_name) match {\n            case Some(s) => \"\
    Yes\"\n            case None => \"No\"\n        }", "        val pattern = \"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\".r\n        val result = pattern.findFirstIn(file_name)\n\
    \        if (result == None) \"No\" else \"Yes\"", "        val pattern = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\".r\n\
    \        if (pattern.findFirstIn(file_name).isDefined) {\n            val parts\
    \ = file_name.split(\"\\\\.\")\n            if (parts(1) == \"txt\" || parts(1)\
    \ == \"exe\" || parts(1) == \"dll\") {\n                \"Yes\"\n            }\
    \ else {\n                \"No\"\n            }\n        } else {\n          \
    \  \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write\
    \ your code here\n        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern(_*) => \"Yes\"\n     \
    \       case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        val result = pattern.findFirstIn(file_name)\n \
    \       if (result == None) \"No\" else \"Yes\"", "        val pattern = \"\"\"\
    ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n \
    \       }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val name_pattern = \"\"\"\
    ([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        val digit_pattern = \"\"\"\\d\"\
    \"\".r\n        val digit_count = digit_pattern.findAllIn(file_name).length\n\
    \        val name_match = name_pattern.findFirstIn(file_name)\n        if (digit_count\
    \ > 3) {\n            \"No\"\n        } else if (name_match == None) {\n     \
    \       \"No\"\n        } else {\n            \"Yes\"\n        }", "        val\
    \ pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val digits = \"0123456789\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val extensions = List(\"txt\", \"exe\", \"dll\")\n        var count\
    \ = 0\n        var dot = false\n        var extension = \"\"\n        var name\
    \ = \"\"\n        for (i <- 0 until file_name.length) {\n            if (digits.contains(file_name(i)))\
    \ {\n                count += 1\n            }\n            if (file_name(i) ==\
    \ '.') {\n                dot = true\n                extension = file_name.substring(i\
    \ + 1)\n                name = file_name.substring(0, i)\n            }\n    \
    \    }\n        if (count > 3 || !dot || name.length == 0 || !letters.contains(name(0))\
    \ || !extensions.contains(extension)) {\n            \"No\"\n        } else {\n\
    \            \"Yes\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(name, ext) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val file_name_regex = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case file_name_regex(_, _, _) => \"Yes\"\n            case _ => \"\
    No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        val result = pattern.findFirstIn(file_name)\n        if (result.isEmpty)\
    \ \"No\" else \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\"\
    .r\n        file_name match {\n            case pattern(_, _) => \"Yes\"\n   \
    \         case _ => \"No\"\n        }", "        val file_name_regex = \"\"\"\
    ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case file_name_regex(_, _, _) => \"Yes\"\n            case _ => \"\
    No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        pattern.findFirstIn(file_name) match {\n      \
    \      case Some(x) => \"Yes\"\n            case None => \"No\"\n        }", " \
    \       val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        if\
    \ (pattern.findFirstIn(file_name) == None) \"No\" else \"Yes\"", "        val\
    \ pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        if (pattern.findFirstIn(file_name)\
    \ == None) \"No\" else \"Yes\"", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val file_name_regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case file_name_regex(_, _, _) =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern = \"\
    \"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        // Write your code here\n        return \"\"", "       \
    \ val name_parts = file_name.split(\"\\\\.\")\n        if (name_parts.length !=\
    \ 2) return \"No\"\n        val name = name_parts(0)\n        val ext = name_parts(1)\n\
    \        if (name.length == 0 || !name(0).isLetter) return \"No\"\n        if\
    \ (name.count(c => c.isDigit) > 3) return \"No\"\n        if (ext != \"txt\" &&\
    \ ext != \"exe\" && ext != \"dll\") return \"No\"\n        return \"Yes\"", " \
    \       val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        pattern.findFirstIn(file_name)\
    \ match {\n            case Some(x) => \"Yes\"\n            case None => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(name, ext) => {\n                if (name.count(_.isDigit)\
    \ > 3) \"No\" else \"Yes\"\n            }\n            case _ => \"No\"\n    \
    \    }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val file_name_regex = \"\"\
    \"([a-zA-Z][a-zA-Z0-9]*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case file_name_regex(substring_before_dot, substring_after_dot) =>\
    \ {\n                if (substring_before_dot.count(c => c >= '0' && c <= '9')\
    \ <= 3) {\n                    \"Yes\"\n                } else {\n           \
    \         \"No\"\n                }\n            }\n            case _ => \"No\"\
    \n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        if (pattern.findFirstIn(file_name) == None) \"No\" else \"Yes\"",
  "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n   \
    \     file_name match {\n            case pattern(_, _, _) => \"Yes\"\n      \
    \      case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[txt|exe|dll]$\".r\n        if (pattern.findFirstIn(file_name) == None) \"\
    No\" else \"Yes\"", "        if (file_name.count(c => c >= '0' && c <= '9') >\
    \ 3) return \"No\"\n        if (file_name.count(c => c == '.') != 1) return \"\
    No\"\n        val name_parts = file_name.split('.')\n        if (name_parts(0).length\
    \ == 0 || name_parts(0)(0) < 'A' || name_parts(0)(0) > 'z') return \"No\"\n  \
    \      if (name_parts(1) != \"txt\" && name_parts(1) != \"exe\" && name_parts(1)\
    \ != \"dll\") return \"No\"\n        \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]\\\
    w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(a,\
    \ b) => \"Yes\"\n            case _ => \"No\"\n        }", "        val file_name_pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case file_name_pattern(_, _, _) => \"Yes\"\n            case\
    \ _ => \"No\"\n        }", "        val digits = \"0123456789\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        val extensions\
    \ = List(\"txt\", \"exe\", \"dll\")\n        var digit_count = 0\n        var\
    \ dot_count = 0\n        var extension_found = false\n        var extension =\
    \ \"\"\n        for (i <- 0 until file_name.length) {\n            if (digits.contains(file_name(i)))\
    \ digit_count += 1\n            if (file_name(i) == '.') {\n                dot_count\
    \ += 1\n                extension = file_name.substring(i + 1)\n            }\n\
    \        }\n        if (extensions.contains(extension)) extension_found = true\n\
    \        if (digit_count > 3 || dot_count != 1 || !letters.contains(file_name(0))\
    \ || !extension_found) \"No\" else \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write\
    \ your code here\n        return \"\"", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)\"\
    .r\n        if (pattern.findFirstIn(file_name).isDefined) \"Yes\" else \"No\"",
  "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n \
    \       file_name match {\n            case pattern(_, _, _) => \"Yes\"\n    \
    \        case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]\\\
    w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)\".r\n        if (pattern.findFirstIn(file_name).isDefined)\
    \ \"Yes\" else \"No\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(a, b) => \"Yes\"\n            case _ => \"No\"\n   \
    \     }", "        // Write your code here\n        return \"\"", "        val\
    \ pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name\
    \ match {\n            case pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        // Write your code here\n        return \"\"",
  "        val regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n   \
    \     file_name match {\n            case regex(_, _, _) => \"Yes\"\n        \
    \    case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        if (pattern.findFirstIn(file_name) == None) \"\
    No\" else \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\
    \n        val parts = file_name.split('.')\n        if (parts(0).isEmpty || !parts(0)(0).isLetter)\
    \ return \"No\"\n        if (parts(1) != \"txt\" && parts(1) != \"exe\" && parts(1)\
    \ != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern = \"\
    ([a-zA-Z]+)([0-9]{0,3})(\\\\.[a-zA-Z]+)\".r\n        file_name match {\n     \
    \       case pattern(prefix, digits, suffix) => {\n                if (suffix\
    \ == \".txt\" || suffix == \".exe\" || suffix == \".dll\") \"Yes\"\n         \
    \       else \"No\"\n            }\n            case _ => \"No\"\n        }",
  "        val file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case file_name_regex() => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val file_name_pattern = \"\
    \"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case file_name_pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern() =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }", "        val file_name_regex\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case file_name_regex(_, _, _) => \"Yes\"\n            case _\
    \ => \"No\"\n        }", "        val digits = \"0123456789\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        val extensions\
    \ = List(\"txt\", \"exe\", \"dll\")\n        var count = 0\n        for (i <-\
    \ 0 until file_name.length) {\n            if (digits.contains(file_name(i)))\
    \ count += 1\n        }\n        if (count > 3) return \"No\"\n        val parts\
    \ = file_name.split(\"\\\\.\")\n        if (parts.length != 2) return \"No\"\n\
    \        if (parts(0).length == 0 || !letters.contains(parts(0)(0))) return \"\
    No\"\n        if (!extensions.contains(parts(1))) return \"No\"\n        return\
    \ \"Yes\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    .r\n        file_name match {\n            case pattern() => \"Yes\"\n       \
    \     case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit) >\
    \ 3) return \"No\"\n        if (file_name.count(_ == '.') != 1) return \"No\"\n\
    \        val dot_index = file_name.indexOf('.')\n        if (dot_index == 0) return\
    \ \"No\"\n        if (!file_name.substring(0, dot_index).head.isLetter) return\
    \ \"No\"\n        val extension = file_name.substring(dot_index + 1)\n       \
    \ if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") return\
    \ \"No\"\n        \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write\
    \ your code here\n        return \"\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\\
    d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val file_name_split\
    \ = file_name.split(\"\\\\.\")\n        if (file_name_split.length != 2) return\
    \ \"No\"\n        val file_name_first = file_name_split(0)\n        val file_name_second\
    \ = file_name_split(1)\n        if (file_name_first.length == 0) return \"No\"\
    \n        if (file_name_first.count(c => c >= '0' && c <= '9') > 3) return \"\
    No\"\n        if (file_name_first(0) < 'a' || file_name_first(0) > 'z') return\
    \ \"No\"\n        if (file_name_second != \"txt\" && file_name_second != \"exe\"\
    \ && file_name_second != \"dll\") return \"No\"\n        return \"Yes\"", "  \
    \      val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n    \
    \    file_name match {\n            case pattern(_*) => \"Yes\"\n            case\
    \ _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val file_name_split\
    \ = file_name.split(\"\\\\.\")\n        val file_name_split_length = file_name_split.length\n\
    \        if (file_name_split_length != 2) return \"No\"\n        val file_name_split_0\
    \ = file_name_split(0)\n        val file_name_split_1 = file_name_split(1)\n \
    \       if (file_name_split_0.length == 0) return \"No\"\n        val file_name_split_0_char_0\
    \ = file_name_split_0(0)\n        if (!(file_name_split_0_char_0 >= 'a' && file_name_split_0_char_0\
    \ <= 'z' || file_name_split_0_char_0 >= 'A' && file_name_split_0_char_0 <= 'Z'))\
    \ return \"No\"\n        val file_name_split_0_digit_count = file_name_split_0.count(c\
    \ => c >= '0' && c <= '9')\n        if (file_name_split_0_digit_count > 3) return\
    \ \"No\"\n        if (file_name_split_1 != \"txt\" && file_name_split_1 != \"\
    exe\" && file_name_split_1 != \"dll\") return \"No\"\n        \"Yes\"", "    \
    \    val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\".r\n        file_name\
    \ match {\n            case pattern(_*) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        // Write your code here\n        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case regex(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"([a-zA-Z]+)([0-9]{0,3})(\\\\.[a-zA-Z]+)\"\
    .r\n        file_name match {\n            case pattern(prefix, digits, suffix)\
    \ => {\n                if (suffix == \".txt\" || suffix == \".exe\" || suffix\
    \ == \".dll\") \"Yes\"\n                else \"No\"\n            }\n         \
    \   case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case file_name_regex(_*) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern() =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern = \"\
    \"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern(_*) => \"Yes\"\n     \
    \       case _ => \"No\"\n        }", "        val regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case regex(_, _,\
    \ _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        // Write your code here\n        val pattern = \"\"\"([a-zA-Z]\\\
    w*)\\.(txt|exe|dll)\"\"\".r\n        val pattern(name, ext) = file_name\n    \
    \    if (name.matches(\"\"\"\\d{4,}\"\"\")) \"No\"\n        else \"Yes\"", " \
    \       val pattern = \"([a-zA-Z]+)([0-9]{0,3})(\\\\.txt|\\\\.exe|\\\\.dll)\"\
    .r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\n\
    \            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        if (pattern.findFirstIn(file_name) == None) \"No\" else \"Yes\"",
  "        // Write your code here\n        return \"\"", "        val pattern = \"\
    \"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern() => \"Yes\"\n       \
    \     case _ => \"No\"\n        }", "        val file_name_regex = \"\"\"([a-zA-Z]\\\
    w*)\\.(txt|exe|dll)\"\"\".r\n        val file_name_regex(name, extension) = file_name\n\
    \        if (name.length == 0) return \"No\"\n        if (name.count(_.isDigit)\
    \ > 3) return \"No\"\n        \"Yes\"", "        val file_name_pattern = \"\"\"\
    ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case file_name_pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        val dot_index = file_name.indexOf('.')\n       \
    \ if (dot_index == -1) return \"No\"\n        if (dot_index == 0) return \"No\"\
    \n        if (!file_name(dot_index - 1).isLetter) return \"No\"\n        if (file_name.substring(dot_index\
    \ + 1) != \"txt\" && file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern\
    \ = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        val result = pattern.findFirstIn(file_name)\n\
    \        if (result == None) \"No\" else \"Yes\"", "        val pattern = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\"\
    .r\n        val pattern(name, ext) = file_name\n        if (name.matches(\"\"\"\
    \\d{1,3}\"\"\")) \"No\" else \"Yes\"", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n  \
    \          case pattern(name, ext) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n    \
    \    if (file_name.count(_ == '.') != 1) return \"No\"\n        val file_name_split\
    \ = file_name.split('.')\n        if (file_name_split(0).isEmpty) return \"No\"\
    \n        if (!file_name_split(0)(0).isLetter) return \"No\"\n        if (file_name_split(1)\
    \ != \"txt\" && file_name_split(1) != \"exe\" && file_name_split(1) != \"dll\"\
    ) return \"No\"\n        return \"Yes\"", "        val file_name_regex = \"\"\"\
    ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case file_name_regex(_, _, _) => \"Yes\"\n            case _ => \"\
    No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case pattern(_*) => \"Yes\"\n     \
    \       case _ => \"No\"\n        }", "        // Write your code here\n     \
    \   return \"\"", "        val digits = file_name.filter(c => c >= '0' && c <=\
    \ '9')\n        if (digits.length > 3) return \"No\"\n        val dot_index =\
    \ file_name.indexOf('.')\n        if (dot_index == -1) return \"No\"\n       \
    \ val prefix = file_name.substring(0, dot_index)\n        if (prefix.length ==\
    \ 0 || !(prefix(0) >= 'a' && prefix(0) <= 'z' || prefix(0) >= 'A' && prefix(0)\
    \ <= 'Z')) return \"No\"\n        val suffix = file_name.substring(dot_index +\
    \ 1)\n        if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\
    ) return \"No\"\n        \"Yes\"", "        // Write your code here\n        return\
    \ \"\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]\\\
    w*)\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(x,\
    \ y) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val pattern = \"\"\"([a-zA-Z]{1}[a-zA-Z0-9]*)\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(name, ext) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern =\
    \ \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\".r\n        if (pattern.findFirstIn(file_name)\
    \ == None) \"No\" else \"Yes\"", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        pattern.findFirstIn(file_name) match {\n      \
    \      case Some(x) => \"Yes\"\n            case None => \"No\"\n        }", " \
    \       val file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    .r\n        file_name match {\n            case file_name_regex(_*) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        if (pattern.findFirstIn(file_name) == None) \"\
    No\" else \"Yes\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\"\
    .r\n        if (pattern.findFirstIn(file_name) == None) \"No\" else \"Yes\"",
  "        val pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n    \
    \    val result = pattern.findFirstIn(file_name)\n        if (result.isEmpty)\
    \ \"No\" else \"Yes\"", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write\
    \ your code here\n        return \"\"", "        val pattern = \"\"\"([a-zA-Z][a-zA-Z0-9]*)\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val file_name_regex\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case file_name_regex(_, _, _) => \"Yes\"\n            case _\
    \ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val file_name_split = file_name.split(\"\\\\.\")\n    \
    \    if (file_name_split.length != 2) return \"No\"\n        val file_name_split_0\
    \ = file_name_split(0)\n        val file_name_split_1 = file_name_split(1)\n \
    \       if (file_name_split_0.length == 0) return \"No\"\n        if (file_name_split_0.count(_.isDigit)\
    \ > 3) return \"No\"\n        if (!file_name_split_0.head.isLetter) return \"\
    No\"\n        if (file_name_split_1 != \"txt\" && file_name_split_1 != \"exe\"\
    \ && file_name_split_1 != \"dll\") return \"No\"\n        return \"Yes\"", " \
    \       val file_name_pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.[a-zA-Z]{3}$\"\
    .r\n        file_name match {\n            case file_name_pattern() => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val regex = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case regex(_, _,\
    \ _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write your\
    \ code here\n        return \"\"", "        val digits = \"0123456789\"\n    \
    \    val alphapet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \        val extensions = List(\"txt\", \"exe\", \"dll\")\n        var count =\
    \ 0\n        for (i <- 0 until file_name.length) {\n            if (digits.contains(file_name(i)))\
    \ count += 1\n        }\n        if (count > 3) return \"No\"\n        val dot_index\
    \ = file_name.indexOf('.')\n        if (dot_index == -1) return \"No\"\n     \
    \   val extension = file_name.substring(dot_index + 1)\n        if (!extensions.contains(extension))\
    \ return \"No\"\n        val name = file_name.substring(0, dot_index)\n      \
    \  if (name.length == 0) return \"No\"\n        if (!alphapet.contains(name(0)))\
    \ return \"No\"\n        return \"Yes\"", "        // Write your code here\n \
    \       return \"\"", "        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        val dot_index = file_name.indexOf('.')\n       \
    \ if (dot_index == -1) return \"No\"\n        if (dot_index == 0) return \"No\"\
    \n        if (!file_name(dot_index - 1).isLetter) return \"No\"\n        if (file_name.substring(dot_index\
    \ + 1) != \"txt\" && file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        return \"Yes\"", "        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        // Write your code here\n        return \"\"", "      \
    \  val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n     \
    \   file_name match {\n            case pattern(_, _, _) => \"Yes\"\n        \
    \    case _ => \"No\"\n        }", "        val dot_index = file_name.indexOf('.')\n\
    \        if (dot_index == -1) return \"No\"\n        val name = file_name.substring(0,\
    \ dot_index)\n        val ext = file_name.substring(dot_index + 1)\n        if\
    \ (name.length == 0 || !name(0).isLetter) return \"No\"\n        if (name.count(c\
    \ => c.isDigit) > 3) return \"No\"\n        if (ext != \"txt\" && ext != \"exe\"\
    \ && ext != \"dll\") return \"No\"\n        \"Yes\"", "        val pattern = \"\
    \"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val file_name_regex = \"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name match {\n     \
    \       case file_name_regex(_*) => \"Yes\"\n            case _ => \"No\"\n  \
    \      }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }", "        // Write\
    \ your code here\n        return \"\"", "        val file_name_pattern = \"\"\"\
    ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n \
    \           case file_name_pattern(_, _, _) => \"Yes\"\n            case _ =>\
    \ \"No\"\n        }", "        // Write your code here\n        return \"\"",
  "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n        file_name\
    \ match {\n            case pattern() => \"Yes\"\n            case _ => \"No\"\
    \n        }", "        val file_name_split = file_name.split(\"\\\\.\")\n    \
    \    if (file_name_split.length != 2) return \"No\"\n        val file_name_split_0\
    \ = file_name_split(0)\n        val file_name_split_1 = file_name_split(1)\n \
    \       if (file_name_split_0.length == 0) return \"No\"\n        if (file_name_split_0.count(c\
    \ => c >= '0' && c <= '9') > 3) return \"No\"\n        if (file_name_split_0(0)\
    \ < 'A' || file_name_split_0(0) > 'z' || (file_name_split_0(0) > 'Z' && file_name_split_0(0)\
    \ < 'a')) return \"No\"\n        if (file_name_split_1 != \"txt\" && file_name_split_1\
    \ != \"exe\" && file_name_split_1 != \"dll\") return \"No\"\n        return \"\
    Yes\"", "        if (file_name.count(_.isDigit) > 3) return \"No\"\n        val\
    \ dot_index = file_name.indexOf('.')\n        if (dot_index == -1) return \"No\"\
    \n        if (dot_index == 0) return \"No\"\n        if (!file_name(dot_index\
    \ - 1).isLetter) return \"No\"\n        if (file_name.substring(dot_index + 1)\
    \ != \"txt\" && file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        return \"Yes\"", "        // Write your\
    \ code here\n        return \"\"", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.[a-zA-Z]+$\".r\n        val match_result = pattern.findFirstIn(file_name)\n\
    \        if (match_result.isEmpty) {\n            return \"No\"\n        }\n \
    \       val match_string = match_result.get\n        val dot_index = match_string.indexOf('.')\n\
    \        val extension = match_string.substring(dot_index + 1)\n        if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n            return\
    \ \"Yes\"\n        }\n        return \"No\"", "        val name = file_name.split(\"\
    \\\\.\")\n        if (name.length != 2) \"No\"\n        else {\n            val\
    \ num = name(0).filter(c => c >= '0' && c <= '9').length\n            if (num\
    \ > 3) \"No\"\n            else if (name(0).length == 0 || name(0)(0) < 'A' ||\
    \ (name(0)(0) > 'Z' && name(0)(0) < 'a') || name(0)(0) > 'z') \"No\"\n       \
    \     else if (name(1) != \"txt\" && name(1) != \"exe\" && name(1) != \"dll\"\
    ) \"No\"\n            else \"Yes\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        file_name match {\n            case pattern(_*)\
    \ => \"Yes\"\n            case _ => \"No\"\n        }", "        val file_name_pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.[a-zA-Z]{3}$\".r\n        file_name match\
    \ {\n            case file_name_pattern() => \"Yes\"\n            case _ => \"\
    No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val file_name_regex = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case file_name_regex(_, _, _) => \"Yes\"\n            case _ => \"\
    No\"\n        }", "        val pattern = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(_, _, _) => \"Yes\"\
    \n            case _ => \"No\"\n        }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\".r\n        if (pattern.findFirstIn(file_name) == None) \"\
    No\" else \"Yes\"", "        // Write your code here\n        return \"\"", " \
    \       val pattern = \"([a-zA-Z]+)([0-9]{0,3})(\\\\.[a-zA-Z]+)\".r\n        file_name\
    \ match {\n            case pattern(prefix, _, suffix) => {\n                if\
    \ (suffix == \".txt\" || suffix == \".exe\" || suffix == \".dll\") \"Yes\"\n \
    \               else \"No\"\n            }\n            case _ => \"No\"\n   \
    \     }", "        val pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\".r\n\
    \        pattern.findFirstIn(file_name) match {\n            case Some(x) => \"\
    Yes\"\n            case None => \"No\"\n        }", "        val pattern = \"\"\
    \"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match {\n\
    \            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\n\
    \        }", "        // Write your code here\n        return \"\""]
stop_tokens:
- "\n    }\n"
