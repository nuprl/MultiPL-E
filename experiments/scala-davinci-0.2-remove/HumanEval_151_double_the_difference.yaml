name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // If the input list is empty, return 0.\n    def doubleTheDifference(lst :\
  \ List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        var sum = 0L\n        for (i <- lst) {\n            if (i %\
    \ 2 == 0) {\n                sum += i * i\n            }\n        }\n        sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                val x = i.toLong\n                sum += x\
    \ * x\n            }\n        }\n        sum", "        val lst1 = lst.filter(x\
    \ => x % 2 == 0)\n        val lst2 = lst.filter(x => x % 2 != 0)\n        val\
    \ sum1 = lst1.foldLeft(0.0f)(_ + _)\n        val sum2 = lst2.foldLeft(0.0f)(_\
    \ + _)\n        val diff = sum1 - sum2\n        val double = diff * 2\n      \
    \  double.toLong", "        val lst2 = lst.map(x => x * 2)\n        val lst3 =\
    \ lst2.map(x => x * x)\n        lst3.sum.toLong", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        lst4.sum.toLong", "        val lst2 = lst.filter(x =>\
    \ x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 1)\n        lst4.sum.toLong", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i % 2 == 0) {\n              \
    \  sum += i * i\n            }\n        }\n        return sum", "        var sum\
    \ = 0.0\n        for (i <- lst) {\n            sum += (i - 1) * 2\n        }\n\
    \        sum.toLong", "        var sum = 0L\n        for (i <- lst) {\n      \
    \      if (i % 2 == 0) {\n                sum += i * i\n            }\n      \
    \  }\n        return sum", "        val sum = lst.foldLeft(0.0)((acc, x) => acc\
    \ + x)\n        val sumOfSquares = lst.foldLeft(0.0)((acc, x) => acc + x * x)\n\
    \        val mean = sum / lst.length\n        val meanOfSquares = sumOfSquares\
    \ / lst.length\n        val variance = meanOfSquares - mean * mean\n        val\
    \ stdDev = sqrt(variance)\n        val meanPlusStdDev = mean + stdDev\n      \
    \  val meanMinusStdDev = mean - stdDev\n        val meanPlusStdDevCount = lst.count(x\
    \ => x > meanPlusStdDev)\n        val meanMinusStdDevCount = lst.count(x => x\
    \ < meanMinusStdDev)\n        meanPlusStdDevCount * meanMinusStdDevCount", " \
    \       var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                val square = pow(i, 2).toLong\n                sum\
    \ += square\n            }\n        }\n        sum", "        var sum : Long =\
    \ 0\n        for (i <- 0 until lst.length) {\n            for (j <- i + 1 until\
    \ lst.length) {\n                val diff = abs(lst(i) - lst(j))\n           \
    \     sum += diff * diff\n            }\n        }\n        return sum", "   \
    \     var sum = 0.0\n        for (i <- lst) {\n            sum += i\n        }\n\
    \        return (sum * 2).toLong", "        val lst2 = lst.filter(x => x % 2 ==\
    \ 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val lst4 = lst2.map(x\
    \ => x * 2)\n        val lst5 = lst3.map(x => x * 2)\n        val lst6 = lst4.zip(lst5)\n\
    \        val lst7 = lst6.map(x => x._1 - x._2)\n        val lst8 = lst7.map(x\
    \ => x * x)\n        lst8.sum.toLong", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 0) {\n                sum += i * i\n      \
    \      }\n        }\n        sum", "        val lst2 = lst.filter(x => x > 0 &&\
    \ x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n        val lst6 =\
    \ lst5.sum\n        return lst6.toLong", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i % 2 == 0) {\n                sum += (i * i)\n \
    \           }\n        }\n        return sum", "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n\
    \        lst5.sum.toLong", "        val evens = lst.filter(x => x % 2 == 0)\n\
    \        val odds = lst.filter(x => x % 2 == 1)\n        val evenSum = evens.foldLeft(0.0)(_\
    \ + _)\n        val oddSum = odds.foldLeft(0.0)(_ + _)\n        return (evenSum\
    \ - oddSum) * 2", "        var sum = 0.0\n        for (i <- lst) {\n         \
    \   if (i % 2 != 0) {\n                sum += pow(i, 2)\n            }\n     \
    \   }\n        return sum.toLong", "        val lst2 = lst.map(x => x * 2)\n \
    \       val lst3 = lst2.filter(x => x % 2 == 0)\n        val lst4 = lst3.map(x\
    \ => x * x)\n        val lst5 = lst4.sum\n        return lst5.toLong", "     \
    \   var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) sum +=\
    \ i * i\n        }\n        return sum", "        val sum = lst.foldLeft(0.0)((a,\
    \ b) => a + b)\n        val sumOfSquares = lst.foldLeft(0.0)((a, b) => a + b *\
    \ b)\n        val mean = sum / lst.length\n        val meanOfSquares = sumOfSquares\
    \ / lst.length\n        val variance = meanOfSquares - mean * mean\n        val\
    \ stdDev = sqrt(variance)\n        val lowerBound = mean - stdDev\n        val\
    \ upperBound = mean + stdDev\n        val lowerBoundCount = lst.count(x => x <\
    \ lowerBound)\n        val upperBoundCount = lst.count(x => x > upperBound)\n\
    \        val diff = upperBoundCount - lowerBoundCount\n        diff * diff", " \
    \       val lst1 = lst.filter(x => x % 2 == 0)\n        val lst2 = lst.filter(x\
    \ => x % 2 != 0)\n        val sum1 = lst1.foldLeft(0.0f)((x, y) => x + y)\n  \
    \      val sum2 = lst2.foldLeft(0.0f)((x, y) => x + y)\n        return (sum1 -\
    \ sum2).toLong", "        val squares = lst.map(x => x * x)\n        val sum =\
    \ squares.foldLeft(0.0f)(_ + _)\n        val squareSum = sum * sum\n        val\
    \ sumSquares = squares.foldLeft(0.0f)(_ + _)\n        (squareSum - sumSquares).toLong",
  "        var sum = 0L\n        for (i <- 0 until lst.length) {\n            for\
    \ (j <- i + 1 until lst.length) {\n                sum += pow(lst(i) - lst(j),\
    \ 2).toLong\n            }\n        }\n        sum", "        val lst2 = lst.map(x\
    \ => x*x)\n        val lst3 = lst2.filter(x => x % 2 == 1)\n        val lst4 =\
    \ lst3.map(x => x*2)\n        val lst5 = lst4.sum\n        return lst5.toLong",
  "        var sum : Long = 0\n        for (i <- 0 until lst.length) {\n         \
    \   sum += pow(lst(i) - lst(lst.length - 1 - i), 2).toLong\n        }\n      \
    \  sum", "        val lst2 = lst.map(x => x * 2)\n        val lst3 = lst.zip(lst2)\n\
    \        val lst4 = lst3.map(x => x._1 - x._2)\n        val lst5 = lst4.map(x\
    \ => x * x)\n        lst5.sum.toLong", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 0) {\n                sum += i * i\n      \
    \      }\n        }\n        sum", "        val sum = lst.foldLeft(0.0f)((a, b)\
    \ => a + b)\n        val sumOfSquares = lst.foldLeft(0.0f)((a, b) => a + b * b)\n\
    \        val n = lst.length\n        val mean = sum / n\n        val meanOfSquares\
    \ = sumOfSquares / n\n        val variance = meanOfSquares - mean * mean\n   \
    \     val stdDev = sqrt(variance).toLong\n        2 * stdDev", "        val lst1\
    \ = lst.filter(x => x % 2 == 0)\n        val lst2 = lst.filter(x => x % 2 != 0)\n\
    \        val lst3 = lst1.map(x => x * x)\n        val lst4 = lst2.map(x => x *\
    \ x)\n        val sum1 = lst3.sum\n        val sum2 = lst4.sum\n        val sum3\
    \ = sum1 - sum2\n        val sum4 = sum3 * 2\n        return sum4.toLong", " \
    \       val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x - lst.head)\n\
    \        lst3.foldLeft(0L)((a, b) => a + b)", "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i % 2 == 0) {\n                sum += i * i\n\
    \            }\n        }\n        return sum", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        val lst5 = lst4.map(x => x - 1)\n        val lst6 =\
    \ lst5.map(x => x * x)\n        val lst7 = lst6.map(x => x * x)\n        val lst8\
    \ = lst7.map(x => x * x)\n        val lst9 = lst8.map(x => x * x)\n        val\
    \ lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x => x * x)\n  \
    \      val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x => x\
    \ * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 == 1)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val diff = evenSum\
    \ - oddSum\n        val doubleDiff = diff * 2\n        return doubleDiff.toLong",
  "        var sum : Long = 0\n        for (i <- lst) {\n            if (i % 2 ==\
    \ 1) {\n                sum += (i * i)\n            }\n        }\n        return\
    \ sum", "        val lst1 = lst.filter(x => x > 0 && x % 1 == 0)\n        val\
    \ lst2 = lst1.filter(x => x % 2 == 1)\n        val lst3 = lst2.map(x => x * x)\n\
    \        val lst4 = lst3.sum\n        val lst5 = lst4 * 2\n        return lst5.toLong",
  "        val lst1 = lst.filter(x => x % 2 == 0)\n        val lst2 = lst.filter(x\
    \ => x % 2 != 0)\n        val lst3 = lst1.map(x => x * x)\n        val lst4 =\
    \ lst2.map(x => x * x)\n        val lst5 = lst3.sum - lst4.sum\n        return\
    \ lst5.toLong", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 0) sum += i * i\n        }\n        sum", "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n\
    \        val lst6 = lst5.sum\n        return lst6.toLong", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i % 2 == 0) {\n              \
    \  sum += (i * i)\n            }\n        }\n        return sum", "        val\
    \ lst2 = lst.map(x => x * 2)\n        val lst3 = lst.zip(lst2)\n        val lst4\
    \ = lst3.map(x => x._1 - x._2)\n        val lst5 = lst4.map(x => x * x)\n    \
    \    lst5.sum.toLong", "        var sum = 0L\n        for (i <- lst) {\n     \
    \       sum += pow(i, 2).toLong\n        }\n        sum", "        var sum = 0L\n\
    \        for (i <- lst) {\n            if (i % 2 == 0) {\n                sum\
    \ += i * i\n            }\n        }\n        return sum", "        val lst1 =\
    \ lst.filter(x => x % 2 == 0)\n        val lst2 = lst.filter(x => x % 2 != 0)\n\
    \        val sum1 = lst1.sum\n        val sum2 = lst2.sum\n        val diff =\
    \ sum1 - sum2\n        val double = diff * 2\n        return double.toLong", " \
    \       val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.filter(x => x\
    \ % 2 == 0)\n        val lst4 = lst3.map(x => x * x)\n        val lst5 = lst4.sum\n\
    \        return lst5.toLong", "        var sum : Long = 0\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum", "        val sum = lst.foldLeft(0.0)((acc,\
    \ x) => acc + x)\n        val sumOfSquares = lst.foldLeft(0.0)((acc, x) => acc\
    \ + x * x)\n        val mean = sum / lst.length\n        val meanOfSquares = sumOfSquares\
    \ / lst.length\n        val variance = meanOfSquares - mean * mean\n        val\
    \ stdDev = sqrt(variance)\n        val meanPlusStdDev = mean + stdDev\n      \
    \  val meanMinusStdDev = mean - stdDev\n        val meanPlusStdDevCount = lst.filter(x\
    \ => x >= meanPlusStdDev).length\n        val meanMinusStdDevCount = lst.filter(x\
    \ => x <= meanMinusStdDev).length\n        val result = meanPlusStdDevCount *\
    \ meanMinusStdDevCount\n        result.toLong", "        val lst2 = lst.filter(x\
    \ => x % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val\
    \ lst4 = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x => x * 3)\n     \
    \   val lst6 = lst4 ++ lst5\n        val lst7 = lst6.sorted\n        val lst8\
    \ = lst7.reverse\n        val lst9 = lst8.drop(2)\n        val lst10 = lst9.dropRight(2)\n\
    \        val lst11 = lst10.map(x => x.toLong)\n        val lst12 = lst11.sum\n\
    \        return lst12", "        val lst2 = lst.map(x => x * 2)\n        val lst3\
    \ = lst.zip(lst2)\n        val lst4 = lst3.map(x => x._1 - x._2)\n        val\
    \ lst5 = lst4.map(x => x.toLong)\n        val lst6 = lst5.map(x => x * x)\n  \
    \      val lst7 = lst6.sum\n        return lst7", "        val lst2 = lst.filter(x\
    \ => x % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val\
    \ lst4 = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x => x * 2)\n     \
    \   val lst6 = lst4.map(x => x - 1)\n        val lst7 = lst5.map(x => x - 1)\n\
    \        val lst8 = lst6.map(x => x * x)\n        val lst9 = lst7.map(x => x *\
    \ x)\n        val lst10 = lst8.sum\n        val lst11 = lst9.sum\n        val\
    \ lst12 = lst10 + lst11\n        return lst12.toLong", "        val lst2 = lst.filter(x\
    \ => x % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val\
    \ lst4 = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x => x * 2)\n     \
    \   val lst6 = lst4.zip(lst5)\n        val lst7 = lst6.map(x => abs(x._1 - x._2))\n\
    \        lst7.sum.toLong", "        var sum = 0L\n        for (i <- lst) {\n \
    \           if (i % 2 == 0) {\n                sum += i * i\n            }\n \
    \       }\n        return sum", "        val lst2 = lst.map(x => x * 2)\n    \
    \    val lst3 = lst.zip(lst2)\n        val lst4 = lst3.map(x => abs(x._1 - x._2))\n\
    \        lst4.sum.toLong", "        val lst2 = lst.map(x => x * 2)\n        val\
    \ lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 0)\n\
    \        val lst5 = lst4.map(x => x * x)\n        val lst6 = lst5.filter(x =>\
    \ x % 2 == 0)\n        val lst7 = lst6.map(x => x * x)\n        val lst8 = lst7.filter(x\
    \ => x % 2 == 0)\n        val lst9 = lst8.map(x => x * x)\n        val lst10 =\
    \ lst9.filter(x => x % 2 == 0)\n        val lst11 = lst10.map(x => x * x)\n  \
    \      val lst12 = lst11.filter(x => x % 2 == 0)\n        val lst13 = lst12.map(x\
    \ => x * x)\n        val lst14 = lst13.filter(x => x % 2 == 0)\n        val lst15\
    \ = lst14.map(x => x * x)\n        val lst16 = lst15.filter(x => x % 2 == 0)\n\
    \        val lst17 = lst16.map(x => x * x)\n        val lst18 = lst17.filter(x\
    \ => x % 2 == 0)\n        val lst19 = lst18.map(x => x * x)\n        val lst20\
    \ = lst19.filter(x => x % 2 == 0)\n        val lst21 = lst20.map(x => x * x)\n\
    \        val lst22 = lst21.filter(x => x % 2 == 0)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.filter(x => x % 2 == 0)\n        val lst25\
    \ = lst24.map(x => x * x)\n        val lst26 = lst25.filter(x => x % 2 == 0)\n\
    \        val lst27 = lst26.map(x", "        val sum = lst.foldLeft(0.0)((a, b)\
    \ => a + b)\n        val sumOfSquares = lst.foldLeft(0.0)((a, b) => a + b * b)\n\
    \        val n = lst.length\n        val mean = sum / n\n        val meanOfSquares\
    \ = sumOfSquares / n\n        val variance = meanOfSquares - mean * mean\n   \
    \     val stdDev = sqrt(variance)\n        val diff = stdDev - mean\n        (diff\
    \ * 2).toLong", "        val lst2 = lst.map(x => x * 2)\n        return (lst2.sum\
    \ - lst.sum).toLong", "        var sum = 0.0\n        for (i <- lst) {\n     \
    \       sum += pow(i, 2)\n        }\n        return sum.toLong", "        val\
    \ lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n      \
    \  val lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x => x\
    \ * x)\n        val lst6 = lst5.map(x => x * x)\n        val lst7 = lst6.map(x\
    \ => x * x)\n        val lst8 = lst7.map(x => x * x)\n        val lst9 = lst8.map(x\
    \ => x * x)\n        val lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x\
    \ => x * x)\n        val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x\
    \ => x * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        var sum = 0.0\n\
    \        for (i <- lst) {\n            sum += pow(i, 2)\n        }\n        return\
    \ sum.toLong", "        val sum = lst.foldLeft(0.0)((a, b) => a + b)\n       \
    \ val sumOfSquares = lst.foldLeft(0.0)((a, b) => a + b * b)\n        val mean\
    \ = sum / lst.length\n        val meanOfSquares = sumOfSquares / lst.length\n\
    \        val variance = meanOfSquares - mean * mean\n        val stdDev = sqrt(variance)\n\
    \        val meanPlusStdDev = mean + stdDev\n        val meanMinusStdDev = mean\
    \ - stdDev\n        val meanPlusStdDevCount = lst.filter(x => x > meanPlusStdDev).length\n\
    \        val meanMinusStdDevCount = lst.filter(x => x < meanMinusStdDev).length\n\
    \        val meanPlusStdDevSum = lst.filter(x => x > meanPlusStdDev).foldLeft(0.0)((a,\
    \ b) => a + b)\n        val meanMinusStdDevSum = lst.filter(x => x < meanMinusStdDev).foldLeft(0.0)((a,\
    \ b) => a + b)\n        val meanPlusStdDevSumOfSquares = lst.filter(x => x > meanPlusStdDev).foldLeft(0.0)((a,\
    \ b) => a + b * b)\n        val meanMinusStdDevSumOfSquares = lst.filter(x =>\
    \ x < meanMinusStdDev).foldLeft(0.0)((a, b) => a + b * b)\n        val meanPlusStdDevMean\
    \ = meanPlusStdDevSum / meanPlusStdDevCount\n        val meanMinusStdDevMean =\
    \ meanMinusStdDevSum / meanMinusStdDevCount\n        val meanPlusStdDevMeanOfSquares\
    \ = meanPlusStdDevSumOfSquares / meanPlusStdDevCount\n        val meanMinusStdDevMeanOfSquares\
    \ = meanMinusStdDevSumOfSquares / meanMinusStdDevCount\n        val meanPlusStdDevVariance\
    \ = meanPlusStdDevMeanOfSquares - meanPlusStdDev", "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n\
    \        val lst6 = lst5.sum\n        return lst6.toLong", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n     \
    \           sum += i * i\n            }\n        }\n        sum", "        val\
    \ lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.filter(x => x % 2 == 0)\n\
    \        val lst4 = lst3.map(x => x * x)\n        lst4.sum.toLong", "        val\
    \ lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n      \
    \  val lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x => x\
    \ * x)\n        val lst6 = lst5.map(x => x * x)\n        val lst7 = lst6.map(x\
    \ => x * x)\n        val lst8 = lst7.map(x => x * x)\n        val lst9 = lst8.map(x\
    \ => x * x)\n        val lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x\
    \ => x * x)\n        val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x\
    \ => x * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n        val lst6 =\
    \ lst5.filter(x => x % 2 == 0)\n        val lst7 = lst6.map(x => x * x)\n    \
    \    val lst8 = lst7.filter(x => x % 2 == 0)\n        val lst9 = lst8.map(x =>\
    \ x * x)\n        val lst10 = lst9.filter(x => x % 2 == 0)\n        val lst11\
    \ = lst10.map(x => x * x)\n        val lst12 = lst11.filter(x => x % 2 == 0)\n\
    \        val lst13 = lst12.map(x => x * x)\n        val lst14 = lst13.filter(x\
    \ => x % 2 == 0)\n        val lst15 = lst14.map(x => x * x)\n        val lst16\
    \ = lst15.filter(x => x % 2 == 0)\n        val lst17 = lst16.map(x => x * x)\n\
    \        val lst18 = lst17.filter(x => x % 2 == 0)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.filter(x => x % 2 == 0)\n        val lst21\
    \ = lst20.map(x => x * x)\n        val lst22 = lst21.filter(x => x % 2 == 0)\n\
    \        val lst23 = lst22.map(x => x * x)\n        val lst24 = lst23.filter(x\
    \ => x % 2 == 0)\n        val lst25 = lst24.map(x => x * x)\n        val lst26\
    \ = lst25.filter(x => x % 2 == 0)\n        val lst27 = lst26.map(x", "       \
    \ var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n    \
    \            sum += i * i\n            }\n        }\n        return sum", "  \
    \      val sum = lst.foldLeft(0.0)((a, b) => a + b)\n        val sumOfSquares\
    \ = lst.foldLeft(0.0)((a, b) => a + b * b)\n        val n = lst.length\n     \
    \   val mean = sum / n\n        val meanOfSquares = sumOfSquares / n\n       \
    \ val variance = meanOfSquares - mean * mean\n        val stdDev = sqrt(variance)\n\
    \        val meanPlusStdDev = mean + stdDev\n        val meanMinusStdDev = mean\
    \ - stdDev\n        val meanPlus2StdDev = mean + 2 * stdDev\n        val meanMinus2StdDev\
    \ = mean - 2 * stdDev\n        val meanPlus3StdDev = mean + 3 * stdDev\n     \
    \   val meanMinus3StdDev = mean - 3 * stdDev\n        val meanPlus4StdDev = mean\
    \ + 4 * stdDev\n        val meanMinus4StdDev = mean - 4 * stdDev\n        val\
    \ meanPlus5StdDev = mean + 5 * stdDev\n        val meanMinus5StdDev = mean - 5\
    \ * stdDev\n        val meanPlus6StdDev = mean + 6 * stdDev\n        val meanMinus6StdDev\
    \ = mean - 6 * stdDev\n        val meanPlus7StdDev = mean + 7 * stdDev\n     \
    \   val meanMinus7StdDev = mean - 7 * stdDev\n        val meanPlus8StdDev = mean\
    \ + 8 * stdDev\n        val meanMinus8StdDev = mean - 8 * stdDev\n        val\
    \ meanPlus9StdDev = mean + 9 * stdDev\n        val meanMinus9StdDev = mean - 9\
    \ * stdDev\n        val meanPlus10StdDev = mean + 10 * stdDev\n        val meanMinus10StdDev\
    \ = mean - 10 * stdDev\n        val meanPlus11StdDev = mean + 11 * stdDev\n  \
    \      val meanMinus11StdDev = mean - 11 * stdDev\n        val meanPlus12StdDev\
    \ = mean + 12 * stdDev\n        val meanMinus12StdDev = mean - 12 * stdDev\n \
    \       val meanPlus13StdDev = mean", "        val sum = lst.foldLeft(0.0)((a,\
    \ b) => a + b)\n        val sumOfSquares = lst.foldLeft(0.0)((a, b) => a + b *\
    \ b)\n        val mean = sum / lst.length\n        val meanOfSquares = sumOfSquares\
    \ / lst.length\n        val variance = meanOfSquares - mean * mean\n        val\
    \ stdDev = sqrt(variance)\n        val diff = lst.map(x => abs(x - mean))\n  \
    \      val diffSum = diff.foldLeft(0.0)((a, b) => a + b)\n        val diffMean\
    \ = diffSum / lst.length\n        val diffStdDev = sqrt(diff.foldLeft(0.0)((a,\
    \ b) => a + b * b) / lst.length - diffMean * diffMean)\n        val diffMeanOfSquares\
    \ = diff.foldLeft(0.0)((a, b) => a + b * b) / lst.length\n        val diffVariance\
    \ = diffMeanOfSquares - diffMean * diffMean\n        val diffMeanOfCubes = diff.foldLeft(0.0)((a,\
    \ b) => a + b * b * b) / lst.length\n        val diffSkewness = (diffMeanOfCubes\
    \ - 3 * diffMean * diffVariance - diffMean * diffMean * diffMean) / (diffStdDev\
    \ * diffStdDev * diffStdDev)\n        val diffMeanOfQuadruples = diff.foldLeft(0.0)((a,\
    \ b) => a + b * b * b * b) / lst.length\n        val diffKurtosis = (diffMeanOfQuadruples\
    \ - 4 * diffMeanOfCubes * diffMean + 6 * diffMean * diffMean * diffVariance +\
    \ 3 * diffMean * diffMean * diffMean * diffMean) / (diffStdDev * diffStdDev *\
    \ diffStdDev * diffStdDev) - 3\n        val diffMeanOfFifths = diff.foldLeft(0.0)((a",
  "        val sum = lst.foldLeft(0.0)((a, b) => a + b)\n        val sumOfSquares\
    \ = lst.foldLeft(0.0)((a, b) => a + b * b)\n        val mean = sum / lst.length\n\
    \        val meanOfSquares = sumOfSquares / lst.length\n        val variance =\
    \ meanOfSquares - mean * mean\n        val stdDev = sqrt(variance)\n        val\
    \ diff = lst.map(x => abs(x - mean))\n        val diffSum = diff.foldLeft(0.0)((a,\
    \ b) => a + b)\n        val diffMean = diffSum / lst.length\n        val diffStdDev\
    \ = sqrt(diff.foldLeft(0.0)((a, b) => a + b * b) / lst.length - diffMean * diffMean)\n\
    \        val diffMeanOfSquares = diff.foldLeft(0.0)((a, b) => a + b * b) / lst.length\n\
    \        val diffVariance = diffMeanOfSquares - diffMean * diffMean\n        val\
    \ diffMeanOfCubes = diff.foldLeft(0.0)((a, b) => a + b * b * b) / lst.length\n\
    \        val diffSkewness = (diffMeanOfCubes - 3 * diffMean * diffVariance - diffMean\
    \ * diffMean * diffMean) / (diffStdDev * diffStdDev * diffStdDev)\n        val\
    \ diffMeanOfQuads = diff.foldLeft(0.0)((a, b) => a + b * b * b * b) / lst.length\n\
    \        val diffKurtosis = (diffMeanOfQuads - 4 * diffMeanOfCubes * diffMean\
    \ + 6 * diffMean * diffMean * diffVariance + 3 * diffMean * diffMean * diffMean\
    \ * diffMean) / (diffStdDev * diffStdDev * diffStdDev * diffStdDev) - 3\n    \
    \    val diffMeanOfQuints = diff.foldLeft(0.0)((a, b) =>", "        val lst2 =\
    \ lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x => x / 2)\n  \
    \      val lst6 = lst5.map(x => x / 2)\n        val lst7 = lst6.map(x => x / 2)\n\
    \        val lst8 = lst7.map(x => x / 2)\n        val lst9 = lst8.map(x => x /\
    \ 2)\n        val lst10 = lst9.map(x => x / 2)\n        val lst11 = lst10.map(x\
    \ => x / 2)\n        val lst12 = lst11.map(x => x / 2)\n        val lst13 = lst12.map(x\
    \ => x / 2)\n        val lst14 = lst13.map(x => x / 2)\n        val lst15 = lst14.map(x\
    \ => x / 2)\n        val lst16 = lst15.map(x => x / 2)\n        val lst17 = lst16.map(x\
    \ => x / 2)\n        val lst18 = lst17.map(x => x / 2)\n        val lst19 = lst18.map(x\
    \ => x / 2)\n        val lst20 = lst19.map(x => x / 2)\n        val lst21 = lst20.map(x\
    \ => x / 2)\n        val lst22 = lst21.map(x => x / 2)\n        val lst23 = lst22.map(x\
    \ => x / 2)\n        val lst24 = lst23.map(x => x / 2)\n        val lst25 = lst24.map(x\
    \ => x / 2)\n        val lst26 = lst25.map(x => x / 2)\n        val lst27 = lst26.map(x\
    \ => x / 2)\n        val lst28 = lst27.map(x => x /", "        var sum = 0L\n\
    \        for (i <- 0 until lst.length) {\n            for (j <- 0 until lst.length)\
    \ {\n                if (i != j) {\n                    sum += (lst(i) - lst(j))\
    \ * (lst(i) - lst(j))\n                }\n            }\n        }\n        return\
    \ sum", "        var sum = 0L\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                val x = i.toInt\n                if (x % 2 == 1) {\n    \
    \                sum += x * x\n                }\n            }\n        }\n \
    \       sum", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 == 1)\n        val evenSum = evens.foldLeft(0.0f)(_\
    \ + _)\n        val oddSum = odds.foldLeft(0.0f)(_ + _)\n        val diff = evenSum\
    \ - oddSum\n        return 2 * diff.toLong", "        var sum = 0L\n        for\
    \ (i <- 0 until lst.length) {\n            val x = lst(i)\n            if (x %\
    \ 2 == 0) sum += x * x\n            else sum += 2 * x * x\n        }\n       \
    \ sum", "        var sum = 0.0\n        for (i <- lst) {\n            sum += pow(i,\
    \ 2)\n        }\n        return sum.toLong", "        val lst2 = lst.filter(x\
    \ => x % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val\
    \ lst4 = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x => x * 2)\n     \
    \   val lst6 = lst4.zip(lst5)\n        val lst7 = lst6.map(x => x._1 - x._2)\n\
    \        val lst8 = lst7.map(x => x * x)\n        lst8.sum.toLong", "        val\
    \ lst2 = lst.filter(x => x > 0 && x.isValidInt)\n        val lst3 = lst2.map(x\
    \ => pow(x, 2).toLong)\n        lst3.sum", "        val lst2 = lst.filter(x =>\
    \ x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 1)\n        val sum = lst4.sum\n        return sum.toLong",
  "        var sum = 0.0\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        sum.toLong",
  "        val sum = lst.foldLeft(0.0)((acc, x) => acc + x)\n        val sumOfSquares\
    \ = lst.foldLeft(0.0)((acc, x) => acc + x * x)\n        val avg = sum / lst.length\n\
    \        val avgOfSquares = sumOfSquares / lst.length\n        val avgSquare =\
    \ avg * avg\n        val diff = avgOfSquares - avgSquare\n        val doubleDiff\
    \ = 2 * diff\n        doubleDiff.toLong", "        val lst1 = lst.filter(x =>\
    \ x > 0 && x.isValidInt)\n        val lst2 = lst1.map(x => x.toInt)\n        val\
    \ lst3 = lst2.filter(x => x % 2 == 1)\n        val lst4 = lst3.map(x => x * x)\n\
    \        val lst5 = lst4.sum\n        val lst6 = lst5 * 2\n        return lst6",
  "        // Your code here\n        val lst1 = lst.filter(x => x % 2 == 0)\n   \
    \     val lst2 = lst.filter(x => x % 2 != 0)\n        val lst3 = lst1.map(x =>\
    \ x * x)\n        val lst4 = lst2.map(x => x * x)\n        val lst5 = lst3.sum\
    \ - lst4.sum\n        lst5.toLong", "        val evens = lst.filter(_ % 2 == 0)\n\
    \        val odds = lst.filter(_ % 2 == 1)\n        val evenSum = evens.foldLeft(0.0)(_\
    \ + _)\n        val oddSum = odds.foldLeft(0.0)(_ + _)\n        (evenSum - oddSum)\
    \ * 2", "        val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5\
    \ = lst4.map(x => x * x)\n        val lst6 = lst5.filter(x => x % 2 == 0)\n  \
    \      val lst7 = lst6.map(x => x * x)\n        val lst8 = lst7.filter(x => x\
    \ % 2 == 0)\n        val lst9 = lst8.map(x => x * x)\n        val lst10 = lst9.filter(x\
    \ => x % 2 == 0)\n        val lst11 = lst10.map(x => x * x)\n        val lst12\
    \ = lst11.filter(x => x % 2 == 0)\n        val lst13 = lst12.map(x => x * x)\n\
    \        val lst14 = lst13.filter(x => x % 2 == 0)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.filter(x => x % 2 == 0)\n        val lst17\
    \ = lst16.map(x => x * x)\n        val lst18 = lst17.filter(x => x % 2 == 0)\n\
    \        val lst19 = lst18.map(x => x * x)\n        val lst20 = lst19.filter(x\
    \ => x % 2 == 0)\n        val lst21 = lst20.map(x => x * x)\n        val lst22\
    \ = lst21.filter(x => x % 2 == 0)\n        val lst23 = lst22.map(x => x * x)\n\
    \        val lst24 = lst23.filter(x => x % 2 == 0)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.filter(x => x % 2 == 0)\n        val lst27\
    \ = lst26.map(x", "        val lst2 = lst.map(x => x*x)\n        val lst3 = lst2.filter(x\
    \ => x % 2 == 1)\n        val lst4 = lst3.map(x => x*2)\n        val lst5 = lst4.sum\n\
    \        return lst5.toLong", "        var sum = 0L\n        for (i <- lst) {\n\
    \            if (i % 2 == 1) {\n                sum += i * i\n            }\n\
    \        }\n        return sum", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum", "        val sum = lst.filter(x => x\
    \ % 2 == 1).map(x => x * x).sum\n        val sum2 = lst.filter(x => x % 2 == 0).map(x\
    \ => x * x).sum\n        (sum - sum2) * 2", "        val lst1 = lst.filter(x =>\
    \ x > 0 && x % 1 == 0)\n        val lst2 = lst1.filter(x => x % 2 == 1)\n    \
    \    val lst3 = lst2.map(x => x * x)\n        lst3.foldLeft(0L)(_ + _)", "   \
    \     val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n\
    \        val lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x\
    \ => x - 1)\n        val lst6 = lst5.filter(x => x % 2 == 0)\n        val lst7\
    \ = lst6.map(x => x + 1)\n        val lst8 = lst7.map(x => x * x)\n        val\
    \ lst9 = lst8.filter(x => x % 2 == 0)\n        val lst10 = lst9.map(x => x - 1)\n\
    \        val lst11 = lst10.filter(x => x % 2 == 0)\n        val lst12 = lst11.map(x\
    \ => x + 1)\n        val lst13 = lst12.map(x => x * x)\n        val lst14 = lst13.filter(x\
    \ => x % 2 == 0)\n        val lst15 = lst14.map(x => x - 1)\n        val lst16\
    \ = lst15.filter(x => x % 2 == 0)\n        val lst17 = lst16.map(x => x + 1)\n\
    \        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.filter(x\
    \ => x % 2 == 0)\n        val lst20 = lst19.map(x => x - 1)\n        val lst21\
    \ = lst20.filter(x => x % 2 == 0)\n        val lst22 = lst21.map(x => x + 1)\n\
    \        val lst23 = lst22.map(x => x * x)\n        val lst24 = lst23.filter(x\
    \ => x % 2 == 0)\n        val lst25 = lst24.map(x => x - 1)\n        val lst26\
    \ = lst25.filter(x => x % 2 == 0)\n        val lst27 = lst26.map(x => x + 1",
  "        // Your code here\n        return 0", "        var sum = 0L\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        sum", "        var sum =\
    \ 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n              \
    \  sum += i * i\n            }\n        }\n        return sum", "        val lst2\
    \ = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x - lst.head)\n    \
    \    lst3.sum.toLong", "        var sum = 0.0\n        for (i <- lst) {\n    \
    \        sum += i\n        }\n        var mean = sum / lst.length\n        var\
    \ diff = 0.0\n        for (i <- lst) {\n            diff += (i - mean) * (i -\
    \ mean)\n        }\n        return (diff * 2).toLong", "        var sum = 0L\n\
    \        for (i <- lst) {\n            sum += pow(i, 2).toLong\n        }\n  \
    \      sum", "        val x = lst.filter(x => x % 2 == 0).map(x => x * x).sum\n\
    \        val y = lst.filter(x => x % 2 == 1).map(x => x * x).sum\n        return\
    \ (x - y) * 2", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += i * i\n            }\n        }\n   \
    \     return sum", "        val lst1 = lst.filter(x => x >= 0 && x % 1 == 0)\n\
    \        val lst2 = lst1.filter(x => x % 2 == 1)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        lst3.sum.toLong", "        val evens = lst.filter(x => x\
    \ % 2 == 0)\n        val odds = lst.filter(x => x % 2 == 1)\n        val evenSum\
    \ = evens.sum\n        val oddSum = odds.sum\n        val diff = evenSum - oddSum\n\
    \        val doubleDiff = diff * 2\n        return doubleDiff.toLong", "     \
    \   var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n  \
    \              sum += i * i\n            }\n        }\n        return sum", " \
    \       val lst1 = lst.filter(x => x > 0 && x.isValidInt)\n        val lst2 =\
    \ lst1.map(x => pow(x, 2).toLong)\n        val lst3 = lst2.filter(x => x % 2 !=\
    \ 0)\n        lst3.sum", "        var sum = 0L\n        for (i <- lst) {\n   \
    \         if (i % 2 == 1) {\n                sum += i * i\n            }\n   \
    \     }\n        return sum", "        val lst2 = lst.filter(x => x % 2 == 0)\n\
    \        val lst3 = lst.filter(x => x % 2 == 1)\n        val lst4 = lst2.map(x\
    \ => x * 2)\n        val lst5 = lst3.map(x => x * 3)\n        val lst6 = lst4\
    \ ::: lst5\n        val lst7 = lst6.map(x => x.toLong)\n        val lst8 = lst7.filter(x\
    \ => x % 2 == 0)\n        val lst9 = lst7.filter(x => x % 2 == 1)\n        val\
    \ lst10 = lst8.map(x => x * 2)\n        val lst11 = lst9.map(x => x * 3)\n   \
    \     val lst12 = lst10 ::: lst11\n        val lst13 = lst12.map(x => x.toLong)\n\
    \        val lst14 = lst13.filter(x => x % 2 == 0)\n        val lst15 = lst13.filter(x\
    \ => x % 2 == 1)\n        val lst16 = lst14.map(x => x * 2)\n        val lst17\
    \ = lst15.map(x => x * 3)\n        val lst18 = lst16 ::: lst17\n        val lst19\
    \ = lst18.map(x => x.toLong)\n        val lst20 = lst19.filter(x => x % 2 == 0)\n\
    \        val lst21 = lst19.filter(x => x % 2 == 1)\n        val lst22 = lst20.map(x\
    \ => x * 2)\n        val lst23 = lst21.map(x => x * 3)\n        val lst24 = lst22\
    \ ::: lst23\n        val lst25 = lst24.map(x => x.toLong)\n        val lst26 =\
    \ lst25.filter(x => x % 2 == 0)\n        val lst27 = lst25.filter(x => x % 2 ==\
    \ 1)\n        val lst28 = lst26.map", "        val lst2 = lst.map(x => x * 2)\n\
    \        val lst3 = lst.zip(lst2)\n        val lst4 = lst3.map(x => x._1 - x._2)\n\
    \        val lst5 = lst4.map(x => x * x)\n        val lst6 = lst5.filter(x =>\
    \ x > 0)\n        val lst7 = lst6.sum\n        return lst7.toLong", "        val\
    \ lst1 = lst.filter(_ % 2 == 0)\n        val lst2 = lst.filter(_ % 2 != 0)\n \
    \       val sum1 = lst1.foldLeft(0.0f)(_ + _)\n        val sum2 = lst2.foldLeft(0.0f)(_\
    \ + _)\n        val diff = sum1 - sum2\n        (diff * 2).toLong", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 0) {\n        \
    \        sum += i * i\n            }\n        }\n        return sum", "      \
    \  val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n \
    \       val lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x\
    \ => x * x)\n        val lst6 = lst5.map(x => x * x)\n        val lst7 = lst6.map(x\
    \ => x * x)\n        val lst8 = lst7.map(x => x * x)\n        val lst9 = lst8.map(x\
    \ => x * x)\n        val lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x\
    \ => x * x)\n        val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x\
    \ => x * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        var sum = 0L\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        sum", "    \
    \    val lst2 = lst.filter(x => x % 2 == 0)\n        val lst3 = lst.filter(x =>\
    \ x % 2 == 1)\n        val lst4 = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x\
    \ => x * 3)\n        val lst6 = lst4 ::: lst5\n        val lst7 = lst6.filter(x\
    \ => x % 2 == 0)\n        val lst8 = lst6.filter(x => x % 2 == 1)\n        val\
    \ lst9 = lst7.map(x => x * 2)\n        val lst10 = lst8.map(x => x * 3)\n    \
    \    val lst11 = lst9 ::: lst10\n        val lst12 = lst11.filter(x => x % 2 ==\
    \ 0)\n        val lst13 = lst11.filter(x => x % 2 == 1)\n        val lst14 = lst12.map(x\
    \ => x * 2)\n        val lst15 = lst13.map(x => x * 3)\n        val lst16 = lst14\
    \ ::: lst15\n        val lst17 = lst16.filter(x => x % 2 == 0)\n        val lst18\
    \ = lst16.filter(x => x % 2 == 1)\n        val lst19 = lst17.map(x => x * 2)\n\
    \        val lst20 = lst18.map(x => x * 3)\n        val lst21 = lst19 ::: lst20\n\
    \        val lst22 = lst21.filter(x => x % 2 == 0)\n        val lst23 = lst21.filter(x\
    \ => x % 2 == 1)\n        val lst24 = lst22.map(x => x * 2)\n        val lst25\
    \ = lst23.map(x => x * 3)\n        val lst26 = lst24 ::: lst25\n        val lst27\
    \ = lst26.filter(x => x % 2 == 0)\n        val lst28 = lst26.filter(x => x % 2",
  "        var sum : Long = 0\n        for (i <- 0 until lst.length) {\n         \
    \   sum += (lst(i) * lst(i)).toLong\n        }\n        return sum", "       \
    \ var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n    \
    \            sum += i * i\n            }\n        }\n        return sum", "  \
    \      val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.filter(x => x %\
    \ 2 == 0)\n        val lst4 = lst3.map(x => x * x)\n        lst4.sum.toLong",
  "        val lst1 = lst.map(x => x * 2)\n        val lst2 = lst.map(x => x * x)\n\
    \        val lst3 = lst1.zip(lst2)\n        val lst4 = lst3.map(x => x._1 - x._2)\n\
    \        val lst5 = lst4.filter(x => x > 0)\n        lst5.sum.toLong", "     \
    \   var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 1) {\n  \
    \              sum += i * i\n            }\n        }\n        return sum", " \
    \       val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 == 1)\n        val evenSum = evens.foldLeft(0.0)(_ + _)\n        val\
    \ oddSum = odds.foldLeft(0.0)(_ + _)\n        val diff = evenSum - oddSum\n  \
    \      return (2 * diff).toLong", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i % 2 == 1) {\n                sum += i * i\n           \
    \ }\n        }\n        return sum", "        val lst2 = lst.map(x => x * 2)\n\
    \        val lst3 = lst.map(x => x * x)\n        val lst4 = lst3.filter(x => x\
    \ % 2 == 1)\n        val lst5 = lst4.map(x => x.toLong)\n        val lst6 = lst5.sum\n\
    \        return lst6", "        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            val x = lst(i)\n            if (x > 0 && x.toInt == x) {\n  \
    \              val y = x.toInt\n                if (y % 2 == 1) sum += y * y\n\
    \            }\n        }\n        return sum", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        val lst5 = lst4.map(x => x - 1)\n        val lst6 =\
    \ lst5.map(x => x * x)\n        val lst7 = lst6.map(x => x * x)\n        val lst8\
    \ = lst7.map(x => x * x)\n        val lst9 = lst8.map(x => x * x)\n        val\
    \ lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x => x * x)\n  \
    \      val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x => x\
    \ * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        var sum = 0L\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return sum",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                val j = i.toInt\n                if (j % 2 == 1) {\n\
    \                    sum += j * j\n                }\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 0) sum += i * i\n        }\n        return sum", "        val lst2\
    \ = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n\
    \        val lst6 = lst5.filter(x => x % 2 == 0)\n        val lst7 = lst6.map(x\
    \ => x * x)\n        val lst8 = lst7.filter(x => x % 2 == 0)\n        val lst9\
    \ = lst8.map(x => x * x)\n        val lst10 = lst9.filter(x => x % 2 == 0)\n \
    \       val lst11 = lst10.map(x => x * x)\n        val lst12 = lst11.filter(x\
    \ => x % 2 == 0)\n        val lst13 = lst12.map(x => x * x)\n        val lst14\
    \ = lst13.filter(x => x % 2 == 0)\n        val lst15 = lst14.map(x => x * x)\n\
    \        val lst16 = lst15.filter(x => x % 2 == 0)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.filter(x => x % 2 == 0)\n        val lst19\
    \ = lst18.map(x => x * x)\n        val lst20 = lst19.filter(x => x % 2 == 0)\n\
    \        val lst21 = lst20.map(x => x * x)\n        val lst22 = lst21.filter(x\
    \ => x % 2 == 0)\n        val lst23 = lst22.map(x => x * x)\n        val lst24\
    \ = lst23.filter(x => x % 2 == 0)\n        val lst25 = lst24.map(x => x * x)\n\
    \        val lst26 = lst25.filter(x => x % 2 == 0)\n        val lst27 = lst26.map(x",
  "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.map(x => x * 2)\n        val lst6 = lst5.sum\n        return lst6.toLong",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                val x = i * i\n                sum += x\n         \
    \   }\n        }\n        sum", "        var sum = 0L\n        for (i <- lst)\
    \ {\n            if (i % 2 == 0) {\n                sum += i * i\n           \
    \ }\n        }\n        return sum", "        val lst2 = lst.map(x => x * 2)\n\
    \        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x =>\
    \ x % 2 == 0)\n        lst4.sum.toLong", "        val lst2 = lst.map(x => x *\
    \ 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n        val lst6 =\
    \ lst5.map(x => x * x)\n        val lst7 = lst6.map(x => x * x)\n        val lst8\
    \ = lst7.map(x => x * x)\n        val lst9 = lst8.map(x => x * x)\n        val\
    \ lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x => x * x)\n  \
    \      val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x => x\
    \ * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        val sum = lst.filter(_\
    \ % 2 == 1).map(x => x * x).sum\n        return sum.toLong", "        val lst2\
    \ = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n\
    \        val lst6 = lst5.filter(x => x % 2 == 0)\n        val lst7 = lst6.map(x\
    \ => x * x)\n        val lst8 = lst7.filter(x => x % 2 == 0)\n        val lst9\
    \ = lst8.map(x => x * x)\n        val lst10 = lst9.filter(x => x % 2 == 0)\n \
    \       val lst11 = lst10.map(x => x * x)\n        val lst12 = lst11.filter(x\
    \ => x % 2 == 0)\n        val lst13 = lst12.map(x => x * x)\n        val lst14\
    \ = lst13.filter(x => x % 2 == 0)\n        val lst15 = lst14.map(x => x * x)\n\
    \        val lst16 = lst15.filter(x => x % 2 == 0)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.filter(x => x % 2 == 0)\n        val lst19\
    \ = lst18.map(x => x * x)\n        val lst20 = lst19.filter(x => x % 2 == 0)\n\
    \        val lst21 = lst20.map(x => x * x)\n        val lst22 = lst21.filter(x\
    \ => x % 2 == 0)\n        val lst23 = lst22.map(x => x * x)\n        val lst24\
    \ = lst23.filter(x => x % 2 == 0)\n        val lst25 = lst24.map(x => x * x)\n\
    \        val lst26 = lst25.filter(x => x % 2 == 0)\n        val lst27 = lst26.map(x",
  "        val lst2 = lst.filter(x => x >= 0 && x % 1 == 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.map(x => x * 2)\n        val lst6 = lst5.sum\n        return lst6.toLong",
  "        val lst2 = lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n\
    \        val lst4 = lst3.filter(x => x % 2 == 0)\n        lst4.sum.toLong", " \
    \       val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.map(x => x * 2)\n        val lst6 = lst5.sum\n        return lst6.toLong",
  "        val sum = lst.sum\n        val sumOfSquares = lst.map(x => x * x).sum\n\
    \        val result = (sum * sum) - sumOfSquares\n        return result.toLong",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        return sum", "        var sum = 0L\n        for (i <- lst) {\n      \
    \      if (i % 2 == 1) {\n                sum += i * i\n            }\n      \
    \  }\n        return sum", "        val lst2 = lst.filter(x => x > 0 && x % 1\
    \ == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 1)\n        val sum = lst4.sum\n        return sum.toLong", "  \
    \      var sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 0) sum\
    \ += i * i\n        }\n        sum", "        val lst2 = lst.map(x => x * 2)\n\
    \        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x =>\
    \ x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n        val lst6 = lst5.filter(x\
    \ => x % 2 == 0)\n        val lst7 = lst6.map(x => x * x)\n        val lst8 =\
    \ lst7.filter(x => x % 2 == 0)\n        val lst9 = lst8.map(x => x * x)\n    \
    \    val lst10 = lst9.filter(x => x % 2 == 0)\n        val lst11 = lst10.map(x\
    \ => x * x)\n        val lst12 = lst11.filter(x => x % 2 == 0)\n        val lst13\
    \ = lst12.map(x => x * x)\n        val lst14 = lst13.filter(x => x % 2 == 0)\n\
    \        val lst15 = lst14.map(x => x * x)\n        val lst16 = lst15.filter(x\
    \ => x % 2 == 0)\n        val lst17 = lst16.map(x => x * x)\n        val lst18\
    \ = lst17.filter(x => x % 2 == 0)\n        val lst19 = lst18.map(x => x * x)\n\
    \        val lst20 = lst19.filter(x => x % 2 == 0)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.filter(x => x % 2 == 0)\n        val lst23\
    \ = lst22.map(x => x * x)\n        val lst24 = lst23.filter(x => x % 2 == 0)\n\
    \        val lst25 = lst24.map(x => x * x)\n        val lst26 = lst25.filter(x\
    \ => x % 2 == 0)\n        val lst27 = lst26.map(x", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n        val lst6 =\
    \ lst5.map(x => x * x)\n        val lst7 = lst6.map(x => x * x)\n        val lst8\
    \ = lst7.map(x => x * x)\n        val lst9 = lst8.map(x => x * x)\n        val\
    \ lst10 = lst9.map(x => x * x)\n        val lst11 = lst10.map(x => x * x)\n  \
    \      val lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x => x\
    \ * x)\n        val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x\
    \ => x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x => x *", "        var sum = 0L\n\
    \        for (i <- lst) {\n            sum += pow(i, 2).toLong\n        }\n  \
    \      return sum", "        // Your code here\n        var sum = 0.0\n      \
    \  for (i <- lst) {\n            if (i % 2 == 1) {\n                sum += i *\
    \ i\n            }\n        }\n        return sum.toLong", "        val lst2 =\
    \ lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x - lst.head)\n      \
    \  val lst4 = lst3.map(x => x.toLong)\n        lst4.sum", "        val sum = lst.foldLeft(0.0)((a,\
    \ b) => a + b)\n        val sumOfSquares = lst.foldLeft(0.0)((a, b) => a + pow(b,\
    \ 2))\n        val avg = sum / lst.length\n        val avgOfSquares = sumOfSquares\
    \ / lst.length\n        val diff = avgOfSquares - pow(avg, 2)\n        return\
    \ 2 * diff.toLong", "        val evens = lst.filter(x => x % 2 == 0)\n       \
    \ val odds = lst.filter(x => x % 2 == 1)\n        val evenSum = evens.foldLeft(0.0f)(_\
    \ + _)\n        val oddSum = odds.foldLeft(0.0f)(_ + _)\n        val diff = evenSum\
    \ - oddSum\n        return (2 * diff).toLong", "        val lst1 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        val lst2 = lst1.filter(x => x % 2 == 1)\n \
    \       val lst3 = lst2.map(x => x * x)\n        val sum = lst3.sum\n        return\
    \ sum.toLong", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += i * i\n            }\n        }\n   \
    \     return sum", "        val lst2 = lst.filter(x => x % 2 == 0)\n        val\
    \ lst3 = lst.filter(x => x % 2 == 1)\n        val lst4 = lst2.map(x => x * 2)\n\
    \        val lst5 = lst3.map(x => x * 2)\n        val lst6 = lst4.zip(lst5)\n\
    \        val lst7 = lst6.map(x => x._1 - x._2)\n        val lst8 = lst7.map(x\
    \ => x * x)\n        lst8.sum.toLong", "        val lst2 = lst.map(x => x * 2)\n\
    \        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x =>\
    \ x % 2 == 0)\n        val lst5 = lst4.map(x => x - 1)\n        val lst6 = lst5.filter(x\
    \ => x % 3 == 0)\n        val lst7 = lst6.map(x => x / 3)\n        val lst8 =\
    \ lst7.map(x => x * x)\n        val lst9 = lst8.map(x => x * x)\n        val lst10\
    \ = lst9.map(x => x * x)\n        val lst11 = lst10.map(x => x * x)\n        val\
    \ lst12 = lst11.map(x => x * x)\n        val lst13 = lst12.map(x => x * x)\n \
    \       val lst14 = lst13.map(x => x * x)\n        val lst15 = lst14.map(x =>\
    \ x * x)\n        val lst16 = lst15.map(x => x * x)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.map(x => x * x)\n        val lst19 = lst18.map(x\
    \ => x * x)\n        val lst20 = lst19.map(x => x * x)\n        val lst21 = lst20.map(x\
    \ => x * x)\n        val lst22 = lst21.map(x => x * x)\n        val lst23 = lst22.map(x\
    \ => x * x)\n        val lst24 = lst23.map(x => x * x)\n        val lst25 = lst24.map(x\
    \ => x * x)\n        val lst26 = lst25.map(x => x * x)\n        val lst27 = lst26.map(x\
    \ => x * x)\n        val lst28 = lst27.map(x =>", "        var sum = 0L\n    \
    \    for (i <- 0 until lst.length) {\n            for (j <- i + 1 until lst.length)\
    \ {\n                sum += 2 * abs(lst(i) - lst(j)).toLong\n            }\n \
    \       }\n        sum", "        val lst2 = lst.filter(x => x > 0 && x % 1 ==\
    \ 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n        val lst6 =\
    \ lst5.sum\n        return lst6.toLong", "        val lst2 = lst.filter(x => x\
    \ % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val lst4\
    \ = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x => x * 3)\n        val\
    \ lst6 = lst4 ++ lst5\n        val lst7 = lst6.sortWith(_ < _)\n        val lst8\
    \ = lst7.reverse\n        val lst9 = lst8.drop(2)\n        val lst10 = lst9.dropRight(2)\n\
    \        val lst11 = lst10.map(x => x * x)\n        val lst12 = lst11.sum\n  \
    \      return lst12", "        var sum = 0.0\n        for (i <- lst) {\n     \
    \       sum += pow(i, 2)\n        }\n        return sum.toLong", "        var\
    \ sum = 0L\n        for (i <- lst) {\n            if (i % 2 == 0) sum += i * i\n\
    \        }\n        return sum", "        // Write your code here\n        return\
    \ 0;", "        var sum = 0L\n        for (i <- lst) {\n            if (i % 2\
    \ == 0) sum += i * i\n        }\n        sum", "        val lst2 = lst.map(x =>\
    \ x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        lst4.sum.toLong", "        val lst2 = lst.filter(x =>\
    \ x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.map(x => x * 2)\n  \
    \      val lst6 = lst5.sum\n        return lst6.toLong", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst.zip(lst2)\n        val lst4 = lst3.map(x =>\
    \ x._1 - x._2)\n        val lst5 = lst4.map(x => x * x)\n        val lst6 = lst5.sum\n\
    \        return lst6.toLong", "        // Write your code here\n        return\
    \ 0", "        var sum = 0.0\n        for (i <- lst) {\n            sum += i\n\
    \        }\n        var mean = sum / lst.length\n        var sum2 = 0.0\n    \
    \    for (i <- lst) {\n            sum2 += pow(i - mean, 2)\n        }\n     \
    \   var variance = sum2 / lst.length\n        return (2 * variance).toLong", " \
    \       val sum = lst.foldLeft(0.0)((a, b) => a + b)\n        val sumOfSquares\
    \ = lst.foldLeft(0.0)((a, b) => a + b * b)\n        val n = lst.length\n     \
    \   val mean = sum / n\n        val meanOfSquares = sumOfSquares / n\n       \
    \ val variance = meanOfSquares - mean * mean\n        val stdDev = sqrt(variance)\n\
    \        val diff = 2 * stdDev - mean\n        val doubleDiff = 2 * diff\n   \
    \     doubleDiff.toLong", "        var sum = 0L\n        for (i <- lst) {\n  \
    \          if (i % 2 == 1) {\n                sum += i * i\n            }\n  \
    \      }\n        return sum", "        val (odd, even) = lst.partition(_ % 2\
    \ == 1)\n        val oddSquares = odd.map(x => x * x)\n        val evenSquares\
    \ = even.map(x => x * x)\n        val oddSum = oddSquares.sum\n        val evenSum\
    \ = evenSquares.sum\n        val difference = oddSum - evenSum\n        return\
    \ difference * 2", "        val lst2 = lst.filter(x => x % 2 == 0)\n        val\
    \ lst3 = lst.filter(x => x % 2 == 1)\n        val lst4 = lst3.map(x => x * x)\n\
    \        val lst5 = lst2.map(x => x * x)\n        val lst6 = lst4.sum - lst5.sum\n\
    \        lst6.toLong", "        val diff = lst.max - lst.min\n        (diff *\
    \ 2).toLong", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds\
    \ = lst.filter(x => x % 2 == 1)\n        val sumOfEvens = evens.foldLeft(0.0f)((x,\
    \ y) => x + y)\n        val sumOfOdds = odds.foldLeft(0.0f)((x, y) => x + y)\n\
    \        val diff = sumOfEvens - sumOfOdds\n        return (2 * diff).toLong",
  "        var sum = 0L\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        sum", "        var sum = 0L\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += i * i\n            }\n        }\n   \
    \     return sum", "        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            for (j <- 0 until lst.length) {\n                if (i != j)\
    \ {\n                    sum += 2 * abs(lst(i) - lst(j)).toLong\n            \
    \    }\n            }\n        }\n        return sum", "        var sum = 0L\n\
    \        for (i <- 0 until lst.length) {\n            for (j <- 0 until lst.length)\
    \ {\n                if (i != j) {\n                    sum += 2 * abs(lst(i)\
    \ - lst(j)).toLong\n                }\n            }\n        }\n        return\
    \ sum", "        val sum = lst.foldLeft(0.0)((a, b) => a + b)\n        val sumOfSquares\
    \ = lst.foldLeft(0.0)((a, b) => a + pow(b, 2).toFloat)\n        val mean = sum\
    \ / lst.length\n        val meanOfSquares = sumOfSquares / lst.length\n      \
    \  val variance = meanOfSquares - pow(mean, 2)\n        val stdDev = sqrt(variance)\n\
    \        val doubleTheDifference = 2 * stdDev\n        doubleTheDifference.toLong",
  "        val lst2 = lst.filter(x => x % 2 == 0)\n        val lst3 = lst.filter(x\
    \ => x % 2 == 1)\n        val lst4 = lst2.map(x => x * 2)\n        val lst5 =\
    \ lst3.map(x => x * 2)\n        val lst6 = lst4.zip(lst5)\n        val lst7 =\
    \ lst6.map(x => abs(x._1 - x._2))\n        val lst8 = lst7.map(x => x * x)\n \
    \       val lst9 = lst8.sum\n        return lst9.toLong", "        val lst2 =\
    \ lst.map(x => x * 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4\
    \ = lst3.filter(x => x % 2 == 0)\n        val lst5 = lst4.map(x => x * x)\n  \
    \      val lst6 = lst5.filter(x => x % 2 == 0)\n        val lst7 = lst6.map(x\
    \ => x * x)\n        val lst8 = lst7.filter(x => x % 2 == 0)\n        val lst9\
    \ = lst8.map(x => x * x)\n        val lst10 = lst9.filter(x => x % 2 == 0)\n \
    \       val lst11 = lst10.map(x => x * x)\n        val lst12 = lst11.filter(x\
    \ => x % 2 == 0)\n        val lst13 = lst12.map(x => x * x)\n        val lst14\
    \ = lst13.filter(x => x % 2 == 0)\n        val lst15 = lst14.map(x => x * x)\n\
    \        val lst16 = lst15.filter(x => x % 2 == 0)\n        val lst17 = lst16.map(x\
    \ => x * x)\n        val lst18 = lst17.filter(x => x % 2 == 0)\n        val lst19\
    \ = lst18.map(x => x * x)\n        val lst20 = lst19.filter(x => x % 2 == 0)\n\
    \        val lst21 = lst20.map(x => x * x)\n        val lst22 = lst21.filter(x\
    \ => x % 2 == 0)\n        val lst23 = lst22.map(x => x * x)\n        val lst24\
    \ = lst23.filter(x => x % 2 == 0)\n        val lst25 = lst24.map(x => x * x)\n\
    \        val lst26 = lst25.filter(x => x % 2 == 0)\n        val lst27 = lst26.map(x",
  "        val sum = lst.sum\n        val sumOfSquares = lst.map(x => x * x).sum\n\
    \        val result = (sum * sum) - sumOfSquares\n        return result.toLong",
  "        val sum = lst.foldLeft(0.0)((acc, x) => acc + x)\n        val sumOfSquares\
    \ = lst.foldLeft(0.0)((acc, x) => acc + x * x)\n        val mean = sum / lst.length\n\
    \        val meanOfSquares = sumOfSquares / lst.length\n        val variance =\
    \ meanOfSquares - mean * mean\n        val doubleTheDifference = variance * 2\n\
    \        doubleTheDifference.toLong", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 0) {\n                sum += i * i\n      \
    \      }\n        }\n        sum", "        val lst2 = lst.filter(_ > 0)\n   \
    \     val lst3 = lst2.filter(_ % 1 == 0)\n        val lst4 = lst3.filter(_ % 2\
    \ == 1)\n        val lst5 = lst4.map(x => x * x)\n        lst5.sum.toLong", " \
    \       val lst1 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst2 = lst1.filter(x\
    \ => x % 2 == 1)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 =\
    \ lst3.sum\n        val lst5 = lst4 * 2\n        return lst5.toLong", "      \
    \  var sum = 0\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += i * i\n            }\n        }\n        return sum",
  "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.map(x => x * 2)\n        return lst5.sum.toLong", "        val lst2 =\
    \ lst.filter(x => x % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n\
    \        val sum1 = lst2.foldLeft(0.0f)(_ + _)\n        val sum2 = lst3.foldLeft(0.0f)(_\
    \ + _)\n        val diff = sum1 - sum2\n        val double = diff * 2\n      \
    \  return double.toLong", "        var sum = 0L\n        for (i <- lst) {\n  \
    \          if (i % 2 == 1) {\n                sum += i * i\n            }\n  \
    \      }\n        return sum", "        var sum = 0L\n        for (i <- 0 until\
    \ lst.length) {\n            for (j <- i + 1 until lst.length) {\n           \
    \     val diff = abs(lst(i) - lst(j))\n                sum += diff * diff\n  \
    \          }\n        }\n        sum", "        val squares = lst.map(x => x *\
    \ x)\n        val sum = squares.sum\n        val double = sum * 2\n        val\
    \ difference = double - sum\n        return difference.toLong", "        val lst1\
    \ = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst2 = lst1.filter(x =>\
    \ x % 2 == 1)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.sum\n\
    \        val lst5 = lst4 * 2\n        return lst5.toLong", "        val lst2 =\
    \ lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n\
    \        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.map(x\
    \ => x * 2)\n        lst5.sum.toLong", "        val sum = lst.foldLeft(0.0)((x,\
    \ y) => x + y)\n        val squareSum = lst.foldLeft(0.0)((x, y) => x + y * y)\n\
    \        val n = lst.length\n        val mean = sum / n\n        val variance\
    \ = squareSum / n - mean * mean\n        val stdDev = sqrt(variance)\n       \
    \ val diff = (mean - stdDev) * 2\n        diff.toLong", "        val lst2 = lst.filter(x\
    \ => x % 2 == 0)\n        val lst3 = lst.filter(x => x % 2 == 1)\n        val\
    \ lst4 = lst2.map(x => x * 2)\n        val lst5 = lst3.map(x => x * 2)\n     \
    \   val lst6 = lst4.zip(lst5)\n        val lst7 = lst6.map(x => x._1 - x._2)\n\
    \        val lst8 = lst7.map(x => x * x)\n        lst8.sum.toLong", "        //\
    \ Your code here\n        return 0", "        var sum = 0L\n        for (i <-\
    \ lst) {\n            if (i % 2 == 1) {\n                sum += i * i\n      \
    \      }\n        }\n        return sum", "        var sum = 0L\n        for (i\
    \ <- lst) {\n            if (i % 2 == 1) sum += i * i\n        }\n        return\
    \ sum", "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 == 1)\n        val evenSum = evens.foldLeft(0.0f)(_ + _)\n        val\
    \ oddSum = odds.foldLeft(0.0f)(_ + _)\n        val diff = evenSum - oddSum\n \
    \       return (diff * 2).toLong", "        val s = lst.filter(x => x > 0 && x\
    \ % 1 == 0).map(x => x * x).sum\n        val d = lst.filter(x => x > 0 && x %\
    \ 1 == 0).map(x => x * x * x).sum\n        d - s", "        val lst2 = lst.map(x\
    \ => x * 2)\n        val lst3 = lst2.zip(lst)\n        val lst4 = lst3.map(x =>\
    \ x._1 - x._2)\n        lst4.sum.toLong", "        val lst2 = lst.map(x => x *\
    \ 2)\n        val lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x\
    \ => x % 2 == 0)\n        lst4.sum.toLong"]
stop_tokens:
- "\n    }\n"
