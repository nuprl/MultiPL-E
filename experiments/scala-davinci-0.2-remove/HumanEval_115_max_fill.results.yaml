language: scala
name: HumanEval_115_max_fill
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(x => x.sum).max\n\
    \        val numBuckets = maxFill / capacity\n        if (maxFill % capacity ==\
    \ 0) numBuckets else numBuckets + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0w82avi8.scala:25)\n\tat Problem.main(tmp0w82avi8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var total = 0L\n        for (i <- 0 until n) {\n            var sum =\
    \ 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \            }\n            total += sum / capacity\n            if (sum % capacity\
    \ != 0) total += 1\n        }\n        return total\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(x => x.sum).toArray\n        val buckets = Array.fill(n)(capacity)\n\
    \        var count = 0\n        while (wells.sum > 0) {\n            for (i <-\
    \ 0 until n) {\n                if (wells(i) > 0) {\n                    val delta\
    \ = min(buckets(i), wells(i))\n                    wells(i) -= delta\n       \
    \             buckets(i) -= delta\n                }\n            }\n        \
    \    count += 1\n            for (i <- 0 until n) {\n                if (buckets(i)\
    \ == 0) {\n                    buckets(i) = capacity\n                }\n    \
    \        }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1m7ihlh.scala:43)\n\tat Problem.main(tmp_1m7ihlh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(x => x.sum).toArray\n        val buckets = Array.fill(m)(capacity)\n\
    \        var count = 0\n        while (wells.sum > 0) {\n            for (i <-\
    \ 0 until m) {\n                if (wells(i) > 0) {\n                    val fill\
    \ = min(buckets(i), wells(i))\n                    wells(i) -= fill\n        \
    \            buckets(i) -= fill\n                }\n            }\n          \
    \  count += 1\n            for (i <- 0 until m) buckets(i) = capacity\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length\
    \ 3\n\tat Problem$.maxFill$$anonfun$1(tmpewadbt3g.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.maxFill(tmpewadbt3g.scala:32)\n\
    \tat Problem$.main(tmpewadbt3g.scala:39)\n\tat Problem.main(tmpewadbt3g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numFills = maxFill / capacity\n        val remainder = maxFill %\
    \ capacity\n        if (remainder == 0) numFills else numFills + 1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvea_s6h_.scala:26)\n\tat Problem.main(tmpvea_s6h_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0\n        for (row <- grid)\
    \ {\n            var fill = 0\n            for (well <- row) {\n             \
    \   if (well == 1) {\n                    fill += 1\n                } else {\n\
    \                    if (fill > 0) {\n                        maxFill += 1\n \
    \                       fill = 0\n                    }\n                }\n \
    \           }\n            if (fill > 0) {\n                maxFill += 1\n   \
    \         }\n        }\n        maxFill\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmjkd22io.scala:40)\n\tat Problem.main(tmpmjkd22io.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var count = 0L\n        for (i <- 0 until n) {\n            var sum =\
    \ 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    count += 1\n    \
    \                sum = 0\n                }\n            }\n            if (sum\
    \ > 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var sum = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                sum += grid(i)(j)\n            }\n            count += (sum\
    \ - 1) / capacity + 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg2c48mz3.scala:32)\n\tat Problem.main(tmpg2c48mz3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n  \
    \                  dp(i)(j) = 1\n                } else {\n                  \
    \  dp(i)(j) = 0\n                }\n            }\n        }\n        var ans\
    \ = 0\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n  \
    \              if (dp(i)(j) == 1) {\n                    var count = 0\n     \
    \               var k = i\n                    while (k < n && count < capacity)\
    \ {\n                        if (dp(k)(j) == 1) {\n                          \
    \  count += 1\n                            dp(k)(j) = 0\n                    \
    \    }\n                        k += 1\n                    }\n              \
    \      ans += 1\n                }\n            }\n        }\n        ans\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3unb9bbe.scala:53)\n\tat Problem.main(tmp3unb9bbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val minFill = grid.map(row => row.sum).min\n        val minFillCount\
    \ = grid.map(row => row.count(_ == 1)).min\n        val maxFillCount = grid.map(row\
    \ => row.count(_ == 1)).max\n        val minFillCountRow = grid.filter(row =>\
    \ row.count(_ == 1) == minFillCount).head\n        val maxFillCountRow = grid.filter(row\
    \ => row.count(_ == 1) == maxFillCount).head\n        val minFillCountRowIndex\
    \ = grid.indexOf(minFillCountRow)\n        val maxFillCountRowIndex = grid.indexOf(maxFillCountRow)\n\
    \        val minFillCountRowFill = minFillCountRow.sum\n        val maxFillCountRowFill\
    \ = maxFillCountRow.sum\n        val minFillCountRowFillIndex = minFillCountRow.indexOf(1)\n\
    \        val maxFillCountRowFillIndex = maxFillCountRow.indexOf(1)\n        val\
    \ minFillCountRowFillCount = minFillCountRow.count(_ == 1)\n        val maxFillCountRowFillCount\
    \ = maxFillCountRow.count(_ == 1)\n        val minFillCountRowFillCountIndex =\
    \ minFillCountRow.indexOf(1)\n        val maxFillCountRowFillCountIndex = maxFillCountRow.indexOf(1)\n\
    \        val minFillCountRowFillCountIndexes = minFillCountRow.zipWithIndex.filter(_._1\
    \ == 1).map(_._2)\n        val maxFillCountRowFillCountIndexes = maxFillCountRow.zipWithIndex.filter(_._1\
    \ == 1).map(_._2)\n        val minFillCountRowFillCountIndexesLength = minFillCountRowFillCountIndexes.length\n\
    \        val maxFillCountRowFillCountIndexesLength = maxFillCountRowFillCountIndexes.length\n\
    \        val minFillCountRowFillCountIndexesLast = minFillCountRowFillCountIndexes.last\n\
    \        val maxFillCountRowFillCountIndexesLast = maxFillCountRowFillCountIndexes.last\n\
    \        val minFillCountRowFillCountIndexesLastIndex = minFillCountRow.indexOf(1,\
    \ minFillCountRowFillCountIndexesLast)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1r91g2f9.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum > capacity) {\n                    result += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0qwdylz.scala:36)\n\tat Problem.main(tmpr0qwdylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n   \
    \             if (i > 0) dp(i)(j) = max(dp(i)(j), dp(i - 1)(j))\n            \
    \    if (j > 0) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n            }\n      \
    \  }\n        var result = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                val fill = capacity - dp(i)(j)\n       \
    \         if (fill > 0) {\n                    result += fill\n              \
    \      dp(i)(j) += fill\n                    if (i > 0) dp(i - 1)(j) = max(dp(i\
    \ - 1)(j), dp(i)(j))\n                    if (j > 0) dp(i)(j - 1) = max(dp(i)(j\
    \ - 1), dp(i)(j))\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5_a3_27.scala:45)\n\tat Problem.main(tmpn5_a3_27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var fill = 0L\n        var i = 0\n        while (i < n) {\n         \
    \   var j = 0\n            while (j < m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    fill += 1\n                    j += 1\n          \
    \      } else {\n                    var k = j\n                    while (k <\
    \ m && grid(i)(k) == 0) k += 1\n                    if (k < m) {\n           \
    \             val diff = k - j\n                        if (diff > capacity) {\n\
    \                            fill += diff / capacity\n                       \
    \     if (diff % capacity > 0) fill += 1\n                        } else fill\
    \ += 1\n                        j = k\n                    } else j = k\n    \
    \            }\n            }\n            i += 1\n        }\n        fill\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpitcp4buq.scala:48)\n\tat Problem.main(tmpitcp4buq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        var count = 0\n        while\
    \ (maxFill.map(_.sum).sum > 0) {\n            for (i <- 0 until rows) {\n    \
    \            for (j <- 0 until cols) {\n                    if (maxFill(i)(j)\
    \ > 0) {\n                        if (i > 0 && maxFill(i - 1)(j) > 0) {\n    \
    \                        val diff = min(maxFill(i)(j), maxFill(i - 1)(j))\n  \
    \                          maxFill(i)(j) -= diff\n                           \
    \ maxFill(i - 1)(j) -= diff\n                        }\n                     \
    \   if (j > 0 && maxFill(i)(j - 1) > 0) {\n                            val diff\
    \ = min(maxFill(i)(j), maxFill(i)(j - 1))\n                            maxFill(i)(j)\
    \ -= diff\n                            maxFill(i)(j - 1) -= diff\n           \
    \             }\n                        if (i < rows - 1 && maxFill(i + 1)(j)\
    \ > 0) {\n                            val diff = min(maxFill(i)(j), maxFill(i\
    \ + 1)(j))\n                            maxFill(i)(j) -= diff\n              \
    \              maxFill(i + 1)(j) -= diff\n                        }\n        \
    \                if (j < cols - 1 && maxFill(i)(j + 1) > 0) {\n              \
    \              val diff = min(maxFill(i)(j), maxFill(i)(j + 1))\n            \
    \                maxFill(i)(j) -= diff\n                            maxFill(i)(j\
    \ + 1) -= diff\n                        }\n                    }\n           \
    \     }\n            }\n            count += 1\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978484
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var fill = 0L\n            for (well <- row) {\n            \
    \    if (well == 1) fill += 1\n                else if (fill > 0) {\n        \
    \            maxFill += min(fill, capacity)\n                    fill = 0\n  \
    \              }\n            }\n            maxFill += min(fill, capacity)\n\
    \        }\n        maxFill\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsdzx6e6h.scala:35)\n\tat Problem.main(tmpsdzx6e6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i - 1\
    \ >= 0 && grid(i - 1)(j) == 1) {\n                        maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j) + capacity)\n                    }\n                    if\
    \ (j - 1 >= 0 && grid(i)(j - 1) == 1) {\n                        maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n                    }\n\
    \                }\n            }\n        }\n        var result = 0L\n      \
    \  for (i <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n\
    \                if (grid(i)(j) == 1) {\n                    if (i + 1 < n &&\
    \ grid(i + 1)(j) == 1) {\n                        maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i + 1)(j) + capacity)\n                    }\n                    if\
    \ (j + 1 < m && grid(i)(j + 1) == 1) {\n                        maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j + 1) + capacity)\n                    }\n\
    \                    result = max(result, maxFill(i)(j))\n                }\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps5nubbqp.scala:59)\n\tat Problem.main(tmps5nubbqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val wells = grid.map(row => row.sum).toArray\n\
    \        val max = wells.max\n        val min = wells.min\n        var count =\
    \ 0L\n        for (i <- min to max) {\n            for (j <- 0 until wells.length)\
    \ {\n                if (wells(j) > i) {\n                    wells(j) -= capacity\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20htbjr_.scala:35)\n\tat Problem.main(tmp20htbjr_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i - 1)(j) + capacity)\n                }\n    \
    \        }\n        }\n        for (i <- 0 until n) {\n            for (j <- 1\
    \ until m) {\n                if (grid(i)(j) == 1) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n                }\n    \
    \        }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for\
    \ (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n               \
    \     maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j) + capacity)\n     \
    \           }\n            }\n        }\n        for (i <- 0 until n) {\n    \
    \        for (j <- m - 2 to 0 by -1) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1) + capacity)\n\
    \                }\n            }\n        }\n        var result = 0L\n      \
    \  for (i <- 0 until n) {\n            for (j <- 0 until m) {\n              \
    \  if (grid(i)(j) == 1) {\n                    result += maxFill(i)(j) / capacity\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfbudlkc.scala:70)\n\tat Problem.main(tmpvfbudlkc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    val fill = maxFill(i)(j)\n\
    \                    if (fill < capacity) {\n                        result +=\
    \ 1\n                    }\n                    if (i < n - 1) {\n           \
    \             maxFill(i + 1)(j) = min(maxFill(i + 1)(j), fill)\n             \
    \       }\n                    if (j < m - 1) {\n                        maxFill(i)(j\
    \ + 1) = min(maxFill(i)(j + 1), fill)\n                    }\n               \
    \ }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1d_0a6d2.scala:61)\n\tat Problem.main(tmp1d_0a6d2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        if (maxFill <= capacity) 1 else maxFill / capacity + 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmfgs8243.scala:24)\n\tat Problem.main(tmpmfgs8243.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // grid[i][j] -> 0 | 1\n        // capacity\
    \ -> 1..10\n        // grid.length -> 1..100\n        // grid[0].length -> 1..100\n\
    \        // grid[i].length == grid[j].length\n        // grid[i][j] == grid[j][i]\n\
    \        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n    \
    \    // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n    \
    \    // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n    \
    \    // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n    \
    \    // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n    \
    \    // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n    \
    \    // grid[i][j] = 0 | 1\n        // grid[i][j] = 0 | 1\n        // grid[i][j]\
    \ = 0 | 1\n        // grid[i][j] =\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3whssz4s.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// grid[i][j] -> 0 | 1\e[0m\n\e[31m21 |\e\
    [0m        \e[34m// capacity -> 1..10\e[0m\n\e[31m22 |\e[0m        \e[34m// grid.length\
    \ -> 1..100\e[0m\n\e[31m23 |\e[0m        \e[34m// grid[0].length -> 1..100\e[0m\n\
    \e[31m24 |\e[0m        \e[34m// grid[i].length == grid[j].length\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// grid[i][j] == grid[j][i]\e[0m\n\e[31m26 |\e[0m      \
    \  \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m27 |\e[0m        \e[34m// grid[i][j]\
    \ = 0 | 1\e[0m\n\e[31m28 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m29\
    \ |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ grid[i][j] = 0 | 1\e[0m\n\e[31m31 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e\
    [0m\n\e[31m32 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m33 |\e[0m\
    \        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m34 |\e[0m        \e[34m// grid[i][j]\
    \ = 0 | 1\e[0m\n\e[31m35 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m36\
    \ |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m37 |\e[0m        \e[34m//\
    \ grid[i][j] = 0 | 1\e[0m\n\e[31m38 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e\
    [0m\n\e[31m39 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m40 |\e[0m\
    \        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m41 |\e[0m        \e[34m// grid[i][j]\
    \ = 0 | 1\e[0m\n\e[31m42 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m43\
    \ |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m44 |\e[0m        \e[34m//\
    \ grid[i][j] = 0 | 1\e[0m\n\e[31m45 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e\
    [0m\n\e[31m46 |\e[0m        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m47 |\e[0m\
    \        \e[34m// grid[i][j] = 0 | 1\e[0m\n\e[31m48 |\e[0m        \e[34m// grid[i][j"
  stdout: ''
  timestamp: 1659978478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill the wells from the bottom up.\n\
    \        // If the well is empty, fill it with the capacity.\n        // If the\
    \ well is full, fill it with the capacity and increment the number of times you\
    \ lowered the bucket.\n        // If the well is partially filled, fill it with\
    \ the capacity and increment the number of times you lowered the bucket.\n   \
    \     // If the well is partially filled and the capacity is greater than the\
    \ amount of water in the well,\n        // fill it with the capacity and increment\
    \ the number of times you lowered the bucket.\n        // If the well is partially\
    \ filled and the capacity is less than the amount of water in the well,\n    \
    \    // fill it with the capacity and increment the number of times you lowered\
    \ the bucket.\n        // If the well is partially filled and the capacity is\
    \ equal to the amount of water in the well,\n        // fill it with the capacity\
    \ and increment the number of times you lowered the bucket.\n        // If the\
    \ well is partially filled and the capacity is greater than the amount of water\
    \ in the well,\n        // fill it with the capacity and increment the number\
    \ of times you lowered the bucket.\n        // If the well is partially filled\
    \ and the capacity is less than the amount of water in the well,\n        // fill\
    \ it with the capacity and increment the number of times you lowered the bucket.\n\
    \        // If the well is partially filled and the capacity is equal to the amount\
    \ of water in the well,\n        // fill it with the capacity and increment the\
    \ number of times you lowered the bucket.\n        // If the well is partially\
    \ filled and the capacity is greater than the amount of water in the well,\n \
    \       // fill it with the capacity and increment the number of times you lowered\
    \ the bucket.\n        // If the well is partially filled and the capacity is\
    \ less than the amount of water in the well,\n        // fill it with the capacity\
    \ and increment the number of times you lowered the bucket.\n        // If the\
    \ well is partially filled and the capacity is equal to the amount of water in\
    \ the well,\n        // fill it with the capacity and increment the number of\
    \ times you lowered the bucket.\n        // If the well is partially filled and\
    \ the capacity is greater than the amount of water in the well,\n        // fill\
    \ it with the capacity and increment the number of times you lowered the bucket.\n\
    \        // If the well is partially filled and the capacity is less than\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn55zm199.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// Fill the wells from the bottom up.\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// If the well is empty, fill it with the capacity.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// If the well is full, fill it with the capacity\
    \ and increment the number of times you lowered the bucket.\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// If the well is partially filled, fill it with the capacity\
    \ and increment the number of times you lowered the bucket.\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// If the well is partially filled and the capacity is greater\
    \ than the amount of water in the well,\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ fill it with the capacity and increment the number of times you lowered the\
    \ bucket.\e[0m\n\e[31m26 |\e[0m        \e[34m// If the well is partially filled\
    \ and the capacity is less than the amount of water in the well,\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// fill it with the capacity and increment the number of\
    \ times you lowered the bucket.\e[0m\n\e[31m28 |\e[0m        \e[34m// If the well\
    \ is partially filled and the capacity is equal to the amount of water in the\
    \ well,\e[0m\n\e[31m29 |\e[0m        \e[34m// fill it with the capacity and increment\
    \ the number of times you lowered the bucket.\e[0m\n\e[31m30 |\e[0m        \e\
    [34m// If the well is partially filled and the capacity is greater than the amount\
    \ of water in the well,\e[0m\n\e[31m31 |\e[0m        \e[34m// fill it with the\
    \ capacity and increment the number of times you lowered the bucket.\e[0m\n\e\
    [31m32 |\e[0m        \e[34m// If the well is partially filled and the capacity\
    \ is less than the amoun"
  stdout: ''
  timestamp: 1659978478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxRow = grid.map(row => row.sum).max\n\
    \        val maxCol = grid.transpose.map(col => col.sum).max\n        max(maxRow,\
    \ maxCol)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4lvg69k.scala:25)\n\tat Problem.main(tmpz4lvg69k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var fill = 0L\n        for (i <- 0 until n) {\n            var sum =\
    \ 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum > capacity) {\n                    fill += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        fill\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbftzh9et.scala:36)\n\tat Problem.main(tmpbftzh9et.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n   \
    \             if (i > 0) dp(i)(j) = max(dp(i)(j), dp(i - 1)(j))\n            \
    \    if (j > 0) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n            }\n      \
    \  }\n        var result = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                val fill = capacity - dp(i)(j)\n       \
    \         if (fill > 0) {\n                    result += fill\n              \
    \      dp(i)(j) += fill\n                    if (i > 0) dp(i - 1)(j) = max(dp(i\
    \ - 1)(j), dp(i)(j))\n                    if (j > 0) dp(i)(j - 1) = max(dp(i)(j\
    \ - 1), dp(i)(j))\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5_a3_27.scala:45)\n\tat Problem.main(tmpn5_a3_27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rowCount = grid.length\n        val\
    \ colCount = grid(0).length\n        val fillCount = Array.fill(rowCount)(0L)\n\
    \        var totalFillCount = 0L\n        for (col <- 0 until colCount) {\n  \
    \          var row = 0\n            while (row < rowCount) {\n               \
    \ if (grid(row)(col) == 1) {\n                    fillCount(row) += 1\n      \
    \              if (fillCount(row) == capacity) {\n                        fillCount(row)\
    \ = 0\n                        totalFillCount += 1\n                    }\n  \
    \              }\n                row += 1\n            }\n        }\n       \
    \ totalFillCount\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2z4wcz4.scala:41)\n\tat Problem.main(tmpf2z4wcz4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numRows = grid.length\n        val numCols = grid(0).length\n   \
    \     val numBuckets = maxFill / capacity\n        val numBucketsPerRow = numBuckets\
    \ / numRows\n        val numBucketsPerCol = numBuckets / numCols\n        val\
    \ numBucketsPerRowRemainder = numBuckets % numRows\n        val numBucketsPerColRemainder\
    \ = numBuckets % numCols\n        val numBucketsPerRowRemainderPerCol = numBucketsPerRowRemainder\
    \ / numCols\n        val numBucketsPerColRemainderPerRow = numBucketsPerColRemainder\
    \ / numRows\n        val numBucketsPerRowRemainderPerColRemainder = numBucketsPerRowRemainder\
    \ % numCols\n        val numBucketsPerColRemainderPerRowRemainder = numBucketsPerColRemainder\
    \ % numRows\n        val numBucketsPerRowRemainderPerColRemainderPerRow = numBucketsPerRowRemainderPerColRemainder\
    \ / numRows\n        val numBucketsPerColRemainderPerRowRemainderPerCol = numBucketsPerColRemainderPerRowRemainder\
    \ / numCols\n        val numBucketsPerRowRemainderPerColRemainderPerRowRemainder\
    \ = numBucketsPerRowRemainderPerColRemainder % numRows\n        val numBucketsPerColRemainderPerRowRemainderPerColRemainder\
    \ = numBucketsPerColRemainderPerRowRemainder % numCols\n        val numBucketsPerRowRemainderPerColRemainderPerRowRemainderPerCol\
    \ = numBucketsPerRowRemainderPerColRemainderPerRowRemainder / numCols\n      \
    \  val numBucketsPerColRemainderPerRowRemainderPerColRemainderPerRow = numBucketsPerColRemainderPerRowRemainderPerColRemainder\
    \ / numRows\n        val numBucketsPerRowRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkv81z7_.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkv81z7_.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // fill the wells\n        // find the\
    \ max of the row\n        // fill the wells\n        // find the max of the row\n\
    \        // fill the wells\n        // find the max of the row\n        // ...\n\
    \        // return the number of times we filled the wells\n        def fill(grid\
    \ : List[List[Long]]) : List[List[Long]] = {\n            val max = grid.map(row\
    \ => row.max).max\n            grid.map(row => row.map(x => max - x))\n      \
    \  }\n        def fillAll(grid : List[List[Long]], capacity : Long) : Long = {\n\
    \            if (grid.forall(row => row.forall(x => x == 0))) 0\n            else\
    \ 1 + fillAll(fill(grid), capacity)\n        }\n        fillAll(grid, capacity)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.invoke.DirectMethodHandle.allocateInstance(DirectMethodHandle.java:520)\n\
    \tat scala.collection.IterableOnceOps.max(IterableOnce.scala:946)\n\tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\
    \tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\tat Problem$.$anonfun$1(tmpcmf4hrwl.scala:29)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.fill$1(tmpcmf4hrwl.scala:29)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\tat Problem$.fillAll$1(tmpcmf4hrwl.scala:34)\n\
    \tat Problem$.fillAll$1(tmpcmf"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        if (maxFill > capacity) {\n            maxFill / capacity + (if (maxFill\
    \ % capacity == 0) 0 else 1)\n        } else {\n            1\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6el9_u9c.scala:28)\n\tat Problem.main(tmp6el9_u9c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val fill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            var sum = 0L\n            for (j <- 0 until m) {\n              \
    \  sum += grid(i)(j)\n                fill(i)(j) = sum\n            }\n      \
    \  }\n        var count = 0L\n        for (j <- 0 until m) {\n            var\
    \ max = 0L\n            for (i <- 0 until n) {\n                max = max(fill(i)(j),\
    \ max)\n            }\n            count += max / capacity\n            if (max\
    \ % capacity != 0) count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp8l_vq4hv.scala:34:22 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                max = max(fill(i)(j), max)\n\e[31m\e\
    [31m   |\e[0m                      ^^^\e[0m\n\e[31m   |\e[0m                 \
    \     \e[33mvariable\e[0m \e[35mmax\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978486
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n  \
    \                  dp(i)(j) = capacity\n                }\n            }\n   \
    \     }\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n\
    \                if (i > 0) {\n                    dp(i)(j) = min(dp(i)(j), dp(i\
    \ - 1)(j))\n                }\n                if (j > 0) {\n                \
    \    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1))\n                }\n            }\n\
    \        }\n        var result = 0L\n        for (i <- n - 1 to 0 by -1) {\n \
    \           for (j <- m - 1 to 0 by -1) {\n                if (dp(i)(j) > 0) {\n\
    \                    result += 1\n                    var x = i\n            \
    \        var y = j\n                    while (x < n && y < m && dp(x)(y) > 0)\
    \ {\n                        dp(x)(y) -= 1\n                        if (x < n\
    \ - 1 && dp(x + 1)(y) > 0) {\n                            x += 1\n           \
    \             } else if (y < m - 1 && dp(x)(y + 1) > 0) {\n                  \
    \          y += 1\n                        } else {\n                        \
    \    x += 1\n                            y += 1\n                        }\n \
    \                   }\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81i5fpo1.scala:64)\n\tat Problem.main(tmp81i5fpo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (i == 0) {\n           \
    \         dp(i)(j) = grid(i)(j)\n                } else {\n                  \
    \  dp(i)(j) = dp(i - 1)(j) + grid(i)(j)\n                }\n            }\n  \
    \      }\n        var result = 0L\n        for (i <- 0 until n) {\n          \
    \  for (j <- 0 until m) {\n                if (dp(i)(j) > capacity) {\n      \
    \              result += dp(i)(j) - capacity\n                    dp(i)(j) = capacity\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvlujb4by.scala:44)\n\tat Problem.main(tmpvlujb4by.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    result += capacity - maxFill(i)(j)\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzrg1ntvi.scala:52)\n\tat Problem.main(tmpzrg1ntvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(row => row.map(x => if (x == 1) capacity else 0))\n\
    \        var count = 0\n        while (wells.exists(row => row.exists(x => x >\
    \ 0))) {\n            count += 1\n            for (i <- 0 until n) {\n       \
    \         for (j <- 0 until m) {\n                    if (wells(i)(j) > 0) {\n\
    \                        if (i > 0 && wells(i - 1)(j) < capacity) {\n        \
    \                    val diff = min(wells(i)(j), capacity - wells(i - 1)(j))\n\
    \                            wells(i)(j) -= diff\n                           \
    \ wells(i - 1)(j) += diff\n                        }\n                       \
    \ if (i < n - 1 && wells(i + 1)(j) < capacity) {\n                           \
    \ val diff = min(wells(i)(j), capacity - wells(i + 1)(j))\n                  \
    \          wells(i)(j) -= diff\n                            wells(i + 1)(j) +=\
    \ diff\n                        }\n                        if (j > 0 && wells(i)(j\
    \ - 1) < capacity) {\n                            val diff = min(wells(i)(j),\
    \ capacity - wells(i)(j - 1))\n                            wells(i)(j) -= diff\n\
    \                            wells(i)(j - 1) += diff\n                       \
    \ }\n                        if (j < m - 1 && wells(i)(j + 1) < capacity) {\n\
    \                            val diff = min(wells(i)(j), capacity - wells(i)(j\
    \ + 1))\n                            wells(i)(j) -= diff\n                   \
    \         wells(i)(j + 1) += diff\n                        }\n               \
    \     }\n                }\n            }\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpocaq1qq5.scala:31:40 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                            wells(i)(j) -= diff\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value -= is not a member of Long - did you mean Long.!=?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpocaq1qq5.scala:32:44 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                            wells(i - \e[31m1\e[0m)(j)\
    \ += diff\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpocaq1qq5.scala:36:40\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m                        \
    \    wells(i)(j) -= diff\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value -= is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpocaq1qq5.scala:37:44\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                        \
    \    wells(i + \e[31m1\e[0m)(j) += diff\n\e[31m\e[31m   |\e[0m               \
    \             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpocaq1qq5.scala:41:40 ------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m                            wells(i)(j) -= diff\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpocaq1qq5.scala:42:44 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                            wells(i)(j - \e[31m1\e[0m)\
    \ += diff\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpocaq1qq5.scala:46:40\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m                   "
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val wells = grid.map(x => x.sum).toArray\n\
    \        val n = wells.length\n        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            val diff = capacity - wells(i)\n            if (diff > 0)\
    \ {\n                wells(i) = capacity\n                result += diff\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1nwa2ya.scala:33)\n\tat Problem.main(tmpj1nwa2ya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val m = grid.length\n        val n = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](m, n)\n        for (i <- 0 until m) {\n\
    \            for (j <- 0 until n) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until m) {\n            for (j <- 0 until\
    \ n) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- m - 1 to 0 by -1) {\n            for (j <- n - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    val fill = maxFill(i)(j)\n\
    \                    if (fill > 0) {\n                        result += 1\n  \
    \                      if (i > 0) {\n                            maxFill(i - 1)(j)\
    \ -= fill\n                        }\n                        if (j > 0) {\n \
    \                           maxFill(i)(j - 1) -= fill\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoh9cbfzj.scala:60)\n\tat Problem.main(tmpoh9cbfzj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n  \
    \                  dp(i)(j) = capacity\n                }\n            }\n   \
    \     }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                if (dp(i)(j) > 0) {\n                  \
    \  if (i > 0) {\n                        dp(i)(j) = min(dp(i)(j), dp(i - 1)(j)\
    \ + 1)\n                    }\n                    if (j > 0) {\n            \
    \            dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + 1)\n                    }\n\
    \                    ans += dp(i)(j)\n                }\n            }\n     \
    \   }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgn7fu0jb.scala:48)\n\tat Problem.main(tmpgn7fu0jb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        for (i <- 0 until rows)\
    \ {\n            for (j <- 0 until cols) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    if (i > 0) {\n                        maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i - 1)(j) + capacity)\n                    }\n\
    \                    if (j > 0) {\n                        maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i)(j - 1) + capacity)\n                    }\n                }\n  \
    \          }\n        }\n        maxFill(rows - 1)(cols - 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfr5nk8k4.scala:45)\n\tat Problem.main(tmpfr5nk8k4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val maxFillCount = maxFill / capacity\n        val maxFillRemainder =\
    \ maxFill % capacity\n        if (maxFillRemainder == 0) maxFillCount else maxFillCount\
    \ + 1\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz93j8wlb.scala:26)\n\tat Problem.main(tmpz93j8wlb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var sum = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                sum += grid(i)(j)\n            }\n            if (sum > capacity)\
    \ {\n                count += (sum - capacity)\n            }\n        }\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_nypc5k.scala:33)\n\tat Problem.main(tmpv_nypc5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(row => row.sum).toArray\n        val buckets = Array.fill(n)(capacity)\n\
    \        var count = 0\n        while (wells.sum > 0) {\n            for (i <-\
    \ 0 until n) {\n                if (wells(i) > 0) {\n                    val fill\
    \ = min(buckets(i), wells(i))\n                    wells(i) -= fill\n        \
    \            buckets(i) -= fill\n                }\n            }\n          \
    \  count += 1\n            for (i <- 0 until n) buckets(i) = capacity\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeka7bbu2.scala:39)\n\tat Problem.main(tmpeka7bbu2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var fill = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                if (grid(i)(j) == 1) fill += 1\n            }\n         \
    \   maxFill = max(maxFill, fill)\n        }\n        maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsyxbwoyk.scala:31)\n\tat Problem.main(tmpsyxbwoyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        var i = 0\n        while (i < n) {\n       \
    \     var j = 0\n            while (j < m) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    result += 1\n                    var k = i + 1\n \
    \                   while (k < n && grid(k)(j) == 1) {\n                     \
    \   grid(k)(j) = 0\n                        k += 1\n                    }\n  \
    \              }\n                j += 1\n            }\n            i += 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd7bli0je.scala:31:24 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                        grid(k)(j) = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[Long] - did you mean List[Long].updated?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val fill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    fill(i)(j) = capacity\n                }\n            }\n\
    \        }\n        var count = 0\n        while (true) {\n            var found\
    \ = false\n            for (i <- 0 until n) {\n                for (j <- 0 until\
    \ m) {\n                    if (fill(i)(j) > 0) {\n                        found\
    \ = true\n                        if (i > 0 && fill(i - 1)(j) < capacity) {\n\
    \                            val diff = min(fill(i)(j), capacity - fill(i - 1)(j))\n\
    \                            fill(i)(j) -= diff\n                            fill(i\
    \ - 1)(j) += diff\n                        }\n                        if (i <\
    \ n - 1 && fill(i + 1)(j) < capacity) {\n                            val diff\
    \ = min(fill(i)(j), capacity - fill(i + 1)(j))\n                            fill(i)(j)\
    \ -= diff\n                            fill(i + 1)(j) += diff\n              \
    \          }\n                        if (j > 0 && fill(i)(j - 1) < capacity)\
    \ {\n                            val diff = min(fill(i)(j), capacity - fill(i)(j\
    \ - 1))\n                            fill(i)(j) -= diff\n                    \
    \        fill(i)(j - 1) += diff\n                        }\n                 \
    \       if (j < m - 1 && fill(i)(j + 1) < capacity) {\n                      \
    \      val diff = min(fill(i)(j), capacity - fill(i)(j + 1))\n               \
    \             fill(i)(j) -= diff\n                            fill(i)(j + 1) +=\
    \ diff\n                        }\n                    }\n                }\n\
    \            }\n            if (!found) return count\n            count += 1\n\
    \        }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (i == 0) {\n                    maxFill(i)(j) = grid(i)(j)\n   \
    \             } else {\n                    maxFill(i)(j) = max(maxFill(i - 1)(j),\
    \ grid(i)(j))\n                }\n            }\n        }\n        var result\
    \ = 0L\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols)\
    \ {\n                if (maxFill(i)(j) > 0) {\n                    result += maxFill(i)(j)\
    \ / capacity\n                    if (maxFill(i)(j) % capacity > 0) result +=\
    \ 1\n                }\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuin43blz.scala:44)\n\tat Problem.main(tmpuin43blz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numRows = grid.length\n        val numCols = grid(0).length\n   \
    \     val numBuckets = min(numRows, numCols)\n        val buckets = Array.fill(numBuckets)(capacity)\n\
    \        var numFills = 0\n        while (buckets.exists(_ > 0)) {\n         \
    \   for (i <- 0 until numBuckets) {\n                if (buckets(i) > 0) {\n \
    \                   val row = grid(i)\n                    val numCols = row.length\n\
    \                    for (j <- 0 until numCols) {\n                        val\
    \ col = row(j)\n                        val numFills = min(buckets(i), col)\n\
    \                        buckets(i) -= numFills\n                        grid(i)(j)\
    \ -= numFills\n                    }\n                }\n            }\n     \
    \       numFills += 1\n        }\n        numFills\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_djl3ekt.scala:35:35 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                        grid(i)(j) -= numFills\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value -= is not a member of Long - did you mean Long.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill the wells from the top down.\n\
    \        // If a well is not full, fill it with the remaining water from the previous\
    \ well.\n        // If the well is full, fill it with the remaining water from\
    \ the previous well and\n        // then fill the next well with the remaining\
    \ water from the current well.\n        // If the well is full and the next well\
    \ is full, fill the next well with the remaining\n        // water from the current\
    \ well and then fill the next well with the remaining water from\n        // the\
    \ current well.\n        // If the well is full and the next well is not full,\
    \ fill the next well with the remaining\n        // water from the current well\
    \ and then fill the next well with the remaining water from\n        // the current\
    \ well.\n        // If the well is full and the next well is not full, fill the\
    \ next well with the remaining\n        // water from the current well and then\
    \ fill the next well with the remaining water from\n        // the current well.\n\
    \        // If the well is full and the next well is not full, fill the next well\
    \ with the remaining\n        // water from the current well and then fill the\
    \ next well with the remaining water from\n        // the current well.\n    \
    \    // If the well is full and the next well is not full, fill the next well\
    \ with the remaining\n        // water from the current well and then fill the\
    \ next well with the remaining water from\n        // the current well.\n    \
    \    // If the well is full and the next well is not full, fill the next well\
    \ with the remaining\n        // water from the current well and then fill the\
    \ next well with the remaining water from\n        // the current well.\n    \
    \    // If the well is full and the next well is not full, fill the next well\
    \ with the remaining\n        // water from the current well and then fill the\
    \ next well with the remaining water from\n        // the current well.\n    \
    \    // If the well is full and the next well is not full, fill the next well\
    \ with the remaining\n        // water from the current well and then fill the\
    \ next well with the remaining water from\n        // the current well.\n    \
    \    // If the well is full and the next well is not full, fill the next well\
    \ with the remaining\n        // water from the current well and then fill the\
    \ next well with the remaining water from\n        // the current well.\n    \
    \    //\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp70qmc_pu.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// Fill the wells from the top down.\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// If a well is not full, fill it with the remaining\
    \ water from the previous well.\e[0m\n\e[31m22 |\e[0m        \e[34m// If the well\
    \ is full, fill it with the remaining water from the previous well and\e[0m\n\e\
    [31m23 |\e[0m        \e[34m// then fill the next well with the remaining water\
    \ from the current well.\e[0m\n\e[31m24 |\e[0m        \e[34m// If the well is\
    \ full and the next well is full, fill the next well with the remaining\e[0m\n\
    \e[31m25 |\e[0m        \e[34m// water from the current well and then fill the\
    \ next well with the remaining water from\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ the current well.\e[0m\n\e[31m27 |\e[0m        \e[34m// If the well is full\
    \ and the next well is not full, fill the next well with the remaining\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// water from the current well and then fill the next\
    \ well with the remaining water from\e[0m\n\e[31m29 |\e[0m        \e[34m// the\
    \ current well.\e[0m\n\e[31m30 |\e[0m        \e[34m// If the well is full and\
    \ the next well is not full, fill the next well with the remaining\e[0m\n\e[31m31\
    \ |\e[0m        \e[34m// water from the current well and then fill the next well\
    \ with the remaining water from\e[0m\n\e[31m32 |\e[0m        \e[34m// the current\
    \ well.\e[0m\n\e[31m33 |\e[0m        \e[34m// If the well is full and the next\
    \ well is not full, fill the next well with the remaining\e[0m\n\e[31m34 |\e[0m\
    \        \e[34m// water from the current well and then fill the next well with\
    \ the remaining water from\e[0m\n\e[31m35 |\e["
  stdout: ''
  timestamp: 1659978495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var fill = 0L\n            for (well <- row) {\n            \
    \    if (well == 1) fill += 1\n                else {\n                    maxFill\
    \ = max(maxFill, fill)\n                    fill = 0\n                }\n    \
    \        }\n            maxFill = max(maxFill, fill)\n        }\n        maxFill\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcnqs36z.scala:35)\n\tat Problem.main(tmpdcnqs36z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numFill = ceil(maxFill.toDouble / capacity.toDouble).toLong\n   \
    \     numFill\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1vxdgmj.scala:25)\n\tat Problem.main(tmpa1vxdgmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n  \
    \                  dp(i)(j) = capacity\n                }\n            }\n   \
    \     }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                if (dp(i)(j) == capacity) {\n          \
    \          ans += 1\n                    dfs(i, j, dp, capacity)\n           \
    \     }\n            }\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6z85shbq.scala:35:20 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    dfs(i, j, dp, capacity)\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: dfs\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978496
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val columns\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, columns)\n \
    \       for (i <- 0 until rows) {\n            for (j <- 0 until columns) {\n\
    \                if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        var count = 0\n        while\
    \ (true) {\n            var filled = false\n            for (i <- 0 until rows)\
    \ {\n                for (j <- 0 until columns) {\n                    if (maxFill(i)(j)\
    \ > 0) {\n                        filled = true\n                        if (i\
    \ > 0 && maxFill(i - 1)(j) < capacity) {\n                            val diff\
    \ = min(maxFill(i)(j), capacity - maxFill(i - 1)(j))\n                       \
    \     maxFill(i)(j) -= diff\n                            maxFill(i - 1)(j) +=\
    \ diff\n                        }\n                        if (i < rows - 1 &&\
    \ maxFill(i + 1)(j) < capacity) {\n                            val diff = min(maxFill(i)(j),\
    \ capacity - maxFill(i + 1)(j))\n                            maxFill(i)(j) -=\
    \ diff\n                            maxFill(i + 1)(j) += diff\n              \
    \          }\n                        if (j > 0 && maxFill(i)(j - 1) < capacity)\
    \ {\n                            val diff = min(maxFill(i)(j), capacity - maxFill(i)(j\
    \ - 1))\n                            maxFill(i)(j) -= diff\n                 \
    \           maxFill(i)(j - 1) += diff\n                        }\n           \
    \             if (j < columns - 1 && maxFill(i)(j + 1) < capacity) {\n       \
    \                     val diff = min(maxFill(i)(j), capacity - maxFill(i)(j +\
    \ 1))\n                            maxFill(i)(j) -= diff\n                   \
    \         maxFill(i)(j + 1) += diff\n                        }\n             \
    \       }\n                }\n            }\n            if (!filled) return count\n\
    \            count += 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978506
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numFills = maxFill / capacity\n        val remainder = maxFill %\
    \ capacity\n        if (remainder == 0) numFills else numFills + 1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvea_s6h_.scala:26)\n\tat Problem.main(tmpvea_s6h_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < m - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    result += capacity - maxFill(i)(j)\n            \
    \    }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl5hjbjt.scala:58)\n\tat Problem.main(tmpbl5hjbjt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        var count = 0\n        while (maxFill.map(_.sum).sum >\
    \ 0) {\n            for (i <- 0 until n) {\n                for (j <- 0 until\
    \ m) {\n                    if (maxFill(i)(j) > 0) {\n                       \
    \ if (i > 0 && maxFill(i - 1)(j) > 0) {\n                            val diff\
    \ = min(maxFill(i)(j), maxFill(i - 1)(j))\n                            maxFill(i)(j)\
    \ -= diff\n                            maxFill(i - 1)(j) -= diff\n           \
    \             }\n                        if (j > 0 && maxFill(i)(j - 1) > 0) {\n\
    \                            val diff = min(maxFill(i)(j), maxFill(i)(j - 1))\n\
    \                            maxFill(i)(j) -= diff\n                         \
    \   maxFill(i)(j - 1) -= diff\n                        }\n                   \
    \     if (i < n - 1 && maxFill(i + 1)(j) > 0) {\n                            val\
    \ diff = min(maxFill(i)(j), maxFill(i + 1)(j))\n                            maxFill(i)(j)\
    \ -= diff\n                            maxFill(i + 1)(j) -= diff\n           \
    \             }\n                        if (j < m - 1 && maxFill(i)(j + 1) >\
    \ 0) {\n                            val diff = min(maxFill(i)(j), maxFill(i)(j\
    \ + 1))\n                            maxFill(i)(j) -= diff\n                 \
    \           maxFill(i)(j + 1) -= diff\n                        }\n           \
    \         }\n                }\n            }\n            count += 1\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        maxFill(n\
    \ - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsn9t3db.scala:45)\n\tat Problem.main(tmpdsn9t3db.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var fill = 0L\n            for (well <- row) {\n            \
    \    if (well == 1) fill += 1\n                else {\n                    if\
    \ (fill > 0) {\n                        maxFill += 1\n                       \
    \ fill = 0\n                    }\n                }\n            }\n        \
    \    if (fill > 0) maxFill += 1\n        }\n        maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8lxr4e4.scala:37)\n\tat Problem.main(tmpk8lxr4e4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    val maxFillLeft = if (j == 0) 0 else maxFill(i)(j - 1)\n\
    \                    val maxFillUp = if (i == 0) 0 else maxFill(i - 1)(j)\n  \
    \                  maxFill(i)(j) = max(maxFillLeft, maxFillUp) + 1\n         \
    \       }\n            }\n        }\n        var result = 0L\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j)\
    \ == 1) {\n                    val maxFillLeft = if (j == 0) 0 else maxFill(i)(j\
    \ - 1)\n                    val maxFillUp = if (i == 0) 0 else maxFill(i - 1)(j)\n\
    \                    val maxFillCurrent = max(maxFillLeft, maxFillUp) + 1\n  \
    \                  result += max(0, maxFillCurrent - capacity)\n             \
    \   }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpen0pqx9f.scala:47)\n\tat Problem.main(tmpen0pqx9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var ans = 0\n        for (i <- 0 until n) {\n            var sum = 0\n\
    \            for (j <- 0 until m) {\n                sum += grid(i)(j)\n     \
    \           if (sum == capacity) {\n                    ans += 1\n           \
    \         sum = 0\n                }\n            }\n            if (sum > 0)\
    \ ans += 1\n        }\n        ans\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1h4bj3j.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var fill = 0L\n            for (well <- row) {\n            \
    \    if (well == 1) fill += 1\n                else {\n                    maxFill\
    \ = max(maxFill, fill)\n                    fill = 0\n                }\n    \
    \        }\n            maxFill = max(maxFill, fill)\n        }\n        maxFill\
    \ / capacity\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwwh57fa.scala:35)\n\tat Problem.main(tmpgwwh57fa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < m - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    result += maxFill(i)(j)\n                }\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ynbcrcd.scala:57)\n\tat Problem.main(tmp1ynbcrcd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill the wells with the buckets.\n \
    \       // Return the number of times the buckets were lowered.\n        def fill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n            // Fill the wells\
    \ with the buckets.\n            // Return the number of times the buckets were\
    \ lowered.\n            def fill(grid : List[List[Long]], capacity : Long) : Long\
    \ = {\n                // Fill the wells with the buckets.\n                //\
    \ Return the number of times the buckets were lowered.\n                def fill(grid\
    \ : List[List[Long]], capacity : Long) : Long = {\n                    // Fill\
    \ the wells with the buckets.\n                    // Return the number of times\
    \ the buckets were lowered.\n                    def fill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n                        // Fill the wells with\
    \ the buckets.\n                        // Return the number of times the buckets\
    \ were lowered.\n                        def fill(grid : List[List[Long]], capacity\
    \ : Long) : Long = {\n                            // Fill the wells with the buckets.\n\
    \                            // Return the number of times the buckets were lowered.\n\
    \                            def fill(grid : List[List[Long]], capacity : Long)\
    \ : Long = {\n                                // Fill the wells with the buckets.\n\
    \                                // Return the number of times the buckets were\
    \ lowered.\n                                def fill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n                                    // Fill the\
    \ wells with the buckets.\n                                    // Return the number\
    \ of times the buckets were lowered.\n                                    def\
    \ fill(grid : List[List[Long]], capacity : Long) : Long = {\n                \
    \                        // Fill the wells with the buckets.\n               \
    \                         // Return the number of times the buckets were lowered.\n\
    \                                        def fill(grid : List[List[Long]], capacity\
    \ : Long) : Long = {\n                                            // Fill the\
    \ wells with the buckets.\n                                            // Return\
    \ the number of times the buckets were lowered.\n                            \
    \                def fill(grid : List[List[Long]], capacity : Long) : Long = {\n\
    \                                                // Fill the wells with the buckets.\n\
    \                                                // Return the number of times\
    \ the buckets were lowered.\n                                                def\
    \ fill(grid : List[List[Long]], capacity\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ru4bd2u.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ':' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ru4bd2u.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8ru4bd2u.scala:53:5 ---------------------\e[0m\e[0m\n\
    \e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8ru4bd2u.scala:62:1 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp8ru4bd2u.scala:54:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill each well to capacity.\n      \
    \  // If a well is already at capacity, then skip it.\n        // If a well is\
    \ not at capacity, then fill it to capacity.\n        // If a well is over capacity,\
    \ then fill it to capacity and spill over to the next well.\n        // If the\
    \ next well is at capacity, then skip it.\n        // If the next well is not\
    \ at capacity, then fill it to capacity.\n        // If the next well is over\
    \ capacity, then fill it to capacity and spill over to the next well.\n      \
    \  // Repeat until all wells are at capacity.\n        // Return the number of\
    \ times you filled a well to capacity.\n        // Example 1:\n        // Example\
    \ 2:\n        // Example 3:\n        // Constraints:\n        // * all wells have\
    \ the same length\n        // * 1 <= grid.length <= 10^2\n        // * 1 <= grid[:,1].length\
    \ <= 10^2\n        // * grid[i][j] -> 0 | 1\n        // * 1 <= capacity <= 10\n\
    \        // * 1 <= result <= 10^2\n        def maxFill(grid : List[List[Long]],\
    \ capacity : Long, result : Long) : Long = {\n            if (grid.forall(row\
    \ => row.forall(well => well == capacity))) result\n            else {\n     \
    \           val newGrid = grid.map(row => {\n                    var newRow =\
    \ row\n                    for (i <- 0 until row.length) {\n                 \
    \       if (row(i) < capacity) {\n                            val newWell = min(capacity,\
    \ row(i) + 1)\n                            newRow = newRow.updated(i, newWell)\n\
    \                            if (newWell == capacity && i < row.length - 1) {\n\
    \                                val nextWell = min(capacity, row(i + 1) + 1)\n\
    \                                newRow = newRow.updated(i + 1, nextWell)\n  \
    \                          }\n                        }\n                    }\n\
    \                    newRow\n                })\n                maxFill(newGrid,\
    \ capacity, result + 1)\n            }\n        }\n        maxFill(grid, capacity,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36vh2mf7.scala:62)\n\tat Problem.main(tmp36vh2mf7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var count = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < m - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    count += capacity - maxFill(i)(j)\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6pkluqc.scala:58)\n\tat Problem.main(tmps6pkluqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum)\n\
    \        val maxFillSum = maxFill.sum\n        val maxFillMax = maxFill.max\n\
    \        val maxFillMin = maxFill.min\n        val maxFillAvg = maxFillSum / maxFill.length\n\
    \        val maxFillMed = if (maxFill.length % 2 == 0) (maxFill(maxFill.length\
    \ / 2) + maxFill(maxFill.length / 2 - 1)) / 2 else maxFill(maxFill.length / 2)\n\
    \        val maxFillMode = maxFill.groupBy(identity).maxBy(_._2.length)._1\n \
    \       val maxFillRange = maxFillMax - maxFillMin\n        val maxFillStdDev\
    \ = sqrt(maxFill.map(x => pow(x - maxFillAvg, 2)).sum / maxFill.length)\n    \
    \    val maxFillVariance = maxFill.map(x => pow(x - maxFillAvg, 2)).sum / maxFill.length\n\
    \        val maxFillSkewness = maxFill.map(x => pow(x - maxFillAvg, 3)).sum /\
    \ (maxFill.length * pow(maxFillStdDev, 3))\n        val maxFillKurtosis = maxFill.map(x\
    \ => pow(x - maxFillAvg, 4)).sum / (maxFill.length * pow(maxFillStdDev, 4))\n\
    \        val maxFillCoefficientOfVariation = maxFillStdDev / maxFillAvg\n    \
    \    val maxFillZScore = maxFill.map(x => (x - maxFillAvg) / maxFillStdDev)\n\
    \        val maxFillPercentile = maxFill.map(x => (maxFill.filter(_ < x).length\
    \ + 0.5 * maxFill.filter(_ == x).length) / maxFill.length)\n        val maxFillHistogram\
    \ = maxFill.groupBy(identity).map(x => (x._1, x._2.length))\n        val maxFillBoxPlot\
    \ = (maxFillMin, maxFillMax, maxFillMed - maxFillMin, maxFillMax - maxFillMed)\n\
    \        val maxFillInterquartileRange = maxFillBoxPlot._3 + maxFillBoxPlot._4\n\
    \        val maxFillOutliers = maxFill.filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5rqg1atw.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n  \
    \                  dp(i)(j) = capacity\n                    if (i > 0) dp(i)(j)\
    \ = min(dp(i)(j), dp(i - 1)(j) + capacity)\n                    if (j > 0) dp(i)(j)\
    \ = min(dp(i)(j), dp(i)(j - 1) + capacity)\n                }\n            }\n\
    \        }\n        var ans = 0L\n        for (i <- 0 until n) {\n           \
    \ for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n           \
    \         ans += capacity - dp(i)(j)\n                }\n            }\n     \
    \   }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2l46xa6v.scala:43)\n\tat Problem.main(tmp2l46xa6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            var sum = 0L\n            for (j <- 0 until m) {\n              \
    \  sum += grid(i)(j)\n                wells(i)(j) = sum\n            }\n     \
    \   }\n        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (i == 0) {\n     \
    \               dp(i)(j) = wells(i)(j)\n                } else {\n           \
    \         var min = Long.MaxValue\n                    for (k <- 0 to j) {\n \
    \                       val fill = wells(i)(j) - wells(i)(k)\n               \
    \         val empty = capacity - fill\n                        val prev = if (k\
    \ == 0) 0 else dp(i - 1)(k - 1)\n                        min = min min (prev +\
    \ empty)\n                    }\n                    dp(i)(j) = min\n        \
    \        }\n            }\n        }\n        dp(n - 1)(m - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp44zyg7i4.scala:50)\n\tat Problem.main(tmp44zyg7i4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill the wells with water until they\
    \ are full.\n        // Then, empty the wells until they are empty.\n        //\
    \ Repeat until all wells are empty.\n        // Time - O(n^2)\n        // Space\
    \ - O(n)\n        def fill(grid : List[List[Long]]) : Long = {\n            var\
    \ count = 0\n            for (row <- grid) {\n                var sum = 0\n  \
    \              for (i <- 0 until row.length) {\n                    sum += row(i)\n\
    \                    if (sum == capacity) {\n                        count +=\
    \ 1\n                        sum = 0\n                    }\n                }\n\
    \            }\n            count\n        }\n        def empty(grid : List[List[Long]])\
    \ : Long = {\n            var count = 0\n            for (row <- grid) {\n   \
    \             var sum = 0\n                for (i <- row.length - 1 to 0 by -1)\
    \ {\n                    sum += row(i)\n                    if (sum == capacity)\
    \ {\n                        count += 1\n                        sum = 0\n   \
    \                 }\n                }\n            }\n            count\n   \
    \     }\n        def isEmpty(grid : List[List[Long]]) : Boolean = {\n        \
    \    for (row <- grid) {\n                for (i <- 0 until row.length) {\n  \
    \                  if (row(i) == 1) return false\n                }\n        \
    \    }\n            true\n        }\n        var count = 0\n        while (!isEmpty(grid))\
    \ {\n            count += fill(grid)\n            count += empty(grid)\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21cxflam.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    sum += row(i)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp21cxflam.scala:44:24 ------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m                    sum += row(i)\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21cxflam.scala:63:18\
    \ ------------------------\e[0m\e[0m\n\e[31m63 |\e[0m            count += fill(grid)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp21cxflam.scala:64:18 ------------------------\e[0m\e[0m\n\
    \e[31m64 |\e[0m            count += empty(grid)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                wells(i)(j) = grid(i)(j)\n\
    \            }\n        }\n        var count = 0\n        var done = false\n \
    \       while (!done) {\n            done = true\n            for (i <- 0 until\
    \ n) {\n                for (j <- 0 until m) {\n                    if (wells(i)(j)\
    \ > 0) {\n                        done = false\n                        wells(i)(j)\
    \ -= capacity\n                        if (wells(i)(j) < 0) wells(i)(j) = 0\n\
    \                    }\n                }\n            }\n            count +=\
    \ 1\n        }\n        count - 1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksw3jb97.scala:46)\n\tat Problem.main(tmpksw3jb97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var ans = 0\n        for (i <- 0 until n) {\n            var sum = 0\n\
    \            for (j <- 0 until m) {\n                sum += grid(i)(j)\n     \
    \           if (sum == capacity) {\n                    ans += 1\n           \
    \         sum = 0\n                }\n            }\n            if (sum > 0)\
    \ ans += 1\n        }\n        ans\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1h4bj3j.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < m - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    result += maxFill(i)(j)\n                }\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ynbcrcd.scala:57)\n\tat Problem.main(tmp1ynbcrcd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0\n        for (row <- grid)\
    \ {\n            var fill = 0\n            for (well <- row) {\n             \
    \   if (well == 1) {\n                    fill += 1\n                } else {\n\
    \                    if (fill > 0) {\n                        maxFill += 1\n \
    \                       fill = 0\n                    }\n                }\n \
    \           }\n            if (fill > 0) {\n                maxFill += 1\n   \
    \         }\n        }\n        return maxFill\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtubhsuu.scala:40)\n\tat Problem.main(tmprtubhsuu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val fill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    fill(i)(j) = capacity\n                }\n            }\n\
    \        }\n        var count = 0\n        for (i <- 0 until n) {\n          \
    \  for (j <- 0 until m) {\n                if (fill(i)(j) > 0) {\n           \
    \         if (i > 0 && fill(i - 1)(j) > 0) {\n                        val diff\
    \ = min(fill(i)(j), fill(i - 1)(j))\n                        fill(i)(j) -= diff\n\
    \                        fill(i - 1)(j) -= diff\n                        count\
    \ += 1\n                    }\n                    if (j > 0 && fill(i)(j - 1)\
    \ > 0) {\n                        val diff = min(fill(i)(j), fill(i)(j - 1))\n\
    \                        fill(i)(j) -= diff\n                        fill(i)(j\
    \ - 1) -= diff\n                        count += 1\n                    }\n  \
    \              }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu_wrtoda.scala:52)\n\tat Problem.main(tmpu_wrtoda.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        maxFill(n\
    \ - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsn9t3db.scala:45)\n\tat Problem.main(tmpdsn9t3db.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0\n        for (i <- 0 until n) {\n            var sum =\
    \ 0\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n \
    \               if (sum == capacity) {\n                    result += 1\n    \
    \                sum = 0\n                }\n            }\n            if (sum\
    \ > 0) result += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpin6bvep4.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978506
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val m = grid.length\n        val n = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](m, n)\n        for (i <- 0 until m) {\n\
    \            for (j <- 0 until n) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until m) {\n            for (j <- 0 until\
    \ n) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- m - 1 to 0 by -1) {\n            for (j <- n - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < m - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < n - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    result += capacity - maxFill(i)(j)\n            \
    \    }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2i7_xxd.scala:58)\n\tat Problem.main(tmph2i7_xxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978509
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val fill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    fill(i)(j) = capacity\n                }\n            }\n\
    \        }\n        var count = 0\n        while (true) {\n            var changed\
    \ = false\n            for (i <- 0 until n) {\n                for (j <- 0 until\
    \ m) {\n                    if (fill(i)(j) > 0) {\n                        if\
    \ (i > 0 && fill(i - 1)(j) < capacity) {\n                            val diff\
    \ = min(fill(i)(j), capacity - fill(i - 1)(j))\n                            fill(i)(j)\
    \ -= diff\n                            fill(i - 1)(j) += diff\n              \
    \              changed = true\n                        }\n                   \
    \     if (i < n - 1 && fill(i + 1)(j) < capacity) {\n                        \
    \    val diff = min(fill(i)(j), capacity - fill(i + 1)(j))\n                 \
    \           fill(i)(j) -= diff\n                            fill(i + 1)(j) +=\
    \ diff\n                            changed = true\n                        }\n\
    \                        if (j > 0 && fill(i)(j - 1) < capacity) {\n         \
    \                   val diff = min(fill(i)(j), capacity - fill(i)(j - 1))\n  \
    \                          fill(i)(j) -= diff\n                            fill(i)(j\
    \ - 1) += diff\n                            changed = true\n                 \
    \       }\n                        if (j < m - 1 && fill(i)(j + 1) < capacity)\
    \ {\n                            val diff = min(fill(i)(j), capacity - fill(i)(j\
    \ + 1))\n                            fill(i)(j) -= diff\n                    \
    \        fill(i)(j + 1) += diff\n                            changed = true\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            if (!changed) return count\n            count += 1\n    \
    \    }\n        return count\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (i == 0) maxFill(i)(j)\
    \ = grid(i)(j)\n                else maxFill(i)(j) = maxFill(i - 1)(j) + grid(i)(j)\n\
    \            }\n        }\n        var count = 0\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (maxFill(i)(j) > capacity)\
    \ {\n                    count += 1\n                    for (k <- 0 to i) {\n\
    \                        maxFill(k)(j) -= capacity\n                    }\n  \
    \              }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyk5lrk7.scala:43)\n\tat Problem.main(tmpwyk5lrk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        var result = 0\n        for (i <- 0 until rows) {\n\
    \            var rowSum = 0\n            for (j <- 0 until cols) {\n         \
    \       rowSum += grid(i)(j)\n            }\n            result += (rowSum / capacity)\n\
    \            if (rowSum % capacity != 0) result += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmbws6dah.scala:26:23 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                rowSum += grid(i)(j)\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpmbws6dah.scala:28:19 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            result += (rowSum / capacity)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978513
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxRow = grid.map(row => row.sum).max\n\
    \        val maxCol = grid.transpose.map(col => col.sum).max\n        max(maxRow,\
    \ maxCol)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz4lvg69k.scala:25)\n\tat Problem.main(tmpz4lvg69k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var currentFill = 0L\n            for (well <- row) {\n     \
    \           if (well == 1) {\n                    currentFill += 1\n         \
    \       } else {\n                    if (currentFill > maxFill) {\n         \
    \               maxFill = currentFill\n                    }\n               \
    \     currentFill = 0\n                }\n            }\n            if (currentFill\
    \ > maxFill) {\n                maxFill = currentFill\n            }\n       \
    \ }\n        maxFill\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxa5z6i0.scala:40)\n\tat Problem.main(tmpwxa5z6i0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0\n        for (i <- 0 until\
    \ grid.length) {\n            var fill = 0\n            for (j <- 0 until grid(i).length)\
    \ {\n                if (grid(i)(j) == 1) fill += 1\n            }\n         \
    \   maxFill = max(maxFill, fill)\n        }\n        maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgct57p42.scala:31)\n\tat Problem.main(tmpgct57p42.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var fill = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                if (grid(i)(j) == 1) fill += 1\n            }\n         \
    \   maxFill = max(maxFill, fill)\n        }\n        maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsyxbwoyk.scala:31)\n\tat Problem.main(tmpsyxbwoyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var fill = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                if (grid(i)(j) == 1) fill += 1\n            }\n         \
    \   maxFill = max(maxFill, fill)\n        }\n        maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsyxbwoyk.scala:31)\n\tat Problem.main(tmpsyxbwoyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum > capacity) {\n                    result += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0qwdylz.scala:36)\n\tat Problem.main(tmpr0qwdylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        var count = 0\n        while\
    \ (maxFill.map(_.sum).sum > 0) {\n            for (i <- 0 until rows) {\n    \
    \            for (j <- 0 until cols) {\n                    if (maxFill(i)(j)\
    \ > 0) {\n                        if (i > 0 && maxFill(i - 1)(j) > 0) {\n    \
    \                        val diff = min(maxFill(i)(j), maxFill(i - 1)(j))\n  \
    \                          maxFill(i)(j) -= diff\n                           \
    \ maxFill(i - 1)(j) -= diff\n                        }\n                     \
    \   if (j > 0 && maxFill(i)(j - 1) > 0) {\n                            val diff\
    \ = min(maxFill(i)(j), maxFill(i)(j - 1))\n                            maxFill(i)(j)\
    \ -= diff\n                            maxFill(i)(j - 1) -= diff\n           \
    \             }\n                        if (i < rows - 1 && maxFill(i + 1)(j)\
    \ > 0) {\n                            val diff = min(maxFill(i)(j), maxFill(i\
    \ + 1)(j))\n                            maxFill(i)(j) -= diff\n              \
    \              maxFill(i + 1)(j) -= diff\n                        }\n        \
    \                if (j < cols - 1 && maxFill(i)(j + 1) > 0) {\n              \
    \              val diff = min(maxFill(i)(j), maxFill(i)(j + 1))\n            \
    \                maxFill(i)(j) -= diff\n                            maxFill(i)(j\
    \ + 1) -= diff\n                        }\n                    }\n           \
    \     }\n            }\n            count += 1\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978484
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var max = 0L\n        for (row <- grid)\
    \ {\n            var sum = 0L\n            for (col <- row) {\n              \
    \  sum += col\n                if (sum > capacity) {\n                    max\
    \ += 1\n                    sum = col\n                }\n            }\n    \
    \        if (sum > 0) max += 1\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(_.toArray).toArray\n        var count = 0L\n   \
    \     for (i <- 0 until n) {\n            var sum = 0L\n            for (j <-\
    \ 0 until m) {\n                sum += wells(i)(j)\n                if (sum >\
    \ capacity) {\n                    count += sum - capacity\n                 \
    \   wells(i)(j) = capacity\n                    sum = capacity\n             \
    \   }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvwb4r40p.scala:38)\n\tat Problem.main(tmpvwb4r40p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978515
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val m = grid.length\n        val n = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](m, n)\n        for (i <- 0 until m) {\n\
    \            for (j <- 0 until n) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until m) {\n            for (j <- 0 until\
    \ n) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        maxFill(m\
    \ - 1)(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgr_nrisa.scala:45)\n\tat Problem.main(tmpgr_nrisa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var count = 0L\n        for (i <- 0 until n) {\n            var sum =\
    \ 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    count += 1\n    \
    \                sum = 0\n                }\n            }\n            if (sum\
    \ > 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var total = 0L\n        for (i <- 0 until n) {\n            var sum =\
    \ 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \            }\n            total += sum / capacity\n            if (sum % capacity\
    \ != 0) total += 1\n        }\n        total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n   \
    \             if (i > 0) dp(i)(j) = max(dp(i)(j), dp(i - 1)(j))\n            \
    \    if (j > 0) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n            }\n      \
    \  }\n        var result = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                val fill = min(capacity, dp(i)(j))\n   \
    \             result += fill\n                dp(i)(j) -= fill\n             \
    \   if (i > 0) dp(i - 1)(j) = max(dp(i - 1)(j), dp(i)(j))\n                if\
    \ (j > 0) dp(i)(j - 1) = max(dp(i)(j - 1), dp(i)(j))\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbxot0b_b.scala:43)\n\tat Problem.main(tmpbxot0b_b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(_.toArray).toArray\n        var count = 0L\n   \
    \     for (i <- 0 until n) {\n            var sum = 0L\n            for (j <-\
    \ 0 until m) {\n                sum += wells(i)(j)\n                if (sum >\
    \ capacity) {\n                    wells(i)(j) -= (sum - capacity)\n         \
    \           count += (sum - capacity)\n                    sum = capacity\n  \
    \              }\n            }\n        }\n        for (j <- 0 until m) {\n \
    \           var sum = 0L\n            for (i <- 0 until n) {\n               \
    \ sum += wells(i)(j)\n                if (sum > capacity) {\n                \
    \    wells(i)(j) -= (sum - capacity)\n                    count += (sum - capacity)\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnm0ws5d.scala:49)\n\tat Problem.main(tmpxnm0ws5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978516
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        var count = 0\n        var\
    \ done = false\n        while (!done) {\n            done = true\n           \
    \ for (i <- 0 until rows) {\n                for (j <- 0 until cols) {\n     \
    \               if (maxFill(i)(j) > 0) {\n                        done = false\n\
    \                        val fill = min(maxFill(i)(j), capacity)\n           \
    \             maxFill(i)(j) -= fill\n                        if (i > 0) maxFill(i\
    \ - 1)(j) += fill\n                        if (i < rows - 1) maxFill(i + 1)(j)\
    \ += fill\n                        if (j > 0) maxFill(i)(j - 1) += fill\n    \
    \                    if (j < cols - 1) maxFill(i)(j + 1) += fill\n           \
    \         }\n                }\n            }\n            count += 1\n      \
    \  }\n        count - 1\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(x => x.sum).max\n\
    \        val fillCount = maxFill / capacity\n        val remainder = maxFill %\
    \ capacity\n        if (remainder == 0) fillCount else fillCount + 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0aplswy.scala:26)\n\tat Problem.main(tmpc0aplswy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // for each row, find the first and last\
    \ 1\n        // if the distance between them is less than capacity, then fill\
    \ the row\n        // otherwise, fill the row until the first 1, then fill the\
    \ row until the last 1\n        // then fill the row until the first 1, then fill\
    \ the row until the last 1, etc.\n        // until the row is filled\n       \
    \ // then repeat for the next row\n        // return the number of times you filled\
    \ the row\n        val n = grid.length\n        val m = grid(0).length\n     \
    \   var count = 0L\n        for (i <- 0 until n) {\n            var first = -1\n\
    \            var last = -1\n            for (j <- 0 until m) {\n             \
    \   if (grid(i)(j) == 1) {\n                    if (first == -1) first = j\n \
    \                   last = j\n                }\n            }\n            if\
    \ (last - first + 1 <= capacity) {\n                count += 1\n            }\
    \ else {\n                var j = first\n                while (j <= last) {\n\
    \                    count += 1\n                    j += capacity\n         \
    \       }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvi721p7c.scala:45:22 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    j += capacity\n\e[31m\e[31m   |\e\
    [0m                    ^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978514
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val m = grid.length\n        val n = grid(0).length\n\
    \        val dp = Array.ofDim[Long](m, n)\n        for (i <- 0 until m) {\n  \
    \          for (j <- 0 until n) {\n                dp(i)(j) = grid(i)(j)\n   \
    \             if (i > 0) dp(i)(j) = max(dp(i)(j), dp(i - 1)(j))\n            \
    \    if (j > 0) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n            }\n      \
    \  }\n        var result = 0L\n        for (i <- 0 until m) {\n            for\
    \ (j <- 0 until n) {\n                if (dp(i)(j) > 0) {\n                  \
    \  result += dp(i)(j) / capacity\n                    if (dp(i)(j) % capacity\
    \ > 0) result += 1\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpby95qett.scala:42)\n\tat Problem.main(tmpby95qett.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (i == 0) {\n           \
    \         dp(i)(j) = grid(i)(j)\n                } else {\n                  \
    \  dp(i)(j) = dp(i - 1)(j) + grid(i)(j)\n                }\n            }\n  \
    \      }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                if (dp(i)(j) > capacity) {\n           \
    \         ans += dp(i)(j) - capacity\n                    dp(i)(j) = capacity\n\
    \                }\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpizlucrgw.scala:44)\n\tat Problem.main(tmpizlucrgw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < m - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    result += capacity - maxFill(i)(j)\n            \
    \    }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl5hjbjt.scala:58)\n\tat Problem.main(tmpbl5hjbjt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        for (i <- 0 until rows)\
    \ {\n            for (j <- 0 until cols) {\n                if (i > 0) {\n   \
    \                 maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j))\n    \
    \            }\n                if (j > 0) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j - 1))\n                }\n            }\n\
    \        }\n        for (i <- rows - 1 to 0 by -1) {\n            for (j <- cols\
    \ - 1 to 0 by -1) {\n                if (i < rows - 1) {\n                   \
    \ maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n                }\n \
    \               if (j < cols - 1) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i)(j + 1))\n                }\n            }\n        }\n        var\
    \ result = 0L\n        for (i <- 0 until rows) {\n            for (j <- 0 until\
    \ cols) {\n                if (grid(i)(j) == 1) {\n                    result\
    \ += capacity - maxFill(i)(j)\n                }\n            }\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj9hls5y0.scala:62)\n\tat Problem.main(tmpj9hls5y0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (i == 0) dp(i)(j) = grid(i)(j)\n\
    \                else dp(i)(j) = dp(i - 1)(j) + grid(i)(j)\n            }\n  \
    \      }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                if (dp(i)(j) > capacity) {\n           \
    \         ans += dp(i)(j) - capacity\n                    for (k <- 0 to i) dp(k)(j)\
    \ = capacity\n                }\n            }\n        }\n        ans\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_8hkitnq.scala:41)\n\tat Problem.main(tmp_8hkitnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(x => x.sum).max\n\
    \        if (maxFill <= capacity) return 1\n        val maxFillRow = grid.zipWithIndex.filter(x\
    \ => x._1.sum == maxFill).head._2\n        val maxFillCol = grid(maxFillRow).zipWithIndex.filter(x\
    \ => x._1 == 1).head._2\n        val maxFillRowCount = grid(maxFillRow).count(x\
    \ => x == 1)\n        val maxFillColCount = grid.map(x => x(maxFillCol)).count(x\
    \ => x == 1)\n        val maxFillRowCountFill = (maxFillRowCount / capacity).toLong\
    \ + (if (maxFillRowCount % capacity == 0) 0 else 1)\n        val maxFillColCountFill\
    \ = (maxFillColCount / capacity).toLong + (if (maxFillColCount % capacity == 0)\
    \ 0 else 1)\n        max(maxFillRowCountFill, maxFillColCountFill)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp91tmhja3.scala:31)\n\tat Problem.main(tmp91tmhja3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var fill = 0L\n            for (well <- row) {\n            \
    \    if (well == 1) fill += 1\n                else {\n                    maxFill\
    \ = max(maxFill, fill)\n                    fill = 0\n                }\n    \
    \        }\n            maxFill = max(maxFill, fill)\n        }\n        maxFill\
    \ / capacity\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwwh57fa.scala:35)\n\tat Problem.main(tmpgwwh57fa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    val fill = maxFill(i)(j)\n\
    \                    if (fill > 0) {\n                        result += 1\n  \
    \                      if (i > 0) {\n                            maxFill(i - 1)(j)\
    \ -= fill\n                        }\n                        if (j > 0) {\n \
    \                           maxFill(i)(j - 1) -= fill\n                      \
    \  }\n                    }\n                }\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0tjdlmx.scala:60)\n\tat Problem.main(tmpc0tjdlmx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var total = 0L\n        var max = 0L\n\
    \        for (i <- 0 until grid.length) {\n            var count = 0L\n      \
    \      for (j <- 0 until grid(i).length) {\n                if (grid(i)(j) ==\
    \ 1) count += 1\n            }\n            if (count > max) max = count\n   \
    \         total += count\n        }\n        val result = total / capacity\n \
    \       if (total % capacity == 0) result\n        else result + 1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5dt__wjw.scala:39)\n\tat Problem.main(tmp5dt__wjw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until m)\
    \ {\n                if (grid(i)(j) == 1) {\n                    result = max(result,\
    \ maxFill(i)(j))\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpchbpde58.scala:53)\n\tat Problem.main(tmpchbpde58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val height = grid.length\n        val width\
    \ = grid(0).length\n        val maxFill = Array.fill(height)(Array.fill(width)(0L))\n\
    \        for (i <- 0 until height) {\n            for (j <- 0 until width) {\n\
    \                if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        for (i <- 1 until height)\
    \ {\n            for (j <- 0 until width) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    maxFill(i)(j) = min(maxFill(i - 1)(j), capacity)\n\
    \                }\n            }\n        }\n        for (i <- height - 2 to\
    \ 0 by -1) {\n            for (j <- 0 until width) {\n                if (grid(i)(j)\
    \ == 1) {\n                    maxFill(i)(j) = min(maxFill(i + 1)(j), maxFill(i)(j))\n\
    \                }\n            }\n        }\n        var count = 0L\n       \
    \ for (i <- 0 until height) {\n            for (j <- 0 until width) {\n      \
    \          if (grid(i)(j) == 1) {\n                    count += capacity - maxFill(i)(j)\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhv3kw2c.scala:56)\n\tat Problem.main(tmpmhv3kw2c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var ans = 0L\n        for (i <- 0 until n) {\n            var sum = 0L\n\
    \            for (j <- 0 until m) {\n                sum += grid(i)(j)\n     \
    \           if (sum == capacity) {\n                    ans += 1\n           \
    \         sum = 0\n                } else if (sum > capacity) {\n            \
    \        ans += 1\n                    sum = grid(i)(j)\n                }\n \
    \           }\n            if (sum > 0) ans += 1\n        }\n        ans\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                wells(i)(j) = grid(i)(j)\n\
    \            }\n        }\n        var count = 0\n        var done = false\n \
    \       while (!done) {\n            done = true\n            for (i <- 0 until\
    \ n) {\n                for (j <- 0 until m) {\n                    if (wells(i)(j)\
    \ > 0) {\n                        done = false\n                        wells(i)(j)\
    \ -= capacity\n                        count += 1\n                    }\n   \
    \             }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqzgnkeh2.scala:46)\n\tat Problem.main(tmpqzgnkeh2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var fill = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                if (grid(i)(j) == 1) fill += 1\n            }\n         \
    \   maxFill = max(maxFill, fill)\n        }\n        maxFill\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsyxbwoyk.scala:31)\n\tat Problem.main(tmpsyxbwoyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(row => row.sum)\n        val buckets = new Array[Long](n)\n\
    \        var count = 0\n        while (true) {\n            var filled = false\n\
    \            for (i <- 0 until n) {\n                if (buckets(i) < capacity\
    \ && wells(i) > 0) {\n                    filled = true\n                    buckets(i)\
    \ += 1\n                    wells(i) -= 1\n                }\n            }\n\
    \            if (!filled) return count\n            count += 1\n        }\n  \
    \      return count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpspzfczkf.scala:31:29 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    wells(i) -= \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value -= is not a member of Long - did you mean Long.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    var fill = maxFill(i)(j)\n\
    \                    if (i < n - 1) {\n                        fill = min(fill,\
    \ maxFill(i + 1)(j))\n                    }\n                    if (j < m - 1)\
    \ {\n                        fill = min(fill, maxFill(i)(j + 1))\n           \
    \         }\n                    if (fill < maxFill(i)(j)) {\n               \
    \         maxFill(i)(j) = fill\n                        result += 1\n        \
    \            }\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp689k86cn.scala:61)\n\tat Problem.main(tmp689k86cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numFills = maxFill / capacity\n        val remainder = maxFill %\
    \ capacity\n        if (remainder == 0) numFills else numFills + 1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvea_s6h_.scala:26)\n\tat Problem.main(tmpvea_s6h_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        maxFill(n\
    \ - 1)(m - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsn9t3db.scala:45)\n\tat Problem.main(tmpdsn9t3db.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978503
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val wells = grid.map(row => row.sum).toArray\n\
    \        var total = wells.sum\n        var count = 0\n        while (total >\
    \ 0) {\n            for (i <- 0 until wells.length) {\n                if (wells(i)\
    \ > 0) {\n                    wells(i) -= min(wells(i), capacity)\n          \
    \          total -= min(wells(i), capacity)\n                }\n            }\n\
    \            count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // 1. find the max value in the grid\n\
    \        // 2. find the max value in each row\n        // 3. find the max value\
    \ in each column\n        // 4. find the max value in each diagonal\n        //\
    \ 5. find the max value in each anti-diagonal\n        // 6. find the max value\
    \ in each sub-grid\n        // 7. find the max value in each sub-grid with a hole\n\
    \        // 8. find the max value in each sub-grid with a hole and a diagonal\n\
    \        // 9. find the max value in each sub-grid with a hole and an anti-diagonal\n\
    \        // 10. find the max value in each sub-grid with a hole and a diagonal\
    \ and an anti-diagonal\n        // 11. find the max value in each sub-grid with\
    \ a hole and a diagonal and an anti-diagonal and a row\n        // 12. find the\
    \ max value in each sub-grid with a hole and a diagonal and an anti-diagonal and\
    \ a column\n        // 13. find the max value in each sub-grid with a hole and\
    \ a diagonal and an anti-diagonal and a row and a column\n        // 14. find\
    \ the max value in each sub-grid with a hole and a diagonal and an anti-diagonal\
    \ and a row and a column and a diagonal\n        // 15. find the max value in\
    \ each sub-grid with a hole and a diagonal and an anti-diagonal and a row and\
    \ a column and an anti-diagonal\n        // 16. find the max value in each sub-grid\
    \ with a hole and a diagonal and an anti-diagonal and a row and a column and a\
    \ diagonal and an anti-diagonal\n        // 17. find the max value in each sub-grid\
    \ with a hole and a diagonal and an anti-diagonal and a row and a column and a\
    \ diagonal and an anti-diagonal and a row\n        // 18. find the max value in\
    \ each sub-grid with a hole and a diagonal and an anti-diagonal and a row and\
    \ a column and a diagonal and an anti-diagonal and a column\n        // 19. find\
    \ the max value in each sub-grid with a hole and a diagonal and an anti-diagonal\
    \ and a row and a column and a diagonal and an anti-diagonal and a row and a column\n\
    \        // 20. find the max value in\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_f5ri_p.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// 1. find the max value in the grid\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// 2. find the max value in each row\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// 3. find the max value in each column\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// 4. find the max value in each diagonal\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// 5. find the max value in each anti-diagonal\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// 6. find the max value in each sub-grid\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// 7. find the max value in each sub-grid with a hole\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// 8. find the max value in each sub-grid with\
    \ a hole and a diagonal\e[0m\n\e[31m28 |\e[0m        \e[34m// 9. find the max\
    \ value in each sub-grid with a hole and an anti-diagonal\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// 10. find the max value in each sub-grid with a hole and a diagonal\
    \ and an anti-diagonal\e[0m\n\e[31m30 |\e[0m        \e[34m// 11. find the max\
    \ value in each sub-grid with a hole and a diagonal and an anti-diagonal and a\
    \ row\e[0m\n\e[31m31 |\e[0m        \e[34m// 12. find the max value in each sub-grid\
    \ with a hole and a diagonal and an anti-diagonal and a column\e[0m\n\e[31m32\
    \ |\e[0m        \e[34m// 13. find the max value in each sub-grid with a hole and\
    \ a diagonal and an anti-diagonal and a row and a column\e[0m\n\e[31m33 |\e[0m\
    \        \e[34m// 14. find the max value in each sub-grid with a hole and a diagonal\
    \ and an anti-diagonal and a row and a column and a diagonal\e[0m\n\e[31m34 |\e\
    [0m        \e[34m// 15. find the max value in each sub-grid with a hole and a\
    \ diagonal and an anti-diagonal and "
  stdout: ''
  timestamp: 1659978527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numBuckets = maxFill / capacity\n        if (maxFill % capacity ==\
    \ 0) numBuckets else numBuckets + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1s75oi8k.scala:25)\n\tat Problem.main(tmp1s75oi8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill the first row\n        var filled\
    \ = grid(0).map(x => if (x > capacity) capacity else x)\n        // Fill the remaining\
    \ rows\n        for (i <- 1 until grid.length) {\n            val row = grid(i)\n\
    \            val newFilled = new Array[Long](row.length)\n            for (j <-\
    \ 0 until row.length) {\n                newFilled(j) = min(filled(j), row(j))\n\
    \            }\n            filled = newFilled\n        }\n        // Count the\
    \ number of times we had to fill the buckets\n        var count = 0L\n       \
    \ for (i <- 0 until grid.length) {\n            val row = grid(i)\n          \
    \  for (j <- 0 until row.length) {\n                count += (row(j) - filled(j))\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl3nb76v0.scala:29:21\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m            filled = newFilled\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 Found:    (newFilled : Array[Long])\n\e[31m   |\e[0m       \
    \              Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rowCount = grid.length\n        val\
    \ colCount = grid(0).length\n        val rowMax = grid.map(row => row.sum)\n \
    \       val colMax = (0 until colCount).map(col => grid.map(row => row(col)).sum)\n\
    \        val rowMaxCount = rowMax.map(x => (x + capacity - 1) / capacity).sum\n\
    \        val colMaxCount = colMax.map(x => (x + capacity - 1) / capacity).sum\n\
    \        val maxCount = max(rowMaxCount, colMaxCount)\n        maxCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppyqfqzf5.scala:31)\n\tat Problem.main(tmppyqfqzf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0\n        var filled = 0\n\
    \        for (i <- 0 until grid.length) {\n            var row = grid(i)\n   \
    \         var fill = 0\n            for (j <- 0 until row.length) {\n        \
    \        if (row(j) == 1) {\n                    fill += 1\n                }\n\
    \            }\n            if (fill > capacity) {\n                count += fill\
    \ - capacity\n                filled += capacity\n            } else {\n     \
    \           filled += fill\n            }\n        }\n        return count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpep6yzsds.scala:31:22 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                count += fill - capacity\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpep6yzsds.scala:32:23 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m                filled += capacity\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = new Array[Array[Long]](rows)\n     \
    \   for (i <- 0 until rows) {\n            maxFill(i) = new Array[Long](cols)\n\
    \            for (j <- 0 until cols) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until rows) {\n            for (j <- 0 until\
    \ cols) {\n                if (grid(i)(j) == 1) {\n                    if (i >\
    \ 0) {\n                        val fill = min(maxFill(i - 1)(j), capacity - maxFill(i)(j))\n\
    \                        maxFill(i - 1)(j) -= fill\n                        maxFill(i)(j)\
    \ += fill\n                    }\n                    if (j > 0) {\n         \
    \               val fill = min(maxFill(i)(j - 1), capacity - maxFill(i)(j))\n\
    \                        maxFill(i)(j - 1) -= fill\n                        maxFill(i)(j)\
    \ += fill\n                    }\n                }\n            }\n        }\n\
    \        var count = 0\n        for (i <- 0 until rows) {\n            for (j\
    \ <- 0 until cols) {\n                if (grid(i)(j) == 1) {\n               \
    \     count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbfryly6w.scala:59)\n\tat Problem.main(tmpbfryly6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var fillCount = 0\n        var maxFill\
    \ = 0\n        for (row <- grid) {\n            for (well <- row) {\n        \
    \        if (well == 1) {\n                    fillCount += 1\n              \
    \      if (fillCount == capacity) {\n                        maxFill += 1\n  \
    \                      fillCount = 0\n                    }\n                }\n\
    \            }\n        }\n        maxFill\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_nqma2su.scala:37)\n\tat Problem.main(tmp_nqma2su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            var sum =\
    \ 0\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n \
    \               if (sum == capacity) {\n                    count += 1\n     \
    \               sum = 0\n                }\n            }\n            if (sum\
    \ > 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnhtpxl2f.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        if (maxFill <= capacity) return 1\n        val numRows = grid.length\n\
    \        val numCols = grid(0).length\n        val numBuckets = numRows * numCols\n\
    \        val buckets = Array.fill(numBuckets)(0L)\n        var numFills = 0\n\
    \        while (buckets.sum < numBuckets * capacity) {\n            numFills +=\
    \ 1\n            for (i <- 0 until numRows) {\n                for (j <- 0 until\
    \ numCols) {\n                    val bucketIndex = i * numCols + j\n        \
    \            if (buckets(bucketIndex) < capacity) {\n                        val\
    \ fill = min(capacity - buckets(bucketIndex), grid(i)(j))\n                  \
    \      buckets(bucketIndex) += fill\n                        grid(i)(j) -= fill\n\
    \                    }\n                }\n            }\n        }\n        numFills\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjulzpao6.scala:35:35 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                        grid(i)(j) -= fill\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value -= is not a member of Long - did you mean Long.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978528
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val fill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            var sum = 0L\n            for (j <- 0 until m) {\n              \
    \  sum += grid(i)(j)\n                fill(i)(j) = sum\n            }\n      \
    \  }\n        var result = 0L\n        for (j <- 0 until m) {\n            var\
    \ sum = 0L\n            for (i <- 0 until n) {\n                sum += fill(i)(j)\n\
    \                if (sum > capacity) {\n                    result += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnyjvdvid.scala:44)\n\tat Problem.main(tmpnyjvdvid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                wells(i)(j) = grid(i)(j)\n\
    \            }\n        }\n        var count = 0\n        var done = false\n \
    \       while (!done) {\n            done = true\n            for (i <- 0 until\
    \ n) {\n                for (j <- 0 until m) {\n                    if (wells(i)(j)\
    \ > 0) {\n                        done = false\n                        wells(i)(j)\
    \ -= capacity\n                        if (wells(i)(j) < 0) wells(i)(j) = 0\n\
    \                    }\n                }\n            }\n            count +=\
    \ 1\n        }\n        count - 1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksw3jb97.scala:46)\n\tat Problem.main(tmpksw3jb97.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978505
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n\
    \            for (j <- m - 1 to 0 by -1) {\n                if (i < n - 1) {\n\
    \                    maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n \
    \               }\n                if (j < m - 1) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j + 1))\n                }\n            }\n\
    \        }\n        var count = 0L\n        for (i <- 0 until n) {\n         \
    \   for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n         \
    \           count += capacity - maxFill(i)(j)\n                }\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6lpg364.scala:62)\n\tat Problem.main(tmps6lpg364.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var total = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var fill = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                if (grid(i)(j) == 1) fill += 1\n            }\n         \
    \   total += (fill / capacity)\n            if (fill % capacity != 0) total +=\
    \ 1\n        }\n        total\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var fill = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var row = grid(i)\n            var sum = 0L\n  \
    \          for (j <- 0 until row.length) {\n                sum += row(j)\n  \
    \          }\n            fill += ceil(sum.toDouble / capacity).toLong\n     \
    \   }\n        fill\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(x => x.sum).max\n\
    \        if (maxFill <= capacity) 1 else (maxFill / capacity) + 1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpex7hi967.scala:24)\n\tat Problem.main(tmpex7hi967.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var sum = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                sum += grid(i)(j)\n            }\n            result += (sum\
    \ / capacity)\n            if (sum % capacity != 0) result += 1\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (i == 0 && j == 0) maxFill(i)(j)\
    \ = grid(i)(j)\n                else if (i == 0) maxFill(i)(j) = maxFill(i)(j\
    \ - 1) + grid(i)(j)\n                else if (j == 0) maxFill(i)(j) = maxFill(i\
    \ - 1)(j) + grid(i)(j)\n                else maxFill(i)(j) = max(maxFill(i - 1)(j),\
    \ maxFill(i)(j - 1)) + grid(i)(j)\n            }\n        }\n        val maxFill2\
    \ = Array.ofDim[Long](n, m)\n        for (i <- n - 1 to 0 by -1) {\n         \
    \   for (j <- m - 1 to 0 by -1) {\n                if (i == n - 1 && j == m -\
    \ 1) maxFill2(i)(j) = grid(i)(j)\n                else if (i == n - 1) maxFill2(i)(j)\
    \ = maxFill2(i)(j + 1) + grid(i)(j)\n                else if (j == m - 1) maxFill2(i)(j)\
    \ = maxFill2(i + 1)(j) + grid(i)(j)\n                else maxFill2(i)(j) = max(maxFill2(i\
    \ + 1)(j), maxFill2(i)(j + 1)) + grid(i)(j)\n            }\n        }\n      \
    \  var result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                val maxFill3 = maxFill(i)(j) + maxFill2(i)(j) - grid(i)(j)\n\
    \                if (maxFill3 > capacity) result += maxFill3 - capacity\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpinl8h7hu.scala:50)\n\tat Problem.main(tmpinl8h7hu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var sum = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                sum += grid(i)(j)\n            }\n            count += sum\
    \ / capacity\n            if (sum % capacity != 0) count += 1\n        }\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill the wells from the bottom up.\n\
    \        // If the well is already full, then fill the next well.\n        //\
    \ If the well is not full, then fill it up.\n        // If the well is overfilled,\
    \ then fill the next well.\n        // If the well is filled, then move on to\
    \ the next well.\n        // If the well is not filled, then fill it up.\n   \
    \     // If the well is overfilled, then fill the next well.\n        // If the\
    \ well is filled, then move on to the next well.\n        // If the well is not\
    \ filled, then fill it up.\n        // If the well is overfilled, then fill the\
    \ next well.\n        // If the well is filled, then move on to the next well.\n\
    \        // If the well is not filled, then fill it up.\n        // If the well\
    \ is overfilled, then fill the next well.\n        // If the well is filled, then\
    \ move on to the next well.\n        // If the well is not filled, then fill it\
    \ up.\n        // If the well is overfilled, then fill the next well.\n      \
    \  // If the well is filled, then move on to the next well.\n        // If the\
    \ well is not filled, then fill it up.\n        // If the well is overfilled,\
    \ then fill the next well.\n        // If the well is filled, then move on to\
    \ the next well.\n        // If the well is not filled, then fill it up.\n   \
    \     // If the well is overfilled, then fill the next well.\n        // If the\
    \ well is filled, then move on to the next well.\n        // If the well is not\
    \ filled, then fill it up.\n        // If the well is overfilled, then fill the\
    \ next well.\n        // If the well is filled, then move on to the next well.\n\
    \        // If the well is not filled, then fill it up.\n        // If the well\
    \ is overfilled, then fill the next well.\n        // If the well is filled, then\
    \ move on to the next well.\n        // If the well is not filled, then fill it\
    \ up.\n        // If the well is overfilled, then fill the next well.\n      \
    \  // If the well is filled, then move on to the next well.\n        // If the\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyae0egk2.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// Fill the wells from the bottom up.\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// If the well is already full, then fill the next\
    \ well.\e[0m\n\e[31m22 |\e[0m        \e[34m// If the well is not full, then fill\
    \ it up.\e[0m\n\e[31m23 |\e[0m        \e[34m// If the well is overfilled, then\
    \ fill the next well.\e[0m\n\e[31m24 |\e[0m        \e[34m// If the well is filled,\
    \ then move on to the next well.\e[0m\n\e[31m25 |\e[0m        \e[34m// If the\
    \ well is not filled, then fill it up.\e[0m\n\e[31m26 |\e[0m        \e[34m// If\
    \ the well is overfilled, then fill the next well.\e[0m\n\e[31m27 |\e[0m     \
    \   \e[34m// If the well is filled, then move on to the next well.\e[0m\n\e[31m28\
    \ |\e[0m        \e[34m// If the well is not filled, then fill it up.\e[0m\n\e\
    [31m29 |\e[0m        \e[34m// If the well is overfilled, then fill the next well.\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// If the well is filled, then move on to the\
    \ next well.\e[0m\n\e[31m31 |\e[0m        \e[34m// If the well is not filled,\
    \ then fill it up.\e[0m\n\e[31m32 |\e[0m        \e[34m// If the well is overfilled,\
    \ then fill the next well.\e[0m\n\e[31m33 |\e[0m        \e[34m// If the well is\
    \ filled, then move on to the next well.\e[0m\n\e[31m34 |\e[0m        \e[34m//\
    \ If the well is not filled, then fill it up.\e[0m\n\e[31m35 |\e[0m        \e\
    [34m// If the well is overfilled, then fill the next well.\e[0m\n\e[31m36 |\e\
    [0m        \e[34m// If the well is filled, then move on to the next well.\e[0m\n\
    \e[31m37 |\e[0m        \e[34m// If the well is not filled, then fill it up.\e\
    [0m\n\e[31m38 |\e[0m        \e[34m// If the well is over"
  stdout: ''
  timestamp: 1659978532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        def fill(grid : List[List[Long]], capacity\
    \ : Long, max : Long) : Long = {\n            if (grid.isEmpty) max\n        \
    \    else {\n                val row = grid.head\n                val filled =\
    \ row.map(min(_, capacity))\n                val maxFilled = filled.max\n    \
    \            val newGrid = grid.tail.map(row => row.zip(filled).map(x => x._1\
    \ - x._2))\n                fill(newGrid, capacity, max + maxFilled)\n       \
    \     }\n        }\n        fill(grid, capacity, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ysz1q7b.scala:33)\n\tat Problem.main(tmp_ysz1q7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0\
    \ until n) {\n            for (j <- 0 until m) {\n                if (i == 0 &&\
    \ j == 0) {\n                    dp(i)(j) = maxFill(i)(j)\n                } else\
    \ if (i == 0) {\n                    dp(i)(j) = dp(i)(j - 1) + maxFill(i)(j)\n\
    \                } else if (j == 0) {\n                    dp(i)(j) = dp(i - 1)(j)\
    \ + maxFill(i)(j)\n                } else {\n                    dp(i)(j) = min(dp(i\
    \ - 1)(j), dp(i)(j - 1)) + maxFill(i)(j)\n                }\n            }\n \
    \       }\n        dp(n - 1)(m - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1186uvw2.scala:47)\n\tat Problem.main(tmp1186uvw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rowCount = grid.length\n        val\
    \ colCount = grid(0).length\n        var fillCount = 0L\n        for (i <- 0 until\
    \ rowCount) {\n            var fill = 0L\n            for (j <- 0 until colCount)\
    \ {\n                if (grid(i)(j) == 1) {\n                    fill += 1\n \
    \               }\n            }\n            if (fill > capacity) {\n       \
    \         fillCount += fill / capacity\n                if (fill % capacity !=\
    \ 0) {\n                    fillCount += 1\n                }\n            }\n\
    \        }\n        fillCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zqy3k8x.scala:40)\n\tat Problem.main(tmp1zqy3k8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0L\n        while (grid.exists(x\
    \ => x.sum > 0)) {\n            for (i <- 0 until grid.length) {\n           \
    \     if (grid(i).sum > 0) {\n                    for (j <- 0 until grid(i).length)\
    \ {\n                        if (grid(i)(j) > 0) {\n                         \
    \   grid(i)(j) = max(grid(i)(j) - capacity, 0)\n                        }\n  \
    \                  }\n                    count += 1\n                }\n    \
    \        }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpze7as766.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                            grid(i)(j) = max(grid(i)(j)\
    \ - capacity, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Long] - did\
    \ you mean List[Long].updated?\n1 error found\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val filled = Array.fill(n)(0L)\n        var total = 0L\n        for (i\
    \ <- 0 until n) {\n            var j = 0\n            while (j < m && grid(i)(j)\
    \ == 0) j += 1\n            if (j < m) {\n                val fill = min(capacity,\
    \ m - j)\n                filled(i) = fill\n                total += fill\n  \
    \          }\n        }\n        var result = 0L\n        while (total > 0) {\n\
    \            result += 1\n            total = 0\n            for (i <- 0 until\
    \ n) {\n                val fill = min(capacity, filled(i))\n                filled(i)\
    \ -= fill\n                total += fill\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsis2elyh.scala:46)\n\tat Problem.main(tmpsis2elyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum > capacity) {\n                    result += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0qwdylz.scala:36)\n\tat Problem.main(tmpr0qwdylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n  \
    \                  dp(i)(j) = capacity\n                }\n            }\n   \
    \     }\n        var ans = 0L\n        while (true) {\n            var flag =\
    \ false\n            for (i <- 0 until n) {\n                for (j <- 0 until\
    \ m) {\n                    if (dp(i)(j) == 0) {\n                        if (i\
    \ > 0 && dp(i - 1)(j) > 0) {\n                            dp(i)(j) = dp(i - 1)(j)\
    \ - 1\n                            flag = true\n                        }\n  \
    \                      if (j > 0 && dp(i)(j - 1) > 0) {\n                    \
    \        dp(i)(j) = dp(i)(j - 1) - 1\n                            flag = true\n\
    \                        }\n                        if (i < n - 1 && dp(i + 1)(j)\
    \ > 0) {\n                            dp(i)(j) = dp(i + 1)(j) - 1\n          \
    \                  flag = true\n                        }\n                  \
    \      if (j < m - 1 && dp(i)(j + 1) > 0) {\n                            dp(i)(j)\
    \ = dp(i)(j + 1) - 1\n                            flag = true\n              \
    \          }\n                    }\n                }\n            }\n      \
    \      if (!flag) {\n                break\n            }\n            ans +=\
    \ 1\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfo8n466o.scala:56:16 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(x => x.sum).max\n\
    \        if (maxFill <= capacity) return 1\n        val numRows = grid.length\n\
    \        val numCols = grid(0).length\n        val numBuckets = numRows * numCols\n\
    \        val buckets = Array.fill(numBuckets)(0L)\n        val bucketCapacity\
    \ = capacity / numBuckets\n        var numFills = 0L\n        var numEmpty = 0L\n\
    \        while (numEmpty < numBuckets) {\n            numFills += 1\n        \
    \    for (i <- 0 until numRows) {\n                for (j <- 0 until numCols)\
    \ {\n                    val bucket = i * numCols + j\n                    if\
    \ (buckets(bucket) < bucketCapacity) {\n                        val amount = min(bucketCapacity\
    \ - buckets(bucket), grid(i)(j))\n                        buckets(bucket) += amount\n\
    \                        grid(i)(j) -= amount\n                        if (grid(i)(j)\
    \ == 0) numEmpty += 1\n                    }\n                }\n            }\n\
    \        }\n        numFills\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilopl7cs.scala:37:35 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        grid(i)(j) -= amount\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value -= is not a member of Long - did you mean Long.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val rowMax = grid.map(row => row.sum)\n        val\
    \ colMax = (0 until cols).map(i => grid.map(row => row(i)).sum)\n        val max\
    \ = rowMax.max\n        val maxCol = colMax.indexOf(colMax.max)\n        val maxRow\
    \ = rowMax.indexOf(max)\n        var count = 0L\n        var row = 0\n       \
    \ while (row < rows) {\n            var col = 0\n            while (col < cols)\
    \ {\n                if (grid(row)(col) == 1) {\n                    if (row ==\
    \ maxRow && col == maxCol) {\n                        count += 1\n           \
    \         } else {\n                        count += 2\n                    }\n\
    \                }\n                col += 1\n            }\n            row +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4hwiw6y.scala:46)\n\tat Problem.main(tmpe4hwiw6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(_.toArray).toArray\n        var total = 0L\n   \
    \     for (i <- 0 until n) {\n            var sum = 0L\n            for (j <-\
    \ 0 until m) {\n                sum += wells(i)(j)\n                if (sum >\
    \ capacity) {\n                    wells(i)(j) = wells(i)(j) - (sum - capacity)\n\
    \                    total += sum - capacity\n                    sum = capacity\n\
    \                }\n            }\n        }\n        for (j <- 0 until m) {\n\
    \            var sum = 0L\n            for (i <- 0 until n) {\n              \
    \  sum += wells(i)(j)\n                if (sum > capacity) {\n               \
    \     wells(i)(j) = wells(i)(j) - (sum - capacity)\n                    total\
    \ += sum - capacity\n                    sum = capacity\n                }\n \
    \           }\n        }\n        total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk9o_onu8.scala:49)\n\tat Problem.main(tmpk9o_onu8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(x => x.sum).toArray\n        var max = wells.max\n\
    \        var min = wells.min\n        var result = 0L\n        while (max > min)\
    \ {\n            val mid = (max + min) / 2\n            var sum = 0L\n       \
    \     for (i <- 0 until n) {\n                var count = 0L\n               \
    \ for (j <- 0 until m) {\n                    if (grid(i)(j) > mid) {\n      \
    \                  count += grid(i)(j) - mid\n                    }\n        \
    \        }\n                sum += count / capacity\n                if (count\
    \ % capacity != 0) sum += 1\n            }\n            if (sum <= n) {\n    \
    \            max = mid\n                result = sum\n            } else {\n \
    \               min = mid + 1\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_gauyszi.scala:49)\n\tat Problem.main(tmp_gauyszi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxRow = grid.map(row => row.sum).max\n      \
    \  val maxCol = (0 until cols).map(col => (0 until rows).map(row => grid(row)(col)).sum).max\n\
    \        val max = max(maxRow, maxCol)\n        val min = min(maxRow, maxCol)\n\
    \        if (max == min) max\n        else if (maxRow == max) maxRow + min\n \
    \       else if (maxCol == max) maxCol + min\n        else max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp718stnm3.scala:24:18 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(maxRow, maxCol)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp718stnm3.scala:25:18 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = min(maxRow, maxCol)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0L\n        var max = 0L\n\
    \        for (i <- 0 until grid.length) {\n            max = 0L\n            for\
    \ (j <- 0 until grid(i).length) {\n                if (grid(i)(j) == 1) {\n  \
    \                  max += 1\n                }\n            }\n            if\
    \ (max > capacity) {\n                count += max - capacity\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7s7gjqpt.scala:36)\n\tat Problem.main(tmp7s7gjqpt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978544
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(x => x.sum).toArray\n        var total = wells.sum\n\
    \        var count = 0\n        while (total > 0) {\n            var max = 0\n\
    \            for (i <- 0 until n) {\n                if (wells(i) > wells(max))\
    \ max = i\n            }\n            wells(max) -= min(wells(max), capacity)\n\
    \            total -= min(wells(max), capacity)\n            count += 1\n    \
    \    }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978548
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = grid.map(x => x.sum).toArray\n        val buckets = new Array[Long](n)\n\
    \        var count = 0L\n        while (true) {\n            var min = Long.MaxValue\n\
    \            for (i <- 0 until n) {\n                if (wells(i) > 0) {\n   \
    \                 min = min min wells(i)\n                }\n            }\n \
    \           if (min == Long.MaxValue) return count\n            for (i <- 0 until\
    \ n) {\n                if (wells(i) > 0) {\n                    wells(i) -= min\n\
    \                    buckets(i) += min\n                }\n            }\n   \
    \         for (i <- 0 until n) {\n                if (buckets(i) > capacity) {\n\
    \                    val diff = buckets(i) - capacity\n                    buckets(i)\
    \ = capacity\n                    wells(i) += diff\n                }\n      \
    \      }\n            count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val wells = grid.map(_.sum)\n        val\
    \ maxWell = wells.max\n        val maxWellIndex = wells.indexOf(maxWell)\n   \
    \     val maxWellFill = maxWell / capacity\n        val maxWellFillRemainder =\
    \ maxWell % capacity\n        val maxWellFillRemainderIndex = wells.indexOf(maxWellFillRemainder)\n\
    \        val maxWellFillRemainderIndex2 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex + 1)\n        val maxWellFillRemainderIndex3 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex2 + 1)\n        val maxWellFillRemainderIndex4 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex3 + 1)\n        val maxWellFillRemainderIndex5 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex4 + 1)\n        val maxWellFillRemainderIndex6 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex5 + 1)\n        val maxWellFillRemainderIndex7 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex6 + 1)\n        val maxWellFillRemainderIndex8 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex7 + 1)\n        val maxWellFillRemainderIndex9 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex8 + 1)\n        val maxWellFillRemainderIndex10 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex9 + 1)\n        val maxWellFillRemainderIndex11 = wells.indexOf(maxWellFillRemainder,\
    \ maxWellFillRemainderIndex10 + 1)\n        val maxWellFillRemainderIndex12 =\
    \ wells.indexOf(maxWellFillRemainder, maxWellFillRemainderIndex11 + 1)\n     \
    \   val maxWellFillRemainderIndex13 = wells.indexOf(maxWellFillRemainder, maxWellFillRemainderIndex12\
    \ + 1)\n        val maxWellFillRemainder\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzdayfl9c.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzdayfl9c.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var sum = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                sum += grid(i)(j)\n            }\n            result += ceil(sum.toDouble\
    \ / capacity).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        for (i <- 0 until rows)\
    \ {\n            for (j <- 0 until cols) {\n                if (i > 0) {\n   \
    \                 maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j))\n    \
    \            }\n                if (j > 0) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j - 1))\n                }\n            }\n\
    \        }\n        var result = 0L\n        for (i <- rows - 1 to 0 by -1) {\n\
    \            for (j <- cols - 1 to 0 by -1) {\n                if (grid(i)(j)\
    \ == 1) {\n                    var fill = maxFill(i)(j)\n                    if\
    \ (i < rows - 1) {\n                        fill = min(fill, maxFill(i + 1)(j))\n\
    \                    }\n                    if (j < cols - 1) {\n            \
    \            fill = min(fill, maxFill(i)(j + 1))\n                    }\n    \
    \                maxFill(i)(j) = fill\n                    result += fill\n  \
    \              }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpptmctd6l.scala:59)\n\tat Problem.main(tmpptmctd6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + 1)\n                    }\n                    if (j > 0) {\n            \
    \            maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + 1)\n     \
    \               }\n                }\n            }\n        }\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j) + 1)\n\
    \                    }\n                    if (j < m - 1) {\n               \
    \         maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1) + 1)\n        \
    \            }\n                }\n            }\n        }\n        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n \
    \               if (grid(i)(j) == 1) {\n                    result += maxFill(i)(j)\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0a_mlfg.scala:66)\n\tat Problem.main(tmpi0a_mlfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val rowMax = grid.map(row => row.sum)\n        val colMax = (0 until\
    \ m).map(j => grid.map(row => row(j)).sum)\n        val rowMaxSum = rowMax.sum\n\
    \        val colMaxSum = colMax.sum\n        val rowMaxMax = rowMax.max\n    \
    \    val colMaxMax = colMax.max\n        val rowMaxMin = rowMax.min\n        val\
    \ colMaxMin = colMax.min\n        val rowMaxAvg = rowMaxSum / n\n        val colMaxAvg\
    \ = colMaxSum / m\n        val rowMaxMed = rowMax.sorted.apply(n / 2)\n      \
    \  val colMaxMed = colMax.sorted.apply(m / 2)\n        val rowMaxMode = rowMax.groupBy(x\
    \ => x).mapValues(_.size).maxBy(_._2)._1\n        val colMaxMode = colMax.groupBy(x\
    \ => x).mapValues(_.size).maxBy(_._2)._1\n        val rowMaxVar = rowMax.map(x\
    \ => pow(x - rowMaxAvg, 2)).sum / n\n        val colMaxVar = colMax.map(x => pow(x\
    \ - colMaxAvg, 2)).sum / m\n        val rowMaxStd = sqrt(rowMaxVar)\n        val\
    \ colMaxStd = sqrt(colMaxVar)\n        val rowMaxSkew = rowMax.map(x => pow(x\
    \ - rowMaxAvg, 3)).sum / n\n        val colMaxSkew = colMax.map(x => pow(x - colMaxAvg,\
    \ 3)).sum / m\n        val rowMaxKurt = rowMax.map(x => pow(x - rowMaxAvg, 4)).sum\
    \ / n\n        val colMaxKurt = colMax.map(x => pow(x - colMaxAvg, 4)).sum / m\n\
    \        val rowMaxRange = rowMaxMax - rowMaxMin\n        val colMaxRange = colMaxMax\
    \ - colMaxMin\n        val rowMaxMidRange = (rowMaxMax + rowMaxMin) / 2\n    \
    \    val colMaxMidRange = (colMaxMax + colMaxMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmk152hyv.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmk152hyv.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until m)\
    \ {\n                if (grid(i)(j) == 1) {\n                    result = max(result,\
    \ maxFill(i)(j))\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpchbpde58.scala:53)\n\tat Problem.main(tmpchbpde58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val wells = new Array[Long](n)\n        for (i <- 0 until n) wells(i)\
    \ = grid(i).sum\n        var ans = 0L\n        while (true) {\n            var\
    \ filled = 0L\n            for (i <- 0 until n) {\n                if (wells(i)\
    \ > 0) {\n                    filled += min(wells(i), capacity)\n            \
    \        wells(i) -= min(wells(i), capacity)\n                }\n            }\n\
    \            if (filled == 0) return ans\n            ans += 1\n        }\n  \
    \      ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp573ftpbt.scala:39)\n\tat Problem.main(tmp573ftpbt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        var max = 0L\n        for (i <- 0 until rows) {\n\
    \            for (j <- 0 until cols) {\n                if (grid(i)(j) == 1) {\n\
    \                    max = max max (i + 1)\n                }\n            }\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_35g7bbc.scala:33)\n\tat Problem.main(tmp_35g7bbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum > capacity) {\n                    result += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0qwdylz.scala:36)\n\tat Problem.main(tmpr0qwdylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var ans = 0L\n        for (i <- 0 until n) {\n            var sum = 0L\n\
    \            for (j <- 0 until m) {\n                sum += grid(i)(j)\n     \
    \           if (sum == capacity) {\n                    ans += 1\n           \
    \         sum = 0\n                } else if (sum > capacity) {\n            \
    \        ans += 1\n                    sum = grid(i)(j)\n                }\n \
    \           }\n            if (sum > 0) ans += 1\n        }\n        ans\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val maxFillRows = grid.filter(row => row.sum == maxFill)\n        val\
    \ maxFillRow = maxFillRows.head\n        val maxFillRowLength = maxFillRow.length\n\
    \        val maxFillRowSum = maxFillRow.sum\n        val maxFillRowSumDivCapacity\
    \ = maxFillRowSum / capacity\n        val maxFillRowSumModCapacity = maxFillRowSum\
    \ % capacity\n        val maxFillRowSumDivCapacityPlusOne = maxFillRowSumDivCapacity\
    \ + 1\n        val maxFillRowSumModCapacityDivMaxFillRowLength = maxFillRowSumModCapacity\
    \ / maxFillRowLength\n        val maxFillRowSumModCapacityModMaxFillRowLength\
    \ = maxFillRowSumModCapacity % maxFillRowLength\n        val maxFillRowSumModCapacityDivMaxFillRowLengthPlusOne\
    \ = maxFillRowSumModCapacityDivMaxFillRowLength + 1\n        val maxFillRowSumModCapacityModMaxFillRowLengthPlusOne\
    \ = maxFillRowSumModCapacityModMaxFillRowLength + 1\n        val maxFillRowSumModCapacityDivMaxFillRowLengthPlusOneDivCapacity\
    \ = maxFillRowSumModCapacityDivMaxFillRowLengthPlusOne / capacity\n        val\
    \ maxFillRowSumModCapacityDivMaxFillRowLengthPlusOneModCapacity = maxFillRowSumModCapacityDivMaxFillRowLengthPlusOne\
    \ % capacity\n        val maxFillRowSumModCapacityModMaxFillRowLengthPlusOneDivCapacity\
    \ = maxFillRowSumModCapacityModMaxFillRowLengthPlusOne / capacity\n        val\
    \ maxFillRowSumModCapacityModMaxFillRowLengthPlusOneModCapacity = maxFillRowSumModCapacityModMaxFillRowLengthPlusOne\
    \ % capacity\n        val maxFillRowSumModCapacityDivMaxFillRowLengthPlusOneDivCapacityPlusOne\
    \ = maxFillRowSumModCapacityDivMaxFillRowLengthPlusOneDivCapacity + 1\n      \
    \  val maxFillRowSumModCapacityModMaxFillRowLengthPlusOneDivCapacityPlusOne =\
    \ maxFillRowSumModCapacityModMaxFillRowLengthPlusOneDivCapacity + 1\n        val\
    \ maxFillRowSumModCapacityDivMaxFillRowLengthPlusOneModCapacityDivMaxFillRowLength\
    \ = max\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_d4rq5xn.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                maxFill(i)(j) = grid(i)(j)\n\
    \                if (i > 0) maxFill(i)(j) = max(maxFill(i)(j), maxFill(i - 1)(j))\n\
    \                if (j > 0) maxFill(i)(j) = max(maxFill(i)(j), maxFill(i)(j -\
    \ 1))\n            }\n        }\n        var result = 0L\n        for (i <- 0\
    \ until n) {\n            for (j <- 0 until m) {\n                val fill = maxFill(i)(j)\n\
    \                if (fill > 0) {\n                    result += fill\n       \
    \             var k = i\n                    while (k >= 0 && maxFill(k)(j) >\
    \ 0) {\n                        maxFill(k)(j) -= fill\n                      \
    \  k -= 1\n                    }\n                    k = j\n                \
    \    while (k >= 0 && maxFill(i)(k) > 0) {\n                        maxFill(i)(k)\
    \ -= fill\n                        k -= 1\n                    }\n           \
    \     }\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60i9_kqb.scala:52)\n\tat Problem.main(tmp60i9_kqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val fill = Array.ofDim[Long](n, m)\n        var count = 0L\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j)\
    \ == 1) {\n                    fill(i)(j) = capacity\n                    count\
    \ += 1\n                }\n            }\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until m) {\n                if (fill(i)(j) > 0)\
    \ {\n                    if (i > 0 && fill(i - 1)(j) > 0) {\n                \
    \        val diff = min(fill(i)(j), fill(i - 1)(j))\n                        fill(i)(j)\
    \ -= diff\n                        fill(i - 1)(j) -= diff\n                  \
    \      count += diff\n                    }\n                    if (j > 0 &&\
    \ fill(i)(j - 1) > 0) {\n                        val diff = min(fill(i)(j), fill(i)(j\
    \ - 1))\n                        fill(i)(j) -= diff\n                        fill(i)(j\
    \ - 1) -= diff\n                        count += diff\n                    }\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpen2zfbp4.scala:53)\n\tat Problem.main(tmpen2zfbp4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val filled = Array.fill(grid.length)(0L)\n\
    \        var count = 0L\n        for (i <- 0 until grid.length) {\n          \
    \  val row = grid(i)\n            var sum = 0L\n            for (j <- 0 until\
    \ row.length) {\n                sum += row(j)\n                if (sum > capacity)\
    \ {\n                    count += 1\n                    filled(i) = sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        for (i <- 0 until grid.length) {\n            val row = grid(i)\n\
    \            var sum = filled(i)\n            for (j <- 0 until row.length) {\n\
    \                sum += row(j)\n                if (sum > capacity) {\n      \
    \              count += 1\n                    sum = capacity\n              \
    \  }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpecy2hdx7.scala:48)\n\tat Problem.main(tmpecy2hdx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (i == 0) maxFill(i)(j)\
    \ = grid(i)(j)\n                else maxFill(i)(j) = maxFill(i - 1)(j) + grid(i)(j)\n\
    \            }\n        }\n        var count = 0L\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                if (maxFill(i)(j) >=\
    \ capacity) {\n                    count += maxFill(i)(j) / capacity\n       \
    \             maxFill(i)(j) = maxFill(i)(j) % capacity\n                }\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hnv0m0k.scala:41)\n\tat Problem.main(tmp0hnv0m0k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    if (i > 0)\
    \ {\n                        maxFill(i)(j) = min(maxFill(i)(j), maxFill(i - 1)(j)\
    \ + capacity)\n                    }\n                    if (j > 0) {\n     \
    \                   maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                    }\n                }\n            }\n        }\n        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until m)\
    \ {\n                if (grid(i)(j) == 1) {\n                    result = max(result,\
    \ maxFill(i)(j))\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpchbpde58.scala:53)\n\tat Problem.main(tmpchbpde58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 1 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (grid(i)(j) == 1) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i - 1)(j) + capacity)\n                }\n    \
    \        }\n        }\n        for (i <- n - 2 to 0 by -1) {\n            for\
    \ (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n               \
    \     maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j) + capacity)\n     \
    \           }\n            }\n        }\n        for (i <- 0 until n) {\n    \
    \        for (j <- 1 until m) {\n                if (grid(i)(j) == 1) {\n    \
    \                maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1) + capacity)\n\
    \                }\n            }\n        }\n        for (i <- 0 until n) {\n\
    \            for (j <- m - 2 to 0 by -1) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j +\
    \ 1) + capacity)\n                }\n            }\n        }\n        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until m) {\n \
    \               if (grid(i)(j) == 1) {\n                    result += capacity\
    \ - maxFill(i)(j)\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr93unkys.scala:69)\n\tat Problem.main(tmpr93unkys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978553
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // The number of times you need to lower\
    \ the buckets is the number of times you need to fill the buckets.\n        //\
    \ The number of times you need to fill the buckets is the sum of the number of\
    \ times you need to fill each bucket.\n        // The number of times you need\
    \ to fill each bucket is the number of units of water in the bucket divided by\
    \ the capacity of the bucket.\n        // The number of units of water in the\
    \ bucket is the sum of the number of units of water in each well.\n        //\
    \ The number of units of water in each well is the number of 1s in the well.\n\
    \        grid.map(x => x.sum).sum / capacity\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwgvwukbb.scala:29)\n\tat Problem.main(tmpwgvwukbb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n + 1, m + 1)\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i + 1)(j + 1) = dp(i)(j\
    \ + 1) + dp(i + 1)(j) - dp(i)(j) + grid(i)(j)\n            }\n        }\n    \
    \    var result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0\
    \ until m) {\n                for (k <- i + 1 to n) {\n                    for\
    \ (l <- j + 1 to m) {\n                        val total = dp(k)(l) - dp(i)(l)\
    \ - dp(k)(j) + dp(i)(j)\n                        if (total <= capacity) result\
    \ = max(result, total)\n                    }\n                }\n           \
    \ }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkdyo25fj.scala:42)\n\tat Problem.main(tmpkdyo25fj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        def fill(grid : List[List[Long]], capacity\
    \ : Long, count : Long) : Long = {\n            if (grid.forall(row => row.forall(_\
    \ == 0))) return count\n            val max = grid.map(row => row.sum).max\n \
    \           if (max <= capacity) return count + max\n            val filled =\
    \ grid.map(row => row.map(cell => min(cell, capacity)))\n            val remaining\
    \ = grid.zip(filled).map(pair => pair._1.zip(pair._2).map(pair => pair._1 - pair._2))\n\
    \            fill(remaining, capacity, count + capacity)\n        }\n        fill(grid,\
    \ capacity, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_yyrep3n.scala:31)\n\tat Problem.main(tmp_yyrep3n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n\
    \            for (j <- m - 1 to 0 by -1) {\n                if (i < n - 1) {\n\
    \                    maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n \
    \               }\n                if (j < m - 1) {\n                    maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i)(j + 1))\n                }\n            }\n\
    \        }\n        var ans = 0L\n        for (i <- 0 until n) {\n           \
    \ for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n           \
    \         ans += capacity - maxFill(i)(j)\n                }\n            }\n\
    \        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeeoj9om3.scala:62)\n\tat Problem.main(tmpeeoj9om3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val buckets = new Array[Long](m)\n        var count = 0L\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until m) {\n                if (grid(i)(j)\
    \ == 1) {\n                    if (buckets(j) < capacity) {\n                \
    \        buckets(j) += 1\n                        count += 1\n               \
    \     }\n                }\n            }\n        }\n        return count\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaqbtym9p.scala:37)\n\tat Problem.main(tmpaqbtym9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var sum = 0L\n            for (j <- 0 until grid(i).length)\
    \ {\n                sum += grid(i)(j)\n            }\n            if (sum > capacity)\
    \ {\n                result += sum - capacity\n            }\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvihu49jy.scala:33)\n\tat Problem.main(tmpvihu49jy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n + 1, m + 1)\n        for (i <- 0 until n)\
    \ {\n            for (j <- 0 until m) {\n                dp(i + 1)(j + 1) = dp(i)(j\
    \ + 1) + dp(i + 1)(j) - dp(i)(j) + grid(i)(j)\n            }\n        }\n    \
    \    var result = 0L\n        for (i <- 0 until n) {\n            for (j <- 0\
    \ until m) {\n                for (k <- i + 1 to n) {\n                    for\
    \ (l <- j + 1 to m) {\n                        val sum = dp(k)(l) - dp(i)(l) -\
    \ dp(k)(j) + dp(i)(j)\n                        if (sum <= capacity) result = max(result,\
    \ sum)\n                    }\n                }\n            }\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2krqpyi.scala:42)\n\tat Problem.main(tmpu2krqpyi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(x => x.sum).max\n\
    \        if (maxFill <= capacity) return 1\n        val numRows = grid.length\n\
    \        val numCols = grid(0).length\n        val numBuckets = min(numRows, numCols)\n\
    \        val buckets = Array.fill(numBuckets)(capacity)\n        var numTimes\
    \ = 0\n        while (buckets.exists(_ > 0)) {\n            numTimes += 1\n  \
    \          for (i <- 0 until numRows) {\n                for (j <- 0 until numCols)\
    \ {\n                    if (buckets(i) > 0 && grid(i)(j) > 0) {\n           \
    \             val amount = min(buckets(i), grid(i)(j))\n                     \
    \   buckets(i) -= amount\n                        grid(i)(j) -= amount\n     \
    \               }\n                }\n            }\n        }\n        numTimes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwthhnknv.scala:34:35 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                        grid(i)(j) -= amount\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           value -= is not a member of Long - did you mean Long.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var max = 0L\n        for (i <- 0 until n) {\n            var sum = 0L\n\
    \            for (j <- 0 until m) {\n                sum += grid(i)(j)\n     \
    \           if (sum > capacity) {\n                    max += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzkrjdzdj.scala:36)\n\tat Problem.main(tmpzkrjdzdj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum > capacity) {\n                    result += sum - capacity\n\
    \                    sum = capacity\n                }\n            }\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0qwdylz.scala:36)\n\tat Problem.main(tmpr0qwdylz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // Fill each well to capacity.\n      \
    \  // If the well is already at capacity, then skip it.\n        // If the well\
    \ is not at capacity, then fill it.\n        // If the well is over capacity,\
    \ then fill it to capacity.\n        // If the well is not at capacity, then fill\
    \ it.\n        // If the well is over capacity, then fill it to capacity.\n  \
    \      // If the well is not at capacity, then fill it.\n        // If the well\
    \ is over capacity, then fill it to capacity.\n        // If the well is not at\
    \ capacity, then fill it.\n        // If the well is over capacity, then fill\
    \ it to capacity.\n        // If the well is not at capacity, then fill it.\n\
    \        // If the well is over capacity, then fill it to capacity.\n        //\
    \ If the well is not at capacity, then fill it.\n        // If the well is over\
    \ capacity, then fill it to capacity.\n        // If the well is not at capacity,\
    \ then fill it.\n        // If the well is over capacity, then fill it to capacity.\n\
    \        // If the well is not at capacity, then fill it.\n        // If the well\
    \ is over capacity, then fill it to capacity.\n        // If the well is not at\
    \ capacity, then fill it.\n        // If the well is over capacity, then fill\
    \ it to capacity.\n        // If the well is not at capacity, then fill it.\n\
    \        // If the well is over capacity, then fill it to capacity.\n        //\
    \ If the well is not at capacity, then fill it.\n        // If the well is over\
    \ capacity, then fill it to capacity.\n        // If the well is not at capacity,\
    \ then fill it.\n        // If the well is over capacity, then fill it to capacity.\n\
    \        // If the well is not at capacity, then fill it.\n        // If the well\
    \ is over capacity, then fill it to capacity.\n        // If the well is not at\
    \ capacity, then fill it.\n        // If the well is over capacity, then fill\
    \ it to capacity.\n        // If the well is not at capacity, then fill it.\n\
    \        // If the well is over capacity, then fill it to capacity.\n        //\
    \ If the well is not at capacity, then fill it.\n        // If the well is over\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidz2os1u.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// Fill each well to capacity.\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// If the well is already at capacity, then skip it.\e[0m\n\
    \e[31m22 |\e[0m        \e[34m// If the well is not at capacity, then fill it.\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// If the well is over capacity, then fill it\
    \ to capacity.\e[0m\n\e[31m24 |\e[0m        \e[34m// If the well is not at capacity,\
    \ then fill it.\e[0m\n\e[31m25 |\e[0m        \e[34m// If the well is over capacity,\
    \ then fill it to capacity.\e[0m\n\e[31m26 |\e[0m        \e[34m// If the well\
    \ is not at capacity, then fill it.\e[0m\n\e[31m27 |\e[0m        \e[34m// If the\
    \ well is over capacity, then fill it to capacity.\e[0m\n\e[31m28 |\e[0m     \
    \   \e[34m// If the well is not at capacity, then fill it.\e[0m\n\e[31m29 |\e\
    [0m        \e[34m// If the well is over capacity, then fill it to capacity.\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// If the well is not at capacity, then fill\
    \ it.\e[0m\n\e[31m31 |\e[0m        \e[34m// If the well is over capacity, then\
    \ fill it to capacity.\e[0m\n\e[31m32 |\e[0m        \e[34m// If the well is not\
    \ at capacity, then fill it.\e[0m\n\e[31m33 |\e[0m        \e[34m// If the well\
    \ is over capacity, then fill it to capacity.\e[0m\n\e[31m34 |\e[0m        \e\
    [34m// If the well is not at capacity, then fill it.\e[0m\n\e[31m35 |\e[0m   \
    \     \e[34m// If the well is over capacity, then fill it to capacity.\e[0m\n\e\
    [31m36 |\e[0m        \e[34m// If the well is not at capacity, then fill it.\e\
    [0m\n\e[31m37 |\e[0m        \e[34m// If the well is over capacity, then fill it\
    \ to capacity.\e[0m\n\e[31m38 |\e[0m        \e[34m// If the"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.max).max\n\
    \        val maxFillCount = grid.map(row => row.count(_ == maxFill)).max\n   \
    \     val minFill = grid.map(row => row.min).min\n        val minFillCount = grid.map(row\
    \ => row.count(_ == minFill)).max\n        val fillCount = grid.map(row => row.count(_\
    \ == maxFill)).sum\n        val fillCount2 = grid.map(row => row.count(_ == minFill)).sum\n\
    \        val fillCount3 = grid.map(row => row.count(_ == maxFill - 1)).sum\n \
    \       val fillCount4 = grid.map(row => row.count(_ == minFill + 1)).sum\n  \
    \      val fillCount5 = grid.map(row => row.count(_ == maxFill - 2)).sum\n   \
    \     val fillCount6 = grid.map(row => row.count(_ == minFill + 2)).sum\n    \
    \    val fillCount7 = grid.map(row => row.count(_ == maxFill - 3)).sum\n     \
    \   val fillCount8 = grid.map(row => row.count(_ == minFill + 3)).sum\n      \
    \  val fillCount9 = grid.map(row => row.count(_ == maxFill - 4)).sum\n       \
    \ val fillCount10 = grid.map(row => row.count(_ == minFill + 4)).sum\n       \
    \ val fillCount11 = grid.map(row => row.count(_ == maxFill - 5)).sum\n       \
    \ val fillCount12 = grid.map(row => row.count(_ == minFill + 5)).sum\n       \
    \ val fillCount13 = grid.map(row => row.count(_ == maxFill - 6)).sum\n       \
    \ val fillCount14 = grid.map(row => row.count(_ == minFill + 6)).sum\n       \
    \ val fillCount15 = grid.map(row => row.count(_ == maxFill - 7)).sum\n       \
    \ val fillCount16 = grid.map(row => row.count(_ == minFill + 7)).sum\n       \
    \ val fillCount17 = grid.map(row => row.count(_ == maxFill - 8)).sum\n       \
    \ val fillCount18 = grid.map(row => row.count(_ == minFill + 8)).sum\n       \
    \ val fillCount19 =\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3tls7hh3.scala:42:25 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mfillCount19\e[0m =\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3tls7hh3.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val rows = grid.length\n        val cols\
    \ = grid(0).length\n        val maxFill = Array.ofDim[Long](rows, cols)\n    \
    \    for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n      \
    \          if (grid(i)(j) == 1) {\n                    val maxFillAbove = if (i\
    \ == 0) 0 else maxFill(i - 1)(j)\n                    val maxFillLeft = if (j\
    \ == 0) 0 else maxFill(i)(j - 1)\n                    maxFill(i)(j) = max(maxFillAbove,\
    \ maxFillLeft) + 1\n                }\n            }\n        }\n        var result\
    \ = 0L\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols)\
    \ {\n                if (grid(i)(j) == 1) {\n                    val maxFillAbove\
    \ = if (i == 0) 0 else maxFill(i - 1)(j)\n                    val maxFillLeft\
    \ = if (j == 0) 0 else maxFill(i)(j - 1)\n                    val maxFill = max(maxFillAbove,\
    \ maxFillLeft) + 1\n                    result += maxFill / capacity\n       \
    \             if (maxFill % capacity != 0) result += 1\n                }\n  \
    \          }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp82twwx_.scala:38:38 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33mval\e[0m \e[36mmaxFill\e[0m\
    \ = max(maxFillAbove, maxFillLeft) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \             Recursive \e[33mvalue\e[0m \e[35mmaxFillAbove\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    maxFill(i)(j) = capacity\n                }\n           \
    \ }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ m) {\n                if (i > 0) {\n                    maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i - 1)(j))\n                }\n                if (j > 0) {\n      \
    \              maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j - 1))\n       \
    \         }\n            }\n        }\n        var result = 0L\n        for (i\
    \ <- n - 1 to 0 by -1) {\n            for (j <- m - 1 to 0 by -1) {\n        \
    \        if (grid(i)(j) == 1) {\n                    if (i < n - 1) {\n      \
    \                  maxFill(i)(j) = min(maxFill(i)(j), maxFill(i + 1)(j))\n   \
    \                 }\n                    if (j < m - 1) {\n                  \
    \      maxFill(i)(j) = min(maxFill(i)(j), maxFill(i)(j + 1))\n               \
    \     }\n                    result += maxFill(i)(j)\n                }\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ynbcrcd.scala:57)\n\tat Problem.main(tmp1ynbcrcd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        // grid.map(row => row.map(x => if (x ==\
    \ 1) capacity else 0))\n        // grid.map(row => row.map(x => if (x == 1) capacity\
    \ else 0))\n        // grid.map(row => row.map(x => if (x == 1) capacity else\
    \ 0))\n        // grid.map(row => row.map(x => if (x == 1) capacity else 0))\n\
    \        // grid.map(row => row.map(x => if (x == 1) capacity else 0))\n     \
    \   // grid.map(row => row.map(x => if (x == 1) capacity else 0))\n        //\
    \ grid.map(row => row.map(x => if (x == 1) capacity else 0))\n        // grid.map(row\
    \ => row.map(x => if (x == 1) capacity else 0))\n        // grid.map(row => row.map(x\
    \ => if (x == 1) capacity else 0))\n        // grid.map(row => row.map(x => if\
    \ (x == 1) capacity else 0))\n        // grid.map(row => row.map(x => if (x ==\
    \ 1) capacity else 0))\n        // grid.map(row => row.map(x => if (x == 1) capacity\
    \ else 0))\n        // grid.map(row => row.map(x => if (x == 1) capacity else\
    \ 0))\n        // grid.map(row => row.map(x => if (x == 1) capacity else 0))\n\
    \        // grid.map(row => row.map(x => if (x == 1) capacity else 0))\n     \
    \   // grid.map(row => row.map(x => if (x == 1) capacity else 0))\n        //\
    \ grid.map(row => row.map(x => if (x == 1) capacity else 0))\n        // grid.map(row\
    \ => row.map(x => if (x == 1) capacity else 0))\n        // grid.map(row => row.map(x\
    \ => if (x == 1) capacity else 0))\n        // grid.map(row => row.map(x => if\
    \ (x == 1) capacity else 0))\n        // grid.map(row => row.map\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ere11qj.scala:19:67\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    \e[33mdef\e[0m \e[36mmaxFill\e\
    [0m(\e[36mgrid\e[0m : \e[35mList\e[0m[\e[35mList\e[0m[\e[35mLong\e[0m]], \e[36mcapacity\e\
    [0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m          \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                          Found:    Unit\n\e\
    [31m   |\e[0m                                                          Required:\
    \ Long\n\e[31m20 |\e[0m        \e[34m// grid.map(row => row.map(x => if (x ==\
    \ 1) capacity else 0))\e[0m\n\e[31m21 |\e[0m        \e[34m// grid.map(row => row.map(x\
    \ => if (x == 1) capacity else 0))\e[0m\n\e[31m22 |\e[0m        \e[34m// grid.map(row\
    \ => row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m23 |\e[0m        \e\
    [34m// grid.map(row => row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m24\
    \ |\e[0m        \e[34m// grid.map(row => row.map(x => if (x == 1) capacity else\
    \ 0))\e[0m\n\e[31m25 |\e[0m        \e[34m// grid.map(row => row.map(x => if (x\
    \ == 1) capacity else 0))\e[0m\n\e[31m26 |\e[0m        \e[34m// grid.map(row =>\
    \ row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ grid.map(row => row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m28 |\e\
    [0m        \e[34m// grid.map(row => row.map(x => if (x == 1) capacity else 0))\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// grid.map(row => row.map(x => if (x == 1)\
    \ capacity else 0))\e[0m\n\e[31m30 |\e[0m        \e[34m// grid.map(row => row.map(x\
    \ => if (x == 1) capacity else 0))\e[0m\n\e[31m31 |\e[0m        \e[34m// grid.map(row\
    \ => row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m32 |\e[0m        \e\
    [34m// grid.map(row => row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m33\
    \ |\e[0m        \e[34m// grid.map(row => row.map(x => if (x == 1) capacity else\
    \ 0))\e[0m\n\e[31m34 |\e[0m        \e[34m// grid.map(row => row.map(x => if (x\
    \ == 1) capacity else 0))\e[0m\n\e[31m35 |\e[0m        \e[34m// grid.map(row =>\
    \ row.map(x => if (x == 1) capacity else 0))\e[0m\n\e[31m36 |\e[0m        \e[34m//\
    \ grid.map(row => row.ma"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val height = grid.length\n        val width\
    \ = grid(0).length\n        val maxFill = Array.fill(height, width)(0L)\n    \
    \    for (i <- 0 until height) {\n            for (j <- 0 until width) {\n   \
    \             if (grid(i)(j) == 1) {\n                    maxFill(i)(j) = capacity\n\
    \                }\n            }\n        }\n        for (i <- 0 until height)\
    \ {\n            for (j <- 0 until width) {\n                if (grid(i)(j) ==\
    \ 1) {\n                    if (i > 0) {\n                        maxFill(i)(j)\
    \ = min(maxFill(i)(j), maxFill(i - 1)(j) + capacity)\n                    }\n\
    \                    if (j > 0) {\n                        maxFill(i)(j) = min(maxFill(i)(j),\
    \ maxFill(i)(j - 1) + capacity)\n                    }\n                }\n  \
    \          }\n        }\n        maxFill(height - 1)(width - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b7u9o4m.scala:45)\n\tat Problem.main(tmp2b7u9o4m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                if (i == 0) {\n           \
    \         dp(i)(j) = grid(i)(j)\n                } else {\n                  \
    \  dp(i)(j) = dp(i - 1)(j) + grid(i)(j)\n                }\n            }\n  \
    \      }\n        var result = 0L\n        for (i <- 0 until n) {\n          \
    \  for (j <- 0 until m) {\n                if (dp(i)(j) > capacity) {\n      \
    \              result += dp(i)(j) - capacity\n                    dp(i)(j) = capacity\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvlujb4by.scala:44)\n\tat Problem.main(tmpvlujb4by.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var maxFill = 0L\n        for (row <- grid)\
    \ {\n            var fill = 0L\n            for (well <- row) {\n            \
    \    if (well == 1) fill += 1\n                else {\n                    maxFill\
    \ = max(maxFill, fill)\n                    fill = 0\n                }\n    \
    \        }\n            maxFill = max(maxFill, fill)\n        }\n        maxFill\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcnqs36z.scala:35)\n\tat Problem.main(tmpdcnqs36z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        maxFill / capacity + (if (maxFill % capacity == 0) 0 else 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwudi1wmu.scala:24)\n\tat Problem.main(tmpwudi1wmu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var result = 0L\n        for (i <- 0 until n) {\n            var sum\
    \ = 0L\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n\
    \                if (sum == capacity) {\n                    result += 1\n   \
    \                 sum = 0\n                } else if (sum > capacity) {\n    \
    \                result += 1\n                    sum = grid(i)(j)\n         \
    \       }\n            }\n            if (sum > 0) result += 1\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978479
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                if (grid(i)(j) == 1) {\n\
    \                    if (i == 0) maxFill(i)(j) = capacity\n                  \
    \  else maxFill(i)(j) = maxFill(i - 1)(j) + capacity\n                }\n    \
    \            else {\n                    if (i == 0) maxFill(i)(j) = 0\n     \
    \               else maxFill(i)(j) = maxFill(i - 1)(j)\n                }\n  \
    \          }\n        }\n        val min = maxFill.map(x => x.min).min\n     \
    \   maxFill.map(x => x.map(y => y - min).sum).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg1np83og.scala:39)\n\tat Problem.main(tmpg1np83og.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n   \
    \             if (i > 0) dp(i)(j) = max(dp(i)(j), dp(i - 1)(j))\n            \
    \    if (j > 0) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n            }\n      \
    \  }\n        var result = 0L\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until m) {\n                val fill = capacity - dp(i)(j)\n       \
    \         if (fill > 0) {\n                    result += fill\n              \
    \      dp(i)(j) += fill\n                    if (i > 0) dp(i - 1)(j) = max(dp(i\
    \ - 1)(j), dp(i)(j))\n                    if (j > 0) dp(i)(j - 1) = max(dp(i)(j\
    \ - 1), dp(i)(j))\n                }\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5_a3_27.scala:45)\n\tat Problem.main(tmpn5_a3_27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978480
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val dp = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until m) {\n                dp(i)(j) = grid(i)(j)\n   \
    \             if (i > 0) dp(i)(j) = max(dp(i)(j), dp(i - 1)(j))\n            \
    \    if (j > 0) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n            }\n      \
    \  }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until m) {\n                val fill = capacity - dp(i)(j)\n          \
    \      if (fill > 0) {\n                    ans += fill\n                    dp(i)(j)\
    \ += fill\n                    if (i > 0) dp(i - 1)(j) = max(dp(i - 1)(j), dp(i)(j))\n\
    \                    if (j > 0) dp(i)(j - 1) = max(dp(i)(j - 1), dp(i)(j))\n \
    \               }\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbd_73n3s.scala:45)\n\tat Problem.main(tmpbd_73n3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var fill = 0L\n        for (i <- 0 until\
    \ grid.length) {\n            var row = grid(i)\n            var count = 0L\n\
    \            for (j <- 0 until row.length) {\n                if (row(j) == 1)\
    \ count += 1\n            }\n            fill += ceil(count / capacity).toLong\n\
    \        }\n        fill\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphy4_ri0a.scala:33)\n\tat Problem.main(tmphy4_ri0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978559
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        val numBuckets = maxFill / capacity\n        val remainder = maxFill\
    \ % capacity\n        if (remainder == 0) numBuckets else numBuckets + 1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpim95itbv.scala:26)\n\tat Problem.main(tmpim95itbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        var count = 0\n        var max = 0\n  \
    \      for (i <- 0 until grid.length) {\n            var sum = 0\n           \
    \ for (j <- 0 until grid(i).length) {\n                sum += grid(i)(j)\n   \
    \         }\n            if (sum > max) max = sum\n        }\n        for (i <-\
    \ 0 until grid.length) {\n            var sum = 0\n            for (j <- 0 until\
    \ grid(i).length) {\n                sum += grid(i)(j)\n            }\n      \
    \      if (sum < max) {\n                count += (max - sum)\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcqrmun0o.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcqrmun0o.scala:32:20 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            var sum =\
    \ 0\n            for (j <- 0 until m) {\n                sum += grid(i)(j)\n \
    \               if (sum > capacity) {\n                    count += sum / capacity\n\
    \                    sum %= capacity\n                }\n            }\n     \
    \       count += sum / capacity\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\
    \ == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong),\
    \ List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx52t14ey.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                sum += grid(i)(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx52t14ey.scala:28:26 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m                    count += sum / capacity\n\e[31m\e[31m   |\e[0m        \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx52t14ey.scala:29:24 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                    sum %= capacity\n\e[31m\e[31m   |\e[0m                \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value %= is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx52t14ey.scala:32:18\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            count += sum\
    \ / capacity\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of Int - did you mean Int.!=?\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val maxFill = grid.map(row => row.sum).max\n\
    \        if (maxFill <= capacity) 1\n        else {\n            val numBuckets\
    \ = maxFill / capacity\n            if (maxFill % capacity == 0) numBuckets\n\
    \            else numBuckets + 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo49a0y4g.scala:29)\n\tat Problem.main(tmpo49a0y4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n    // and each 1 in a row represents a single unit of water.\n    //\
    \ Each well has a corresponding bucket that can be used to extract water from\
    \ it, \n    // and all buckets have the same capacity.\n    // Your task is to\
    \ use the buckets to empty the wells.\n    // Output the number of times you need\
    \ to lower the buckets.\n    // Example 1:\n    // Example 2:\n    // Example\
    \ 3:\n    // Constraints:\n    // * all wells have the same length\n    // * 1\
    \ <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
    \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]],\
    \ capacity : Long) : Long = {\n        val n = grid.length\n        val m = grid(0).length\n\
    \        val maxFill = Array.ofDim[Long](n, m)\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until m) {\n                maxFill(i)(j) = grid(i)(j)\n\
    \                if (i > 0) maxFill(i)(j) = max(maxFill(i)(j), maxFill(i - 1)(j))\n\
    \                if (j > 0) maxFill(i)(j) = max(maxFill(i)(j), maxFill(i)(j -\
    \ 1))\n            }\n        }\n        var result = 0L\n        for (i <- 0\
    \ until n) {\n            for (j <- 0 until m) {\n                val fill = maxFill(i)(j)\n\
    \                if (fill > 0) {\n                    result += 1\n          \
    \          var x = i\n                    var y = j\n                    while\
    \ (x >= 0 && y >= 0) {\n                        val fill = maxFill(x)(y)\n   \
    \                     if (fill > 0) {\n                            maxFill(x)(y)\
    \ -= capacity\n                            if (maxFill(x)(y) < 0) maxFill(x)(y)\
    \ = 0\n                        }\n                        x -= 1\n           \
    \             y -= 1\n                    }\n                }\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong,\
    \ 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\
    \ == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))),\
    \ (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp918j1kf2.scala:53)\n\tat Problem.main(tmp918j1kf2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978561
