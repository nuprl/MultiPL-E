name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    def vowelsCount(s\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y =\
    \ 'y'\n        var count = 0\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ count += 1\n        }\n        if (s.last == y) count += 1\n        count",
  '        s.filter(x => "aeiouy".contains(x)).length', "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val yEnd = Set('y', '\
    \ ')\n        val yEndCount = s.count(yEnd)\n        val yCount = s.count(y)\n\
    \        val vowelCount = s.count(vowels)\n        val yEndVowelCount = yEndCount\
    \ - yCount\n        vowelCount + yEndVowelCount", "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", '        s.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1\
    \ else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ last = s.last\n        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", '        s.filter(x
    => "aeiouy".contains(x)).length', "        val vowels = \"aeiouy\"\n        s.filter(c\
    \ => vowels.contains(c)).length", '        s.filter(x => "aeiouy".contains(x)).length',
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n            if (s(i) == 'y' && i != s.length - 1) count += 1\n        }\n\
    \        count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n       \
    \ val last = s.last\n        val count = s.count(vowels.contains(_))\n       \
    \ if (vowels.contains(last)) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        s.foldLeft(0L)((acc,\
    \ c) => if (vowels.contains(c)) acc + 1 else if (y.contains(c) && s.indexOf(c)\
    \ == s.length - 1) acc + 1 else acc)", '        s.filter(c => "aeiouy".contains(c)).length',
  '        s.filter(c => "aeiouy".contains(c)).length', "        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        if (vowels.contains(last))\
    \ s.filter(vowels.contains(_)).length + 1\n        else s.filter(vowels.contains(_)).length",
  '        s.filter(c => "aeiouy".contains(c)).length', '        s.filter(c => "aeiouy".contains(c)).length',
  '        s.filter(c => "aeiouy".contains(c)).length', '        s.filter(c => "aeiouy".contains(c)).length',
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n \
    \       val last = s.last\n        val result = s.filter(vowels.contains(_)).size\n\
    \        if (y.contains(last)) result + 1 else result", "        val vowels =\
    \ Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        s.toLowerCase.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o'\
    \ || x == 'u' || x == 'y').length", "        var count = 0\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i'\
    \ || s(i) == 'o' || s(i) == 'u') count += 1\n            if (s(i) == 'y' && i\
    \ == s.length - 1) count += 1\n        }\n        return count", "        val\
    \ vowels = \"aeiouy\"\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i)\
    \ == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n          \
    \  if (s(i) == 'y' && i != s.length - 1) count += 1\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n            if (s(i) == 'y' && i == s.length - 1) count += 1\n        }\n\
    \        return count", '        s.filter(c => "aeiouy".contains(c)).length',
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n            if (s(i) == 'y' && i != s.length - 1) count += 1\n        }\n\
    \        return count", "        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o'\
    \ || s(i) == 'u') {\n                count += 1\n            }\n            if\
    \ (s(i) == 'y' && i == s.length - 1) {\n                count += 1\n         \
    \   }\n        }\n        return count", '        s.filter(c => "aeiouy".contains(c)).length',
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        s.filter(vowels.contains(_)).length + (if (vowels.contains(last)) 1 else\
    \ 0)", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val y = 'y'\n\
    \        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (vowels.contains(s(i))) count += 1\n        }\n        if (s.last == y) count\
    \ += 1\n        count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val vowelsWithY = vowels + 'y'\n   \
    \     val lastChar = s.last\n        val isLastCharY = lastChar == 'y'\n     \
    \   val vowelsInS = s.filter(c => vowelsWithY.contains(c))\n        val vowelsInSWithoutLastChar\
    \ = if (isLastCharY) vowelsInS.dropRight(1) else vowelsInS\n        vowelsInSWithoutLastChar.filter(c\
    \ => vowels.contains(c)).size + (if (isLastCharY) 1 else 0)", '        s.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val y = Set('y')\n        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (vowels.contains(s(i))) count += 1\n           \
    \ else if (y.contains(s(i)) && i == s.length - 1) count += 1\n        }\n    \
    \    count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y\
    \ = Set('y')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.count(vowels.contains(_))\
    \ + (if (vowels.contains(last)) 1 else 0)", '        s.filter(c => "aeiouy".contains(c)).length',
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        // Write your code here.\n        s.filter(c\
    \ => \"aeiouy\".contains(c)).length", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n        val\
    \ count = s.filter(vowels.contains(_)).size\n        if (y.contains(last)) count\
    \ + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n      \
    \  val y = Set('y')\n        val last = s.last\n        val y_last = y.contains(last)\n\
    \        val y_count = if (y_last) 1 else 0\n        val vowel_count = s.filter(vowels.contains(_)).length\n\
    \        vowel_count + y_count", "        val vowels = List('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val lastChar = s.last\n        val\
    \ isLastCharVowel = vowels.contains(lastChar)\n        val count = s.count(vowels.contains(_))\n\
    \        if (isLastCharVowel) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels)\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last =\
    \ s.last\n        val count = s.filter(vowels.contains(_)).length\n        if\
    \ (y.contains(last)) count + 1 else count", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        // Write your\
    \ code here\n        return 0", '        s.count(c => "aeiouy".contains(c))',
  "        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y').length", "        val vowels = \"aeiouy\"\n        s.filter(vowels.contains(_)).length",
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = s.filter(vowels.contains(_)).length\n\
    \        if (s.last == 'y') vowelsCount + 1 else vowelsCount", "        s.toLowerCase.filter(x\
    \ => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y').length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n \
    \       val yEnd = Set('y', ' ')\n        val last = s.last\n        val lastIsY\
    \ = y.contains(last)\n        val lastIsYEnd = yEnd.contains(last)\n        val\
    \ lastIsVowel = vowels.contains(last)\n        val lastIsNotVowel = !lastIsVowel\n\
    \        val lastIsNotY = !lastIsY\n        val lastIsNotYEnd = !lastIsYEnd\n\
    \        val lastIsNotVowelAndNotY = lastIsNotVowel && lastIsNotY\n        val\
    \ lastIsNotVowelAndNotYEnd = lastIsNotVowel && lastIsNotYEnd\n        val lastIsVowelAndNotY\
    \ = lastIsVowel && lastIsNotY\n        val lastIsVowelAndNotYEnd = lastIsVowel\
    \ && lastIsNotYEnd\n        val lastIsVowelAndY = lastIsVowel && lastIsY\n   \
    \     val lastIsVowelAndYEnd = lastIsVowel && lastIsYEnd\n        val lastIsNotVowelAndY\
    \ = lastIsNotVowel && lastIsY\n        val lastIsNotVowelAndYEnd = lastIsNotVowel\
    \ && lastIsYEnd\n        val lastIsVowelAndYAndNotYEnd = lastIsVowelAndY && lastIsNotYEnd\n\
    \        val lastIsNotVowelAndYAndNotYEnd = lastIsNotVowelAndY && lastIsNotYEnd\n\
    \        val lastIsVowelAndYAndYEnd = lastIsVowelAndY && lastIsYEnd\n        val\
    \ lastIsNotVowelAndYAndYEnd = lastIsNotVowelAndY && lastIsYEnd\n        val lastIsVowelAndNotYAndNotYEnd\
    \ = lastIsVowelAndNotY && lastIsNotYEnd\n        val lastIsNotVowelAndNotYAndNotYEnd\
    \ = lastIsNotVowelAndNotY && lastIsNotYEnd\n        val lastIsVowelAndNotYAndY",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            count += 1\n            }\n            if (s(i) == 'y' && i == s.length\
    \ - 1) {\n                count += 1\n            }\n        }\n        return\
    \ count", "        s.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o'\
    \ || x == 'u' || (x == 'y' && s.indexOf(x) == s.length - 1)).length", "      \
    \  var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n    \
    \            count += 1\n            }\n            if (s(i) == 'y' && i == s.length\
    \ - 1) {\n                count += 1\n            }\n        }\n        return\
    \ count", "        var count = 0\n        for (c <- s) {\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count\
    \ += 1\n            }\n        }\n        if (s.last == 'y') {\n            count\
    \ += 1\n        }\n        return count", "        s.filter(c => c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val\
    \ last = s.last\n        val count = s.count(vowels.contains(_))\n        if (y.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val y = Set('y')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n \
    \       val y_count = if (y.contains(last)) 1 else 0\n        val vowels_count\
    \ = s.filter(vowels.contains(_)).length\n        vowels_count + y_count", "  \
    \      // Fill in the code here\n        val vowels = List('a', 'e', 'i', 'o',\
    \ 'u')\n        val count = s.toList.filter(vowels.contains(_)).length\n     \
    \   if (s.last == 'y') count + 1 else count", "        s.filter(c => c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", "    \
    \    val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n      \
    \  for (i <- 0 until s.length) {\n            if (vowels.contains(s(i))) {\n \
    \               count += 1\n            }\n        }\n        if (s.length > 1\
    \ && s(s.length - 1) == 'y') {\n            count += 1\n        }\n        count",
  '        s.filter(c => "aeiouy".contains(c)).length', "        val vowels = \"aeiouy\"\
    \n        val last = s.length - 1\n        s.zipWithIndex.map(x => if (vowels.contains(x._1))\
    \ 1 else 0).sum + (if (vowels.contains(s(last))) 1 else 0)", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last)) count\
    \ + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n      \
    \  val ys = s.filter(_ == 'y')\n        val ysCount = if (ys.length == s.length)\
    \ ys.length else 0\n        s.filter(vowels.contains(_)).length + ysCount", " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val vowels_y = Set('a',\
    \ 'e', 'i', 'o', 'u', 'y')\n        val last = s.last\n        if (vowels_y.contains(last))\
    \ {\n            s.filter(vowels_y.contains(_)).length\n        } else {\n   \
    \         s.filter(vowels.contains(_)).length\n        }", '        s.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val yEnd =\
    \ Set('y', ' ')\n        val yEnd2 = Set('y', ' ', '.')\n        val yEnd3 = Set('y',\
    \ ' ', '.', '!')\n        val yEnd4 = Set('y', ' ', '.', '!', '?')\n        val\
    \ yEnd5 = Set('y', ' ', '.', '!', '?', ',')\n        val yEnd6 = Set('y', ' ',\
    \ '.', '!', '?', ',', ';')\n        val yEnd7 = Set('y', ' ', '.', '!', '?', ',',\
    \ ';', ':')\n        val yEnd8 = Set('y', ' ', '.', '!', '?', ',', ';', ':', '\"\
    ')\n        val yEnd9 = Set('y', ' ', '.', '!', '?', ',', ';', ':', '\"', '\\\
    '')\n        val yEnd10 = Set('y', ' ', '.', '!', '?', ',', ';', ':', '\"', '\\\
    '', ')')\n        val yEnd11 = Set('y', ' ', '.', '!', '?', ',', ';', ':', '\"\
    ', '\\'', ')', ']')\n        val yEnd12 = Set('y', ' ', '.', '!', '?', ',', ';',\
    \ ':', '\"', '\\'', ')', ']', '}')\n        val yEnd13 = Set('y', ' ', '.', '!',\
    \ '?', ',', ';', ':', '\"', '\\'', ')', ']', '}', '\\n')\n        val yEnd14 =\
    \ Set('y', ' ', '.', '!', '?', ',', ';', ':', '\"', '\\'', ')', ']', '}', '\\\
    n', '\\r')\n        val yEnd15 = Set('y', ' ', '.', '!', '?', ',', ';', ':', '",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val y = Set('y')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        s.filter(x => x\
    \ == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y').length",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val vowelsSet = vowels.toSet\n\
    \        val lastChar = s.last\n        val isLastCharVowel = vowelsSet.contains(lastChar)\n\
    \        val isLastCharY = lastChar == 'y'\n        val isLastCharVowelOrY = isLastCharVowel\
    \ || isLastCharY\n        val lastCharIsVowel = if (isLastCharVowelOrY) 1 else\
    \ 0\n        val firstPart = s.filter(vowelsSet.contains(_)).length\n        firstPart\
    \ + lastCharIsVowel", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n   \
    \     val endVowels = Set('y')\n        val last = s.last\n        s.filter(c\
    \ => vowels.contains(c)).size + (if (endVowels.contains(last)) 1 else 0)", " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val vowelsWithY = vowels\
    \ + 'y'\n        s.filter(vowelsWithY.contains(_)).length", "        var count\
    \ = 0\n        for (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') count += 1\n        }\n        if (s.length > 1 &&\
    \ s(s.length - 1) == 'y') count += 1\n        return count", "        s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        s.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u'\
    \ || x == 'y').length", "        // Write your code here\n        val vowels =\
    \ Set('a', 'e', 'i', 'o', 'u')\n        val y = 'y'\n        var count = 0\n \
    \       for (i <- 0 until s.length) {\n            if (vowels.contains(s(i)))\
    \ count += 1\n        }\n        if (s.last == y) count += 1\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val vowelsCount = s.filter(vowels.contains(_)).length\n\
    \        if (s.last == 'y') vowelsCount + 1 else vowelsCount", "        s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        val vowels = Array('a', 'e', 'i', 'o', 'u')\n        val count = s.count(vowels.contains(_))\n\
    \        if (s.last == 'y') count + 1 else count", "        s.filter(c => c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", " \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n\
    \        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val lastChar = s.last\n\
    \        val isLastCharVowel = vowels.contains(lastChar)\n        val isLastCharY\
    \ = lastChar == 'y'\n        val isLastCharVowelOrY = isLastCharVowel || isLastCharY\n\
    \        val lastCharIsVowel = if (isLastCharVowelOrY) 1 else 0\n        val otherVowels\
    \ = s.filter(c => vowels.contains(c)).length\n        val result = otherVowels\
    \ + lastCharIsVowel\n        result", '        s.filter(c => "aeiouy".contains(c)).length',
  "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (s.last == 'y') count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val s1 = s.toLowerCase\n\
    \        val s2 = s1.toSet\n        val s3 = s2.intersect(vowels)\n        val\
    \ s4 = s2.intersect(y)\n        val s5 = s4.size\n        val s6 = s3.size\n \
    \       val s7 = s6 + s5\n        return s7", "        // Write your code here\n\
    \        0", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y\
    \ = Set('y')\n        val last = s.last\n        s.filter(vowels.contains(_)).size\
    \ + (if (y.contains(last)) 1 else 0)", "        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) ==\
    \ 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n            if (s(i) == 'y' &&\
    \ i != s.length - 1) count += 1\n        }\n        count", '        s.toLowerCase.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = List('a', 'e', 'i', 'o',\
    \ 'u')\n        val count = s.filter(vowels.contains(_)).length\n        if (s.last\
    \ == 'y') count + 1 else count", "        s.filter(x => x == 'a' || x == 'e' ||\
    \ x == 'i' || x == 'o' || x == 'u' || x == 'y').length", "        var count =\
    \ 0\n        for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i)\
    \ == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count += 1\n          \
    \  if (s(i) == 'y' && i != s.length - 1) count += 1\n        }\n        return\
    \ count", "        s.toLowerCase.filter(c => c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y').length", "        s.filter(c => c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length", "    \
    \    s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ (c == 'y' && s.last == 'y')).length", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", "        return s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        s.filter(x => x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u'\
    \ || x == 'y').length", "        // Fill in the code here\n        0", '        s.filter(c
    => "aeiouy".contains(c)).length', '        s.filter(c => "aeiouy".contains(c)).length',
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last))\
    \ count + 1 else count", '        s.filter(c => "aeiouy".contains(c)).length',
  '        s.toLowerCase.filter(c => "aeiouy".contains(c)).length', '        s.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        if (vowels.contains(last))\
    \ s.count(vowels.contains(_)) + 1\n        else s.count(vowels.contains(_))",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n \
    \       val yEnd = Set('y', ' ')\n        val vowelsCount = s.toLowerCase.filter(vowels.contains(_)).length\n\
    \        val yCount = s.toLowerCase.filter(y.contains(_)).length\n        val\
    \ yEndCount = s.toLowerCase.filter(yEnd.contains(_)).length\n        vowelsCount\
    \ + yCount - yEndCount", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  '        s.filter(c => "aeiouy".contains(c)).length', "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = s.last\n        val count = s.filter(vowels.contains(_)).size\n\
    \        if (vowels.contains(y)) count + 1 else count", '        s.filter(c =>
    "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.filter(vowels.contains(_)).size\n\
    \        if (vowels.contains(last)) count + 1 else count", "        s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' &&\
    \ s.last == 'y')).length", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val s2 =\
    \ if (vowels.contains(last)) s.init else s\n        s2.filter(vowels.contains(_)).size",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y').length", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n \
    \       val last = s.last\n        val isLastVowel = vowels.contains(last)\n \
    \       val count = s.count(vowels.contains(_))\n        if (isLastVowel) count\
    \ + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n      \
    \  var count = 0\n        for (c <- s) {\n            if (vowels.contains(c))\
    \ {\n                count += 1\n            }\n        }\n        if (s.length\
    \ > 1 && s(s.length - 1) == 'y') {\n            count += 1\n        }\n      \
    \  count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last\
    \ = s.last\n        val count = s.filter(vowels.contains(_)).size\n        if\
    \ (vowels.contains(last)) count + 1 else count", '        s.filter(c => "aeiouy".contains(c)).length',
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        s.filter(vowels.contains(_)).length + (if (vowels.contains(last)) 1 else\
    \ 0)", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n\
    \        val last = s.last\n        val y_count = if (y.contains(last)) 1 else\
    \ 0\n        val count = s.filter(vowels.contains(_)).length\n        count +\
    \ y_count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val result\
    \ = s.filter(vowels.contains(_)).length\n        if (s.last == 'y') result + 1\
    \ else result", '        s.filter(c => "aeiouy".contains(c)).length', "      \
    \  val vowels = List('a', 'e', 'i', 'o', 'u')\n        val y = 'y'\n        var\
    \ count = 0\n        for (i <- 0 until s.length) {\n            if (vowels.contains(s(i)))\
    \ count += 1\n        }\n        if (s.last == y) count += 1\n        count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n \
    \       val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        // Write your code\
    \ here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  '        ???', "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val count\
    \ = s.filter(vowels.contains(_)).length\n        if (s.last == 'y') count + 1\
    \ else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ y = Set('y')\n        val last = s.last\n        s.filter(vowels.contains(_)).size\
    \ + (if (y.contains(last)) 1 else 0)", "        val vowels = List('a', 'e', 'i',\
    \ 'o', 'u')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (vowels.contains(last)) count + 1 else count", '        s.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", "        // Write your\
    \ code here\n        0", "        s.filter(x => x == 'a' || x == 'e' || x == 'i'\
    \ || x == 'o' || x == 'u' || x == 'y').length", "        s.toLowerCase.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || (c == 'y' && s.indexOf(c) == s.length - 1)).length", "        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val y = List('y')\n        val last\
    \ = s.last\n        val lastIsY = y.contains(last)\n        val count = s.count(vowels.contains(_))\n\
    \        if (lastIsY) count + 1 else count", "        var count = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i)\
    \ == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n      \
    \      }\n            if (s(i) == 'y' && i == s.length - 1) {\n              \
    \  count += 1\n            }\n        }\n        return count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        s.filter(vowels.contains(_)).length\
    \ + (if (vowels.contains(last)) 1 else 0)", "        var count = 0\n        for\
    \ (c <- s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') count += 1\n        }\n        if (s.last == 'y') count += 1\n   \
    \     return count", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n   \
    \     val y = List('y')\n        val sList = s.toList\n        val vowelsCount\
    \ = sList.filter(vowels.contains(_)).length\n        val yCount = sList.filter(y.contains(_)).length\n\
    \        if (sList.last == 'y') vowelsCount + yCount else vowelsCount", "    \
    \    s.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ (c == 'y' && s.last == 'y')).length", "        s.filter(x => x == 'a' || x ==\
    \ 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y').length", "        s.filter(c\
    \ => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        var count = 0\n        for (c <- s) {\n            if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') count += 1\n        }\n        if (s.last\
    \ == 'y') count += 1\n        return count", "        val vowels = \"aeiouy\"\n\
    \        s.filter(vowels.contains(_)).length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count = s.count(vowels.contains(_))\n\
    \        if (vowels.contains(last)) count + 1 else count", '        s.filter(c
    => "aeiouy".contains(c)).length', "        var count = 0\n        for (i <- 0\
    \ until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i'\
    \ || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n            }\n\
    \            if (s(i) == 'y' && i == s.length - 1) {\n                count +=\
    \ 1\n            }\n        }\n        return count", "        val vowels = \"\
    aeiouy\"\n        s.filter(vowels.contains(_)).length", "        val vowels =\
    \ Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count =\
    \ s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1 else\
    \ count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y =\
    \ s.last == 'y'\n        s.filter(vowels.contains(_)).length + (if (y) 1 else\
    \ 0)", '        s.filter(c => "aeiouy".contains(c)).length', "        val vowels\
    \ = \"aeiouy\"\n        s.filter(vowels.contains(_)).length", '        s.toLowerCase.filter(c
    => "aeiouy".contains(c)).length', "        val vowels = List('a', 'e', 'i', 'o',\
    \ 'u')\n        val y = 'y'\n        val yAtEnd = s.last == y\n        val yCount\
    \ = if (yAtEnd) 1 else 0\n        val vowelCount = s.filter(vowels.contains(_)).length\n\
    \        vowelCount + yCount", "        var count = 0L\n        for (i <- 0 until\
    \ s.length) {\n            val c = s(i)\n            if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') count += 1\n            else if (c == 'y'\
    \ && i == s.length - 1) count += 1\n        }\n        count", "        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n        val count\
    \ = s.count(vowels.contains(_))\n        if (vowels.contains(last)) count + 1\
    \ else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ last = s.last\n        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val y = Set('y')\n        val last = s.last\n        val count = s.filter(x\
    \ => vowels.contains(x)).size\n        if (y.contains(last)) count + 1 else count",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val last = s.last\n        s.filter(vowels.contains(_)).length + (if\
    \ (vowels.contains(last)) 1 else 0)", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val y = 'y'\n        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (vowels.contains(s(i))) {\n                count\
    \ += 1\n            }\n        }\n        if (s.length > 1 && s(s.length - 1)\
    \ == y && !vowels.contains(s(s.length - 2))) {\n            count += 1\n     \
    \   }\n        count", "        // Write your code here\n        return 0", " \
    \       val vowels = List('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val isLastVowel = vowels.contains(last)\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (isLastVowel) count + 1 else count", "        var count = 0\n    \
    \    for (i <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e'\
    \ || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n\
    \            }\n            if (s(i) == 'y' && i == s.length - 1) {\n        \
    \        count += 1\n            }\n        }\n        return count", "      \
    \  val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n     \
    \   val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        s.filter(c => c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y').length",
  "        var count = 0\n        for (i <- 0 until s.length) {\n            if (s(i)\
    \ == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') count +=\
    \ 1\n            if (s(i) == 'y' && i != s.length - 1) count += 1\n        }\n\
    \        return count", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n \
    \       val y = Set('y')\n        val last = s.last\n        val count = s.filter(vowels.contains(_)).length\n\
    \        if (y.contains(last)) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val lastChar = s.last\n        val isLastCharVowel\
    \ = vowels.contains(lastChar)\n        val isLastCharY = lastChar == 'y'\n   \
    \     val isLastCharVowelOrY = isLastCharVowel || isLastCharY\n        val isLastCharVowelOrYAndNotY\
    \ = isLastCharVowel || (isLastCharY && s.length > 1)\n        val isLastCharYAndNotVowel\
    \ = isLastCharY && !isLastCharVowel\n        val isLastCharYAndNotVowelAndNotEnd\
    \ = isLastCharYAndNotVowel && s.length > 1\n        val isLastCharYAndNotVowelAndEnd\
    \ = isLastCharYAndNotVowel && s.length == 1\n        val isLastCharVowelOrYAndNotYAndNotEnd\
    \ = isLastCharVowelOrYAndNotY && s.length > 1\n        val isLastCharVowelOrYAndNotYAndEnd\
    \ = isLastCharVowelOrYAndNotY && s.length == 1\n        val isLastCharVowelOrYAndEnd\
    \ = isLastCharVowelOrY && s.length == 1\n        val isLastCharVowelOrYAndNotEnd\
    \ = isLastCharVowelOrY && s.length > 1\n        val isLastCharVowelAndEnd = isLastCharVowel\
    \ && s.length == 1\n        val isLastCharVowelAndNotEnd = isLastCharVowel &&\
    \ s.length > 1\n        val isLastCharVowelOrYAndNotYAndNotEndAndNotVowel = isLastCharVowelOrYAndNotYAndNotEnd\
    \ && !isLastCharVowel\n        val isLastCharVowelOrYAndNotYAndEndAndNotVowel\
    \ = isLastCharVowelOrYAndNotYAndEnd && !isLastCharVowel\n        val isLastCharVowelOrYAndEndAndNotVowel\
    \ = isLastCharVowelOrYAndEnd && !isLastCharVowel\n        val isLast", "     \
    \   val vowels = List('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n  \
    \      val count = s.filter(vowels.contains(_)).size\n        if (vowels.contains(last))\
    \ count + 1 else count", "        s.filter(c => c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y').length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n \
    \       val count = s.filter(vowels.contains(_)).size\n        if (y.contains(last))\
    \ count + 1 else count", "        s.filter(c => c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y').length", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n \
    \       s.toLowerCase.filter(vowels.contains(_)).length + (if (y.contains(last))\
    \ 1 else 0)", '        s.filter(c => "aeiouy".contains(c)).length', "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val s2 = s.toLowerCase\n    \
    \    var count = 0\n        for (i <- 0 until s2.length) {\n            if (vowels.contains(s2(i)))\
    \ {\n                count += 1\n            }\n        }\n        if (s2.length\
    \ > 1 && s2(s2.length - 1) == 'y') {\n            count += 1\n        }\n    \
    \    count", "        // Write your code here\n        return 0", "        val\
    \ vowels = Set('a', 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val\
    \ last = s.last\n        val count = s.filter(vowels.contains(_)).length\n   \
    \     if (y.contains(last)) count + 1 else count", "        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val y = Set('y')\n        val last = s.last\n \
    \       val count = s.filter(vowels.contains(_)).length\n        if (y.contains(last))\
    \ count + 1 else count", "        s.filter(c => c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || (c == 'y' && s.indexOf(c) == s.length - 1)).length"]
stop_tokens:
- "\n    }\n"
