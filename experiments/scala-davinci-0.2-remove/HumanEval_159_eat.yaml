name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return an array of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // Variables:\n    // @number : integer\n    // the number\
  \ of carrots that you have eaten.\n    // @need : integer\n    // the number of\
  \ carrots that you need to eat.\n    // @remaining : integer\n    // the number\
  \ of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number\
  \ <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have\
  \ fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ["        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  if (remaining < need) List(number + remaining, 0)\n        else List(number\
    \ + need, remaining - need)", "        var result = List[Long]()\n        result\
    \ = result :+ (number + min(need, remaining))\n        result = result :+ (max(remaining\
    \ - need, 0))\n        return result", "        // your code here\n        var\
    \ result = List[Long]()\n        if (remaining >= need) {\n            result\
    \ = List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        result", "        val total\
    \ = number + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        if (number + remaining < need) List(number + remaining, 0)\n        else\
    \ List(number + need, remaining - need)", "        var total = number + remaining\n\
    \        var eaten = 0L\n        var left = 0L\n        if (total >= need) {\n\
    \            eaten = need\n            left = total - need\n        } else {\n\
    \            eaten = total\n            left = 0\n        }\n        List(eaten,\
    \ left)", "        var list = List[Long]()\n        if (remaining >= need) {\n\
    \            list = List(number + need, remaining - need)\n        } else {\n\
    \            list = List(number + remaining, 0)\n        }\n        list", " \
    \       if (number + remaining < need) List(number + remaining, 0)\n        else\
    \ List(number + need, remaining - need)", "        if (remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    val total = number + min(need, remaining)\n        List(total, max(remaining\
    \ - need, 0))", "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        if (number + remaining < need)\
    \ List(number + remaining, 0)\n        else List(number + need, remaining - need)",
  "        val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        if (number + remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (remaining < need) {\n            List(number + remaining, 0)\n      \
    \  } else {\n            List(number + need, remaining - need)\n        }", " \
    \       var total = number + remaining\n        var eaten = 0L\n        if (total\
    \ >= need) {\n            eaten = need\n            total -= need\n        } else\
    \ {\n            eaten = total\n            total = 0\n        }\n        List(eaten,\
    \ total)", "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        if (number + need <= remaining)\
    \ List(number + need, remaining - need)\n        else List(remaining + number,\
    \ 0)", "        val eaten = min(number + remaining, need)\n        List(eaten,\
    \ remaining - (eaten - number))", "        if (number + remaining < need) {\n\
    \            List(number + remaining, 0)\n        } else {\n            List(need,\
    \ number + remaining - need)\n        }", "        var result = List[Long]()\n\
    \        if (remaining > need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        if (number +\
    \ need > remaining) {\n            List(remaining, 0)\n        } else {\n    \
    \        List(number + need, remaining - number - need)\n        }", "       \
    \ if (remaining < need) List(number + remaining, 0)\n        else List(number\
    \ + need, remaining - need)", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        var result =\
    \ List[Long]()\n        var total = number + remaining\n        if (total >= need)\
    \ {\n            result = List(need, total - need)\n        } else {\n       \
    \     result = List(total, 0)\n        }\n        return result", "        if\
    \ (number + need <= remaining) List(number + need, remaining - (number + need))\n\
    \        else List(remaining, 0)", "        // your code here\n        return\
    \ List(0, 0)", "        if (number + need <= remaining) List(number + need, remaining\
    \ - (number + need))\n        else List(remaining + number, 0)", "        val\
    \ eaten = min(number + remaining, need)\n        val left = max(0, number + remaining\
    \ - need)\n        List(eaten, left)", "        if (number + remaining >= need)\
    \ {\n            List(need, number + remaining - need)\n        } else {\n   \
    \         List(number + remaining, 0)\n        }", "        val eaten = min(number\
    \ + remaining, need)\n        List(eaten, eaten - need)", "        val total =\
    \ number + remaining\n        val eaten = if (total >= need) need else total\n\
    \        List(eaten, total - eaten)", "        if (number + remaining < need)\
    \ List(number + remaining, 0)\n        else List(number + need, remaining - need)",
  "        if (number + remaining >= need) List(need, number + remaining - need)\n\
    \        else List(number + remaining, 0)", "        if (remaining < need) {\n\
    \            List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - need)\n        }", "        val eaten = min(number + remaining,\
    \ need)\n        val left = max(0, number + remaining - need)\n        List(eaten,\
    \ left)", "        if (remaining < need) List(number + remaining, 0)\n       \
    \ else List(number + need, remaining - need)", "        if (number >= need) return\
    \ List(number, remaining)\n        else if (remaining + number >= need) return\
    \ List(need, remaining + number - need)\n        else return List(remaining +\
    \ number, 0)", "        if (remaining < need) {\n            List(number + remaining,\
    \ 0)\n        } else {\n            List(number + need, remaining - need)\n  \
    \      }", "        var total = number + remaining\n        var left = 0L\n  \
    \      if (total >= need) {\n            total = need\n            left = total\
    \ - need\n        }\n        List(total, left)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        val total =\
    \ number + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        if (remaining < need) List(number + remaining, 0)\n        else List(number\
    \ + need, remaining - need)", "        if (remaining < need) {\n            List(number\
    \ + remaining, 0)\n        } else {\n            List(number + need, remaining\
    \ - need)\n        }", "        if (remaining < need) List(number + remaining,\
    \ 0)\n        else List(number + need, remaining - need)", "        if (remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        // your code here\n        val total = number + need\n  \
    \      if (total <= remaining) List(total, remaining - total)\n        else List(remaining\
    \ + number, 0)", "        if (remaining < need) {\n            List(number + remaining,\
    \ 0)\n        } else {\n            List(number + need, remaining - need)\n  \
    \      }", "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        if (remaining >= need) List(number\
    \ + need, remaining - need)\n        else List(number + remaining, 0)", "    \
    \    val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        // your code here\n        val total = number\
    \ + remaining\n        val eaten = if (total >= need) need else total\n      \
    \  val left = total - eaten\n        List(eaten, left)", "        if (remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(remaining - need, 0))", "        if (remaining >= need) List(number + need,\
    \ remaining - need)\n        else List(number + remaining, 0)", "        var total\
    \ = number + min(need, remaining)\n        var left = max(remaining - need, 0)\n\
    \        List(total, left)", "        if (remaining < need) {\n            return\
    \ List(number + remaining, 0)\n        }\n        return List(number + need, remaining\
    \ - need)", "        var eaten = number\n        var left = remaining\n      \
    \  if (need <= remaining) {\n            eaten += need\n            left -= need\n\
    \        } else {\n            eaten += remaining\n            left = 0\n    \
    \    }\n        List(eaten, left)", "        val eaten = min(number + remaining,\
    \ need)\n        List(eaten, eaten - need)", "        val total = number + remaining\n\
    \        if (total >= need) {\n            List(need, total - need)\n        }\
    \ else {\n            List(total, 0)\n        }", "        if (number >= need)\
    \ {\n            List(number, remaining)\n        } else {\n            val total\
    \ = number + remaining\n            if (total >= need) {\n                List(need,\
    \ total - need)\n            } else {\n                List(total, 0)\n      \
    \      }\n        }", "        val total = number + remaining\n        val eaten\
    \ = if (total >= need) need else total\n        List(eaten, total - eaten)", " \
    \       if (remaining < need) {\n            List(number + remaining, 0)\n   \
    \     } else {\n            List(number + need, remaining - need)\n        }",
  "        if (remaining < need) List(number + remaining, 0)\n        else List(number\
    \ + need, remaining - need)", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        val total =\
    \ number + min(need, remaining)\n        List(total, max(remaining - need, 0))",
  "        if (remaining >= need) {\n            List(number + need, remaining - need)\n\
    \        } else {\n            List(number + remaining, 0)\n        }", "    \
    \    val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        if (remaining\
    \ < need) {\n            List(number + remaining, 0)\n        } else {\n     \
    \       List(number + need, remaining - need)\n        }", "        var result\
    \ = List[Long]()\n        if (remaining < need) {\n            result = List(number\
    \ + remaining, 0)\n        } else {\n            result = List(number + need,\
    \ remaining - need)\n        }\n        result", "        // your code here\n\
    \        return List(0, 0)", "        if (remaining >= need) List(number + need,\
    \ remaining - need)\n        else List(number + remaining, 0)", "        var eaten\
    \ = number\n        var left = remaining\n        while (eaten < need && left\
    \ > 0) {\n            eaten += 1\n            left -= 1\n        }\n        List(eaten,\
    \ left)", "        if (number + remaining < need) List(number + remaining, 0)\n\
    \        else List(number + need, remaining - need)", "        if (number + remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        if (remaining < need) List(number + remaining, 0)\n     \
    \   else List(number + need, remaining - need)", "        val eaten = min(number\
    \ + remaining, need)\n        List(eaten, remaining - (eaten - number))", "  \
    \      val eaten = min(number + remaining, need)\n        val left = max(0, number\
    \ + remaining - need)\n        List(eaten, left)", "        // your code here\n\
    \        List(number, remaining)", "        if (number + remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (number + remaining < need) List(number + remaining, 0)\n        else\
    \ List(number + need, remaining - need)", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  // your code here\n        val total = number + min(need, remaining)\n    \
    \    List(total, max(0, remaining - need))", "        if (remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (remaining < need) {\n            List(number + remaining, 0)\n      \
    \  } else {\n            List(number + need, remaining - need)\n        }", " \
    \       if (remaining < need) List(number + remaining, 0)\n        else List(number\
    \ + need, remaining - need)", "        val eaten = min(number + remaining, need)\n\
    \        List(eaten, need - eaten)", "        var result = List[Long]()\n    \
    \    if (remaining < need) {\n            result = List(number + remaining, 0)\n\
    \        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "        var total = number + min(need, remaining)\n\
    \        var left = max(remaining - need, 0)\n        List(total, left)", "  \
    \      var total = number + min(need, remaining)\n        var left = max(remaining\
    \ - need, 0)\n        List(total, left)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        if (remaining < need) {\n       \
    \     List(number + remaining, 0)\n        } else {\n            List(number +\
    \ need, remaining - need)\n        }", "        if (number + remaining < need)\
    \ {\n            List(number + remaining, 0)\n        } else {\n            List(need,\
    \ number + remaining - need)\n        }", "        if (remaining < need) {\n \
    \           List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - need)\n        }", "        val eaten = min(number + remaining,\
    \ need)\n        val left = max(0, remaining - (need - number))\n        List(eaten,\
    \ left)", "        val eat = min(need, remaining)\n        List(number + eat,\
    \ remaining - eat)", "        var total = number + min(need, remaining)\n    \
    \    var left = max(remaining - need, 0)\n        List(total, left)", "      \
    \  val total = number + min(need, remaining)\n        List(total, remaining -\
    \ min(need, remaining))", "        if (number + remaining < need) {\n        \
    \    List(number + remaining, 0)\n        } else {\n            List(need, number\
    \ + remaining - need)\n        }", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        val total =\
    \ number + min(need, remaining)\n        List(total, max(remaining - need, 0))",
  "        val total = number + min(need, remaining)\n        List(total, max(remaining\
    \ - need, 0))", "        // your code here\n        List(number + min(need, remaining),\
    \ max(0, remaining - need))", "        if (number + remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (remaining >= need) {\n            List(number + need, remaining - need)\n\
    \        } else {\n            List(number + remaining, 0)\n        }", "    \
    \    var total = number\n        if (remaining >= need) {\n            total +=\
    \ need\n            return List(total, remaining - need)\n        }\n        else\
    \ {\n            total += remaining\n            return List(total, 0)\n     \
    \   }", "        var total = number + min(need, remaining)\n        var left =\
    \ max(remaining - need, 0)\n        List(total, left)", "        var result =\
    \ List[Long]()\n        if (remaining >= need) {\n            result = List(number\
    \ + need, remaining - need)\n        } else {\n            result = List(number\
    \ + remaining, 0)\n        }\n        return result", "        if (number + remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        var eaten = number\n        var\
    \ left = remaining\n        if (need > left) {\n            eaten += left\n  \
    \          left = 0\n        } else {\n            eaten += need\n           \
    \ left -= need\n        }\n        List(eaten, left)", "        if (remaining\
    \ < need) {\n            List(number + remaining, 0)\n        } else {\n     \
    \       List(number + need, remaining - need)\n        }", "        var result\
    \ = List[Long]()\n        if (remaining < need) {\n            result = List(number\
    \ + remaining, 0)\n        } else {\n            result = List(number + need,\
    \ remaining - need)\n        }\n        result", "        if (remaining < need)\
    \ {\n            List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - need)\n        }", "        if (remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (remaining < need) List(number + remaining, 0)\n        else List(number\
    \ + need, remaining - need)", "        var eaten = number\n        var left =\
    \ remaining\n        if (need > left) {\n            eaten += left\n         \
    \   left = 0\n        } else {\n            eaten += need\n            left -=\
    \ need\n        }\n        List(eaten, left)", "        if (number + remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        if (number + need > remaining) List(remaining, 0)\n     \
    \   else List(number + need, remaining - (number + need))", "        val total\
    \ = number + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        if (remaining < need) {\n            List(number + remaining, 0)\n    \
    \    } else {\n            List(number + need, remaining - need)\n        }",
  "        if (number >= need) return List(number, remaining)\n        else if (remaining\
    \ >= need - number) return List(need, remaining - (need - number))\n        else\
    \ return List(remaining + number, 0)", "        if (remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (remaining < need) {\n            List(number + remaining, 0)\n      \
    \  } else {\n            List(number + need, remaining - need)\n        }", " \
    \       if (number + need <= remaining) List(number + need, remaining - (number\
    \ + need))\n        else List(remaining + number, 0)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        // your code\
    \ here\n        List(0, 0)", "        var total = number\n        var left = remaining\n\
    \        if (need > left) {\n            total += left\n            left = 0\n\
    \        } else {\n            total += need\n            left -= need\n     \
    \   }\n        List(total, left)", "        if (remaining < need) {\n        \
    \    List(number + remaining, 0)\n        } else {\n            List(number +\
    \ need, remaining - need)\n        }", "        if (remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    if (remaining >= need) List(number + need, remaining - need)\n        else\
    \ List(number + remaining, 0)", "        if (number + remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        var total =\
    \ number + min(need, remaining)\n        var left = max(remaining - need, 0)\n\
    \        List(total, left)", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        if (number +\
    \ remaining < need) List(number + remaining, 0)\n        else List(number + need,\
    \ remaining - need)", "        var eaten = number\n        var left = remaining\n\
    \        if (left + eaten >= need) {\n            eaten += need\n            left\
    \ -= need\n        } else {\n            eaten += left\n            left = 0\n\
    \        }\n        List(eaten, left)", "        var eaten = number\n        var\
    \ left = remaining\n        if (need <= left) {\n            eaten += need\n \
    \           left -= need\n        } else {\n            eaten += left\n      \
    \      left = 0\n        }\n        List(eaten, left)", "        // your code\
    \ here\n        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        if (remaining < need) List(number\
    \ + remaining, 0)\n        else List(number + need, remaining - need)", "    \
    \    val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        if (remaining < need) List(number + remaining,\
    \ 0)\n        else List(number + need, remaining - need)", "        // your code\
    \ here\n        val total = number + remaining\n        val eaten = min(total,\
    \ need)\n        val left = total - eaten\n        List(eaten, left)", "     \
    \   if (remaining < need) {\n            List(number + remaining, 0)\n       \
    \ } else {\n            List(number + need, remaining - need)\n        }", " \
    \       val total = number + min(need, remaining)\n        List(total, max(remaining\
    \ - need, 0))", "        if (remaining < need) List(number + remaining, 0)\n \
    \       else List(number + need, remaining - need)", "        val total = number\
    \ + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        var result = List[Long]()\n        if (remaining < need) {\n          \
    \  result = List(number + remaining, 0)\n        } else {\n            result\
    \ = List(number + need, remaining - need)\n        }\n        result", "     \
    \   // Your code here\n        List(number + min(need, remaining), max(0, remaining\
    \ - need))", "        val total = number + min(need, remaining)\n        List(total,\
    \ remaining - min(need, remaining))", "        if (number + need <= remaining)\
    \ List(number + need, remaining - (number + need))\n        else List(remaining,\
    \ 0)", "        if (remaining < need) List(number + remaining, 0)\n        else\
    \ List(number + need, remaining - need)", "        if (remaining < need) {\n \
    \           List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - need)\n        }", "        val total = number + min(need,\
    \ remaining)\n        List(total, max(remaining - need, 0))", "        if (number\
    \ + remaining < need) List(number + remaining, 0)\n        else List(number +\
    \ need, remaining - need)", "        if (remaining < need) List(number + remaining,\
    \ 0)\n        else List(number + need, remaining - need)", "        if (remaining\
    \ < need) {\n            List(number + remaining, 0)\n        } else {\n     \
    \       List(number + need, remaining - need)\n        }", "        val eaten\
    \ = min(need, remaining)\n        List(number + eaten, remaining - eaten)", " \
    \       val total = number + remaining\n        val eaten = if (total < need)\
    \ total else need\n        List(eaten, total - eaten)", "        var total = number\n\
    \        var left = remaining\n        if (left < need) {\n            total +=\
    \ left\n            left = 0\n        } else {\n            total += need\n  \
    \          left -= need\n        }\n        List(total, left)", "        if (remaining\
    \ < need) {\n            List(number + remaining, 0)\n        } else {\n     \
    \       List(number + need, remaining - need)\n        }", "        val total\
    \ = number + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        if (remaining < need) {\n            List(number + remaining, 0)\n    \
    \    } else {\n            List(number + need, remaining - need)\n        }",
  "        // your code here\n        var total = number + remaining\n        var\
    \ eaten = 0L\n        if (total >= need) {\n            eaten = need\n       \
    \     total -= need\n        } else {\n            eaten = total\n           \
    \ total = 0\n        }\n        List(eaten, total)", "        if (remaining <\
    \ need) {\n            List(number + remaining, 0)\n        } else {\n       \
    \     List(number + need, remaining - need)\n        }", "        if (number +\
    \ need <= remaining) {\n            List(number + need, remaining - (number +\
    \ need))\n        } else {\n            List(remaining, 0)\n        }", "    \
    \    val total = number + min(need, remaining)\n        List(total, max(remaining\
    \ - need, 0))", "        var eaten = number\n        if (need > remaining) {\n\
    \            eaten += remaining\n        } else {\n            eaten += need\n\
    \        }\n        return List(eaten, remaining - need)", "        if (number\
    \ + remaining < need) {\n            List(number + remaining, 0)\n        } else\
    \ {\n            List(need, number + remaining - need)\n        }", "        if\
    \ (remaining < need) {\n            List(number + remaining, 0)\n        } else\
    \ {\n            List(number + need, remaining - need)\n        }", "        if\
    \ (number + need <= remaining) List(number + need, remaining - (number + need))\n\
    \        else List(remaining, 0)", "        val eaten = min(need, remaining)\n\
    \        List(number + eaten, remaining - eaten)", "        if (number + remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        var result = List[Long]()\n        if (remaining < need)\
    \ {\n            result = List(number + remaining, 0)\n        } else {\n    \
    \        result = List(number + need, remaining - need)\n        }\n        result",
  "        if (number + need <= remaining) List(number + need, remaining - (number\
    \ + need))\n        else List(remaining, 0)", "        if (number + remaining\
    \ < need) List(number + remaining, 0)\n        else List(number + need, remaining\
    \ - need)", "        // your code here\n        if (remaining < need) {\n    \
    \        List(number + remaining, 0)\n        } else {\n            List(number\
    \ + need, remaining - need)\n        }", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))", "      \
    \  if (remaining < need) {\n            List(number + remaining, 0)\n        }\
    \ else {\n            List(number + need, remaining - need)\n        }", "   \
    \     if (remaining < need) {\n            List(number + remaining, 0)\n     \
    \   } else {\n            List(number + need, remaining - need)\n        }", " \
    \       if (number + remaining < need) {\n            List(number + remaining,\
    \ 0)\n        } else {\n            List(need, number + remaining - need)\n  \
    \      }", "        if (remaining >= need) List(number + need, remaining - need)\n\
    \        else List(number + remaining, 0)", "        var total = number + min(need,\
    \ remaining)\n        var left = max(remaining - need, 0)\n        List(total,\
    \ left)", "        if (number + need <= remaining) List(number + need, remaining\
    \ - (number + need))\n        else List(remaining + number, 0)", "        if (remaining\
    \ < need) {\n            List(number + remaining, 0)\n        } else {\n     \
    \       List(number + need, remaining - need)\n        }", "        val total\
    \ = number + min(need, remaining)\n        val left = max(remaining - need, 0)\n\
    \        List(total, left)", "        val total = number + min(need, remaining)\n\
    \        List(total, max(remaining - need, 0))", "        if (remaining >= need)\
    \ List(number + need, remaining - need)\n        else List(number + remaining,\
    \ 0)", "        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List(number + need, remaining - need)\n        } else {\n\
    \            result = List(number + remaining, 0)\n        }\n        return result",
  "        var eaten = number\n        var left = remaining\n        if (need > left)\
    \ {\n            eaten += left\n            left = 0\n        } else {\n     \
    \       eaten += need\n            left -= need\n        }\n        List(eaten,\
    \ left)", "        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List(number + need, remaining - need)\n        } else {\n\
    \            result = List(number + remaining, 0)\n        }\n        return result",
  "        if (number + remaining < need) List(number + remaining, 0)\n        else\
    \ List(number + need, remaining - need)", "        val total = number + min(need,\
    \ remaining)\n        List(total, remaining - min(need, remaining))"]
stop_tokens:
- "\n    }\n"
