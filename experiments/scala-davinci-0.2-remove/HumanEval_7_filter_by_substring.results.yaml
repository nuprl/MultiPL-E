language: scala
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(x => x.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(_.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        var filteredList = List[String]()\n        for (str <- strings)\
    \ {\n            if (str.contains(substring)) {\n                filteredList\
    \ = str :: filteredList\n            }\n        }\n        filteredList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmrwz7jrt.scala:17)\n\tat Problem.main(tmpmrwz7jrt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(_.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(x => x.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(str => str.contains(substring))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        var filtered : List[String] = List()\n        for (s <- strings)\
    \ {\n            if (s.contains(substring)) {\n                filtered = s ::\
    \ filtered\n            }\n        }\n        filtered\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vkppzxf.scala:17)\n\tat Problem.main(tmp0vkppzxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (str <- strings) {\n \
    \           if (str.contains(substring)) {\n                result = str :: result\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8y8_g1al.scala:17)\n\tat Problem.main(tmp8y8_g1al.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(x => x.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        var filteredStrings = List[String]()\n        for (string <- strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings\
    \ = string :: filteredStrings\n            }\n        }\n        filteredStrings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2kpjfwz6.scala:17)\n\tat Problem.main(tmp2kpjfwz6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(string => string.contains(substring))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(str => str.contains(substring))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
    \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (str <- strings) {\n \
    \           if (str.contains(substring)) {\n                result = str :: result\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(filterBySubstring((List[String]()), (\"john\")).equals((List[String]())));\n\
    \    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"xxx\", \"xxxAAA\"\
    , \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8y8_g1al.scala:17)\n\tat Problem.main(tmp8y8_g1al.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter an input list of strings only for ones that contain given substring\n\
    \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
    \ = {\n        strings.filter(s => s.contains(substring))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(filterBySubstring((List[String]()), (\"john\"\
    )).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
    xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
    grunt\", \"prune\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028400
