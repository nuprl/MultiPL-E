name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  \    // of nums.\n    // Example\n    def minSubArraySum(nums : List[Long]) : Long\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        val n = nums.length\n        var minSum = Long.MaxValue\n \
    \       var sum = 0L\n        for (i <- 0 until n) {\n            sum += nums(i)\n\
    \            minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n   \
    \     }\n        minSum", "        var sum = 0L\n        var min = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            min = min min\
    \ sum\n            if (sum > 0) sum = 0\n        }\n        min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <- 1 until\
    \ n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n   \
    \     dp.min", "        val n = nums.length\n        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (i <- 0 until n) {\n            sum += nums(i)\n\
    \            minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n   \
    \     }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        var min = dp(0)\n        for (i <- 1 until n)\
    \ {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n            min =\
    \ min(min, dp(i))\n        }\n        min", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (i <- nums) {\n            sum += i\n     \
    \       minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n        }\n\
    \        minSum", "        var result = Long.MaxValue\n        var sum = 0L\n\
    \        for (num <- nums) {\n            sum += num\n            result = min(result,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        result", "      \
    \  val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n  \
    \          if (sum < 0) sum = 0\n        }\n        minSum", "        val n =\
    \ nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1 to\
    \ n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n      \
    \  }\n        dp.min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ val sums = Array.fill(n + 1)(0L)\n        for (i <- 0 until n) sums(i + 1) =\
    \ sums(i) + nums(i)\n        var minSum = Long.MaxValue\n        for (i <- 0 until\
    \ n) {\n            for (j <- i + 1 to n) {\n                minSum = min(minSum,\
    \ sums(j) - sums(i))\n            }\n        }\n        minSum", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- nums) {\n  \
    \          sum += i\n            minSum = min(minSum, sum)\n            if (sum\
    \ < 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n   \
    \     val sums = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) sums(i) = sums(i\
    \ - 1) + nums(i - 1)\n        var min = Long.MaxValue\n        for (i <- 0 to\
    \ n - 1) {\n            for (j <- i + 1 to n) {\n                val sum = sums(j)\
    \ - sums(i)\n                if (sum < min) min = sum\n            }\n       \
    \ }\n        min", "        var minSum = Long.MaxValue\n        var sum = 0L\n\
    \        for (i <- nums) {\n            sum += i\n            minSum = min(minSum,\
    \ sum)\n            if (sum < 0) sum = 0\n        }\n        minSum", "      \
    \  var min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            min = min min sum\n            if (sum >\
    \ 0) sum = 0\n        }\n        min", "        var minSum = Long.MaxValue\n \
    \       var sum = 0L\n        for (num <- nums) {\n            sum += num\n  \
    \          minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n     \
    \   }\n        minSum", "        val n = nums.length\n        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (i <- 0 until n) {\n            sum += nums(i)\n\
    \            minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n   \
    \     }\n        minSum", "        var sum = 0L\n        var min = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            min = min(min,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum < 0) sum = 0\n        }\n        minSum", "        var sum = 0L\n     \
    \   var min = Long.MaxValue\n        for (num <- nums) {\n            sum += num\n\
    \            min = min min sum\n            if (sum > 0) sum = 0\n        }\n\
    \        min", "        val n = nums.length\n        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (i <- 0 until n) {\n            sum += nums(i)\n\
    \            minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n   \
    \     }\n        minSum", "        val n = nums.length\n        var sum = 0L\n\
    \        var minSum = Long.MaxValue\n        for (i <- 0 until n) {\n        \
    \    sum += nums(i)\n            minSum = min(minSum, sum)\n            if (sum\
    \ > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n   \
    \     val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <- 1\
    \ until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n\
    \        dp.min", "        var minSum = Long.MaxValue\n        var sum = 0L\n\
    \        for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum < 0) sum = 0\n        }\n        minSum", "      \
    \  var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        val dp = Array.fill(nums.length)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until nums.length) {\n         \
    \   dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", " \
    \       var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <-\
    \ nums) {\n            sum += num\n            minSum = min(minSum, sum)\n   \
    \         if (sum > 0) sum = 0\n        }\n        return minSum", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum > 0) sum = 0\n        }\n        minSum", "        var sum = 0L\n     \
    \   var min = Long.MaxValue\n        for (num <- nums) {\n            sum += num\n\
    \            min = min(min, sum)\n            if (sum > 0) sum = 0\n        }\n\
    \        min", "        val n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n\
    \        for (i <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1),\
    \ nums(i - 1))\n        }\n        dp.min", "        var min = nums.head\n   \
    \     var sum = 0L\n        for (num <- nums) {\n            sum += num\n    \
    \        if (sum < min) min = sum\n            if (sum > 0) sum = 0\n        }\n\
    \        min", "        var min = Long.MaxValue\n        var sum = 0L\n      \
    \  for (num <- nums) {\n            sum += num\n            min = min.min(sum)\n\
    \            if (sum > 0) sum = 0\n        }\n        min", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        var sum = 0L\n        var minSum = Long.MaxValue\n        for (i <- 0\
    \ until n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n\
    \            if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum\
    \ = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n       \
    \     sum += num\n            minSum = min(minSum, sum)\n            if (sum >\
    \ 0) sum = 0\n        }\n        minSum", "        val dp = Array.fill(nums.length)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until nums.length) {\n         \
    \   dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", " \
    \       var minSum = nums.head\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n  \
    \          if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum\
    \ = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n       \
    \     sum += num\n            minSum = min(minSum, sum)\n            if (sum >\
    \ 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n    \
    \    }\n        minSum", "        var min = Long.MaxValue\n        var sum = 0L\n\
    \        for (num <- nums) {\n            sum += num\n            min = min min\
    \ sum\n            if (sum > 0) sum = 0\n        }\n        min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- 0\
    \ until n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n\
    \            if (sum < 0) sum = 0\n        }\n        minSum", "        var minSum\
    \ = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n       \
    \     sum += num\n            minSum = min(minSum, sum)\n            if (sum >\
    \ 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n     \
    \   var sum = 0L\n        var minSum = Long.MaxValue\n        for (i <- 0 until\
    \ n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n  \
    \          if (sum > 0) sum = 0\n        }\n        minSum", "        val n =\
    \ nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1 to\
    \ n) {\n            dp(i) = max(dp(i - 1) + nums(i - 1), nums(i - 1))\n      \
    \  }\n        dp.min", "        val n = nums.length\n        val prefixSum = Array.fill(n\
    \ + 1)(0L)\n        for (i <- 0 until n) prefixSum(i + 1) = prefixSum(i) + nums(i)\n\
    \        val minSum = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) minSum(i)\
    \ = min(minSum(i - 1), prefixSum(i))\n        var result = Long.MaxValue\n   \
    \     for (i <- 1 to n) result = min(result, prefixSum(i) - minSum(i))\n     \
    \   result", "        var minSum = Long.MaxValue\n        var sum = 0L\n     \
    \   for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        minSum", "      \
    \  val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n    \
    \    }\n        minSum", "        var minSum = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        val n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for\
    \ (i <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n\
    \        }\n        dp.min", "        var min = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            min =\
    \ min min sum\n            if (sum > 0) sum = 0\n        }\n        min", "  \
    \      var min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            min = min min sum\n            if (sum\
    \ > 0) sum = 0\n        }\n        min", "        val n = nums.length\n      \
    \  var sum = 0L\n        var min = Long.MaxValue\n        for (i <- 0 until n)\
    \ {\n            sum += nums(i)\n            min = min min sum\n            if\
    \ (sum > 0) sum = 0\n        }\n        min", "        val n = nums.length\n \
    \       val dp = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n        \
    \    dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n        }\n        dp.min",
  "        var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ dp = Array.fill(nums.length)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until nums.length) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n\
    \        }\n        dp.min", "        var min = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            min =\
    \ min min sum\n            if (sum > 0) sum = 0\n        }\n        min", "  \
    \      val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        val n = nums.length\n\
    \        var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- 0\
    \ until n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n\
    \            if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum\
    \ = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n       \
    \     sum += num\n            minSum = min(minSum, sum)\n            if (sum >\
    \ 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n     \
    \   val sums = Array.fill(n + 1)(0L)\n        for (i <- 0 until n) sums(i + 1)\
    \ = sums(i) + nums(i)\n        var minSum = Long.MaxValue\n        for (i <- 0\
    \ until n) {\n            for (j <- i + 1 to n) {\n                val sum = sums(j)\
    \ - sums(i)\n                if (sum < minSum) minSum = sum\n            }\n \
    \       }\n        minSum", "        var sum = 0L\n        var minSum = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        minSum", "      \
    \  var min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            min = min min sum\n            if (sum >\
    \ 0) sum = 0\n        }\n        min", "        val n = nums.length\n        val\
    \ sum = Array.fill(n)(0L)\n        sum(0) = nums(0)\n        for (i <- 1 until\
    \ n) {\n            sum(i) = sum(i - 1) + nums(i)\n        }\n        var min\
    \ = sum(0)\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n\
    \                val cur = sum(j) - sum(i) + nums(i)\n                if (cur\
    \ < min) min = cur\n            }\n        }\n        min", "        val n = nums.length\n\
    \        var sum = 0L\n        var minSum = Long.MaxValue\n        for (i <- 0\
    \ until n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n\
    \            if (sum > 0) sum = 0\n        }\n        return minSum", "      \
    \  val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ val prefix = Array.fill(n + 1)(0L)\n        for (i <- 0 until n) prefix(i +\
    \ 1) = prefix(i) + nums(i)\n        val min = Array.fill(n + 1)(0L)\n        for\
    \ (i <- 1 to n) min(i) = min(i - 1) min prefix(i)\n        var result = Long.MaxValue\n\
    \        for (i <- 1 to n) result = result min (prefix(i) - min(i - 1))\n    \
    \    result", "        var minSum = Long.MaxValue\n        var sum = 0L\n    \
    \    for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        minSum", "      \
    \  var min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            min = min min sum\n            if (sum >\
    \ 0) sum = 0\n        }\n        min", "        var minSum = Long.MaxValue\n \
    \       var sum = 0L\n        for (num <- nums) {\n            sum += num\n  \
    \          minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n     \
    \   }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var\
    \ sum = 0L\n        var min = Long.MaxValue\n        for (num <- nums) {\n   \
    \         sum += num\n            min = min(min, sum)\n            if (sum > 0)\
    \ sum = 0\n        }\n        min", "        var min = Long.MaxValue\n       \
    \ var sum = 0L\n        for (num <- nums) {\n            sum += num\n        \
    \    min = min min sum\n            if (sum > 0) sum = 0\n        }\n        min",
  "        val n = nums.length\n        val dp = new Array[Long](n)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        var sum = 0L\n        var min = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            min = min(min,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1\
    \ to n) {\n            dp(i) = dp(i - 1) + nums(i - 1)\n        }\n        var\
    \ min = dp(n)\n        for (i <- 1 to n) {\n            for (j <- i + 1 to n)\
    \ {\n                min = min min (dp(j) - dp(i - 1))\n            }\n      \
    \  }\n        min", "        var minSum = Long.MaxValue\n        var sum = 0L\n\
    \        for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        minSum", "      \
    \  var sum = 0L\n        var minSum = Long.MaxValue\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1\
    \ to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n   \
    \     }\n        dp.min", "        val sum = nums.sum\n        val dp = Array.fill(nums.length)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until nums.length) {\n         \
    \   dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", " \
    \       // We can solve this problem in O(n) time using Kadane's algorithm.\n\
    \        // The idea is to keep track of the maximum sum sub-array ending at each\
    \ index.\n        // Then, the minimum sum sub-array is the minimum of these maximum\
    \ sum sub-arrays.\n        // We can compute the maximum sum sub-array ending\
    \ at each index by keeping track\n        // of the maximum sum sub-array ending\
    \ at the previous index and adding the current\n        // element to it. If the\
    \ sum is negative, then we can just start a new sub-array\n        // with the\
    \ current element.\n        var maxSum = Long.MaxValue\n        var currentSum\
    \ = 0L\n        for (i <- nums) {\n            currentSum += i\n            maxSum\
    \ = min(maxSum, currentSum)\n            if (currentSum < 0) currentSum = 0\n\
    \        }\n        maxSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum < 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n    \
    \    }\n        minSum", "        var sum = 0L\n        var minSum = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        minSum", "      \
    \  var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        var sum = 0L\n        var min = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            min = min min\
    \ sum\n            if (sum > 0) sum = 0\n        }\n        min", "        val\
    \ n = nums.length\n        var sum = 0L\n        var min = Long.MaxValue\n   \
    \     for (i <- 0 until n) {\n            sum += nums(i)\n            min = min\
    \ min sum\n            if (sum > 0) sum = 0\n        }\n        min", "      \
    \  val n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i\
    \ <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n\
    \        }\n        dp.min", "        var sum = 0L\n        var min = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            min = min(min,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum < 0) sum = 0\n        }\n        minSum", "        var min = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           min = min min sum\n            if (sum > 0) sum = 0\n        }\n \
    \       min", "        var sum = 0L\n        var min = Long.MaxValue\n       \
    \ for (num <- nums) {\n            sum += num\n            min = min min sum\n\
    \            if (sum > 0) sum = 0\n        }\n        min", "        var sum =\
    \ 0L\n        var minSum = Long.MaxValue\n        for (num <- nums) {\n      \
    \      sum += num\n            minSum = min(minSum, sum)\n            if (sum\
    \ > 0) sum = 0\n        }\n        minSum", "        var min = Long.MaxValue\n\
    \        var sum = 0L\n        for (i <- nums) {\n            sum += i\n     \
    \       min = min min sum\n            if (sum > 0) sum = 0\n        }\n     \
    \   min", "        val n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n\
    \        for (i <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1),\
    \ nums(i - 1))\n        }\n        dp.min", "        var minSum = nums.head\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        var minSum = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum < 0) sum = 0\n        }\n        minSum",
  "        val dp = Array.fill(nums.length)(0L)\n        dp(0) = nums(0)\n       \
    \ for (i <- 1 until nums.length) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ var minSum = nums(0)\n        var sum = 0L\n        for (i <- 0 until n) {\n\
    \            sum += nums(i)\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        var minSum = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        var sum = 0L\n   \
    \     var min = Long.MaxValue\n        for (num <- nums) {\n            sum +=\
    \ num\n            min = min min sum\n            if (sum > 0) sum = 0\n     \
    \   }\n        min", "        val sum = nums.sum\n        val dp = Array.fill(nums.length\
    \ + 1)(0L)\n        for (i <- 1 to nums.length) {\n            dp(i) = min(dp(i\
    \ - 1) + nums(i - 1), sum)\n        }\n        dp.min", "        var minSum =\
    \ nums.head\n        var sum = 0L\n        for (num <- nums) {\n            sum\
    \ += num\n            minSum = min(minSum, sum)\n            if (sum > 0) sum\
    \ = 0\n        }\n        minSum", "        val n = nums.length\n        val dp\
    \ = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n            dp(i) = min(dp(i\
    \ - 1) + nums(i - 1), nums(i - 1))\n        }\n        dp.min", "        val sum\
    \ = nums.sum\n        val min = nums.min\n        val max = nums.max\n       \
    \ val minSum = sum - max\n        val maxSum = sum - min\n        val minSum2\
    \ = nums.tail.sum - max\n        val maxSum2 = nums.tail.sum - min\n        val\
    \ minSum3 = nums.init.sum - max\n        val maxSum3 = nums.init.sum - min\n \
    \       List(minSum, maxSum, minSum2, maxSum2, minSum3, maxSum3).min", "     \
    \   var min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            min = min min sum\n            if (sum >\
    \ 0) sum = 0\n        }\n        min", "        var minSum = Long.MaxValue\n \
    \       var sum = 0L\n        for (num <- nums) {\n            sum += num\n  \
    \          minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n     \
    \   }\n        minSum", "        var minSum = Long.MaxValue\n        var sum =\
    \ 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        var sum = 0L\n        var min = Long.MaxValue\n        for (num <- nums)\
    \ {\n            sum += num\n            min = min min sum\n            if (sum\
    \ > 0) sum = 0\n        }\n        min", "        val n = nums.length\n      \
    \  val dp = Array.fill(n + 1)(0L)\n        val prefix = Array.fill(n + 1)(0L)\n\
    \        for (i <- 1 to n) {\n            prefix(i) = prefix(i - 1) + nums(i -\
    \ 1)\n        }\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) +\
    \ nums(i - 1)\n            for (j <- 1 to i) {\n                dp(i) = min(dp(i),\
    \ prefix(i) - prefix(j - 1))\n            }\n        }\n        dp(n)", "    \
    \    var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- 0\
    \ until n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n\
    \            if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum\
    \ = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n       \
    \     sum += num\n            minSum = min(minSum, sum)\n            if (sum <\
    \ 0) sum = 0\n        }\n        minSum", "        var min = Long.MaxValue\n \
    \       var sum = 0L\n        for (num <- nums) {\n            sum += num\n  \
    \          min = min min sum\n            if (sum > 0) sum = 0\n        }\n  \
    \      min", "        // The minimum sum of any sub-array of nums is the minimum\
    \ of the minimum sum\n        // of any sub-array of nums[1..nums.length] and\
    \ the minimum sum of any sub-array\n        // of nums[0..nums.length - 1].\n\
    \        // The minimum sum of any sub-array of nums[1..nums.length] is the minimum\
    \ of\n        // the minimum sum of any sub-array of nums[2..nums.length] and\
    \ the minimum sum\n        // of any sub-array of nums[1..nums.length - 1].\n\
    \        // The minimum sum of any sub-array of nums[2..nums.length] is the minimum\
    \ of\n        // the minimum sum of any sub-array of nums[3..nums.length] and\
    \ the minimum sum\n        // of any sub-array of nums[2..nums.length - 1].\n\
    \        // ...\n        // The minimum sum of any sub-array of nums[nums.length\
    \ - 1..nums.length] is the\n        // minimum of the minimum sum of any sub-array\
    \ of nums[nums.length..nums.length]\n        // and the minimum sum of any sub-array\
    \ of nums[nums.length - 1..nums.length - 1].\n        // The minimum sum of any\
    \ sub-array of nums[nums.length..nums.length] is nums[nums.length].\n        //\
    \ The minimum sum of any sub-array of nums[nums.length - 1..nums.length - 1] is\
    \ nums[nums.length - 1].\n        // ...\n        // The minimum sum of any sub-array\
    \ of nums[2..nums.length - 1] is the minimum of\n        // nums[2] and the minimum\
    \ sum of any sub-array of nums[3..nums.length - 1].\n        // The minimum sum\
    \ of any sub-array of nums[1..nums.length - 1] is the minimum of\n        // nums[1]\
    \ and the minimum sum of any sub-array of nums[2..nums.length - 1].\n        //\
    \ The minimum sum of any sub-array of nums[0..", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        var minSum = Long.MaxValue\n        var sum =\
    \ 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        var min = Long.MaxValue\n        var sum = 0L\n\
    \        for (i <- nums) {\n            sum += i\n            min = min min sum\n\
    \            if (sum > 0) sum = 0\n        }\n        min", "        val n = nums.length\n\
    \        val sum = Array.fill(n)(0L)\n        sum(0) = nums(0)\n        for (i\
    \ <- 1 until n) sum(i) = sum(i - 1) + nums(i)\n        val min = Array.fill(n)(0L)\n\
    \        min(0) = sum(0)\n        for (i <- 1 until n) min(i) = min(i - 1) min\
    \ sum(i)\n        var result = Long.MaxValue\n        for (i <- 0 until n) {\n\
    \            result = result min (sum(i) - min(i))\n        }\n        result",
  "        var min = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            min = min min sum\n            if (sum\
    \ > 0) sum = 0\n        }\n        min", "        var min = Long.MaxValue\n  \
    \      var sum = 0L\n        for (num <- nums) {\n            sum += num\n   \
    \         min = min min sum\n            if (sum > 0) sum = 0\n        }\n   \
    \     min", "        var minSum = Long.MaxValue\n        var sum = 0L\n      \
    \  for (num <- nums) {\n            sum += num\n            minSum = min(minSum,\
    \ sum)\n            if (sum > 0) sum = 0\n        }\n        minSum", "      \
    \  val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ val dp = Array.fill(n + 1)(0L)\n        for (i <- 1 to n) {\n            dp(i)\
    \ = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n        }\n        dp.min", " \
    \       var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <-\
    \ nums) {\n            sum += num\n            minSum = min(minSum, sum)\n   \
    \         if (sum > 0) sum = 0\n        }\n        minSum", "        var minSum\
    \ = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n       \
    \     sum += num\n            minSum = min(minSum, sum)\n            if (sum >\
    \ 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n     \
    \   val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <- 1 until\
    \ n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n   \
    \     dp.min", "        val dp = Array.fill(nums.length)(0L)\n        dp(0) =\
    \ nums(0)\n        for (i <- 1 until nums.length) {\n            dp(i) = min(dp(i\
    \ - 1) + nums(i), nums(i))\n        }\n        dp.min", "        var minSum =\
    \ Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n         \
    \   sum += num\n            minSum = min(minSum, sum)\n            if (sum < 0)\
    \ sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n \
    \       var sum = 0L\n        for (num <- nums) {\n            sum += num\n  \
    \          minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n     \
    \   }\n        minSum", "        var minSum = Long.MaxValue\n        var sum =\
    \ 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        var sum = 0L\n   \
    \     var min = Long.MaxValue\n        for (num <- nums) {\n            sum +=\
    \ num\n            min = min min sum\n            if (sum > 0) sum = 0\n     \
    \   }\n        min", "        val n = nums.length\n        val dp = Array.fill(n\
    \ + 1)(0L)\n        var min = Long.MaxValue\n        for (i <- 1 to n) {\n   \
    \         dp(i) = max(dp(i - 1) + nums(i - 1), nums(i - 1))\n            min =\
    \ min(min, dp(i))\n        }\n        min", "        var min = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           min = min min sum\n            if (sum > 0) sum = 0\n        }\n \
    \       min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1\
    \ to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n   \
    \     }\n        dp.min", "        var min = Long.MaxValue\n        var sum =\
    \ 0L\n        for (num <- nums) {\n            sum += num\n            min = min\
    \ min sum\n            if (sum > 0) sum = 0\n        }\n        min", "      \
    \  var minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums)\
    \ {\n            sum += num\n            minSum = min(minSum, sum)\n         \
    \   if (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        val dp = Array.fill(nums.length)(0L)\n       \
    \ dp(0) = nums(0)\n        for (i <- 1 until nums.length) {\n            dp(i)\
    \ = min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ sum = nums.sum\n        val min = nums.min\n        val max = nums.max\n   \
    \     val minSum = if (min < 0) sum - max else sum\n        val maxSum = if (max\
    \ > 0) sum - min else sum\n        val dp = Array.fill(nums.length + 1)(0L)\n\
    \        for (i <- 1 to nums.length) {\n            dp(i) = dp(i - 1) + nums(i\
    \ - 1)\n        }\n        var minSumSoFar = Long.MaxValue\n        for (i <-\
    \ 0 to nums.length) {\n            for (j <- i + 1 to nums.length) {\n       \
    \         minSumSoFar = min(minSumSoFar, dp(j) - dp(i))\n            }\n     \
    \   }\n        minSumSoFar", "        var minSum = Long.MaxValue\n        var\
    \ sum = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        var sum = 0L\n        var min = Long.MaxValue\n        for (num <- nums)\
    \ {\n            sum += num\n            min = min min sum\n            if (sum\
    \ > 0) sum = 0\n        }\n        min", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for (i <- 1\
    \ to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n   \
    \     }\n        dp.min", "        var sum = 0L\n        var min = Long.MaxValue\n\
    \        for (num <- nums) {\n            sum += num\n            min = min min\
    \ sum\n            if (sum > 0) sum = 0\n        }\n        min", "        var\
    \ minSum = Long.MaxValue\n        var sum = 0L\n        for (num <- nums) {\n\
    \            sum += num\n            minSum = min(minSum, sum)\n            if\
    \ (sum > 0) sum = 0\n        }\n        minSum", "        val n = nums.length\n\
    \        val dp = Array.fill(n + 1)(0L)\n        var min = Long.MaxValue\n   \
    \     for (i <- 1 to n) {\n            dp(i) = max(dp(i - 1) + nums(i - 1), nums(i\
    \ - 1))\n            min = min(min, dp(i))\n        }\n        min", "       \
    \ val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i),\
    \ nums(i))\n        }\n        dp.min", "        val n = nums.length\n       \
    \ var minSum = Long.MaxValue\n        var sum = 0L\n        for (i <- 0 until\
    \ n) {\n            sum += nums(i)\n            minSum = min(minSum, sum)\n  \
    \          if (sum < 0) sum = 0\n        }\n        minSum", "        val n =\
    \ nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n \
    \       for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n\
    \        }\n        dp.min", "        var min = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            min =\
    \ min min sum\n            if (sum > 0) sum = 0\n        }\n        min", "  \
    \      val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        var minSum = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        var sum = 0L\n   \
    \     var minSum = Long.MaxValue\n        for (num <- nums) {\n            sum\
    \ += num\n            minSum = min(minSum, sum)\n            if (sum > 0) sum\
    \ = 0\n        }\n        minSum", "        var minSum = nums.head\n        var\
    \ sum = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n        dp(0)\
    \ = nums(0)\n        for (i <- 1 until n) {\n            dp(i) = min(dp(i - 1)\
    \ + nums(i), nums(i))\n        }\n        dp.min", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum < 0) sum = 0\n    \
    \    }\n        minSum", "        var minSum = Long.MaxValue\n        var sum\
    \ = 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        val n = nums.length\n        val dp = Array.fill(n + 1)(0L)\n        for\
    \ (i <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i - 1), nums(i - 1))\n\
    \        }\n        dp.min", "        val n = nums.length\n        var minSum\
    \ = nums(0)\n        var sum = 0L\n        for (i <- 0 until n) {\n          \
    \  sum += nums(i)\n            minSum = min(minSum, sum)\n            if (sum\
    \ > 0) sum = 0\n        }\n        minSum", "        var minSum = Long.MaxValue\n\
    \        var sum = 0L\n        for (num <- nums) {\n            sum += num\n \
    \           minSum = min(minSum, sum)\n            if (sum > 0) sum = 0\n    \
    \    }\n        minSum", "        val n = nums.length\n        val dp = Array.fill(n\
    \ + 1)(0L)\n        for (i <- 1 to n) {\n            dp(i) = min(dp(i - 1) + nums(i\
    \ - 1), nums(i - 1))\n        }\n        dp.min", "        val n = nums.length\n\
    \        val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        var minSum = Long.MaxValue\n        var sum =\
    \ 0L\n        for (num <- nums) {\n            sum += num\n            minSum\
    \ = min(minSum, sum)\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        var sum = 0L\n        var min = Long.MaxValue\n        for (num <- nums)\
    \ {\n            sum += num\n            min = min min sum\n            if (sum\
    \ > 0) sum = 0\n        }\n        min", "        val n = nums.length\n      \
    \  val dp = Array.fill(n)(0L)\n        dp(0) = nums(0)\n        for (i <- 1 until\
    \ n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n        }\n   \
    \     dp.min", "        val n = nums.length\n        val dp = Array.fill(n)(0L)\n\
    \        dp(0) = nums(0)\n        for (i <- 1 until n) {\n            dp(i) =\
    \ min(dp(i - 1) + nums(i), nums(i))\n        }\n        dp.min", "        val\
    \ n = nums.length\n        var minSum = Long.MaxValue\n        var sum = 0L\n\
    \        for (i <- 0 until n) {\n            sum += nums(i)\n            minSum\
    \ = min(minSum, sum)\n            if (sum < 0) sum = 0\n        }\n        minSum"]
stop_tokens:
- "\n    }\n"
