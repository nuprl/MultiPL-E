name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        if (string.length == 0) List()\n        else {\n \
    \           val prefix = string.substring(0, string.length - 1)\n            prefix\
    \ :: allPrefixes(prefix)\n        }", "        var result = List[String]()\n \
    \       for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) List(\"\
    \")\n        else {\n            val prefixes = allPrefixes(string.substring(1))\n\
    \            string.substring(0, 1) :: prefixes.map(string.substring(0, 1) + _)\
    \ ::: prefixes\n        }", "        var result = List[String]()\n        for\
    \ (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) return\
    \ List()\n        val prefix = string.substring(0, string.length - 1)\n      \
    \  return allPrefixes(prefix) :+ string", "        if (string.length == 0) List()\n\
    \        else {\n            val prefix = string.substring(0, string.length -\
    \ 1)\n            prefix :: allPrefixes(prefix)\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = prefixes :+ string.substring(0, i)\n        }\n      \
    \  return prefixes", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        var prefixes = List[String]()\n \
    \       for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        var list : List[String]\
    \ = List()\n        for (i <- 0 to string.length - 1) {\n            list = list\
    \ :+ string.substring(0, i + 1)\n        }\n        return list", "        if\
    \ (string.length == 0) List()\n        else {\n            val prefix = string.substring(0,\
    \ string.length - 1)\n            prefix :: allPrefixes(prefix)\n        }", " \
    \       var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        if (string.length == 0) List()\n        else {\n         \
    \   val prefix = string.substring(0, string.length - 1)\n            prefix ::\
    \ allPrefixes(prefix)\n        }", "        var prefixes = List[String]()\n  \
    \      for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        prefixes", "        if (string.length\
    \ == 0) List(\"\")\n        else {\n            val prefix = string.substring(0,\
    \ string.length - 1)\n            allPrefixes(prefix) :+ string\n        }", " \
    \       if (string.length == 0) List()\n        else {\n            val prefix\
    \ = string.substring(0, string.length - 1)\n            prefix :: allPrefixes(prefix)\n\
    \        }", "        var prefixes = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n    \
    \    }\n        return prefixes", "        if (string.length == 0) return List()\n\
    \        val prefixes = new ListBuffer[String]\n        for (i <- 0 to string.length\
    \ - 1) {\n            prefixes += string.substring(0, i + 1)\n        }\n    \
    \    prefixes.toList", "        var result = List[String]()\n        for (i <-\
    \ 0 to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        if (string.length == 0) return List()\n\
    \        val prefix = string.substring(0, string.length - 1)\n        return allPrefixes(prefix)\
    \ :+ string", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i + 1)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        if (string.length ==\
    \ 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = prefixes :+ string.substring(0, i)\n        }\n      \
    \  return prefixes", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        if (string.length == 0)\
    \ List(\"\")\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            allPrefixes(prefix) :+ string\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = string.substring(0, i) :: result\n        }\n        return result", "   \
    \     var result = List[String]()\n        for (i <- 0 to string.length) {\n \
    \           result = string.substring(0, i) :: result\n        }\n        return\
    \ result", "        if (string.length == 0) List()\n        else {\n         \
    \   val prefix = string.substring(0, string.length - 1)\n            prefix ::\
    \ allPrefixes(prefix)\n        }", "        var result = List[String]()\n    \
    \    for (i <- 0 to string.length - 1) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) List(\"\")\n        else {\n            val prefix = string.substring(0,\
    \ string.length - 1)\n            prefix :: allPrefixes(prefix)\n        }", " \
    \       if (string.length == 0) List(\"\")\n        else {\n            val prefix\
    \ = string.substring(0, string.length - 1)\n            prefix :: allPrefixes(prefix)\n\
    \        }", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = string.substring(0, i) :: result\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", "        if (string.length == 0) return List()\n\
    \        val prefixes = for (i <- 0 to string.length) yield string.substring(0,\
    \ i)\n        prefixes.toList", "        var result = List[String]()\n       \
    \ for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) List(\"\
    \")\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        if (string.length\
    \ == 0) return List()\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        return allPrefixes(prefix) :+ string", "        if (string.length\
    \ == 0) List(\"\")\n        else {\n            val prefix = string.substring(0,\
    \ string.length - 1)\n            allPrefixes(prefix) :+ string\n        }", " \
    \       var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        if (string.length == 0) return List()\n        val prefixes\
    \ = for (i <- 0 to string.length - 1) yield string.substring(0, i + 1)\n     \
    \   prefixes.toList", "        var result = List[String]()\n        for (i <-\
    \ 0 to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        if (string.length == 0) List[String]()\n\
    \        else {\n            val prefixes = for (i <- 0 to string.length - 1)\
    \ yield string.substring(0, i + 1)\n            prefixes.toList\n        }", " \
    \       var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            prefixes = string.substring(0, i +\
    \ 1) :: prefixes\n        }\n        prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        if (string.length == 0) List()\n\
    \        else {\n            val prefix = string.substring(0, string.length -\
    \ 1)\n            prefix :: allPrefixes(prefix)\n        }", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        var prefixes\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            prefixes\
    \ = prefixes :+ string.substring(0, i)\n        }\n        return prefixes", " \
    \       var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = string.substring(0, i) :: result\n        }\n      \
    \  return result", "        if (string.length == 0) List()\n        else {\n \
    \           val prefix = string.substring(0, string.length - 1)\n            prefix\
    \ :: allPrefixes(prefix)\n        }", "        var result = List[String]()\n \
    \       for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) List()\n\
    \        else {\n            val prefix = string.substring(0, string.length -\
    \ 1)\n            prefix :: allPrefixes(prefix)\n        }", "        val prefixes\
    \ = new ListBuffer[String]\n        for (i <- 0 to string.length - 1) {\n    \
    \        prefixes += string.substring(0, i + 1)\n        }\n        prefixes.toList",
  "        if (string.length == 0) return List()\n        val prefixes = for (i <-\
    \ 0 to string.length - 1) yield string.substring(0, i + 1)\n        prefixes.toList",
  "        var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = string.substring(0, i) :: prefixes\n        }\n      \
    \  return prefixes", "        if (string.length == 0) List(\"\")\n        else\
    \ {\n            val prefix = string.substring(0, string.length - 1)\n       \
    \     prefix :: allPrefixes(prefix)\n        }", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        def allPrefixes(string\
    \ : String, prefixes : List[String]) : List[String] = {\n            if (string.length\
    \ == 0) prefixes\n            else allPrefixes(string.substring(1), string.substring(0,\
    \ 1) :: prefixes)\n        }\n        allPrefixes(string, List[String]())", " \
    \       if (string.length == 0) List()\n        else {\n            val prefix\
    \ = string.substring(0, string.length - 1)\n            prefix :: allPrefixes(prefix)\n\
    \        }", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = string.substring(0, i) :: result\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", "        var result = List[String]()\n     \
    \   for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  if (string.length == 0) List()\n        else {\n            val prefix = string.substring(0,\
    \ string.length - 1)\n            prefix :: allPrefixes(prefix)\n        }", " \
    \       var prefixes = List[String]()\n        for (i <- 0 to string.length -\
    \ 1) {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n      \
    \  }\n        return prefixes", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        if (string.length ==\
    \ 0) return List()\n        val prefixes = new ListBuffer[String]\n        for\
    \ (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) return List()\n        val prefixes = new ListBuffer[String]\n       \
    \ for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var list = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            list = list :+ string.substring(0,\
    \ i)\n        }\n        return list", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) return List()\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        return prefix :: allPrefixes(prefix)", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        val result\
    \ = new ListBuffer[String]\n        for (i <- 0 to string.length - 1) result +=\
    \ string.substring(0, i + 1)\n        result.toList", "        if (string.length\
    \ == 0) return List()\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        return allPrefixes(prefix) :+ string", "        if (string.length\
    \ == 0) return List()\n        val prefixes = new ListBuffer[String]\n       \
    \ for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) List(\"\
    \")\n        else {\n            val prefixes = allPrefixes(string.substring(1))\n\
    \            string.substring(0, 1) :: prefixes\n        }", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefixes = for (i <- 0 to string.length\
    \ - 1) yield string.substring(0, i + 1)\n            prefixes.toList\n       \
    \ }", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        if (string.length == 0) List(\"\")\n        else {\n\
    \            val prefix = string.substring(0, string.length - 1)\n           \
    \ allPrefixes(prefix) :+ string\n        }", "        if (string.length == 0)\
    \ List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = string.substring(0, i) :: result\n        }\n        return result", "   \
    \     if (string.length == 0) return List()\n        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val prefixes = ListBuffer[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) return\
    \ List()\n        val prefixes = for (i <- 0 to string.length - 1) yield string.substring(0,\
    \ i + 1)\n        prefixes.toList", "        var result = List[String]()\n   \
    \     for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefixes = for (i <- 0 to string.length\
    \ - 1) yield string.substring(0, i + 1)\n            prefixes.toList\n       \
    \ }", "        if (string.length == 0) List()\n        else {\n            val\
    \ prefix = string.substring(0, string.length - 1)\n            prefix :: allPrefixes(prefix)\n\
    \        }", "        if (string.length == 0) List()\n        else {\n       \
    \     val prefixes = for (i <- 0 to string.length - 1) yield string.substring(0,\
    \ i + 1)\n            prefixes.toList\n        }", "        if (string.length\
    \ == 0) return List(\"\")\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        return allPrefixes(prefix) :+ string", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val prefixes = ListBuffer[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        prefixes", "        if (string.length\
    \ == 0) List(\"\")\n        else {\n            val prefix = string.substring(0,\
    \ string.length - 1)\n            allPrefixes(prefix) :+ string\n        }", " \
    \       var prefixes = List[String]()\n        for (i <- 0 to string.length -\
    \ 1) {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n      \
    \  }\n        return prefixes", "        var result = List[String]()\n       \
    \ for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) List()\n        else if (string.length == 1) List(string)\n        else\
    \ string.substring(0, 1) :: allPrefixes(string.substring(1))", "        var prefixes\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            prefixes\
    \ = string.substring(0, i) :: prefixes\n        }\n        prefixes", "      \
    \  if (string.length == 0) List()\n        else {\n            val prefixes =\
    \ for (i <- 0 to string.length - 1) yield string.substring(0, i + 1)\n       \
    \     prefixes.toList\n        }", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 1 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val result = ListBuffer[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) return List()\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        return allPrefixes(prefix) :+ string", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) List()\n\
    \        else {\n            val prefix = string.substring(0, string.length -\
    \ 1)\n            prefix :: allPrefixes(prefix)\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = prefixes :+ string.substring(0, i)\n        }\n      \
    \  return prefixes", "        val prefixes = new ListBuffer[String]\n        for\
    \ (i <- 0 to string.length - 1) prefixes += string.substring(0, i + 1)\n     \
    \   prefixes.toList", "        var prefixes = List[String]()\n        for (i <-\
    \ 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        if (string.length == 0) return\
    \ List(\"\")\n        val prefix = string.substring(0, string.length - 1)\n  \
    \      val suffix = string.substring(string.length - 1)\n        val prefixes\
    \ = allPrefixes(prefix)\n        prefixes ::: (prefixes.map(x => x + suffix))",
  "        var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        if (string.length == 0) List()\n        else {\n \
    \           val prefix = string.substring(0, string.length - 1)\n            prefix\
    \ :: allPrefixes(prefix)\n        }", "        if (string.length == 0) List()\n\
    \        else {\n            val prefix = string.substring(0, string.length -\
    \ 1)\n            prefix :: allPrefixes(prefix)\n        }", "        val prefixes\
    \ = new ListBuffer[String]\n        for (i <- 0 to string.length) {\n        \
    \    prefixes += string.substring(0, i)\n        }\n        prefixes.toList",
  "        var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = prefixes :+ string.substring(0, i)\n        }\n      \
    \  return prefixes", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        if (string.length == 0) return List()\n\
    \        val prefixes = new ListBuffer[String]\n        for (i <- 0 to string.length\
    \ - 1) {\n            prefixes += string.substring(0, i + 1)\n        }\n    \
    \    prefixes.toList", "        if (string.length == 0) List(\"\")\n        else\
    \ {\n            val prefix = string.substring(0, string.length - 1)\n       \
    \     allPrefixes(prefix) :+ string\n        }", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        val result\
    \ = new ListBuffer[String]()\n        for (i <- 0 to string.length - 1) {\n  \
    \          result += string.substring(0, i + 1)\n        }\n        result.toList",
  "        var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = string.substring(0, i) :: prefixes\n        }\n      \
    \  prefixes", "        if (string.length == 0) return List()\n        val prefix\
    \ = string.substring(0, string.length - 1)\n        return List(prefix) ::: allPrefixes(prefix)",
  "        var result = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var prefixes = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i)\n        }\n  \
    \      return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) return\
    \ List()\n        val prefixes = new ListBuffer[String]\n        for (i <- 0 to\
    \ string.length - 1) {\n            prefixes += string.substring(0, i + 1)\n \
    \       }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        if (string.length ==\
    \ 0) List()\n        else {\n            val prefixes = for (i <- 0 until string.length)\
    \ yield string.substring(0, i + 1)\n            prefixes.toList\n        }", " \
    \       var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n\
    \            prefixes = string.substring(0, i) :: prefixes\n        }\n      \
    \  prefixes", "        if (string.length == 0) return List()\n        var result\
    \ = List(string)\n        for (i <- 1 to string.length - 1) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     if (string.length == 0) List()\n        else {\n            val prefixes\
    \ = for (i <- 0 to string.length - 1) yield string.substring(0, i + 1)\n     \
    \       prefixes.toList\n        }", "        var result = List[String]()\n  \
    \      for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) return\
    \ List()\n        val prefixes = new ListBuffer[String]\n        for (i <- 0 to\
    \ string.length - 1) {\n            prefixes += string.substring(0, i + 1)\n \
    \       }\n        prefixes.toList", "        val n = string.length\n        (for\
    \ (i <- 0 until n) yield string.substring(0, i + 1)).toList", "        val n =\
    \ string.length\n        (for (i <- 0 until n) yield string.substring(0, i + 1)).toList",
  "        val res = new ListBuffer[String]\n        for (i <- 0 to string.length)\
    \ res += string.substring(0, i)\n        res.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        if (string.length == 0) return\
    \ List()\n        val prefix = string.substring(0, string.length - 1)\n      \
    \  return allPrefixes(prefix) :+ string", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        if (string.length\
    \ == 0) return List()\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        return prefix :: allPrefixes(prefix)", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            prefix :: allPrefixes(prefix)\n        }", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var result = List[String]()\n        for (i <- 0 to string.length) {\n \
    \           result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = string.substring(0, i) :: result\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = string.substring(0,\
    \ i + 1) :: result\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
