name: HumanEval_100_make_a_pile
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  \    // The first level has n stones.\n    // The number of stones in the next level\
  \ is:\n    // - the next odd number if n is odd.\n    // - the next even number\
  \ if n is even.\n    // Return the number of stones in each level in a list, where\
  \ element at index\n    // i represents the number of stones in the level (i+1).\n\
  \    // Examples:\n    def makeAPile(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
  \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
  \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
  \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
  \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var result = List[Long]()\n        var current = n\n      \
    \  while (current > 0) {\n            result = current :: result\n           \
    \ if (current % 2 == 0) current = current / 2\n            else current = (current\
    \ - 1) / 2\n        }\n        result", "        var result = List[Long]()\n \
    \       var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ l = ListBuffer[Long]()\n        var i = n\n        while (i > 0) {\n       \
    \     l += i\n            if (i % 2 == 0) i /= 2\n            else i = i / 2 +\
    \ 1\n        }\n        l.toList", "        var result = List[Long]()\n      \
    \  var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current -= 1\n            current\
    \ /= 2\n        }\n        result", "        var result = List[Long]()\n     \
    \   var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ l = List[Long]()\n        var nn = n\n        while (nn > 0) {\n           \
    \ l = nn :: l\n            if (nn % 2 == 0) nn = nn / 2\n            else nn =\
    \ nn / 2 + 1\n        }\n        l", "        var result = List[Long]()\n    \
    \    var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            if (current % 2 == 0)\
    \ current = current / 2 - 1\n            else current = current / 2\n        }\n\
    \        result", "        val l = new ListBuffer[Long]\n        var i = n\n \
    \       while (i > 0) {\n            l += i\n            i = if (i % 2 == 0) i\
    \ / 2 else (i + 1) / 2\n        }\n        l.toList", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     val result = new ListBuffer[Long]\n        var i = n\n        while (i >\
    \ 0) {\n            result += i\n            i = if (i % 2 == 0) i / 2 else (i\
    \ + 1) / 2\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        val result = new\
    \ ListBuffer[Long]\n        var current = n\n        while (current > 0) {\n \
    \           result += current\n            if (current % 2 == 0) current = current\
    \ / 2 else current = (current - 1) / 2\n        }\n        result.toList", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current -= 1\n            current /= 2\n        }\n        result", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2\n            else current = (current - 1) / 2\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current -= 1\n            current /= 2\n  \
    \      }\n        result.toList", "        var result = List[Long]()\n       \
    \ var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ result = ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            if (current % 2 == 0) current\
    \ -= 1\n            current /= 2\n        }\n        result.toList", "       \
    \ var result = ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            if (current % 2 == 0) current\
    \ = current / 2\n            else current = (current - 1) / 2\n        }\n   \
    \     result.toList", "        var result = ListBuffer[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result += current\n        \
    \    if (current % 2 == 0) current = current / 2 - 1\n            else current\
    \ = current / 2\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        def makeAPile(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n % 2 ==\
    \ 0) makeAPile(n - 1, (n - 1) :: acc)\n            else makeAPile(n - 1, n ::\
    \ acc)\n        }\n        makeAPile(n, List())", "        def makeAPile(n : Long,\
    \ acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n          \
    \  else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n            else makeAPile(n\
    \ - 1, (n - 1) :: acc)\n        }\n        makeAPile(n, List(n)).reverse", " \
    \       def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n         \
    \   if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n - 1, (n + 1)\
    \ :: acc)\n            else makeAPile(n - 1, (n - 1) :: acc)\n        }\n    \
    \    makeAPile(n, List(n)).reverse", "        var result = List[Long]()\n    \
    \    var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ l = List[Long]()\n        var i = n\n        while (i > 0) {\n            l\
    \ = i :: l\n            if (i % 2 == 0) i = i / 2\n            else i = (i - 1)\
    \ / 2\n        }\n        l", "        val result = new ListBuffer[Long]\n   \
    \     var current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current -= 1\n            current /= 2\n  \
    \      }\n        result.toList", "        var list = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            list = i :: list\n            if\
    \ (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n        }\n      \
    \  list", "        var result = List[Long]()\n        var current = n\n      \
    \  while (current > 0) {\n            result = current :: result\n           \
    \ if (current % 2 == 0) current = current / 2 - 1\n            else current =\
    \ current / 2\n        }\n        result", "        val result = new ListBuffer[Long]\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current = current / 2\n         \
    \   else current = (current - 1) / 2\n        }\n        result.toList", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        val result = new ListBuffer[Long]\n      \
    \  var current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result.toList", "        var result\
    \ = List[Long]()\n        var cur = n\n        while (cur > 0) {\n           \
    \ result = cur :: result\n            if (cur % 2 == 0) cur -= 1\n           \
    \ cur /= 2\n        }\n        result", "        var result = List[Long]()\n \
    \       var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            if (current % 2 == 0)\
    \ current = current / 2 - 1\n            else current = current / 2\n        }\n\
    \        result", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       if (current % 2 == 0) current = current / 2 - 1\n            else current\
    \ = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result", "        def makeAPile(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) acc\n            else {\n                val next\
    \ = if (n % 2 == 0) n + 1 else n + 2\n                makeAPile(next, n :: acc)\n\
    \            }\n        }\n        makeAPile(n, Nil).reverse", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            if (current % 2 == 0) current\
    \ = current / 2 - 1\n            else current = current / 2\n        }\n     \
    \   result", "        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i =\
    \ i / 2 - 1\n            else i = i / 2\n        }\n        result", "       \
    \ var result = ListBuffer[Long]()\n        var level = n\n        while (level\
    \ > 0) {\n            result += level\n            level = if (level % 2 == 0)\
    \ level / 2 else (level + 1) / 2\n        }\n        result.toList", "       \
    \ var result = List[Long]()\n        var i = n\n        while (i > 0) {\n    \
    \        result = i :: result\n            if (i % 2 == 0) i = i / 2 else i =\
    \ (i + 1) / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2\n\
    \            else current = (current - 1) / 2\n        }\n        result", " \
    \       val result = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current -= 1\n            else current -= 2\n        }\n        result.toList",
  "        val list = ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            list += current\n            if (current % 2 == 0) current\
    \ = current / 2 - 1\n            else current = current / 2\n        }\n     \
    \   list.toList", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       if (current % 2 == 0) current = current / 2 - 1\n            else current\
    \ = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2\n\
    \            else current = (current - 1) / 2\n        }\n        result", " \
    \       var result = ListBuffer[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current -= 1\n            current /= 2\n        }\n        result.toList",
  "        def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n - 1, (n + 1)\
    \ :: acc)\n            else makeAPile(n - 1, (n - 1) :: acc)\n        }\n    \
    \    makeAPile(n, List(n)).reverse", "        var result = List[Long]()\n    \
    \    var i = n\n        while (i > 0) {\n            result = i :: result\n  \
    \          if (i % 2 == 0) i = i / 2 else i = i / 2 + 1\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var level = n\n        while (level >\
    \ 0) {\n            result = level :: result\n            if (level % 2 == 0)\
    \ level = level / 2\n            else level = (level - 1) / 2\n        }\n   \
    \     result", "        var result = ListBuffer[Long]()\n        var i = n\n \
    \       while (i > 0) {\n            result += i\n            if (i % 2 == 0)\
    \ i = i / 2\n            else i = (i - 1) / 2\n        }\n        result.toList",
  "        val list = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current > 0) {\n            list += current\n            if (current % 2 ==\
    \ 0) current = current / 2 else current = current / 2 + 1\n        }\n       \
    \ list.toList", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       if (current % 2 == 0) current = current / 2\n            else current\
    \ = (current - 1) / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = result :+ current\n            if (current % 2\
    \ == 0) current = current / 2\n            else current = (current + 1) / 2\n\
    \        }\n        result.reverse", "        var result = List[Long]()\n    \
    \    var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            if (current % 2 == 0)\
    \ current = current / 2 - 1\n            else current = current / 2\n        }\n\
    \        result", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       if (current % 2 == 0) current = current / 2 - 1\n            else current\
    \ = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2\n\
    \            else current = current / 2 + 1\n        }\n        result", "   \
    \     var result = ListBuffer[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result.toList", "        var result = List[Long]()\n       \
    \ var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            if (current % 2 == 0)\
    \ current -= 1\n            current /= 2\n        }\n        result", "      \
    \  var result = ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            if (current % 2 == 0) current\
    \ = current / 2 - 1\n            else current = current / 2\n        }\n     \
    \   result.toList", "        var result = ListBuffer[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result += current\n        \
    \    if (current % 2 == 0) current -= 1\n            current /= 2\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result", "        var l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            if\
    \ (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n        }\n      \
    \  l.toList", "        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i =\
    \ i / 2\n            else i = (i - 1) / 2\n        }\n        result", "     \
    \   var list = ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            list += current\n            if (current % 2 == 0) current\
    \ = current / 2\n            else current = (current - 1) / 2\n        }\n   \
    \     list.toList", "        var l = List[Long]()\n        var x = n\n       \
    \ while (x > 0) {\n            l = x :: l\n            if (x % 2 == 0) x = x /\
    \ 2\n            else x = (x - 1) / 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            if (current % 2 == 0) current\
    \ = current / 2\n            else current = (current - 1) / 2\n        }\n   \
    \     result", "        var result = List[Long]()\n        var current = n\n \
    \       while (current > 0) {\n            result = current :: result\n      \
    \      if (current % 2 == 0) current = current / 2 else current = (current - 1)\
    \ / 2\n        }\n        result", "        var result = List[Long]()\n      \
    \  var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2\n       \
    \     else current = (current - 1) / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var x = n\n        while (x > 0) {\n        \
    \    result = x :: result\n            if (x % 2 == 0) x = x / 2\n           \
    \ else x = x / 2 + 1\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2\n\
    \            else current = (current - 1) / 2\n        }\n        result", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2\n            else current\
    \ = (current - 1) / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n   \
    \     }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current -= 1\n        \
    \    current /= 2\n        }\n        result", "        val list = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            list += i\n         \
    \   i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        list.toList",
  "        var result = ListBuffer[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current -= 1\n            current /= 2\n        }\n        result.toList",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2\n            else current = (current - 1) / 2\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    var current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result.toList", "        val result\
    \ = new ListBuffer[Long]\n        var m = n\n        while (m > 0) {\n       \
    \     result += m\n            m = if (m % 2 == 0) m / 2 else (m - 1) / 2\n  \
    \      }\n        result.toList", "        var list = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            list = i :: list\n            if\
    \ (i % 2 == 0) i = i / 2 else i = (i - 1) / 2\n        }\n        list", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n - 1) :: acc)\n           \
    \ else makeAPile(n - 1, n :: acc)\n        }\n        makeAPile(n, List()).reverse",
  "        var list = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            list = current :: list\n            if (current % 2 == 0)\
    \ current = current / 2\n            else current = current / 2 + 1\n        }\n\
    \        list", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       if (current % 2 == 0) current = current / 2 - 1\n            else current\
    \ = current / 2\n        }\n        result", "        var result = ListBuffer[Long]()\n\
    \        var x = n\n        while (x > 0) {\n            result += x\n       \
    \     if (x % 2 == 0) x = x / 2\n            else x = (x - 1) / 2\n        }\n\
    \        result.toList", "        var list = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            list = i :: list\n            if (i % 2\
    \ == 0) i = i / 2\n            else i = (i - 1) / 2\n        }\n        list",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     val result = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result.toList", "        var result = List[Long]()\n       \
    \ var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2\n       \
    \     else current = current / 2 + 1\n        }\n        result", "        var\
    \ l = List[Long]()\n        var i = n\n        while (i > 0) {\n            l\
    \ = i :: l\n            if (i % 2 == 0) i = i / 2 - 1\n            else i = i\
    \ / 2\n        }\n        l", "        var result = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            result = i :: result\n         \
    \   if (i % 2 == 0) i = i / 2 else i = (i + 1) / 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        val l = ListBuffer[Long]()\n        var i\
    \ = n\n        while (i > 0) {\n            l += i\n            i = if (i % 2\
    \ == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList", "        if (n ==\
    \ 1) return List(1)\n        val next = if (n % 2 == 0) n + 1 else n + 2\n   \
    \     n :: makeAPile(next)", "        var l = List[Long]()\n        var m = n\n\
    \        while (m > 0) {\n            l = m :: l\n            if (m % 2 == 0)\
    \ m = m / 2 - 1\n            else m = m / 2\n        }\n        l", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            if (current % 2 == 0)\
    \ current = current / 2 - 1\n            else current = current / 2\n        }\n\
    \        result", "        def makeAPile(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) acc.reverse\n            else if (n % 2 == 0) makeAPile(n\
    \ - 1, (n + 1) :: acc)\n            else makeAPile(n - 1, (n - 1) :: acc)\n  \
    \      }\n        makeAPile(n, List(n))", "        val l = ListBuffer[Long]()\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            if\
    \ (m % 2 == 0) m = m / 2\n            else m = (m - 1) / 2\n        }\n      \
    \  l.toList", "        var list = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            list = i :: list\n            if (i % 2 == 0) i = i /\
    \ 2\n            else i = (i - 1) / 2\n        }\n        list", "        var\
    \ result = ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            if (current % 2 == 0) current\
    \ /= 2\n            else current = current / 2 + 1\n        }\n        result.toList",
  "        var result = new ListBuffer[Long]\n        var level = n\n        while\
    \ (level > 0) {\n            result += level\n            level = if (level %\
    \ 2 == 0) level / 2 else (level + 1) / 2\n        }\n        result.toList", " \
    \       var l = List[Long]()\n        var i = n\n        while (i > 0) {\n   \
    \         l = i :: l\n            if (i % 2 == 0) i = i / 2\n            else\
    \ i = (i - 1) / 2\n        }\n        l", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var l = List[Long]()\n        var i = n\n        while (i > 0) {\n     \
    \       l = i :: l\n            if (i % 2 == 0) i = i / 2\n            else i\
    \ = (i + 1) / 2\n        }\n        l", "        var result = List[Long]()\n \
    \       var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            if (current % 2 == 0) current\
    \ = current / 2\n            else current = (current - 1) / 2\n        }\n   \
    \     result.toList", "        val result = new ListBuffer[Long]\n        var\
    \ current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current -= 1\n            else current -= 2\n\
    \        }\n        result.toList", "        var result = List[Long]()\n     \
    \   var i = n\n        while (i > 0) {\n            result = i :: result\n   \
    \         if (i % 2 == 0) i = i / 2 else i = (i + 1) / 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current -= 1\n            current /= 2\n        }\n        result", " \
    \       var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = ListBuffer[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current -= 1\n            current /= 2\n  \
    \      }\n        result.toList", "        var result = List[Long]()\n       \
    \ var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            if (current % 2 == 0) current = current / 2 - 1\n   \
    \         else current = current / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            if (current % 2 == 0)\
    \ current = current / 2\n            else current = (current - 1) / 2\n      \
    \  }\n        result", "        def makeAPile(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n\
    \ - 1, (n - 1) :: acc)\n            else makeAPile(n - 1, n :: acc)\n        }\n\
    \        makeAPile(n, List())", "        var result = new ListBuffer[Long]\n \
    \       var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current = current / 2 - 1\n     \
    \       else current = current / 2\n        }\n        result.toList", "     \
    \   var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2\n            else current = current / 2 + 1\n  \
    \      }\n        result", "        var result = ListBuffer[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result += current\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result.toList", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            if (current % 2 == 0) current\
    \ = current / 2 - 1\n            else current = current / 2\n        }\n     \
    \   result", "        var l = List[Long]()\n        var m = n\n        while (m\
    \ > 0) {\n            l = m :: l\n            if (m % 2 == 0) m = m / 2\n    \
    \        else m = (m - 1) / 2\n        }\n        l", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var l = ListBuffer[Long]()\n        var m = n\n        while (m > 0) {\n\
    \            l += m\n            if (m % 2 == 0) m /= 2\n            else m =\
    \ m / 2 + 1\n        }\n        l.toList", "        var l = List[Long]()\n   \
    \     var i = n\n        while (i > 0) {\n            l = i :: l\n           \
    \ if (i % 2 == 0) i = i / 2\n            else i = i / 2 + 1\n        }\n     \
    \   l", "        var result = List[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result = current :: result\n            if (current\
    \ % 2 == 0) current -= 1\n            current /= 2\n        }\n        result",
  "        var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i = i / 2 else\
    \ i = i / 2 + 1\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m / 2 else (m + 1) / 2\n        }\n        l.toList", "  \
    \      var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2\n            else i = (i - 1) / 2\n   \
    \     }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     val result = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current -= 1\n            current /= 2\n        }\n        result.toList",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current /= 2\n            else current\
    \ = current / 2 + 1\n        }\n        result.toList", "        var result =\
    \ List[Long]()\n        var current = n\n        while (current > 0) {\n     \
    \       result = current :: result\n            if (current % 2 == 0) current\
    \ = current / 2\n            else current = (current - 1) / 2\n        }\n   \
    \     result", "        var result = List[Long]()\n        var current = n\n \
    \       while (current > 0) {\n            result = current :: result\n      \
    \      if (current % 2 == 0) current = current / 2 - 1\n            else current\
    \ = current / 2\n        }\n        result", "        var result = ListBuffer[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current -= 1\n            current\
    \ /= 2\n        }\n        result.toList", "        var l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            if\
    \ (i % 2 == 0) i /= 2\n            else i = i / 2 + 1\n        }\n        l.toList",
  "        var result = ListBuffer[Long]()\n        var i = n\n        while (i >\
    \ 0) {\n            result += i\n            if (i % 2 == 0) i = i / 2 - 1\n \
    \           else i = i / 2\n        }\n        result.toList", "        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n - 1) :: acc)\n        }\n        makeAPile(n, List(n)).reverse",
  "        var list = List[Long]()\n        var i = n\n        while (i > 0) {\n \
    \           list = i :: list\n            if (i % 2 == 0) i = i / 2 else i = i\
    \ / 2 + 1\n        }\n        list", "        var l = List[Long]()\n        var\
    \ c = n\n        while (c > 0) {\n            l = c :: l\n            c = if (c\
    \ % 2 == 0) c / 2 else (c + 1) / 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            if (current % 2 == 0) current\
    \ = current / 2\n            else current = (current - 1) / 2\n        }\n   \
    \     result", "        def makeAPile(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n\
    \ - 1, (n - 1) :: acc)\n            else makeAPile(n - 1, n :: acc)\n        }\n\
    \        makeAPile(n, List()).reverse", "        var list = List[Long]()\n   \
    \     var m = n\n        while (m > 0) {\n            list = m :: list\n     \
    \       if (m % 2 == 0) m = m / 2\n            else m = (m - 1) / 2\n        }\n\
    \        list", "        var result = List[Long]()\n        var i = n\n      \
    \  while (i > 0) {\n            result = i :: result\n            if (i % 2 ==\
    \ 0) i = i / 2\n            else i = (i - 1) / 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 else current = current / 2 + 1\n        }\n    \
    \    result", "        val result = new ListBuffer[Long]\n        var current\
    \ = n\n        while (current > 0) {\n            result += current\n        \
    \    if (current % 2 == 0) current -= 1\n            current /= 2\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            if (current % 2 == 0) current = current / 2\n            else current\
    \ = (current - 1) / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     val result = new ListBuffer[Long]\n        var m = n\n        while (m >\
    \ 0) {\n            result += m\n            m = if (m % 2 == 0) m / 2 else (m\
    \ + 1) / 2\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var cur = n\n        while (cur > 0) {\n            result = cur :: result\n\
    \            if (cur % 2 == 0) cur = cur / 2 - 1\n            else cur = cur /\
    \ 2\n        }\n        result", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result = current ::\
    \ result\n            if (current % 2 == 0) current = current / 2 - 1\n      \
    \      else current = current / 2\n        }\n        result", "        var lst\
    \ = List[Long]()\n        var x = n\n        while (x > 0) {\n            lst\
    \ = x :: lst\n            if (x % 2 == 0) x = x / 2 else x = x / 2 + 1\n     \
    \   }\n        lst", "        var result = List[Long]()\n        var current =\
    \ n\n        while (current > 0) {\n            result = current :: result\n \
    \           if (current % 2 == 0) current = current / 2 - 1\n            else\
    \ current = current / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 else\
    \ current = (current - 1) / 2\n        }\n        result", "        var result\
    \ = List[Long]()\n        var i = n\n        while (i > 0) {\n            result\
    \ = i :: result\n            if (i % 2 == 0) i = i / 2 else i = i / 2 + 1\n  \
    \      }\n        result", "        var result = ListBuffer[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            result += i\n            if (i %\
    \ 2 == 0) i -= 1\n            else i -= 2\n        }\n        result.toList",
  "        var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i = i / 2 - 1\n\
    \            else i = i / 2\n        }\n        result", "        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList", "  \
    \      var result = ListBuffer[Long]()\n        var i = n\n        while (i >\
    \ 0) {\n            result += i\n            if (i % 2 == 0) i /= 2\n        \
    \    else i = i / 2 + 1\n        }\n        result.toList", "        var result\
    \ = ListBuffer[Long]()\n        var current = n\n        while (current > 0) {\n\
    \            result += current\n            if (current % 2 == 0) current = current\
    \ / 2 - 1\n            else current = current / 2\n        }\n        result.toList",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current -= 1\n            current /= 2\n        }\n        result", " \
    \       var result = ListBuffer[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result.toList", "        var result = ListBuffer[Long]()\n \
    \       var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current = current / 2\n         \
    \   else current = (current - 1) / 2\n        }\n        result.toList", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result", "        var l = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0)\
    \ i = i / 2\n            else i = (i - 1) / 2\n        }\n        l", "      \
    \  var result = ListBuffer[Long]()\n        var m = n\n        while (m > 0) {\n\
    \            result += m\n            if (m % 2 == 0) m /= 2\n            else\
    \ m = m / 2 + 1\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 else i = (i - 1) / 2\n        }\n     \
    \   result", "        def makeAPile(n : Long, acc : List[Long]) : List[Long] =\
    \ {\n            if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n\
    \ - 1, (n - 1) :: acc)\n            else makeAPile(n - 1, n :: acc)\n        }\n\
    \        makeAPile(n, List())", "        val result = new ListBuffer[Long]\n \
    \       var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current = current / 2 - 1\n     \
    \       else current = current / 2\n        }\n        result.toList", "     \
    \   def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n - 1, (n - 1) :: acc)\n\
    \            else makeAPile(n - 1, n :: acc)\n        }\n        makeAPile(n,\
    \ List())", "        var result = List[Long]()\n        var current = n\n    \
    \    while (current > 0) {\n            result = current :: result\n         \
    \   if (current % 2 == 0) current -= 1\n            current /= 2\n        }\n\
    \        result", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       if (current % 2 == 0) current = current / 2\n            else current\
    \ = (current - 1) / 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var current = n\n        while (current != 0) {\n            result =\
    \ current :: result\n            if (current % 2 == 0) current = current / 2 -\
    \ 1\n            else current = current / 2\n        }\n        result", "   \
    \     var result = new ListBuffer[Long]\n        var current = n\n        while\
    \ (current > 0) {\n            result += current\n            if (current % 2\
    \ == 0) current = current / 2 - 1\n            else current = current / 2\n  \
    \      }\n        result.toList"]
stop_tokens:
- "\n    }\n"
