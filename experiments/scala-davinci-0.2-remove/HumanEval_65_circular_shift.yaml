name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    def circularShift(x : Long, shift : Long) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val digits = x.toString.toList\n        val n = digits.length\n\
    \        if (shift >= n) digits.reverse.mkString\n        else digits.drop(shift.toInt).mkString\
    \ + digits.take(shift.toInt).mkString", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shiftMod = shift % n\n        if (shiftMod\
    \ == 0) {\n            x.toString\n        } else {\n            val (left, right)\
    \ = digits.splitAt(n - shiftMod)\n            (right ::: left).mkString\n    \
    \    }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val shiftDigits = if (shift > digits.length) digits.reverse else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt)\n        shiftDigits.mkString", "        val s =\
    \ x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n  \
    \      else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)", " \
    \       val str = x.toString\n        val len = str.length\n        if (shift\
    \ >= len) str.reverse\n        else str.substring(len - shift.toInt) + str.substring(0,\
    \ len - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val shiftMod = shift % digits.length\n        if (shiftMod == 0) digits.mkString\n\
    \        else if (shiftMod < digits.length / 2) digits.drop(shiftMod).mkString\
    \ + digits.take(shiftMod).mkString\n        else digits.reverse.drop(digits.length\
    \ - shiftMod).mkString + digits.reverse.take(digits.length - shiftMod).mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift1 = shift % n\n        if (shift1 == 0) digits.mkString\n        else\
    \ if (shift1 > n / 2) digits.reverse.mkString\n        else digits.drop(shift1.toInt).mkString\
    \ + digits.take(shift1.toInt).mkString", "        val s = x.toString\n       \
    \ val n = s.length\n        val shift2 = if (shift > n) n else shift\n       \
    \ val shift3 = if (shift2 == n) 0 else shift2\n        s.substring(n - shift3)\
    \ + s.substring(0, n - shift3)", "        val digits = x.toString.toList\n   \
    \     val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   val shiftMod = shift % len\n        if (shiftMod == 0) digits.mkString\n \
    \       else if (shiftMod > len / 2) digits.reverse.mkString\n        else digits.drop(shiftMod.toInt).mkString\
    \ + digits.take(shiftMod.toInt).mkString", "        val s = x.toString\n     \
    \   val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shifted = digits.drop(n - shift.toInt)\
    \ ++ digits.take(n - shift.toInt)\n        shifted.mkString", "        val digits\
    \ = x.toString.toList\n        val n = digits.length\n        val shift2 = if\
    \ (shift > n) n else shift\n        val (left, right) = digits.splitAt(n - shift2)\n\
    \        (right ::: left).mkString", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        if (shift >= len) digits.reverse.mkString\n\
    \        else (digits.slice(len - shift.toInt, len) ::: digits.slice(0, len -\
    \ shift.toInt)).mkString", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ n = digits.length\n        val shift2 = shift % n\n        if (shift2 == 0)\
    \ digits.mkString\n        else if (shift2 > n / 2) digits.reverse.mkString\n\
    \        else digits.drop(shift2.toInt).mkString + digits.take(shift2.toInt).mkString",
  "        val digits = x.toString.toList\n        val shiftMod = shift % digits.length\n\
    \        if (shiftMod == 0) digits.mkString\n        else if (shiftMod > digits.length\
    \ / 2) digits.reverse.mkString\n        else (digits.drop(shiftMod.toInt) :::\
    \ digits.take(shiftMod.toInt)).mkString", "        val s = x.toString\n      \
    \  val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val m = shift % n\n        if (m == 0) s\n\
    \        else if (m < n / 2) s.substring(m) + s.substring(0, m)\n        else\
    \ s.substring(n - m) + s.substring(0, n - m)", "        val s = x.toString\n \
    \       if (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n   \
    \     val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(shift.toInt)\
    \ + s.substring(0, shift.toInt)", "        val digits = x.toString.toList\n  \
    \      val shift2 = shift % digits.length\n        if (shift2 == 0) digits.mkString\n\
    \        else digits.drop(digits.length - shift2).mkString + digits.take(digits.length\
    \ - shift2).mkString", "        val s = x.toString\n        if (shift >= s.length)\
    \ return s.reverse\n        val (a, b) = s.splitAt(s.length - shift.toInt)\n \
    \       b + a", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift1 = if (shift > n) n else shift\n        val shift2 = if (shift1\
    \ == n) 0 else shift1\n        val (a, b) = digits.splitAt(n - shift2)\n     \
    \   (b ++ a).mkString", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift1 = shift % n\n        if (shift1\
    \ == 0) digits.mkString\n        else if (shift1 > n / 2) digits.reverse.mkString\n\
    \        else digits.drop(shift1).mkString + digits.take(shift1).mkString", " \
    \       val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shift2 = if (shift > n) n else shift\n        val (left, right) =\
    \ digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val shiftDigits = digits.takeRight(shift.toInt)\n\
    \        val remainingDigits = digits.dropRight(shift.toInt)\n        (shiftDigits\
    \ ::: remainingDigits).mkString", "        val digits = x.toString.toList\n  \
    \      val len = digits.length\n        if (shift > len) digits.reverse.mkString\n\
    \        else digits.drop(shift.toInt).mkString + digits.take(shift.toInt).mkString",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shiftMod = shift % n\n        if (shiftMod == 0) x.toString\n   \
    \     else if (shiftMod > n / 2) digits.reverse.mkString\n        else digits.drop(shiftMod).mkString\
    \ + digits.take(shiftMod).mkString", "        val s = x.toString\n        if (shift\
    \ >= s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ n = digits.length\n        val shift2 = if (shift > n) n - shift % n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift >= n) digits.reverse.mkString\n        else digits.slice(n - shift.toInt,\
    \ n) ++ digits.slice(0, n - shift.toInt)", "        val s = x.toString\n     \
    \   val n = s.length\n        if (shift >= n) {\n            s.reverse\n     \
    \   } else {\n            s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)\n\
    \        }", "        val s = x.toString\n        val n = s.length\n        if\
    \ (shift >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val s = x.toString\n        val n = s.length\n \
    \       if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val n\
    \ = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ % n else shift\n        val (left, right) = digits.splitAt(n - shift2)\n   \
    \     (right ++ left).mkString", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else if (shiftDigits == digits) x.toString.reverse\n        else x.toString.substring(digits\
    \ - shiftDigits) + x.toString.substring(0, digits - shiftDigits)", "        val\
    \ digits = x.toString.length\n        if (shift > digits) {\n            return\
    \ x.toString.reverse\n        }\n        val right = x % (pow(10, shift).toLong)\n\
    \        val left = x / (pow(10, shift).toLong)\n        return (right.toString\
    \ + left.toString)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ shiftDigits = digits.takeRight(shift.toInt) ::: digits.dropRight(shift.toInt)\n\
    \        shiftDigits.reverse.mkString", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) return s.reverse\n        val\
    \ (a, b) = s.splitAt(n - shift.toInt)\n        b + a", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.takeRight(shift.toInt)\n        val remainingDigits\
    \ = digits.dropRight(shift.toInt)\n        (shiftDigits ::: remainingDigits).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   val shiftMod = shift % len\n        if (shiftMod == 0) digits.mkString\n \
    \       else if (shiftMod > len / 2) digits.reverse.mkString\n        else (digits.drop(shiftMod.toInt)\
    \ ::: digits.take(shiftMod.toInt)).mkString", "        val s = x.toString\n  \
    \      val n = s.length\n        if (shift > n) return s.reverse\n        val\
    \ (a, b) = s.splitAt(n - shift.toInt)\n        b + a", "        val s = x.toString\n\
    \        val n = s.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val shift3 = if (shift2 == n) 0 else shift2\n        s.substring(n -\
    \ shift3) + s.substring(0, n - shift3)", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val shift2 = if (shift > n) n - shift % n else\
    \ shift\n        val (a, b) = s.splitAt(n - shift2)\n        b + a", "       \
    \ val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        if (shift >= s.length) s.reverse\n        else\
    \ s.substring(shift.toInt) + s.substring(0, shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (a, b) = s.splitAt(n - shift2)\n        b + a", "        val s =\
    \ x.toString\n        if (shift > s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        digits.drop(n - shift2).mkString + digits.take(n - shift2).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val shift2 = shift % digits.length\n\
    \        if (shift2 == 0) digits.mkString\n        else digits.drop(digits.length\
    \ - shift2).mkString + digits.take(digits.length - shift2).mkString", "      \
    \  val s = x.toString\n        val n = s.length\n        val shift2 = if (shift\
    \ > n) n else shift\n        val s2 = s.substring(n - shift2) + s.substring(0,\
    \ n - shift2)\n        s2", "        val s = x.toString\n        if (shift >=\
    \ s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ remainingDigits = digits.take(digits.length - shift.toInt)\n        (shiftDigits\
    \ ::: remainingDigits).mkString", "        val s = x.toString\n        val n =\
    \ s.length\n        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else {\n            val (a, b) = digits.splitAt(n - shift.toInt)\n  \
    \          (b ++ a).mkString\n        }", "        val s = x.toString\n      \
    \  if (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ++ left).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) {\n\
    \            s.reverse\n        } else {\n            s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        val shiftMod = shift % digits\n        if (shiftMod == 0) x.toString\n\
    \        else if (shiftMod > digits / 2) {\n            val s = x.toString\n \
    \           s.substring(digits - shiftMod) + s.substring(0, digits - shiftMod)\n\
    \        }\n        else {\n            val s = x.toString\n            s.substring(shiftMod)\
    \ + s.substring(0, shiftMod)\n        }", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        val shift2 = if (shift > len) len else\
    \ shift\n        val (left, right) = digits.splitAt(len - shift2)\n        (right\
    \ ::: left).mkString", "        val digits = x.toString.toList\n        val n\
    \ = digits.length\n        val shift1 = if (shift > n) n else shift\n        val\
    \ shift2 = if (shift1 == n) 0 else shift1\n        val (left, right) = digits.splitAt(n\
    \ - shift2)\n        (right ::: left).mkString", "        val s = x.toString\n\
    \        val n = s.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (a, b) = s.splitAt(n - shift2)\n        b + a", "        val s =\
    \ x.toString\n        if (shift >= s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        val shift2 = shift % len\n        if\
    \ (shift2 == 0) return x.toString\n        val (left, right) = digits.splitAt(len\
    \ - shift2)\n        (right ++ left).mkString", "        val digits = x.toString.toList\n\
    \        val len = digits.length\n        if (shift > len) digits.reverse.mkString\n\
    \        else {\n            val (a, b) = digits.splitAt(len - shift.toInt)\n\
    \            (b ++ a).mkString\n        }", "        val s = x.toString\n    \
    \    val n = s.length\n        val shift2 = if (shift > n) n - shift % n else\
    \ shift\n        s.substring(shift2) + s.substring(0, shift2)", "        val digits\
    \ = x.toString.toList\n        val numDigits = digits.length\n        if (shift\
    \ > numDigits) digits.reverse.mkString\n        else {\n            val (left,\
    \ right) = digits.splitAt(numDigits - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val s = x.toString\n        val n = s.length\n        if\
    \ (shift >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toArray\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ % n else shift\n        val result = new Array[Int](n)\n        for (i <- 0\
    \ until n) result(i) = digits((i + shift2) % n)\n        result.mkString", " \
    \       val s = x.toString\n        val n = s.length\n        val shift2 = if\
    \ (shift > n) n else shift\n        s.substring(n - shift2, n) + s.substring(0,\
    \ n - shift2)", "        val s = x.toString\n        val n = s.length\n      \
    \  if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        if (shift >=\
    \ s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shifted = digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)\n\
    \        shifted.mkString", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ++ left).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift2 = if (shift > n) n else shift\n        val (left, right) = digits.splitAt(n\
    \ - shift2)\n        (right ::: left).mkString", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val r = shift % n\n        if (r == 0) s\n\
    \        else if (r > 0) s.substring(n - r) + s.substring(0, n - r)\n        else\
    \ s.substring(-r) + s.substring(0, -r)", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val shiftDigits = digits.dropRight(shift.toInt) ::: digits.takeRight(shift.toInt)\n\
    \        shiftDigits.reverse.mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val len = s.length\n        if (shift > len) s.reverse\n\
    \        else s.substring(len - shift.toInt) + s.substring(0, len - shift.toInt)",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shifted = digits.takeRight(shift.toInt) ++ digits.dropRight(shift.toInt)\n\
    \        shifted.mkString", "        val s = x.toString\n        if (shift >=\
    \ s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ shiftDigitsReversed = shiftDigits.reverse\n        val remainingDigits = digits.take(digits.length\
    \ - shift.toInt)\n        val remainingDigitsReversed = remainingDigits.reverse\n\
    \        (shiftDigitsReversed ::: remainingDigitsReversed).mkString", "      \
    \  val digits = x.toString.toList\n        val n = digits.length\n        val\
    \ shift1 = if (shift > n) n else shift\n        val shift2 = if (shift1 == n)\
    \ 0 else shift1\n        val (left, right) = digits.splitAt(n - shift2)\n    \
    \    (right ::: left).mkString", "        val s = x.toString\n        val n =\
    \ s.length\n        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val r = shift % n\n        if (r == 0) s\n\
    \        else if (r < n / 2) s.substring(r) + s.substring(0, r)\n        else\
    \ s.substring(n - r) + s.substring(0, n - r)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else digits.drop(shift.toInt).mkString + digits.take(shift.toInt).mkString",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val s = x.toString\n        if (shift == 0) s\n        else if (shift >=\
    \ s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        val shift2 = if (shift > n) n - shift else shift\n   \
    \     s.substring(n - shift2) + s.substring(0, n - shift2)", "        val s =\
    \ x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n  \
    \      else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)", " \
    \       val digits = x.toString.toList\n        val numDigits = digits.length\n\
    \        if (shift >= numDigits) digits.reverse.mkString\n        else {\n   \
    \         val (left, right) = digits.splitAt(numDigits - shift.toInt)\n      \
    \      (right ++ left).mkString\n        }", "        val s = x.toString\n   \
    \     val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        val shift2 = if (shift\
    \ > n) n - shift % n else shift\n        s.substring(n - shift2) + s.substring(0,\
    \ n - shift2)", "        val s = x.toString\n        val n = s.length\n      \
    \  if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.map(_.asDigit).toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ % n else shift\n        val shifted = digits.drop(shift2) ::: digits.take(shift2)\n\
    \        shifted.mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val n\
    \ = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val shift1 = if (shift > n) n - shift % n else\
    \ shift\n        s.substring(n - shift1) + s.substring(0, n - shift1)", "    \
    \    val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.map(_.asDigit).toList\n        val n = digits.length\n\
    \        val shiftMod = shift % n\n        if (shiftMod == 0) {\n            digits.mkString\n\
    \        } else {\n            val (left, right) = digits.splitAt(n - shiftMod)\n\
    \            (right ++ left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        s.substring(n -\
    \ shift2) + s.substring(0, n - shift2)", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)"]
stop_tokens:
- "\n    }\n"
