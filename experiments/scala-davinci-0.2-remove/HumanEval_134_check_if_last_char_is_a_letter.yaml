name: HumanEval_134_check_if_last_char_is_a_letter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns True if the last character\n    // of a given\
  \ string is an alphabetical character and is not\n    // a part of a word, and False\
  \ otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n\
  \    // Examples:\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
  apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) ==\
  \ (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  \")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  apple pi e \")) == (false));\n    }\n\n}\n"
completions: ["        if (txt.length == 0) return false\n        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = txt.takeRight(2).head.isWhitespace\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.split(\" \").last.contains(lastChar)\n\
    \        lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar =\
    \ txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex =\
    \ txt.length - 1\n            val charBeforeLastChar = txt(lastCharIndex - 1)\n\
    \            if (charBeforeLastChar.isLetter) {\n                return false\n\
    \            }\n            return true\n        }\n        return false", " \
    \       val lastChar = txt.last\n        if (lastChar.isLetter) {\n          \
    \  if (txt.length == 1) return true\n            if (txt(txt.length - 2).isLetter)\
    \ return false\n            return true\n        }\n        return false", " \
    \       val words = txt.split(\" \")\n        val lastWord = words(words.length\
    \ - 1)\n        val lastChar = lastWord(lastWord.length - 1)\n        lastChar.isLetter",
  "        val words = txt.split(\" \")\n        val lastWord = words(words.length\
    \ - 1)\n        val lastChar = lastWord(lastWord.length - 1)\n        lastChar.isLetter",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            val lastCharIsNotPartOfAWord\
    \ = txt.indexOf(lastChar, lastCharIndex - 1) == -1\n            return lastCharIsNotPartOfAWord\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord =\
    \ txt.takeRight(2).head.isWhitespace\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsALetter && lastCharIsNotPartOfAWord", "        if (txt.length ==\
    \ 0) return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            else return true\n        }\n        else return false",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val txtWithoutLastChar = txt.substring(0, txt.length - 1)\n            val lastCharIndex\
    \ = txtWithoutLastChar.lastIndexOf(lastChar)\n            if (lastCharIndex ==\
    \ -1) true\n            else {\n                val lastCharIndexPlusOne = lastCharIndex\
    \ + 1\n                val lastCharIndexPlusOneToEnd = txtWithoutLastChar.substring(lastCharIndexPlusOne)\n\
    \                if (lastCharIndexPlusOneToEnd.contains(\" \")) true\n       \
    \         else false\n            }\n        }\n        else false", "       \
    \ val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.takeRight(2).contains(\" \")\n      \
    \  lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfAWord\
    \ = txt.split(\" \").last.length > 1\n        lastCharIsLetter && !lastCharIsPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ if (txt.length == 1) {\n                return true\n            }\n       \
    \     val secondLastChar = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter)\
    \ {\n                return false\n            }\n            return true\n  \
    \      }\n        return false", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n    \
    \        val lastCharIsNotPartOfAWord = txt.indexOf(lastChar, lastCharIndex -\
    \ 1) == -1\n            lastCharIsNotPartOfAWord\n        } else false", "   \
    \     val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfWord\
    \ = txt.lastIndexOf(\" \") == txt.length - 1\n        lastCharIsLetter && !lastCharIsPartOfWord",
  "        if (txt.length == 0) return false\n        val lastChar = txt.charAt(txt.length\
    \ - 1)\n        if (lastChar.isLetter) {\n            if (txt.length == 1) return\
    \ true\n            val secondLastChar = txt.charAt(txt.length - 2)\n        \
    \    if (secondLastChar.isLetter) return false\n            return true\n    \
    \    }\n        return false", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = !txt.contains(\"\
    \ \" + lastChar)\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "   \
    \     if (txt.length == 0) return false\n        val lastChar = txt.last\n   \
    \     if (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n\
    \            if (lastCharIndex == 0) return true\n            val prevChar = txt(lastCharIndex\
    \ - 1)\n            if (prevChar.isLetter) return false\n            return true\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord =\
    \ txt.split(\" \").last.length == 1\n        return lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val words = txt.split(\"\
    \ \")\n        val lastWord = words(words.length - 1)\n        val lastChar =\
    \ lastWord(lastWord.length - 1)\n        return lastChar.isLetter", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length\
    \ > 1) {\n                val secondLastChar = txt.charAt(txt.length - 2)\n  \
    \              if (secondLastChar.isLetter) false\n                else true\n\
    \            }\n            else true\n        }\n        else false", "     \
    \   val lastChar = txt.last\n        if (lastChar.isLetter) {\n            val\
    \ txtWithoutLastChar = txt.substring(0, txt.length - 1)\n            val lastCharIndex\
    \ = txtWithoutLastChar.lastIndexOf(lastChar)\n            if (lastCharIndex ==\
    \ -1) {\n                return true\n            }\n            val lastCharIsNotPartOfAWord\
    \ = txtWithoutLastChar.charAt(lastCharIndex + 1) == ' '\n            return lastCharIsNotPartOfAWord\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfAWord = txt.split(\"\
    \ \").last.length > 1\n        lastCharIsLetter && !lastCharIsPartOfAWord", " \
    \       val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.split(\" \").last.contains(lastChar)\n\
    \        lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar =\
    \ txt.last\n        val isLetter = lastChar.isLetter\n        val isNotWord =\
    \ !txt.contains(lastChar)\n        isLetter && isNotWord", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length ==\
    \ 1) {\n                return true\n            }\n            else {\n     \
    \           if (txt(txt.length - 2) == ' ') {\n                    return true\n\
    \                }\n                else {\n                    return false\n\
    \                }\n            }\n        }\n        else {\n            return\
    \ false\n        }", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = !txt.contains(lastChar\
    \ + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            val beforeLastChar = txt(lastCharIndex - 1)\n\
    \            if (beforeLastChar.isLetter) false\n            else true\n     \
    \   }\n        else false", "        if (txt.length == 0) return false\n     \
    \   val lastChar = txt.last\n        if (lastChar.isLetter) {\n            if\
    \ (txt.length == 1) return true\n            val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n            if (secondLastChar.isLetter) return false\n            else\
    \ return true\n        }\n        else return false", "        val lastChar =\
    \ txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(\" \" + lastChar)\n        return lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.endsWith(\" \" + lastChar)\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            if (lastCharIndex == 0) {\n\
    \                return true\n            }\n            val prevChar = txt(lastCharIndex\
    \ - 1)\n            if (prevChar == ' ') {\n                return true\n    \
    \        }\n        }\n        return false", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n\
    \            val lastCharBefore = txt.charAt(lastCharIndex - 1)\n            if\
    \ (lastCharBefore == ' ') true else false\n        } else false", "        val\
    \ lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n   \
    \     val lastCharIsNotPartOfAWord = txt.lastIndexOf(\" \") == txt.length - 1\n\
    \        return lastCharIsALetter && lastCharIsNotPartOfAWord", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            val lastCharIsNotPartOfAWord = txt.indexOf(lastChar,\
    \ lastCharIndex - 1) == -1\n            lastCharIsNotPartOfAWord\n        } else\
    \ {\n            false\n        }", "        val txtArr = txt.split(\" \")\n \
    \       val lastWord = txtArr(txtArr.length - 1)\n        if (lastWord.length\
    \ == 1) {\n            return lastWord.matches(\"[a-zA-Z]\")\n        }\n    \
    \    return false", "        val words = txt.split(\" \")\n        val lastWord\
    \ = words(words.length - 1)\n        val lastChar = lastWord(lastWord.length -\
    \ 1)\n        lastChar.isLetter", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val word = txt.split(\" \").last\n      \
    \      if (word.last == lastChar) false\n            else true\n        }\n  \
    \      else false", "        val lastChar = txt.charAt(txt.length - 1)\n     \
    \   if (lastChar.isLetter) {\n            if (txt.length == 1) {\n           \
    \     return true\n            }\n            else {\n                val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n                if (secondLastChar.isLetter) {\n\
    \                    return false\n                }\n                else {\n\
    \                    return true\n                }\n            }\n        }\n\
    \        else {\n            return false\n        }", "        val lastChar =\
    \ txt.last\n        lastChar.isLetter && !txt.contains(lastChar)", "        var\
    \ lastChar = txt.charAt(txt.length - 1)\n        if (lastChar.isLetter) {\n  \
    \          if (txt.length == 1) return true\n            else {\n            \
    \    var secondLastChar = txt.charAt(txt.length - 2)\n                if (secondLastChar.isLetter)\
    \ return false\n                else return true\n            }\n        }\n \
    \       else return false", "        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n            val\
    \ beforeLastChar = txt.charAt(lastCharIndex - 1)\n            if (beforeLastChar\
    \ == ' ') true else false\n        } else false", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.substring(0, txt.length - 1).contains(lastChar)\n        lastCharIsLetter\
    \ && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.length - 1\n            val lastCharIsNotPartOfAWord\
    \ = txt.indexOf(lastChar, lastCharIndex - 1) == -1\n            return lastCharIsNotPartOfAWord\n\
    \        }\n        return false", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n\
    \            if (lastCharIndex == txt.length - 1) {\n                val lastCharBeforeIndex\
    \ = lastCharIndex - 1\n                if (lastCharBeforeIndex >= 0) {\n     \
    \               val lastCharBefore = txt(lastCharBeforeIndex)\n              \
    \      if (lastCharBefore.isLetter) {\n                        return false\n\
    \                    }\n                }\n                return true\n     \
    \       }\n        }\n        return false", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val txtWithoutLastChar = txt.substring(0,\
    \ txt.length - 1)\n            val lastCharIndex = txtWithoutLastChar.lastIndexOf(lastChar)\n\
    \            if (lastCharIndex == -1) return true\n            val lastCharIndexPlusOne\
    \ = lastCharIndex + 1\n            val lastCharIndexPlusOneIsSpace = txtWithoutLastChar.charAt(lastCharIndexPlusOne)\
    \ == ' '\n            return lastCharIndexPlusOneIsSpace\n        }\n        return\
    \ false", "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfWord = !txt.contains(lastChar + \" \")\n     \
    \   lastCharIsLetter && lastCharIsNotPartOfWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = txt.takeRight(2).contains(\" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfAWord\
    \ = txt.split(\" \").last.length > 1\n        lastCharIsLetter && !lastCharIsPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.endsWith(\" \" + lastChar)\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n\
    \            val lastCharIsNotPartOfAWord = txt.indexOf(\" \", lastCharIndex)\
    \ == -1\n            return lastCharIsNotPartOfAWord\n        }\n        return\
    \ false", "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = txt.split(\" \").last.length == 1\n  \
    \      lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar =\
    \ txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ if (txt.length == 1) true\n            else if (txt(txt.length - 2).isLetter)\
    \ false\n            else true\n        }\n        else false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            return true\n        }\n        return false", "        val\
    \ lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n    \
    \    val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n        lastCharIsLetter\
    \ && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n        val\
    \ lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord =\
    \ !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val words = txt.split(\"\
    \ \")\n        val lastWord = words(words.length - 1)\n        val lastChar =\
    \ lastWord(lastWord.length - 1)\n        lastChar.isLetter", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar.isLetter\n        val isNotPartOfAWord\
    \ = txt.split(\" \").last.length == 1\n        isLetter && isNotPartOfAWord",
  "        val txt2 = txt.trim\n        if (txt2.length == 0) return false\n     \
    \   val lastChar = txt2.last\n        if (lastChar == ' ') return false\n    \
    \    val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfAWord\
    \ = txt2.lastIndexOf(' ') == txt2.length - 1\n        lastCharIsLetter && !lastCharIsPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfWord = txt.split(\" \").last.contains(lastChar)\n\
    \        lastCharIsLetter && !lastCharIsPartOfWord", "        val words = txt.split(\"\
    \ \")\n        val lastWord = words(words.length - 1)\n        val lastChar =\
    \ lastWord(lastWord.length - 1)\n        return lastChar.isLetter", "        val\
    \ lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n    \
    \    val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n        lastCharIsLetter\
    \ && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n        val\
    \ lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotInAWord = !txt.contains(lastChar\
    \ + \" \")\n        lastCharIsALetter && lastCharIsNotInAWord", "        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(\" \" + lastChar)\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            if (lastCharIndex == 0) return\
    \ true\n            else {\n                val prevChar = txt(lastCharIndex -\
    \ 1)\n                if (prevChar.isLetter) return false\n                else\
    \ return true\n            }\n        }\n        else return false", "       \
    \ val txt_ = txt.trim\n        if (txt_.length == 0) return false\n        val\
    \ lastChar = txt_.charAt(txt_.length - 1)\n        if (lastChar.isLetter) {\n\
    \            if (txt_.length == 1) return true\n            val secondLastChar\
    \ = txt_.charAt(txt_.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            else return true\n        }\n        else return false",
  "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsALetter && lastCharIsNotPartOfAWord", "        val words = txt.split(\"\
    \ \")\n        val lastWord = words(words.length - 1)\n        val lastChar =\
    \ lastWord(lastWord.length - 1)\n        val isLetter = lastChar.isLetter\n  \
    \      val isLastChar = lastWord.length == 1\n        isLetter && isLastChar",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            if (txt.length == 1) true\n   \
    \         else {\n                val secondLastChar = txt.charAt(txt.length -\
    \ 2)\n                if (secondLastChar.isLetter) false\n                else\
    \ true\n            }\n        }\n        else false", "        if (txt.length\
    \ == 0) return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            return true\n        }\n        return false", "        val\
    \ lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n    \
    \    val lastCharIsNotPartOfWord = !txt.contains(lastChar + \" \")\n        lastCharIsLetter\
    \ && lastCharIsNotPartOfWord", "        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            return true\n        }\n        return false", "        val\
    \ lastChar = txt.last\n        val isLetter = lastChar.isLetter\n        val isFirstCharOfWord\
    \ = txt.lastIndexOf(\" \") == txt.length - 1\n        isLetter && !isFirstCharOfWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.split(\" \").last.length > 1\n      \
    \  lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar.isLetter\n        val isSpace = lastChar.isSpaceChar\n\
    \        val isPunctuation = lastChar.isPunctuation\n        val isDigit = lastChar.isDigit\n\
    \        val isWhitespace = lastChar.isWhitespace\n        val isLetterOrDigit\
    \ = lastChar.isLetterOrDigit\n        val isSurrogate = lastChar.isSurrogate\n\
    \        val isDefined = lastChar.isDefined\n        val isControl = lastChar.isControl\n\
    \        val isHighSurrogate = lastChar.isHighSurrogate\n        val isLowSurrogate\
    \ = lastChar.isLowSurrogate\n        val isTitleCase = lastChar.isTitleCase\n\
    \        val isUnicodeIdentifierPart = lastChar.isUnicodeIdentifierPart\n    \
    \    val isUnicodeIdentifierStart = lastChar.isUnicodeIdentifierStart\n      \
    \  val isValidCodePoint = lastChar.isValidCodePoint\n        val isWhitespace\
    \ = lastChar.isWhitespace\n        val isAlphabetic = lastChar.isAlphabetic\n\
    \        val isIdeographic = lastChar.isIdeographic\n        val isJavaIdentifierPart\
    \ = lastChar.isJavaIdentifierPart\n        val isJavaIdentifierStart = lastChar.isJavaIdentifierStart\n\
    \        val isLetter = lastChar.isLetter\n        val isLowerCase = lastChar.isLower\n\
    \        val isMirrored = lastChar.isMirrored\n        val isSpaceChar = lastChar.isSpaceChar\n\
    \        val isTitleCase = lastChar.isTitleCase\n        val isUnicodeIdentifierPart\
    \ = lastChar.isUnicodeIdentifierPart\n        val isUnicodeIdentifierStart = lastChar.isUnicodeIdentifierStart\n\
    \        val isUpperCase = lastChar.isUpper\n        val isWhitespace = lastChar.isWhitespace\n\
    \        val isAlphabetic = lastChar.isAlphabetic\n        val isIdeographic =\
    \ lastChar.isIdeographic\n        val isJavaIdentifierPart = lastChar.isJavaIdentifierPart\n\
    \        val isJavaIdentifierStart = lastChar.isJavaIdentifierStart\n        val\
    \ is", "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotInWord = !txt.contains(\" \" + lastChar)\n        lastCharIsALetter\
    \ && lastCharIsNotInWord", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = !txt.contains(\"\
    \ \" + lastChar)\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "   \
    \     val lastChar = txt.last\n        if (lastChar.isLetter) {\n            val\
    \ lastCharIndex = txt.length - 1\n            if (lastCharIndex == 0) {\n    \
    \            return true\n            }\n            else {\n                val\
    \ prevChar = txt(lastCharIndex - 1)\n                if (prevChar.isLetter) {\n\
    \                    return false\n                }\n                else {\n\
    \                    return true\n                }\n            }\n        }\n\
    \        else {\n            return false\n        }", "        val lastChar =\
    \ txt.last\n        if (lastChar.isLetter) {\n            if (txt.length == 1)\
    \ return true\n            else {\n                val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n                if (secondLastChar.isLetter) return false\n          \
    \      else return true\n            }\n        }\n        else return false",
  "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n    \
    \    lastCharIsALetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.length\
    \ - 1\n            val lastCharIsNotPartOfAWord = (txt(lastCharIndex - 1) == '\
    \ ')\n            lastCharIsNotPartOfAWord\n        } else {\n            false\n\
    \        }", "        val lastChar = txt.last\n        lastChar.isLetter && !txt.contains(lastChar)",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            if (lastCharIndex == 0) true\n\
    \            else {\n                val charBeforeLastChar = txt(lastCharIndex\
    \ - 1)\n                if (charBeforeLastChar.isSpaceChar) true\n           \
    \     else false\n            }\n        }\n        else false", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            if (lastCharIndex == 0) {\n                return\
    \ true\n            }\n            val prevChar = txt(lastCharIndex - 1)\n   \
    \         if (prevChar.isSpaceChar) {\n                return true\n         \
    \   }\n        }\n        return false", "        val txtArr = txt.split(\" \"\
    )\n        val lastWord = txtArr(txtArr.length - 1)\n        val lastChar = lastWord(lastWord.length\
    \ - 1)\n        lastChar.isLetter", "        val lastChar = txt.last\n       \
    \ if (lastChar == ' ') {\n            return false\n        }\n        val lastCharIndex\
    \ = txt.length - 1\n        val lastCharIsALetter = lastChar.isLetter\n      \
    \  val lastCharIsNotPartOfAWord = txt(lastCharIndex - 1) == ' '\n        return\
    \ lastCharIsALetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ if (txt.length > 1) {\n                val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n                if (secondLastChar.isLetter) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }\n\
    \        return false", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = !txt.contains(lastChar\
    \ + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "        if\
    \ (txt.length == 0) return false\n        val lastChar = txt.charAt(txt.length\
    \ - 1)\n        if (lastChar >= 'a' && lastChar <= 'z') return true\n        if\
    \ (lastChar >= 'A' && lastChar <= 'Z') return true\n        return false", " \
    \       val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = txt.takeRight(2).contains(\" \")\n   \
    \     lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val word = txt.split(\" \").last\n            if (word.last == lastChar) false\n\
    \            else true\n        }\n        else false", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length > 1)\
    \ {\n                val secondLastChar = txt.charAt(txt.length - 2)\n       \
    \         if (secondLastChar.isLetter) {\n                    return false\n \
    \               }\n            }\n            return true\n        }\n       \
    \ return false", "        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = !txt.contains(lastChar\
    \ + \" \")\n        lastCharIsALetter && lastCharIsNotPartOfAWord", "        val\
    \ lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n    \
    \    val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n        lastCharIsLetter\
    \ && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val lastCharIndex = txt.length - 1\n            val lastCharIsNotPartOfAWord\
    \ = txt.indexOf(lastChar, lastCharIndex - 1) == -1\n            return lastCharIsNotPartOfAWord\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord =\
    \ !txt.contains(\" \" + lastChar)\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            if (lastCharIndex == 0) true\n\
    \            else {\n                val secondLastChar = txt(lastCharIndex -\
    \ 1)\n                if (secondLastChar.isLetter) false\n                else\
    \ true\n            }\n        }\n        else false", "        val lastChar =\
    \ txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = txt.lastIndexOf(\" \") == txt.length -\
    \ 1\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length ==\
    \ 1) {\n                true\n            } else {\n                val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n                if (secondLastChar.isLetter) {\n\
    \                    false\n                } else {\n                    true\n\
    \                }\n            }\n        } else {\n            false\n     \
    \   }", "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !(txt.split(\" \").last.contains(lastChar))\n\
    \        lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar.isLetter\n        val isSpace =\
    \ lastChar.isSpaceChar\n        val isWord = txt.split(\" \").last.length > 1\n\
    \        isLetter && !isSpace && !isWord", "        if (txt.length == 0) return\
    \ false\n        val lastChar = txt.last\n        if (lastChar.isLetter) {\n \
    \           if (txt.length == 1) return true\n            val secondLastChar =\
    \ txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            return true\n        }\n        return false", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length\
    \ == 1) true\n            else {\n                val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n                if (secondLastChar.isLetter) false\n                else\
    \ true\n            }\n        }\n        else false", "        val lastChar =\
    \ txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfAWord\
    \ = txt.split(\" \").last.length > 1\n        lastCharIsLetter && !lastCharIsPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.length\
    \ - 1\n            if (lastCharIndex == 0) {\n                return true\n  \
    \          }\n            val secondLastChar = txt(lastCharIndex - 1)\n      \
    \      if (secondLastChar.isSpaceChar) {\n                return true\n      \
    \      }\n        }\n        return false", "        val words = txt.split(\"\
    \ \")\n        val lastWord = words(words.length - 1)\n        val lastChar =\
    \ lastWord(lastWord.length - 1)\n        return lastChar.isLetter", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.lastIndexOf(lastChar)\n            if (lastCharIndex == 0) return true\n\
    \            if (txt(lastCharIndex - 1) == ' ') return true\n        }\n     \
    \   return false", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = !txt.contains(lastChar\
    \ + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length\
    \ == 1) return true\n            else {\n                val secondLastChar =\
    \ txt.charAt(txt.length - 2)\n                if (secondLastChar.isLetter) return\
    \ false\n                else return true\n            }\n        }\n        else\
    \ return false", "        if (txt.length == 0) return false\n        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length ==\
    \ 1) return true\n            if (txt(txt.length - 2).isLetter) return false\n\
    \            return true\n        }\n        return false", "        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ if (txt.length == 1) {\n                true\n            } else {\n       \
    \         val secondLastChar = txt.charAt(txt.length - 2)\n                if\
    \ (secondLastChar.isLetter) {\n                    false\n                } else\
    \ {\n                    true\n                }\n            }\n        } else\
    \ {\n            false\n        }", "        val txt_ = txt.trim\n        if (txt_.length\
    \ == 0) return false\n        val lastChar = txt_.charAt(txt_.length - 1)\n  \
    \      if (lastChar.isLetter) return true\n        return false", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length\
    \ > 1) {\n                val secondLastChar = txt.charAt(txt.length - 2)\n  \
    \              if (secondLastChar.isLetter) {\n                    return false\n\
    \                }\n            }\n            return true\n        }\n      \
    \  return false", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsPartOfAWord = txt.split(\" \").last.length\
    \ > 1\n        lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            if (txt.length ==\
    \ 1) {\n                true\n            } else {\n                val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n                if (secondLastChar.isLetter) {\n\
    \                    false\n                } else {\n                    true\n\
    \                }\n            }\n        } else {\n            false\n     \
    \   }", "        if (txt.length == 0) return false\n        val lastChar = txt.charAt(txt.length\
    \ - 1)\n        if (lastChar.isLetter) {\n            val txtWithoutLastChar =\
    \ txt.substring(0, txt.length - 1)\n            if (txtWithoutLastChar.length\
    \ == 0) return true\n            val lastCharOfTxtWithoutLastChar = txtWithoutLastChar.charAt(txtWithoutLastChar.length\
    \ - 1)\n            if (lastCharOfTxtWithoutLastChar.isLetter) return false\n\
    \            else return true\n        }\n        else return false", "      \
    \  val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsALetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        return lastChar.isLetter && !txt.contains(lastChar)", "        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            if (txt.length > 1) {\n       \
    \         val secondLastChar = txt.charAt(txt.length - 2)\n                if\
    \ (secondLastChar.isLetter) {\n                    return false\n            \
    \    }\n            }\n            return true\n        }\n        return false",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = txt.split(\" \").last.length == 1\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsALetter && lastCharIsNotPartOfAWord", "        if (txt.length ==\
    \ 0) return false\n        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) return true\n            val secondLastChar\
    \ = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter) return\
    \ false\n            return true\n        }\n        return false", "        val\
    \ lastChar = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            val lastCharBeforeIndex = lastCharIndex - 1\n\
    \            val lastCharBefore = txt(lastCharBeforeIndex)\n            if (lastCharBefore.isLetter)\
    \ {\n                return false\n            }\n            return true\n  \
    \      }\n        return false", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n    \
    \        if (lastCharIndex == 0) {\n                return true\n            }\n\
    \            val prevChar = txt(lastCharIndex - 1)\n            if (prevChar.isSpaceChar)\
    \ {\n                return true\n            }\n        }\n        return false",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            val beforeLastChar = txt(lastCharIndex\
    \ - 1)\n            if (beforeLastChar.isLetter) false\n            else true\n\
    \        }\n        else false", "        val lastChar = txt.last\n        val\
    \ lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.split(\" \").last.length > 1\n      \
    \  lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.length\
    \ - 1\n            val lastCharIsNotPartOfAWord = !txt.substring(0, lastCharIndex).contains(lastChar)\n\
    \            lastCharIsNotPartOfAWord\n        } else {\n            false\n \
    \       }", "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n\
    \            val lastCharIndex = txt.length - 1\n            if (lastCharIndex\
    \ == 0) {\n                true\n            } else {\n                val charBeforeLastChar\
    \ = txt(lastCharIndex - 1)\n                if (charBeforeLastChar.isLetter) {\n\
    \                    false\n                } else {\n                    true\n\
    \                }\n            }\n        } else {\n            false\n     \
    \   }", "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.take(txt.length - 1).contains(lastChar)\n\
    \        lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            if (lastCharIndex == 0) return true\n        \
    \    val prevChar = txt(lastCharIndex - 1)\n            if (prevChar.isLetter)\
    \ return false\n            return true\n        }\n        return false", " \
    \       val lastChar = txt.charAt(txt.length - 1)\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) {\n                return true\n       \
    \     }\n            val secondLastChar = txt.charAt(txt.length - 2)\n       \
    \     if (secondLastChar.isLetter) {\n                return false\n         \
    \   }\n            return true\n        }\n        return false", "        val\
    \ lastChar = txt.charAt(txt.length - 1)\n        if (lastChar.isLetter) {\n  \
    \          val lastCharIndex = txt.lastIndexOf(lastChar)\n            val lastCharIsLast\
    \ = lastCharIndex == txt.length - 1\n            if (lastCharIsLast) {\n     \
    \           val lastCharIsFirst = lastCharIndex == 0\n                if (lastCharIsFirst)\
    \ {\n                    return true\n                } else {\n             \
    \       val lastCharIsFirstInWord = txt.charAt(lastCharIndex - 1).isSpaceChar\n\
    \                    return lastCharIsFirstInWord\n                }\n       \
    \     } else {\n                return false\n            }\n        } else {\n\
    \            return false\n        }", "        val txt2 = txt.trim\n        if\
    \ (txt2.length == 0) return false\n        val lastChar = txt2.charAt(txt2.length\
    \ - 1)\n        if (lastChar.isLetter) {\n            if (txt2.length == 1) return\
    \ true\n            val secondLastChar = txt2.charAt(txt2.length - 2)\n      \
    \      if (secondLastChar.isLetter) return false\n            return true\n  \
    \      }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ if (txt.length == 1) return true\n            else {\n                val lastCharIndex\
    \ = txt.length - 1\n                val secondLastChar = txt(lastCharIndex - 1)\n\
    \                if (secondLastChar.isLetter) return false\n                else\
    \ return true\n            }\n        }\n        else return false", "       \
    \ val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfWord\
    \ = txt.split(\" \").last.contains(lastChar)\n        lastCharIsLetter && !lastCharIsPartOfWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(\" \" + lastChar)\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.endsWith(\" \")\n        lastCharIsALetter\
    \ && lastCharIsNotPartOfAWord", "        val lastChar = txt.charAt(txt.length\
    \ - 1)\n        if (lastChar.isLetter) {\n            if (txt.length == 1) true\n\
    \            else {\n                val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n                if (secondLastChar.isLetter) false\n                else\
    \ true\n            }\n        }\n        else false", "        val lastChar =\
    \ txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            if (txt.length == 1) true\n   \
    \         else if (txt(txt.length - 2).isLetter) false\n            else true\n\
    \        }\n        else false", "        if (txt.length == 0) return false\n\
    \        val lastChar = txt.last\n        if (lastChar.isLetter) {\n         \
    \   if (txt.length == 1) return true\n            val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n            if (secondLastChar.isLetter) return false\n            return\
    \ true\n        }\n        return false", "        val lastChar = txt.last\n \
    \       val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsPartOfWord\
    \ = txt.split(\" \").last.contains(lastChar)\n        lastCharIsLetter && !lastCharIsPartOfWord",
  "        val lastChar = txt.charAt(txt.length - 1)\n        if (lastChar.isLetter)\
    \ {\n            if (txt.length == 1) {\n                true\n            } else\
    \ {\n                val secondLastChar = txt.charAt(txt.length - 2)\n       \
    \         if (secondLastChar.isLetter) {\n                    false\n        \
    \        } else {\n                    true\n                }\n            }\n\
    \        } else {\n            false\n        }", "        val lastChar = txt.charAt(txt.length\
    \ - 1)\n        if (lastChar.isLetter) {\n            val lastCharIndex = txt.lastIndexOf(lastChar)\n\
    \            if (lastCharIndex == txt.length - 1) {\n                val lastCharBeforeIndex\
    \ = txt.lastIndexOf(lastChar, lastCharIndex - 1)\n                if (lastCharBeforeIndex\
    \ == -1) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n    \
    \        val lastCharIsNotPartOfAWord = txt.take(lastCharIndex).last != ' '\n\
    \            !lastCharIsNotPartOfAWord\n        } else {\n            false\n\
    \        }", "        if (txt.length == 0) return false\n        val lastChar\
    \ = txt.charAt(txt.length - 1)\n        if (lastChar.isLetter) {\n           \
    \ if (txt.length == 1) return true\n            val secondLastChar = txt.charAt(txt.length\
    \ - 2)\n            if (secondLastChar.isSpaceChar) return true\n        }\n \
    \       return false", "        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = txt.lastIndexOf(\"\
    \ \") == txt.length - 1\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfWord = !txt.contains(lastChar + \" \")\n     \
    \   lastCharIsLetter && lastCharIsNotPartOfWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(\" \" + lastChar)\n    \
    \    lastCharIsALetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            val lastCharIndex = txt.length\
    \ - 1\n            if (lastCharIndex == 0) return true\n            val prevChar\
    \ = txt(lastCharIndex - 1)\n            if (prevChar.isSpaceChar) return true\n\
    \        }\n        return false", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n    \
    \        if (lastCharIndex == 0) return true\n            val secondLastChar =\
    \ txt(lastCharIndex - 1)\n            if (secondLastChar.isLetter) return false\n\
    \            return true\n        }\n        return false", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.length - 1\n            if (lastCharIndex == 0) return true\n        \
    \    val charBeforeLastChar = txt(lastCharIndex - 1)\n            if (charBeforeLastChar.isLetter)\
    \ return false\n            return true\n        }\n        return false", " \
    \       val lastChar = txt.last\n        if (lastChar.isLetter) {\n          \
    \  val txtWithoutLastChar = txt.substring(0, txt.length - 1)\n            if (txtWithoutLastChar.contains(lastChar))\
    \ {\n                return false\n            }\n            return true\n  \
    \      }\n        return false", "        val lastChar = txt.last\n        if\
    \ (lastChar.isLetter) {\n            val lastCharIndex = txt.length - 1\n    \
    \        if (lastCharIndex == 0) return true\n            val prevChar = txt(lastCharIndex\
    \ - 1)\n            if (prevChar.isSpaceChar) return true\n        }\n       \
    \ return false", "        val lastChar = txt.last\n        if (lastChar.isLetter)\
    \ {\n            val txtWithoutLastChar = txt.substring(0, txt.length - 1)\n \
    \           val lastCharIndex = txtWithoutLastChar.lastIndexOf(lastChar)\n   \
    \         if (lastCharIndex == -1) {\n                return true\n          \
    \  }\n            else {\n                val lastCharIndexPlusOne = lastCharIndex\
    \ + 1\n                if (lastCharIndexPlusOne == txtWithoutLastChar.length)\
    \ {\n                    return false\n                }\n                else\
    \ {\n                    val charAfterLastChar = txtWithoutLastChar.charAt(lastCharIndexPlusOne)\n\
    \                    if (charAfterLastChar == ' ') {\n                       \
    \ return true\n                    }\n                    else {\n           \
    \             return false\n                    }\n                }\n       \
    \     }\n        }\n        else {\n            return false\n        }", "  \
    \      val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            val lastCharIsNotPartOfAWord\
    \ = (txt.indexOf(lastChar) == lastCharIndex)\n            return lastCharIsNotPartOfAWord\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord =\
    \ !txt.contains(lastChar + \" \")\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            val lastCharBeforeIndex = lastCharIndex\
    \ - 1\n            if (lastCharBeforeIndex >= 0) {\n                val lastCharBefore\
    \ = txt(lastCharBeforeIndex)\n                if (lastCharBefore.isLetter) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }\n        return false", "        val lastChar = txt.last\n\
    \        if (lastChar == ' ') return false\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.takeRight(2).contains(\" \")\n      \
    \  lastCharIsLetter && !lastCharIsPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(\" \" + lastChar)\n        lastCharIsLetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar.isLetter\n   \
    \     val isNotPartOfAWord = !txt.contains(lastChar + \" \")\n        isLetter\
    \ && isNotPartOfAWord", "        val lastChar = txt.last\n        val lastCharIsLetter\
    \ = lastChar.isLetter\n        val lastCharIsNotPartOfAWord = txt.split(\" \"\
    ).last.length == 1\n        lastCharIsLetter && lastCharIsNotPartOfAWord", " \
    \       val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = !txt.contains(lastChar + \" \")\n    \
    \    lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar = txt.last\n\
    \        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsAWord\
    \ = txt.split(\" \").last.contains(lastChar)\n        lastCharIsALetter && !lastCharIsAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val txtWithoutLastChar = txt.substring(0, txt.length - 1)\n            if (txtWithoutLastChar.contains(lastChar))\
    \ false\n            else true\n        }\n        else false", "        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n        val lastCharIsNotPartOfWord\
    \ = !txt.contains(\" \" + lastChar)\n        lastCharIsLetter && lastCharIsNotPartOfWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.lastIndexOf(lastChar)\n            val lastCharIsNotPartOfAWord\
    \ = txt.indexOf(\" \", lastCharIndex) == -1\n            return lastCharIsNotPartOfAWord\n\
    \        }\n        return false", "        val lastChar = txt.last\n        val\
    \ lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        if (lastChar.isLetter) {\n           \
    \ val lastCharIndex = txt.length - 1\n            if (lastCharIndex == 0) return\
    \ true\n            val prevChar = txt(lastCharIndex - 1)\n            if (prevChar\
    \ == ' ') return true\n        }\n        return false", "        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotPartOfAWord\
    \ = !txt.contains(lastChar + \" \")\n        lastCharIsALetter && lastCharIsNotPartOfAWord",
  "        val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotPartOfAWord = txt.lastIndexOf(\" \") == txt.length -\
    \ 1\n        lastCharIsLetter && lastCharIsNotPartOfAWord", "        val lastChar\
    \ = txt.last\n        if (lastChar.isLetter) {\n            val lastCharIndex\
    \ = txt.lastIndexOf(lastChar)\n            val beforeLastChar = txt.charAt(lastCharIndex\
    \ - 1)\n            if (beforeLastChar == ' ') {\n                return true\n\
    \            }\n        }\n        return false", "        val lastChar = txt.last\n\
    \        if (lastChar.isLetter) {\n            if (txt.length == 1) return true\n\
    \            val secondLastChar = txt.charAt(txt.length - 2)\n            if (secondLastChar.isLetter)\
    \ return false\n            return true\n        }\n        return false", " \
    \       val lastChar = txt.last\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsPartOfAWord = txt.split(\" \").last.length > 1\n      \
    \  lastCharIsLetter && !lastCharIsPartOfAWord"]
stop_tokens:
- "\n    }\n"
