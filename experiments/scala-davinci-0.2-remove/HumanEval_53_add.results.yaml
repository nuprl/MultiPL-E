language: scala
name: HumanEval_53_add
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        while (x1 != 0 || y1 != 0) {\n            sum = x1 ^ y1\
    \ ^ carry\n            carry = (x1 & y1) | (x1 & carry) | (y1 & carry)\n     \
    \       x1 = sum\n            y1 = carry << 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       for (i <- 0 to 63) {\n            xor = (temp_x ^ temp_y)\n          \
    \  carry = ((temp_x & temp_y) << 1)\n            sum = xor | carry\n         \
    \   temp_x = sum\n            temp_y = carry\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwzd1u35.scala:23)\n\tat Problem.main(tmplwzd1u35.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979085
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var xor = 0L\n    \
    \    var and = 0L\n        var temp_x = x\n        var temp_y = y\n        while\
    \ (temp_x != 0 || temp_y != 0) {\n            xor = (temp_x ^ temp_y)\n      \
    \      and = (temp_x & temp_y)\n            temp_x = xor\n            temp_y =\
    \ and << 1\n            sum = xor ^ carry\n            carry = and << 1\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var sum : Long = 0\n        var carry : Long = 0\n        var xor\
    \ : Long = 0\n        var and : Long = 0\n        do {\n            xor = x ^\
    \ y\n            and = x & y\n            sum = xor\n            carry = and <<\
    \ 1\n            x = sum\n            y = carry\n        } while (y != 0)\n  \
    \      sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo13ll57w.scala:10:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mdo\e[0m {\n\e[31m\e[31m   |\e[0m      \
    \  ^^\e[0m\n\e[31m   |\e[0m        end of statement expected but 'do' found\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979081
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var result = 0L\n        var shift = 1L\n\
    \        while (x != 0 || y != 0 || carry != 0) {\n            val xbit = x &\
    \ 1\n            val ybit = y & 1\n            val sum = xbit ^ ybit ^ carry\n\
    \            result |= sum << shift\n            carry = (xbit & ybit) | (xbit\
    \ & carry) | (ybit & carry)\n            x >>= 1\n            y >>= 1\n      \
    \      shift += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dzxcyfc.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean x.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dzxcyfc.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ >>= is not a member of Long - did you mean y.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            xor = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            sum = xor ^ carry\n            temp_x\
    \ = carry\n            temp_y = sum\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n \
    \   assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n \
    \   assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyaqboqi4.scala:21)\n\tat Problem.main(tmpyaqboqi4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 <<\
    \ i)\n            val yi : Long = y & (1 << i)\n            val ri : Long = result\
    \ & (1 << i)\n            result |= (xi ^ yi ^ carry)\n            carry = ((xi\
    \ & yi) | (xi & carry) | (yi & carry)) << 1\n            i += 1\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 << i)\n\
    \            val yi : Long = y & (1 << i)\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= si\n            i += 1\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7euncmsd.scala:22)\n\tat Problem.main(tmp7euncmsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            sum = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            temp_x = carry\n            temp_y\
    \ = sum\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcv60qsa_.scala:20)\n\tat Problem.main(tmpcv60qsa_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var xor = 0L\n    \
    \    var temp_x = x\n        var temp_y = y\n        while (temp_x != 0 || temp_y\
    \ != 0) {\n            xor = (temp_x ^ temp_y)\n            carry = ((temp_x &\
    \ temp_y) << 1)\n            sum = xor ^ carry\n            temp_x = sum\n   \
    \         temp_y = carry\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 <<\
    \ i)\n            val yi : Long = y & (1 << i)\n            result |= (xi ^ yi\
    \ ^ carry)\n            carry = ((xi & yi) | (xi & carry) | (yi & carry)) << 1\n\
    \            i += 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var result = 0L\n        var shift = 1L\n\
    \        while (x != 0 || y != 0 || carry != 0) {\n            val xLastBit =\
    \ x & 1\n            val yLastBit = y & 1\n            val sum = xLastBit ^ yLastBit\
    \ ^ carry\n            result |= sum << shift\n            carry = (xLastBit &\
    \ yLastBit) | (xLastBit & carry) | (yLastBit & carry)\n            x >>= 1\n \
    \           y >>= 1\n            shift += 1\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprg40gwqj.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean x.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprg40gwqj.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ >>= is not a member of Long - did you mean y.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       for (i <- 0 to 63) {\n            var bit_x : Long = temp_x & 1\n    \
    \        var bit_y : Long = temp_y & 1\n            xor = bit_x ^ bit_y ^ carry\n\
    \            carry = (bit_x & bit_y) | (bit_x & carry) | (bit_y & carry)\n   \
    \         sum |= (xor << i)\n            temp_x >>= 1\n            temp_y >>=\
    \ 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 << i)\n\
    \            val yi : Long = y & (1 << i)\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= si\n            i += 1\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7euncmsd.scala:22)\n\tat Problem.main(tmp7euncmsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ shift : Long = 1\n        while (x != 0 || y != 0 || carry != 0) {\n       \
    \     val xLastBit : Long = x & 1\n            val yLastBit : Long = y & 1\n \
    \           val sum : Long = xLastBit ^ yLastBit ^ carry\n            carry =\
    \ (xLastBit & yLastBit) | (xLastBit & carry) | (yLastBit & carry)\n          \
    \  result |= sum << shift\n            x >>= 1\n            y >>= 1\n        \
    \    shift += 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1d29ck7m.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean x.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1d29ck7m.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ >>= is not a member of Long - did you mean y.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n       \
    \ while (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) &\
    \ 1\n            result |= ((xi ^ yi ^ carry) << i)\n            carry = (xi &\
    \ yi) | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        // Iterate till there is no carry\n        var carry : Long = 0\n\
    \        var sum : Long = 0\n        var tempX : Long = x\n        var tempY :\
    \ Long = y\n        var i : Long = 0\n        while (tempX != 0 || tempY != 0)\
    \ {\n            // Get last bits of x and y\n            val xLastBit : Long\
    \ = tempX & 1\n            val yLastBit : Long = tempY & 1\n            // Add\
    \ last bits of x and y along with carry\n            val sumOfLastBits : Long\
    \ = xLastBit ^ yLastBit ^ carry\n            carry = (xLastBit & yLastBit) | (xLastBit\
    \ & carry) | (yLastBit & carry)\n            sum |= sumOfLastBits << i\n     \
    \       i += 1\n            tempX >>= 1\n            tempY >>= 1\n        }\n\
    \        if (carry != 0) {\n            sum |= carry << i\n        }\n       \
    \ return sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var xor = 0L\n    \
    \    var tempX = x\n        var tempY = y\n        while (tempX != 0 || tempY\
    \ != 0) {\n            xor = (tempX ^ tempY)\n            carry = (tempX & tempY)\
    \ << 1\n            sum = xor ^ carry\n            tempX = sum\n            tempY\
    \ = carry\n        }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        while (x1 != 0 || y1 != 0) {\n            sum = x1 ^ y1\
    \ ^ carry\n            carry = (x1 & y1) | (x1 & carry) | (y1 & carry)\n     \
    \       x1 = sum\n            y1 = carry << 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var and : Long = 0\n        var shift : Long = 0\n     \
    \   var i : Long = 0\n        for (i <- 0 to 63) {\n            xor = x ^ y\n\
    \            and = x & y\n            shift = and << 1\n            x = xor\n\
    \            y = shift\n            sum = xor ^ carry\n            carry = (xor\
    \ & carry) | (shift & carry) | (xor & shift)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6hkod67e.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            x = xor\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp6hkod67e.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            y = shift\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var i = 0\n        while (x1 != 0 || y1 != 0) {\n     \
    \       val x2 = x1 & 1\n            val y2 = y1 & 1\n            val s = x2 ^\
    \ y2 ^ carry\n            carry = (x2 & y2) | (x2 & carry) | (y2 & carry)\n  \
    \          sum |= (s << i)\n            x1 >>= 1\n            y1 >>= 1\n     \
    \       i += 1\n        }\n        sum | (carry << i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            sum = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            temp_x = carry\n            temp_y\
    \ = sum\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxif8os5w.scala:20)\n\tat Problem.main(tmpxif8os5w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 <<\
    \ i)\n            val yi : Long = y & (1 << i)\n            val ri : Long = result\
    \ & (1 << i)\n            val ci : Long = carry & (1 << i)\n            result\
    \ |= (xi ^ yi ^ ci)\n            carry = ((xi & yi) | (xi & ci) | (yi & ci)) <<\
    \ 1\n            i += 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += k * (s % 10)\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += k * carry\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val zi : Long = xi\
    \ ^ yi ^ carry\n            result |= (zi << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 <<\
    \ i)\n            val yi : Long = y & (1 << i)\n            val ri : Long = result\
    \ & (1 << i)\n            val ci : Long = carry & (1 << i)\n            result\
    \ = result | ((xi ^ yi ^ ci) & (1 << i))\n            carry = ((xi & yi) | (xi\
    \ & ci) | (yi & ci)) & (1 << i)\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz5ymz30q.scala:23)\n\tat Problem.main(tmpz5ymz30q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val si : Long = xi\
    \ ^ yi ^ carry\n            result |= si << i\n            carry = (xi & yi) |\
    \ (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var and : Long = 0\n        var i : Long = 0\n        var\
    \ mask : Long = 0\n        while (i < 64) {\n            xor = x ^ y\n       \
    \     and = x & y\n            sum = xor ^ carry\n            carry = (and <<\
    \ 1) | (carry & (xor << 1))\n            x = sum\n            y = carry\n    \
    \        i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqe0jhnr2.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            x = sum\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpqe0jhnr2.scala:18:14 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            y = carry\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979090
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       for (i <- 0 to 63) {\n            var bit_x : Long = temp_x & 1\n    \
    \        var bit_y : Long = temp_y & 1\n            xor = bit_x ^ bit_y ^ carry\n\
    \            carry = (bit_x & bit_y) | (bit_x & carry) | (bit_y & carry)\n   \
    \         sum |= (xor << i)\n            temp_x >>= 1\n            temp_y >>=\
    \ 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n       \
    \ while (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) &\
    \ 1\n            result |= ((xi ^ yi ^ carry) << i)\n            carry = (xi &\
    \ yi) | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            sum |= (si << i)\n            carry = (xi & yi) | (xi &\
    \ carry) | (yi & carry)\n            i += 1\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var i = 0\n        while (x1 != 0 || y1 != 0) {\n     \
    \       val x2 = x1 & 1\n            val y2 = y1 & 1\n            val s = x2 ^\
    \ y2 ^ carry\n            carry = (x2 & y2) | (x2 & carry) | (y2 & carry)\n  \
    \          sum |= (s << i)\n            x1 >>= 1\n            y1 >>= 1\n     \
    \       i += 1\n        }\n        sum | (carry << i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var i : Long = 0\n        while (i < 32) {\n           \
    \ xor = (x ^ y) & (1 << i)\n            carry = (x & y) & (1 << i)\n         \
    \   sum |= xor\n            carry <<= 1\n            x = sum\n            y =\
    \ carry\n            i += 1\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpybz7gyka.scala:15:14 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x = sum\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpybz7gyka.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            y = carry\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val y\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 << i)\n\
    \            val yi : Long = y & (1 << i)\n            val si : Long = xi ^ yi\
    \ ^ carry\n            sum |= si\n            carry = (xi & yi) | (xi & carry)\
    \ | (yi & carry)\n            carry <<= 1\n            i += 1\n        }\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = x & y\n        var sum = x ^ y\n        while (carry\
    \ != 0) {\n            carry = carry << 1\n            val temp = sum\n      \
    \      sum = sum ^ carry\n            carry = temp & carry\n        }\n      \
    \  sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val s : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (s << i)\n            i += 1\n        }\n        sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x & (1 << i))\
    \ >> i\n            val yi : Long = (y & (1 << i)) >> i\n            val s : Long\
    \ = xi ^ yi ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n\
    \            sum |= (s << i)\n            i += 1\n        }\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            xor = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            sum = xor ^ carry\n            temp_x\
    \ = carry\n            temp_y = sum\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6cgigr5i.scala:21)\n\tat Problem.main(tmp6cgigr5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n       \
    \ while(i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) &\
    \ 1\n            result |= ((xi ^ yi ^ carry) << i)\n            carry = (xi &\
    \ yi) | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var result = 0L\n        var shift = 1L\n\
    \        while (x != 0 || y != 0 || carry != 0) {\n            val xDigit = x\
    \ & 1\n            val yDigit = y & 1\n            val sum = xDigit + yDigit +\
    \ carry\n            result |= (sum & 1) << shift\n            carry = sum >>\
    \ 1\n            x >>= 1\n            y >>= 1\n            shift += 1\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcg111_z4.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean x.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcg111_z4.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ >>= is not a member of Long - did you mean y.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var i = 0\n        while (x1 != 0 || y1 != 0) {\n     \
    \       val x2 = x1 & 1\n            val y2 = y1 & 1\n            val s = x2 ^\
    \ y2 ^ carry\n            carry = (x2 & y2) | (x2 & carry) | (y2 & carry)\n  \
    \          sum |= (s << i)\n            x1 >>= 1\n            y1 >>= 1\n     \
    \       i += 1\n        }\n        sum | (carry << i)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 <<\
    \ i)\n            val yi : Long = y & (1 << i)\n            val ri : Long = result\
    \ & (1 << i)\n            result |= (xi ^ yi ^ carry)\n            carry = ((xi\
    \ & yi) | (xi & carry) | (yi & carry)) << 1\n            i += 1\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            xor = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            sum = xor ^ carry\n            temp_x\
    \ = carry\n            temp_y = sum\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n \
    \   assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n \
    \   assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyaqboqi4.scala:21)\n\tat Problem.main(tmpyaqboqi4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var k = 1L\n      \
    \  var tempX = x\n        var tempY = y\n        while (tempX > 0 || tempY > 0)\
    \ {\n            val xk = x & k\n            val yk = y & k\n            val carryOut\
    \ = (xk & yk) | (xk & carry) | (yk & carry)\n            sum |= xk ^ yk ^ carry\n\
    \            carry = carryOut << 1\n            k <<= 1\n            tempX >>=\
    \ 1\n            tempY >>= 1\n        }\n        return sum | carry\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        while (x1 != 0 || y1 != 0) {\n            sum = x1 ^ y1\
    \ ^ carry\n            carry = (x1 & y1) | (x1 & carry) | (y1 & carry)\n     \
    \       x1 = sum\n            y1 = carry << 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 64) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n        while\
    \ (i < 64) {\n            xi = (x >> i) & 1\n            yi = (y >> i) & 1\n \
    \           sum |= ((xi ^ yi ^ carry) << i)\n            carry = (xi & yi) | (xi\
    \ & carry) | (yi & carry)\n            i += 1\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979095
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        while (x1 != 0 || y1 != 0) {\n            sum = x1 ^ y1\
    \ ^ carry\n            carry = (x1 & y1) | (x1 & carry) | (y1 & carry)\n     \
    \       x1 = sum\n            y1 = carry << 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            xor = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            sum = xor ^ carry\n            temp_x\
    \ = carry\n            temp_y = sum\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n \
    \   assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n \
    \   assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyaqboqi4.scala:21)\n\tat Problem.main(tmpyaqboqi4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var xor = 0L\n    \
    \    var temp_x = x\n        var temp_y = y\n        while (temp_x != 0 || temp_y\
    \ != 0) {\n            xor = (temp_x ^ temp_y)\n            carry = ((temp_x &\
    \ temp_y) << 1)\n            sum = xor ^ carry\n            temp_x = sum\n   \
    \         temp_y = carry\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 << i)\n\
    \            val yi : Long = y & (1 << i)\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= si\n            i += 1\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7euncmsd.scala:22)\n\tat Problem.main(tmp7euncmsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 <<\
    \ i)\n            val yi : Long = y & (1 << i)\n            val ri : Long = result\
    \ & (1 << i)\n            result |= (xi ^ yi ^ carry)\n            carry = ((xi\
    \ & yi) | (xi & carry) | (yi & carry)) << 1\n            i += 1\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x = x\n       \
    \ var y = y\n        while (x != 0 || y != 0) {\n            sum = x ^ y ^ carry\n\
    \            carry = (x & y) | (x & carry) | (y & carry)\n            x = sum\n\
    \            y = carry << 1\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnwulp621.scala:8:16 ----------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \  |\e[0m                ^\e[0m\n\e[31m  |\e[0m                Recursive \e[33mvariable\e\
    [0m \e[35mx\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpnwulp621.scala:9:16 ----------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mvar\e[0m \e[36my\e[0m = y\n\e[31m\e[31m  |\e[0m        \
    \        ^\e[0m\n\e[31m  |\e[0m                Recursive \e[33mvariable\e[0m \e\
    [35my\e[0m needs type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        var xi : Long = 0\n        var yi : Long = 0\n       \
    \ while (i < 32) {\n            xi = (x >> i) & 1\n            yi = (y >> i) &\
    \ 1\n            result |= ((xi ^ yi ^ carry) << i)\n            carry = (xi &\
    \ yi) | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val si : Long = xi\
    \ ^ yi ^ carry\n            result |= si << i\n            carry = (xi & yi) |\
    \ (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var k = 1L\n        while (x1 > 0 || y1 > 0) {\n      \
    \      val xk = x1 % 10\n            val yk = y1 % 10\n            val s = xk\
    \ + yk + carry\n            sum += (s % 10) * k\n            carry = s / 10\n\
    \            x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n\
    \        if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var result = 0L\n        var shift = 1L\n\
    \        while (x != 0 || y != 0 || carry != 0) {\n            val xbit = x &\
    \ 1\n            val ybit = y & 1\n            val sum = xbit ^ ybit ^ carry\n\
    \            result |= sum << shift\n            carry = (xbit & ybit) | (xbit\
    \ & carry) | (ybit & carry)\n            x >>= 1\n            y >>= 1\n      \
    \      shift += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dzxcyfc.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean x.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dzxcyfc.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ >>= is not a member of Long - did you mean y.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var result = 0L\n        var shift = 1L\n\
    \        while (x != 0 || y != 0 || carry != 0) {\n            val xbit = x &\
    \ 1\n            val ybit = y & 1\n            val sum = xbit ^ ybit ^ carry\n\
    \            result |= sum << shift\n            carry = (xbit & ybit) | (xbit\
    \ & carry) | (ybit & carry)\n            x >>= 1\n            y >>= 1\n      \
    \      shift += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dzxcyfc.scala:15:14 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            x >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean x.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7dzxcyfc.scala:16:14\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y >>= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ >>= is not a member of Long - did you mean y.>=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = x & y\n        var result = x ^ y\n        while (carry\
    \ != 0) {\n            val shiftedcarry = carry << 1\n            carry = result\
    \ & shiftedcarry\n            result ^= shiftedcarry\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = x & (1 << i)\n\
    \            val yi : Long = y & (1 << i)\n            sum |= (xi ^ yi ^ carry)\n\
    \            carry = ((xi & yi) | (xi & carry) | (yi & carry)) << 1\n        \
    \    i += 1\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry = 0L\n        var sum = 0L\n        var x1 = x\n      \
    \  var y1 = y\n        var i = 0\n        while (x1 != 0 || y1 != 0) {\n     \
    \       val x2 = x1 & 1\n            val y2 = y1 & 1\n            val s = x2 ^\
    \ y2 ^ carry\n            sum |= (s << i)\n            carry = (x2 & y2) | (x2\
    \ & carry) | (y2 & carry)\n            x1 >>= 1\n            y1 >>= 1\n      \
    \      i += 1\n        }\n        if (carry != 0) sum |= (carry << i)\n      \
    \  sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var xor\
    \ : Long = 0\n        var temp_x : Long = x\n        var temp_y : Long = y\n \
    \       while (temp_x != 0) {\n            xor = temp_x ^ temp_y\n           \
    \ carry = (temp_x & temp_y) << 1\n            sum = xor ^ carry\n            temp_x\
    \ = carry\n            temp_y = sum\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n \
    \   assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n \
    \   assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyaqboqi4.scala:21)\n\tat Problem.main(tmpyaqboqi4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var result : Long = 0\n        var\
    \ i : Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i)\
    \ & 1\n            val yi : Long = (y >> i) & 1\n            val ri : Long = xi\
    \ ^ yi ^ carry\n            result |= (ri << i)\n            carry = (xi & yi)\
    \ | (xi & carry) | (yi & carry)\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    def add(x : Long, y : Long) : Long =\
    \ {\n        var carry : Long = 0\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < 32) {\n            val xi : Long = (x >> i) & 1\n\
    \            val yi : Long = (y >> i) & 1\n            val si : Long = xi ^ yi\
    \ ^ carry\n            carry = (xi & yi) | (xi & carry) | (yi & carry)\n     \
    \       sum |= (si << i)\n            i += 1\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979084
