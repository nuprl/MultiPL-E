name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    def modp(n : Long, p :\
  \ Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        if (n == 0) 1\n        else {\n            val x = modp(n /\
    \ 2, p)\n            val y = (x * x) % p\n            if (n % 2 == 0) y else (y\
    \ * 2) % p\n        }", "        var result : Long = 1\n        var power : Long\
    \ = n\n        var value : Long = 2\n        while (power > 0) {\n           \
    \ if (power % 2 == 1) {\n                result = (result * value) % p\n     \
    \       }\n            value = (value * value) % p\n            power /= 2\n \
    \       }\n        return result", "        if (n == 0) 1\n        else {\n  \
    \          val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n \
    \           else (x * x * 2) % p\n        }", "        if (n == 0) 1\n       \
    \ else {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x *\
    \ x) % p\n            else (((x * x) % p) * 2) % p\n        }", "        var result\
    \ : Long = 1\n        var power : Long = n\n        var value : Long = 2\n   \
    \     while (power > 0) {\n            if (power % 2 == 1) {\n               \
    \ result = (result * value) % p\n            }\n            value = (value * value)\
    \ % p\n            power /= 2\n        }\n        return result", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n      \
    \  }", "        if (n == 0) 1\n        else {\n            val x = modp(n / 2,\
    \ p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x * 2) %\
    \ p\n        }", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exponent : Long = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        if (n == 0) return 1\n      \
    \  if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n            return (t\
    \ * t) % p\n        }\n        return (2 * modp(n - 1, p)) % p", "        if (n\
    \ == 0) return 1\n        val x = modp(n / 2, p)\n        val y = (x * x) % p\n\
    \        if (n % 2 == 0) y else (y * 2) % p", "        if (n == 0) 1 else {\n\
    \            val x = modp(n / 2, p)\n            val y = (x * x) % p\n       \
    \     if (n % 2 == 0) y else (y * 2) % p\n        }", "        var res = 1L\n\
    \        var x = 2L\n        var pow = n\n        while (pow > 0) {\n        \
    \    if (pow % 2 == 1) {\n                res = (res * x) % p\n            }\n\
    \            x = (x * x) % p\n            pow /= 2\n        }\n        res", " \
    \       if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n  \
    \          val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2)\
    \ % p\n        }", "        var r = 1L\n        var b = 2L\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) {\n                r = (r\
    \ * b) % p\n            }\n            e = e / 2\n            b = (b * b) % p\n\
    \        }\n        r", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2\
    \ == 0) x2 else (x2 * 2) % p\n        }", "        var result : Long = 1\n   \
    \     var power : Long = n\n        var value : Long = 2\n        while (power\
    \ > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        var result : Long\
    \ = 1\n        var base : Long = 2\n        var exp : Long = n\n        while\
    \ (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   exp /= 2\n        }\n        return result", "        var res = 1L\n     \
    \   var a = 2L\n        var b = n\n        while (b > 0) {\n            if (b\
    \ % 2 == 1) {\n                res = (res * a) % p\n            }\n          \
    \  a = (a * a) % p\n            b /= 2\n        }\n        res", "        var\
    \ result : Long = 1\n        var x : Long = 2\n        var power : Long = n\n\
    \        while (power > 0) {\n            if (power % 2 == 1) {\n            \
    \    result = (result * x) % p\n            }\n            x = (x * x) % p\n \
    \           power /= 2\n        }\n        return result", "        if (n == 0)\
    \ 1\n        else {\n            val x = modp(n / 2, p)\n            if (n % 2\
    \ == 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n   \
    \     }", "        if (n == 0) 1\n        else {\n            val x = modp(n /\
    \ 2, p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else\
    \ (x2 * 2) % p\n        }", "        var r = 1L\n        var b = 2L\n        var\
    \ e = n\n        while (e > 0) {\n            if (e % 2 == 1) {\n            \
    \    r = (r * b) % p\n            }\n            e = e / 2\n            b = (b\
    \ * b) % p\n        }\n        r", "        if (n == 0) 1\n        else {\n  \
    \          val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n \
    \           else (x * x * 2) % p\n        }", "        if (n == 0) 1 else {\n\
    \            val x = modp(n / 2, p)\n            val y = (x * x) % p\n       \
    \     if (n % 2 == 0) y else (y * 2) % p\n        }", "        var res = 1L\n\
    \        var k = n\n        var m = 2L\n        while (k > 0) {\n            if\
    \ (k % 2 == 1) {\n                res = (res * m) % p\n            }\n       \
    \     k /= 2\n            m = (m * m) % p\n        }\n        res", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n   \
    \     }", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n         \
    \   val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n      \
    \  else return (2 * modp(n - 1, p)) % p", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            val x2 = (x * x) % p\n  \
    \          if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "        if (n ==\
    \ 0) 1\n        else {\n            val x = modp(n / 2, p)\n            val x2\
    \ = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n        }",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n\
    \        }", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x *\
    \ 2) % p\n        }", "        if (n == 0) return 1\n        var x = modp(n /\
    \ 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n  \
    \      return x", "        var r = 1L\n        var b = 2L\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) {\n                r = (r\
    \ * b) % p\n            }\n            e /= 2\n            b = (b * b) % p\n \
    \       }\n        r", "        if (n == 0) return 1\n        val x = modp(n /\
    \ 2, p)\n        val x2 = (x * x) % p\n        if (n % 2 == 0) return x2\n   \
    \     else return (x2 * 2) % p", "        var result : Long = 1\n        var x\
    \ : Long = 2\n        var pow : Long = n\n        while (pow > 0) {\n        \
    \    if ((pow & 1) == 1) {\n                result = (result * x) % p\n      \
    \      }\n            x = (x * x) % p\n            pow >>= 1\n        }\n    \
    \    return result", "        if (n == 0) 1\n        else {\n            val x\
    \ = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else\
    \ (x * x * 2) % p\n        }", "        if (n == 0) 1\n        else {\n      \
    \      val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n     \
    \       else (x * x * 2) % p\n        }", "        var res = 1L\n        var x\
    \ = 2L\n        var pw = n\n        while (pw > 0) {\n            if (pw % 2 ==\
    \ 1) {\n                res = (res * x) % p\n            }\n            x = (x\
    \ * x) % p\n            pw /= 2\n        }\n        res", "        if (n == 0)\
    \ 1\n        else {\n            val x = modp(n / 2, p)\n            val y = (x\
    \ * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n        }", "    \
    \    var r = 1L\n        var b = 2L\n        var e = n\n        while (e > 0)\
    \ {\n            if (e % 2 == 1) {\n                r = (r * b) % p\n        \
    \    }\n            e = e / 2\n            b = (b * b) % p\n        }\n      \
    \  r", "        if (n == 0) 1\n        else {\n            val x = modp(n / 2,\
    \ p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2\
    \ * 2) % p\n        }", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else\
    \ (x * x * 2) % p\n        }", "        if (n == 0) 1\n        else {\n      \
    \      val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n     \
    \       else (x * x * 2) % p\n        }", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) %\
    \ p\n            else (x * x * 2) % p\n        }", "        if (n == 0) 1\n  \
    \      else {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0)\
    \ (x * x) % p\n            else (x * x * 2) % p\n        }", "        var res\
    \ = 1L\n        var cur = 2L\n        var i = n\n        while (i > 0) {\n   \
    \         if ((i & 1) == 1) {\n                res = (res * cur) % p\n       \
    \     }\n            cur = (cur * cur) % p\n            i >>= 1\n        }\n \
    \       res", "        var res = 1L\n        var b = 2L\n        var e = n\n \
    \       while (e > 0) {\n            if (e % 2 == 1) res = (res * b) % p\n   \
    \         b = (b * b) % p\n            e /= 2\n        }\n        res", "    \
    \    var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        if (n == 0) 1\n        else {\n            val x =\
    \ modp(n / 2, p)\n            val y = (x * x) % p\n            if (n % 2 == 0)\
    \ y else (y * 2) % p\n        }", "        if (n == 0) 1\n        else {\n   \
    \         val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n  \
    \          else (x * x * 2) % p\n        }", "        var result : Long = 1\n\
    \        var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var power : Long = n\n        var value : Long = 2\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        var result : Long\
    \ = 1\n        var a : Long = 2\n        var b : Long = n\n        while (b >\
    \ 0) {\n            if (b % 2 == 1) {\n                result = (result * a) %\
    \ p\n            }\n            a = (a * a) % p\n            b /= 2\n        }\n\
    \        return result", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else\
    \ (x * x * 2) % p\n        }", "        var result : Long = 1\n        var power\
    \ : Long = n\n        var value : Long = 2\n        while (power > 0) {\n    \
    \        if (power % 2 == 1) {\n                result = (result * value) % p\n\
    \            }\n            value = (value * value) % p\n            power /=\
    \ 2\n        }\n        return result", "        var result : Long = 1\n     \
    \   var power : Long = n\n        var value : Long = 2\n        while (power >\
    \ 0) {\n            if (power % 2 == 1) {\n                result = (result *\
    \ value) % p\n            }\n            value = (value * value) % p\n       \
    \     power /= 2\n        }\n        return result", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            if (n % 2 ==\
    \ 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        var result\
    \ : Long = 1\n        var base : Long = 2\n        var exp : Long = n\n      \
    \  while (exp > 0) {\n            if (exp % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            exp /= 2\n        }\n        return result", "        var a = 1L\n\
    \        var b = 2L\n        var i = n\n        while (i > 0) {\n            if\
    \ ((i & 1) == 1) {\n                a = (a * b) % p\n            }\n         \
    \   b = (b * b) % p\n            i >>= 1\n        }\n        a", "        if (n\
    \ == 0) 1\n        else {\n            val x = modp(n / 2, p)\n            if\
    \ (n % 2 == 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "  \
    \      if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (2 *\
    \ modp(n - 1, p)) % p", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n\
    \            val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n\
    \        return (2 * modp(n - 1, p)) % p", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) %\
    \ p\n            else (x * x * 2) % p\n        }", "        var result : Long\
    \ = 1\n        var power : Long = n\n        var value : Long = 2\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        var r = 1L\n \
    \       var b = 2L\n        var e = n\n        while (e > 0) {\n            if\
    \ (e % 2 == 1) r = (r * b) % p\n            e /= 2\n            b = (b * b) %\
    \ p\n        }\n        r", "        if (n == 0) 1\n        else {\n         \
    \   val x = modp(n / 2, p)\n            val y = (x * x) % p\n            if (n\
    \ % 2 == 0) y else (y * 2) % p\n        }", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            val x2 = (x * x) % p\n  \
    \          if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "        var res\
    \ = 1L\n        var a = 2L\n        var b = n\n        while (b > 0) {\n     \
    \       if (b % 2 == 1) res = (res * a) % p\n            a = (a * a) % p\n   \
    \         b /= 2\n        }\n        res", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            val x2 = (x * x) % p\n  \
    \          if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "        var a =\
    \ 1L\n        var b = 2L\n        var i = n\n        while (i > 0) {\n       \
    \     if (i % 2 == 1) {\n                a = (a * b) % p\n            }\n    \
    \        b = (b * b) % p\n            i /= 2\n        }\n        a", "       \
    \ if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x * x) %\
    \ p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "        if (n\
    \ == 0) 1\n        else {\n            val x = modp(n / 2, p)\n            val\
    \ x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n       \
    \ }", "        var i = n\n        var result = 1L\n        var base = 2L\n   \
    \     while (i > 0) {\n            if (i % 2 == 1) {\n                result =\
    \ (result * base) % p\n            }\n            base = (base * base) % p\n \
    \           i /= 2\n        }\n        return result", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            val x2 = (x *\
    \ x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "    \
    \    var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n          \
    \      result = (result * base) % p\n            }\n            base = (base *\
    \ base) % p\n            exp /= 2\n        }\n        return result", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n          \
    \      result = (result * base) % p\n            }\n            base = (base *\
    \ base) % p\n            exp /= 2\n        }\n        return result", "      \
    \  if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n       \
    \     val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n  \
    \      }", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else\
    \ (x2 * 2) % p\n        }", "        if (n == 0) 1\n        else {\n         \
    \   val x = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n\
    \ % 2 == 0) x2 else (x2 * 2) % p\n        }", "        var result : Long = 1\n\
    \        var power : Long = n\n        var value : Long = 2\n        while (power\
    \ > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        var res = 1L\n\
    \        var i = n\n        var a = 2L\n        while (i > 0) {\n            if\
    \ (i % 2 == 1) {\n                res = (res * a) % p\n            }\n       \
    \     a = (a * a) % p\n            i /= 2\n        }\n        res", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n   \
    \     }", "        if (n == 0) 1\n        else {\n            val x = modp(n /\
    \ 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x * 2)\
    \ % p\n        }", "        if (n == 0) 1\n        else {\n            val x =\
    \ modp(n / 2, p)\n            val y = (x * x) % p\n            if (n % 2 == 0)\
    \ y else (y * 2) % p\n        }", "        var a = 1L\n        var b = 2L\n  \
    \      var i = n\n        while (i > 0) {\n            if (i % 2 == 1) {\n   \
    \             a = (a * b) % p\n            }\n            b = (b * b) % p\n  \
    \          i /= 2\n        }\n        a", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            val y = (x * x) % p\n   \
    \         if (n % 2 == 0) y else (y * 2) % p\n        }", "        if (n == 0)\
    \ 1\n        else {\n            val x = modp(n / 2, p)\n            val x2 =\
    \ (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", " \
    \       if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n  \
    \          val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n\
    \        }", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x *\
    \ 2) % p\n        }", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2\
    \ == 0) x2 else (x2 * 2) % p\n        }", "        var res = 1L\n        var x\
    \ = 2L\n        var y = n\n        while (y > 0) {\n            if (y % 2 == 1)\
    \ {\n                res = (res * x) % p\n            }\n            x = (x *\
    \ x) % p\n            y /= 2\n        }\n        res", "        var res = 1L\n\
    \        var x = 2L\n        var pw = n\n        while (pw > 0) {\n          \
    \  if (pw % 2 == 1) {\n                res = (res * x) % p\n            }\n  \
    \          x = (x * x) % p\n            pw /= 2\n        }\n        res", "  \
    \      var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n          \
    \      result = (result * base) % p\n            }\n            base = (base *\
    \ base) % p\n            exp /= 2\n        }\n        return result", "      \
    \  var res = 1L\n        var x = 2L\n        var pw = n\n        while (pw > 0)\
    \ {\n            if (pw % 2 == 1) {\n                res = (res * x) % p\n   \
    \         }\n            x = (x * x) % p\n            pw /= 2\n        }\n   \
    \     res", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x *\
    \ 2) % p\n        }", "        if (n == 0) return 1\n        val x = modp(n /\
    \ 2, p)\n        val x2 = (x * x) % p\n        if (n % 2 == 0) x2 else (x2 * 2)\
    \ % p", "        if (n == 0) return 1\n        val x = modp(n / 2, p)\n      \
    \  val y = (x * x) % p\n        if (n % 2 == 0) y else (y * 2) % p", "       \
    \ if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n        \
    \    val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n   \
    \     }", "        var result : Long = 1\n        var power : Long = n\n     \
    \   var value : Long = 2\n        while (power > 0) {\n            if (power %\
    \ 2 == 1) {\n                result = (result * value) % p\n            }\n  \
    \          value = (value * value) % p\n            power /= 2\n        }\n  \
    \      return result", "        if (n == 0) return 1\n        val x = modp(n /\
    \ 2, p)\n        val y = (x * x) % p\n        if (n % 2 == 0) y else (y * 2) %\
    \ p", "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x\
    \ = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", " \
    \       if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n  \
    \          val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2)\
    \ % p\n        }", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n\
    \            val x = modp(n / 2, p)\n            (x * x) % p\n        } else {\n\
    \            (2 * modp(n - 1, p)) % p\n        }", "        if (n == 0)\n    \
    \        1\n        else {\n            val x = modp(n / 2, p)\n            val\
    \ x2 = (x * x) % p\n            if (n % 2 == 0)\n                x2\n        \
    \    else\n                (x2 * 2) % p\n        }", "        var result : Long\
    \ = 1\n        var power : Long = n\n        var value : Long = 2\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        var result : Long\
    \ = 1\n        var power : Long = n\n        var value : Long = 2\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            if (n % 2 ==\
    \ 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        var result\
    \ : Long = 1\n        var base : Long = 2\n        var exp : Long = n\n      \
    \  while (exp > 0) {\n            if (exp % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            exp /= 2\n        }\n        return result", "        if (n == 0)\
    \ 1\n        else {\n            val x = modp(n / 2, p)\n            val y = (x\
    \ * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n        }", "    \
    \    if (n == 0) return 1\n        val x = modp(n / 2, p)\n        if (n % 2 ==\
    \ 0)\n            (x * x) % p\n        else\n            (((x * x) % p) * 2) %\
    \ p", "        var res = 1L\n        var x = 2L\n        var pow = n\n       \
    \ while (pow > 0) {\n            if (pow % 2 == 1) {\n                res = (res\
    \ * x) % p\n            }\n            x = (x * x) % p\n            pow /= 2\n\
    \        }\n        res", "        if (n == 0) 1\n        else {\n           \
    \ val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n          \
    \  else (x * x * 2) % p\n        }", "        var result : Long = 1\n        var\
    \ power : Long = n\n        var value : Long = 2\n        while (power > 0) {\n\
    \            if (power % 2 == 1) {\n                result = (result * value)\
    \ % p\n            }\n            value = (value * value) % p\n            power\
    \ /= 2\n        }\n        return result", "        var b = 1L\n        var e\
    \ = n\n        var r = 1L\n        while (e > 0) {\n            if ((e & 1) ==\
    \ 1) r = (r * b) % p\n            b = (b * b) % p\n            e >>= 1\n     \
    \   }\n        r", "        if (n == 0) 1\n        else {\n            val x =\
    \ modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0)\
    \ x2 else (x2 * 2) % p\n        }", "        if (n == 0) 1\n        else {\n \
    \           val x = modp(n / 2, p)\n            val y = (x * x) % p\n        \
    \    if (n % 2 == 0) y else (y * 2) % p\n        }", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            if (n % 2 ==\
    \ 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        if (n\
    \ == 0) 1\n        else {\n            val x = modp(n / 2, p)\n            val\
    \ y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n        }",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            (x * x) % p\n        } else {\n            (2 * modp(n\
    \ - 1, p)) % p\n        }", "        if (n == 0) 1\n        else {\n         \
    \   val x = modp(n / 2, p)\n            val y = (x * x) % p\n            if (n\
    \ % 2 == 0) y else (y * 2) % p\n        }", "        var result : Long = 1\n \
    \       var base : Long = 2\n        var exp : Long = n\n        while (exp >\
    \ 0) {\n            if (exp % 2 == 1) {\n                result = (result * base)\
    \ % p\n            }\n            base = (base * base) % p\n            exp /=\
    \ 2\n        }\n        return result", "        if (n == 0) 1\n        else {\n\
    \            val x = modp(n / 2, p)\n            val x2 = (x * x) % p\n      \
    \      if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "        var result :\
    \ Long = 1\n        var power : Long = n\n        var value : Long = 2\n     \
    \   while (power > 0) {\n            if (power % 2 == 1) {\n                result\
    \ = (result * value) % p\n            }\n            value = (value * value) %\
    \ p\n            power /= 2\n        }\n        return result", "        if (n\
    \ == 0) return 1\n        var a = modp(n / 2, p)\n        a = (a * a) % p\n  \
    \      if (n % 2 == 1) a = (a * 2) % p\n        return a", "        if (n == 0)\
    \ return 1\n        val x = modp(n / 2, p)\n        val x2 = (x * x) % p\n   \
    \     if (n % 2 == 0) return x2\n        else return (x2 * 2) % p", "        var\
    \ result : Long = 1\n        var b : Long = 2\n        var e : Long = n\n    \
    \    while (e > 0) {\n            if (e % 2 == 1) result = (result * b) % p\n\
    \            e /= 2\n            b = (b * b) % p\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        if (n == 0) return 1\n        val k = modp(n / 2, p)\n\
    \        if (n % 2 == 0) (k * k) % p\n        else (k * k * 2) % p", "       \
    \ if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (2 *\
    \ modp(n - 1, p)) % p", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x", "        if (n == 0) return 1\n        var x = modp(n / 2,\
    \ p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n     \
    \   return x", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else\
    \ (x2 * 2) % p\n        }", "        var r = 1L\n        var b = 2L\n        var\
    \ e = n\n        while (e > 0) {\n            if (e % 2 == 1) {\n            \
    \    r = (r * b) % p\n            }\n            e = e / 2\n            b = (b\
    \ * b) % p\n        }\n        r", "        if (n == 0) return 1\n        val\
    \ x = modp(n / 2, p)\n        if (n % 2 == 0) (x * x) % p else (x * x * 2) % p",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) %\
    \ p\n        }", "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n\
    \        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x", "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x\
    \ = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", " \
    \       var res = 1L\n        var k = n\n        var m = 2L\n        while (k\
    \ > 0) {\n            if (k % 2 == 1) res = (res * m) % p\n            k /= 2\n\
    \            m = (m * m) % p\n        }\n        res", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            val x2 = (x *\
    \ x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "    \
    \    if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n     \
    \       if (n % 2 == 0) (x * x) % p\n            else (x * x * 2) % p\n      \
    \  }", "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n       \
    \ x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n\
    \        }", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x *\
    \ 2) % p\n        }", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2\
    \ == 0) x2 else (x2 * 2) % p\n        }", "        var r = 1L\n        var b =\
    \ 2L\n        var e = n\n        while (e > 0) {\n            if (e % 2 == 1)\
    \ {\n                r = (r * b) % p\n            }\n            e /= 2\n    \
    \        b = (b * b) % p\n        }\n        r", "        if (n == 0) 1 else {\n\
    \            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p else\
    \ (x * x * 2) % p\n        }", "        var result : Long = 1\n        var power\
    \ : Long = n\n        var value : Long = 2\n        while (power > 0) {\n    \
    \        if (power % 2 == 1) {\n                result = (result * value) % p\n\
    \            }\n            value = (value * value) % p\n            power /=\
    \ 2\n        }\n        return result", "        var res = 1L\n        var k =\
    \ n\n        var m = 2L\n        while (k > 0) {\n            if (k % 2 == 1)\
    \ {\n                res = (res * m) % p\n            }\n            k /= 2\n\
    \            m = (m * m) % p\n        }\n        res", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            if (n % 2 ==\
    \ 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        var result\
    \ : Long = 1\n        var power : Long = n\n        var value : Long = 2\n   \
    \     while (power > 0) {\n            if (power % 2 == 1) {\n               \
    \ result = (result * value) % p\n            }\n            value = (value * value)\
    \ % p\n            power /= 2\n        }\n        return result", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val y = (x * x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n      \
    \  }", "        var res = 1L\n        var x = 2L\n        var pow = n\n      \
    \  while (pow > 0) {\n            if (pow % 2 == 1) {\n                res = (res\
    \ * x) % p\n            }\n            x = (x * x) % p\n            pow /= 2\n\
    \        }\n        res", "        if (n == 0) return 1\n        if (n % 2 ==\
    \ 0) {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n \
    \       }\n        else return (2 * modp(n - 1, p)) % p", "        if (n == 0)\
    \ 1\n        else {\n            val x = modp(n / 2, p)\n            if (n % 2\
    \ == 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        var\
    \ result : Long = 1\n        var base : Long = 2\n        var exp : Long = n\n\
    \        while (exp > 0) {\n            if (exp % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            exp /= 2\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if\
    \ (n % 2 == 1) x = (x * 2) % p\n        return x", "        var result : Long\
    \ = 1\n        var power : Long = n\n        var value : Long = 2\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            val y = (x *\
    \ x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n        }", "      \
    \  if (n == 0)\n            1\n        else {\n            val x = modp(n / 2,\
    \ p)\n            val y = (x * x) % p\n            if (n % 2 == 0)\n         \
    \       y\n            else\n                (y * 2) % p\n        }", "      \
    \  var result : Long = 1\n        var k : Long = n\n        var m : Long = 2\n\
    \        while (k > 0) {\n            if (k % 2 == 1) {\n                result\
    \ = (result * m) % p\n            }\n            k = k / 2\n            m = (m\
    \ * m) % p\n        }\n        return result", "        if (n == 0) 1\n      \
    \  else {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x\
    \ * x) % p\n            else (x * x * 2) % p\n        }", "        if (n == 0)\
    \ return 1\n        val x = modp(n / 2, p)\n        val y = (x * x) % p\n    \
    \    if (n % 2 == 0) y else (y * 2) % p", "        if (n == 0) return 1\n    \
    \    if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n            return\
    \ (x * x) % p\n        }\n        return (2 * modp(n - 1, p)) % p", "        if\
    \ (n == 0) return 1\n        val x = modp(n / 2, p)\n        val y = (x * x) %\
    \ p\n        if (n % 2 == 0) y else (y * 2) % p", "        var res = 1L\n    \
    \    var cur = 2L\n        var pow = n\n        while (pow > 0) {\n          \
    \  if (pow % 2 == 1) {\n                res = (res * cur) % p\n            }\n\
    \            cur = (cur * cur) % p\n            pow /= 2\n        }\n        res",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         if (n % 2 == 0) (x * x) % p\n            else (x * x * 2) % p\n    \
    \    }", "        var a = 1L\n        var b = 2L\n        var i = n\n        while\
    \ (i > 0) {\n            if ((i & 1) == 1) {\n                a = (a * b) % p\n\
    \            }\n            b = (b * b) % p\n            i >>= 1\n        }\n\
    \        a", "        if (n == 0)\n            1\n        else {\n           \
    \ val x = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n\
    \ % 2 == 0)\n                x2\n            else\n                (x2 * 2) %\
    \ p\n        }", "        if (n == 0) 1\n        else {\n            val x = modp(n\
    \ / 2, p)\n            val y = (x * x) % p\n            if (n % 2 == 0) y else\
    \ (y * 2) % p\n        }", "        if (n == 0) return 1\n        val x = modp(n\
    \ / 2, p)\n        if (n % 2 == 0) return (x * x) % p\n        else return (((x\
    \ * x) % p) * 2) % p", "        var r = 1L\n        var b = 2L\n        var e\
    \ = n\n        while (e > 0) {\n            if (e % 2 == 1) r = (r * b) % p\n\
    \            e /= 2\n            b = (b * b) % p\n        }\n        r", "   \
    \     var r = 1L\n        var b = 2L\n        var e = n\n        while (e > 0)\
    \ {\n            if (e % 2 == 1) {\n                r = (r * b) % p\n        \
    \    }\n            e = e / 2\n            b = (b * b) % p\n        }\n      \
    \  r", "        if (n == 0) 1\n        else {\n            val x = modp(n / 2,\
    \ p)\n            val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2\
    \ * 2) % p\n        }", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else\
    \ (x * x * 2) % p\n        }", "        if (n == 0) 1\n        else {\n      \
    \      val x = modp(n / 2, p)\n            if (n % 2 == 0) (x * x) % p\n     \
    \       else (x * x * 2) % p\n        }", "        if (n == 0) 1\n        else\
    \ {\n            val x = modp(n / 2, p)\n            val y = (x * x) % p\n   \
    \         if (n % 2 == 0) y else (y * 2) % p\n        }", "        if (n == 0)\
    \ 1\n        else {\n            val x = modp(n / 2, p)\n            if (n % 2\
    \ == 0) (x * x) % p\n            else (x * x * 2) % p\n        }", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n   \
    \     }", "        if (n == 0) 1\n        else {\n            val x = modp(n /\
    \ 2, p)\n            if (n % 2 == 0) (x * x) % p\n            else (x * x * 2)\
    \ % p\n        }", "        if (n == 0) return 1\n        var x = modp(n / 2,\
    \ p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n     \
    \   return x", "        var result = 1L\n        var b = 2L\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) {\n                result\
    \ = (result * b) % p\n            }\n            e = e / 2\n            b = (b\
    \ * b) % p\n        }\n        return result", "        if (n == 0) 1\n      \
    \  else {\n            val x = modp(n / 2, p)\n            val x2 = (x * x) %\
    \ p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n        }", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n   \
    \     }", "        if (n == 0) 1\n        else {\n            val x = modp(n /\
    \ 2, p)\n            val y = (x * x) % p\n            if (n % 2 == 0) y else (y\
    \ * 2) % p\n        }", "        if (n == 0) 1\n        else {\n            val\
    \ x = modp(n / 2, p)\n            val x2 = (x * x) % p\n            if (n % 2\
    \ == 0) x2 else (x2 * 2) % p\n        }", "        var res = 1L\n        var b\
    \ = 2L\n        var e = n\n        while (e > 0) {\n            if (e % 2 == 1)\
    \ {\n                res = (res * b) % p\n            }\n            b = (b *\
    \ b) % p\n            e /= 2\n        }\n        res", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            val y = (x *\
    \ x) % p\n            if (n % 2 == 0) y else (y * 2) % p\n        }", "      \
    \  if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n       \
    \     if (n % 2 == 0) (x * x) % p\n            else (x * x * 2) % p\n        }",
  "        if (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n   \
    \         val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) %\
    \ p\n        }", "        var r = 1L\n        var b = 2L\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) r = (r * b) % p\n      \
    \      e /= 2\n            b = (b * b) % p\n        }\n        r", "        if\
    \ (n == 0) 1\n        else {\n            val x = modp(n / 2, p)\n           \
    \ val x2 = (x * x) % p\n            if (n % 2 == 0) x2 else (x2 * 2) % p\n   \
    \     }", "        var result = 1L\n        var b = 2L\n        var e = n\n  \
    \      while (e > 0) {\n            if (e % 2 == 1) {\n                result\
    \ = (result * b) % p\n            }\n            e = e / 2\n            b = (b\
    \ * b) % p\n        }\n        return result", "        if (n == 0) 1\n      \
    \  else {\n            val x = modp(n / 2, p)\n            if (n % 2 == 0) (x\
    \ * x) % p\n            else (x * x * 2) % p\n        }", "        if (n == 0)\
    \ return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if\
    \ (n % 2 == 1) x = (x * 2) % p\n        return x", "        var r = 1L\n     \
    \   var b = 2L\n        var e = n\n        while (e > 0) {\n            if (e\
    \ % 2 == 1) {\n                r = (r * b) % p\n            }\n            e =\
    \ e / 2\n            b = (b * b) % p\n        }\n        r", "        var r =\
    \ 1L\n        var b = 2L\n        var e = n\n        while (e > 0) {\n       \
    \     if ((e & 1) == 1) {\n                r = (r * b) % p\n            }\n  \
    \          e >>= 1\n            b = (b * b) % p\n        }\n        r", "    \
    \    var res = 1L\n        var x = 2L\n        var i = n\n        while (i > 0)\
    \ {\n            if ((i & 1) == 1) {\n                res = (res * x) % p\n  \
    \          }\n            x = (x * x) % p\n            i >>= 1\n        }\n  \
    \      res", "        if (n == 0) 1\n        else {\n            val k = modp(n\
    \ >> 1, p)\n            val k2 = (k * k) % p\n            if ((n & 1) == 0) k2\
    \ else (k2 * 2) % p\n        }"]
stop_tokens:
- "\n    }\n"
