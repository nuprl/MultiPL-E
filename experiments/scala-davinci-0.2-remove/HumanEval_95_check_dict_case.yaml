name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    def\
  \ checkDictCase(dict : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyLower = firstKey.toLowerCase\n   \
    \     val firstKeyUpper = firstKey.toUpperCase\n        if (firstKeyLower == firstKey)\
    \ {\n            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else if (firstKeyUpper == firstKey) {\n\
    \            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val first = keys.head\n        val firstUpper\
    \ = first.toUpperCase\n        val firstLower = first.toLowerCase\n        if\
    \ (keys.forall(k => k == firstUpper || k == firstLower)) true\n        else false",
  "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        val firstUpper = first.toUpperCase\n \
    \       val firstLower = first.toLowerCase\n        if (keys.forall(x => x ==\
    \ firstUpper || x == firstLower)) true\n        else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        lower || upper", "        if (dict.size == 0) return false\n   \
    \     val firstKey = dict.keys.head\n        if (firstKey.toUpperCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        } else\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        }",
  "        if (dict.size == 0) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            for (key <- keys) {\n                if (key != key.toUpperCase)\
    \ return false\n            }\n        } else if (firstKey == firstKeyLower) {\n\
    \            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        if (dict.isEmpty) false\n        else\
    \ {\n            val keys = dict.keys\n            val firstKey = keys.head\n\
    \            val firstKeyIsUpper = firstKey.forall(_.isUpper)\n            val\
    \ firstKeyIsLower = firstKey.forall(_.isLower)\n            if (firstKeyIsUpper)\
    \ {\n                keys.forall(_.forall(_.isUpper))\n            } else if (firstKeyIsLower)\
    \ {\n                keys.forall(_.forall(_.isLower))\n            } else {\n\
    \                false\n            }\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        val firstIsUpper = first.head.isUpper\n        val firstIsLower = first.head.isLower\n\
    \        if (firstIsUpper) {\n            keys.forall(key => key.head.isUpper)\n\
    \        } else if (firstIsLower) {\n            keys.forall(key => key.head.isLower)\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val first = keys.head\n       \
    \ val firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(key => key == firstUpper || key == firstLower)) true\n\
    \        else false", "        if (dict.size == 0) return false\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key != key.toLowerCase) lower = false\n            if (key != key.toUpperCase)\
    \ upper = false\n        }\n        return lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        if (first.toUpperCase == first) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        var lower = true\n        var upper\
    \ = true\n        for (k <- dict.keys) {\n            lower = lower && k.toLowerCase\
    \ == k\n            upper = upper && k.toUpperCase == k\n        }\n        return\
    \ lower || upper", "        if (dict.size == 0) return false\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else if (firstKeyIsUpper) {\n       \
    \     for (key <- keys) {\n                if (key.toUpperCase != key) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.size == 0) return false\n        val\
    \ firstKey = dict.keys.head\n        if (firstKey.toUpperCase == firstKey) {\n\
    \            dict.keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            dict.keys.forall(key => key.toLowerCase == key)\n        }", "  \
    \      if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            for (key <- keys) {\n            \
    \    if (key.toLowerCase != key) return false\n            }\n        } else if\
    \ (firstKeyIsUpper) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(x => x == firstUpper || x == firstLower)) true\n    \
    \    else false", "        if (dict.isEmpty) return false\n        val keys =\
    \ dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys\n        val first = keys.head\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        val firstIsLower = first.toLowerCase == first\n        if\
    \ (firstIsUpper) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else if (firstIsLower) {\n  \
    \          for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.size == 0) return false\n        val\
    \ keys = dict.keys\n        val first = keys.head\n        val firstUpper = first.toUpperCase\n\
    \        val firstLower = first.toLowerCase\n        for (key <- keys) {\n   \
    \         if (key != firstUpper && key != firstLower) return false\n        }\n\
    \        return true", "        if (dict.isEmpty) false\n        else {\n    \
    \        val lower = dict.keys.forall(_.toLowerCase == _)\n            val upper\
    \ = dict.keys.forall(_.toUpperCase == _)\n            lower || upper\n       \
    \ }", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        lower || upper", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toList\n        val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerKeys.length == keys.length || upperKeys.length == keys.length) true\
    \ else false", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val upper = dict.keys.forall(_.toUpperCase == _)\n   \
    \     val lower = dict.keys.forall(_.toLowerCase == _)\n        upper || lower",
  "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(_.toLowerCase\
    \ == _)\n        val upper = dict.keys.forall(_.toUpperCase == _)\n        lower\
    \ || upper", "        if (dict.size == 0) return false\n        val firstKey =\
    \ dict.keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            dict.keys.forall(k => k.toLowerCase == k)\n        } else if\
    \ (firstKeyIsUpper) {\n            dict.keys.forall(k => k.toUpperCase == k)\n\
    \        } else {\n            false\n        }", "        if (dict.size == 0)\
    \ return false\n        val firstKey = dict.keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            dict.keys.forall(key => key.toUpperCase == key)\n\
    \        } else {\n            dict.keys.forall(key => key.toLowerCase == key)\n\
    \        }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        lower || upper", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lowerKeys = keys.filter(x => x.forall(c => c.isLower))\n            val\
    \ upperKeys = keys.filter(x => x.forall(c => c.isUpper))\n            if (lowerKeys.size\
    \ == keys.size || upperKeys.size == keys.size) true\n            else false\n\
    \        }", "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(_.toLowerCase\
    \ == _)\n        val upper = dict.keys.forall(_.toUpperCase == _)\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val first = dict.head\n\
    \        val firstKey = first._1\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            dict.forall(x => x._1.toLowerCase\
    \ == x._1)\n        } else if (firstKeyIsUpper) {\n            dict.forall(x =>\
    \ x._1.toUpperCase == x._1)\n        } else {\n            false\n        }",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower || firstKeyIsUpper) {\n            keys.forall(key\
    \ => {\n                val isLower = key.toLowerCase == key\n               \
    \ val isUpper = key.toUpperCase == key\n                (isLower && firstKeyIsLower)\
    \ || (isUpper && firstKeyIsUpper)\n            })\n        } else false", "  \
    \      if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        val firstLower = first.toLowerCase\n \
    \       val firstUpper = first.toUpperCase\n        if (firstLower == first) {\n\
    \            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else if (firstUpper == first) {\n   \
    \         for (key <- keys) {\n                if (key.toUpperCase != key) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.size == 0) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n  \
    \              if (key != key.toUpperCase) return false\n            }\n     \
    \   } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys\n       \
    \ val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = dict.keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        if (dict.isEmpty) false\n        else {\n            val\
    \ firstKey = dict.keys.head\n            if (firstKey.toUpperCase == firstKey)\
    \ {\n                dict.keys.forall(x => x.toUpperCase == x)\n            }\
    \ else if (firstKey.toLowerCase == firstKey) {\n                dict.keys.forall(x\
    \ => x.toLowerCase == x)\n            } else false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.size == 0) return false\n        val lower\
    \ = dict.keys.forall(_.toLowerCase == _)\n        val upper = dict.keys.forall(_.toUpperCase\
    \ == _)\n        lower || upper", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        return\
    \ lower || upper", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys\n        val lower = keys.filter(x => x.toLowerCase == x)\n    \
    \    val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) true else false", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lower = keys.forall(x => x == x.toLowerCase)\n            val upper = keys.forall(x\
    \ => x == x.toUpperCase)\n            lower || upper\n        }", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower\
    \ = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper) {\n         \
    \   keys.forall(key => key == key.toUpperCase)\n        } else if (firstKey ==\
    \ firstKeyLower) {\n            keys.forall(key => key == key.toLowerCase)\n \
    \       } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n\
    \        if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n \
    \               if (key != key.toUpperCase) return false\n            }\n    \
    \    } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (dict.isEmpty) return false\n        val firstKey = dict.keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        dict.keys.forall(key\
    \ => (key.toLowerCase == key) == firstKeyIsLower)", "        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        if (lower || upper) true else false", "        if (dict.size\
    \ == 0) return false\n        val firstKey = dict.keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            dict.keys.forall(key => key.toUpperCase == key)\n\
    \        } else {\n            dict.keys.forall(key => key.toLowerCase == key)\n\
    \        }", "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        lower || upper", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey == firstKey.toLowerCase\n        val firstKeyIsUpper = firstKey ==\
    \ firstKey.toUpperCase\n        if (firstKeyIsLower) {\n            keys.forall(key\
    \ => key == key.toLowerCase)\n        } else if (firstKeyIsUpper) {\n        \
    \    keys.forall(key => key == key.toUpperCase)\n        } else {\n          \
    \  false\n        }", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lowerCase = keys.forall(x => x.toLowerCase ==\
    \ x)\n        val upperCase = keys.forall(x => x.toUpperCase == x)\n        if\
    \ (lowerCase || upperCase) return true\n        else return false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys.toList\n        val\
    \ lower = keys.forall(x => x.toLowerCase == x)\n        val upper = keys.forall(x\
    \ => x.toUpperCase == x)\n        if (lower || upper) return true\n        return\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (keys.forall(key\
    \ => key == firstKeyUpper || key == firstKeyLower)) true\n        else false",
  "        if (dict.size == 0) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        if (firstKey.toUpperCase == firstKey) {\n\
    \            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val lower = dict.keys.forall(_.toLowerCase == _)\n        val upper = dict.keys.forall(_.toUpperCase\
    \ == _)\n        lower || upper", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        val isUpper = firstChar.isUpper\n        val isLower\
    \ = firstChar.isLower\n        if (isUpper) {\n            for (key <- keys) {\n\
    \                if (key.charAt(0).isLower) return false\n            }\n    \
    \    } else if (isLower) {\n            for (key <- keys) {\n                if\
    \ (key.charAt(0).isUpper) return false\n            }\n        } else {\n    \
    \        return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val lowerCase = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCase = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCase.size == keys.size || upperCase.size == keys.size)\
    \ return true\n        return false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.forall(k => k.toLowerCase\
    \ == k)\n        val upper = keys.forall(k => k.toUpperCase == k)\n        lower\
    \ || upper", "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.forall(x => x == x.toLowerCase)\n        val upper =\
    \ keys.forall(x => x == x.toUpperCase)\n        return lower || upper", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ first = keys.head\n        val firstUpper = first.toUpperCase\n        val firstLower\
    \ = first.toLowerCase\n        if (first == firstUpper) {\n            for (key\
    \ <- keys) {\n                if (key != key.toUpperCase) return false\n     \
    \       }\n        } else if (first == firstLower) {\n            for (key <-\
    \ keys) {\n                if (key != key.toLowerCase) return false\n        \
    \    }\n        } else {\n            return false\n        }\n        return\
    \ true", "        if (dict.isEmpty) return false\n        val firstKey = dict.keys.head\n\
    \        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower =\
    \ firstKey.toLowerCase\n        if (firstKey == firstKeyUpper) {\n           \
    \ dict.keys.forall(key => key == key.toUpperCase)\n        } else if (firstKey\
    \ == firstKeyLower) {\n            dict.keys.forall(key => key == key.toLowerCase)\n\
    \        } else {\n            false\n        }", "        if (dict.size == 0)\
    \ return false\n        val firstKey = dict.keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper) {\n           \
    \ val allKeysAreLower = dict.keys.forall(key => key.toLowerCase == key)\n    \
    \        val allKeysAreUpper = dict.keys.forall(key => key.toUpperCase == key)\n\
    \            allKeysAreLower || allKeysAreUpper\n        } else {\n          \
    \  false\n        }", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (keys.forall(key\
    \ => key == firstKeyUpper || key == firstKeyLower)) true\n        else false",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            for (key <- keys) {\n            \
    \    if (key.toLowerCase != key) return false\n            }\n        } else if\
    \ (firstKeyIsUpper) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val lower = keys.forall(key\
    \ => key.toLowerCase == key)\n        val upper = keys.forall(key => key.toUpperCase\
    \ == key)\n        lower || upper", "        if (dict.isEmpty) return false\n\
    \        val first = dict.head\n        val firstKey = first._1\n        val firstValue\
    \ = first._2\n        if (firstKey.toUpperCase == firstKey) {\n            dict.forall(x\
    \ => x._1.toUpperCase == x._1)\n        } else if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.forall(x => x._1.toLowerCase == x._1)\n        } else {\n\
    \            false\n        }", "        if (dict.isEmpty) return false\n    \
    \    val lower = dict.keys.forall(_.toLowerCase == _)\n        val upper = dict.keys.forall(_.toUpperCase\
    \ == _)\n        lower || upper", "        if (dict.isEmpty) return false\n  \
    \      var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper", "        if\
    \ (dict.size == 0) return false\n        val lower = dict.keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = dict.keys.forall(x => x.toUpperCase == x)\n     \
    \   return lower || upper", "        if (dict.isEmpty) return false\n        val\
    \ lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper = dict.keys.forall(x\
    \ => x.toUpperCase == x)\n        return lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        if (firstKey.toUpperCase == firstKey) {\n            for (key <- keys)\
    \ {\n                if (key.toUpperCase != key) return false\n            }\n\
    \        } else {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower || firstKeyIsUpper) {\n            for (key <- keys)\
    \ {\n                if (firstKeyIsLower && key.toLowerCase != key) return false\n\
    \                if (firstKeyIsUpper && key.toUpperCase != key) return false\n\
    \            }\n            return true\n        }\n        return false", " \
    \       if (dict.size == 0) return false\n        val lower = dict.keys.forall(k\
    \ => k.toLowerCase == k)\n        val upper = dict.keys.forall(k => k.toUpperCase\
    \ == k)\n        lower || upper", "        if (dict.size == 0) return false\n\
    \        val firstKey = dict.keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            dict.keys.forall(x => x == x.toUpperCase)\n        } else if\
    \ (firstKey == firstKeyLower) {\n            dict.keys.forall(x => x == x.toLowerCase)\n\
    \        } else {\n            false\n        }", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        val firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(key => key == firstUpper || key == firstLower)) true\n\
    \        else false", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstChar = firstKey.charAt(0)\n\
    \        if (firstChar.isUpper) {\n            for (key <- keys) {\n         \
    \       if (key.charAt(0).isLower) return false\n            }\n        } else\
    \ {\n            for (key <- keys) {\n                if (key.charAt(0).isUpper)\
    \ return false\n            }\n        }\n        return true", "        if (dict.isEmpty)\
    \ false\n        else {\n            val lower = dict.keys.forall(x => x.toLowerCase\
    \ == x)\n            val upper = dict.keys.forall(x => x.toUpperCase == x)\n \
    \           lower || upper\n        }", "        if (dict.size == 0) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        lower || upper", "    \
    \    if (dict.size == 0) return false\n        val keys = dict.keys\n        val\
    \ lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) true else false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys\n        val first = keys.head\n        val firstUpper\
    \ = first.toUpperCase\n        val firstLower = first.toLowerCase\n        if\
    \ (keys.forall(x => x == firstUpper || x == firstLower)) return true\n       \
    \ else return false", "        if (dict.size == 0) return false\n        val firstKey\
    \ = dict.keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n       \
    \ if (firstKey == firstKeyUpper) {\n            dict.keys.forall(key => key ==\
    \ key.toUpperCase)\n        } else {\n            dict.keys.forall(key => key\
    \ == key.toLowerCase)\n        }", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x ==\
    \ x.toLowerCase)\n        val upper = keys.filter(x => x == x.toUpperCase)\n \
    \       if (lower.size == keys.size || upper.size == keys.size) return true\n\
    \        return false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val lower = keys.filter(key => key.toLowerCase == key)\n\
    \        val upper = keys.filter(key => key.toUpperCase == key)\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) return true\n        return false",
  "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        lower || upper", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toLowerCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.size == 0) return\
    \ false\n        val keys = dict.keys\n        val first = keys.head\n       \
    \ val firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (first == firstUpper) {\n            for (key <- keys) {\n       \
    \         if (key != key.toUpperCase) return false\n            }\n        } else\
    \ if (first == firstLower) {\n            for (key <- keys) {\n              \
    \  if (key != key.toLowerCase) return false\n            }\n        } else {\n\
    \            return false\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val lower = dict.keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = dict.keys.forall(x => x.toUpperCase == x)\n     \
    \   lower || upper", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lowerKeys = keys.filter(x => x.toLowerCase ==\
    \ x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lowerKeys.length == keys.length || upperKeys.length == keys.length) true else\
    \ false", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstChar = firstKey.charAt(0)\n\
    \        val isFirstLower = firstChar.isLower\n        val isFirstUpper = firstChar.isUpper\n\
    \        if (isFirstLower) {\n            for (key <- keys) {\n              \
    \  if (key.charAt(0).isUpper) return false\n            }\n        } else if (isFirstUpper)\
    \ {\n            for (key <- keys) {\n                if (key.charAt(0).isLower)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        if (dict.size == 0) return false\n  \
    \      val firstKey = dict.keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            dict.keys.forall(key => key == key.toUpperCase)\n        } else\
    \ if (firstKey == firstKeyLower) {\n            dict.keys.forall(key => key ==\
    \ key.toLowerCase)\n        } else {\n            false\n        }", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n      \
    \  val firstKey = keys.head\n        val firstKeyIsUpper = firstKey.head.isUpper\n\
    \        val allKeysAreUpper = keys.forall(key => key.head.isUpper)\n        val\
    \ allKeysAreLower = keys.forall(key => key.head.isLower)\n        allKeysAreUpper\
    \ || allKeysAreLower", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lowerKeys = keys.filter(x => x.toLowerCase ==\
    \ x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lowerKeys.length == keys.length || upperKeys.length == keys.length) true else\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val first = keys.head\n        val firstUpper = first.toUpperCase\n \
    \       val firstLower = first.toLowerCase\n        if (keys.forall(key => key\
    \ == firstUpper || key == firstLower)) true\n        else false", "        if\
    \ (dict.size == 0) return false\n        val keys = dict.keys\n        val first\
    \ = keys.head\n        val firstUpper = first.toUpperCase\n        val firstLower\
    \ = first.toLowerCase\n        if (first == firstUpper) {\n            for (key\
    \ <- keys) {\n                if (key != key.toUpperCase) return false\n     \
    \       }\n        } else if (first == firstLower) {\n            for (key <-\
    \ keys) {\n                if (key != key.toLowerCase) return false\n        \
    \    }\n        } else {\n            return false\n        }\n        return\
    \ true", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false", "        if (dict.isEmpty) return\
    \ false\n        val firstKey = dict.keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            dict.keys.forall(key => key == key.toUpperCase)\n        } else\
    \ if (firstKey == firstKeyLower) {\n            dict.keys.forall(key => key ==\
    \ key.toLowerCase)\n        } else {\n            false\n        }", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys\n        val lower\
    \ = keys.forall(x => x.toLowerCase == x)\n        val upper = keys.forall(x =>\
    \ x.toUpperCase == x)\n        if (lower || upper) return true\n        else return\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) return true\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.forall(_.toLowerCase == _)\n   \
    \     val upper = dict.keys.forall(_.toUpperCase == _)\n        lower || upper",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.forall(x => x == x.toLowerCase)\n        val upper =\
    \ keys.forall(x => x == x.toUpperCase)\n        lower || upper", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys.toList\n        val lower =\
    \ keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n        return lower.size == keys.size || upper.size == keys.size", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys\n       \
    \ val lowerCase = keys.forall(key => key.toLowerCase == key)\n        val upperCase\
    \ = keys.forall(key => key.toUpperCase == key)\n        return lowerCase || upperCase",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            for (key <- keys) {\n            \
    \    if (key.toLowerCase != key) return false\n            }\n        } else if\
    \ (firstKeyIsUpper) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        val firstIsUpper = firstChar.isUpper\n       \
    \ for (key <- keys) {\n            val firstChar = key.charAt(0)\n           \
    \ val isUpper = firstChar.isUpper\n            if (isUpper != firstIsUpper) return\
    \ false\n        }\n        return true", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(_.toLowerCase\
    \ == _)\n        val upper = keys.forall(_.toUpperCase == _)\n        lower ||\
    \ upper", "        if (dict.size == 0) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        return lower || upper", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val lowerKeys = keys.filter(key => key.toLowerCase\
    \ == key)\n        val upperKeys = keys.filter(key => key.toUpperCase == key)\n\
    \        if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true\n\
    \        else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower =\
    \ firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper) {\n           \
    \ for (key <- keys) {\n                if (firstKeyIsLower && key.toLowerCase\
    \ != key) return false\n                if (firstKeyIsUpper && key.toUpperCase\
    \ != key) return false\n            }\n            return true\n        }\n  \
    \      return false", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstChar = firstKey.charAt(0)\n\
    \        if (firstChar.isUpper) {\n            for (key <- keys) {\n         \
    \       if (key.charAt(0).isLower) return false\n            }\n        } else\
    \ {\n            for (key <- keys) {\n                if (key.charAt(0).isUpper)\
    \ return false\n            }\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) return false\n        val lowerCase\
    \ = dict.keys.forall(_.toLowerCase == _)\n        val upperCase = dict.keys.forall(_.toUpperCase\
    \ == _)\n        return lowerCase || upperCase", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        return lower || upper", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        if (keys.forall(x => x.toLowerCase\
    \ == x)) return true\n        if (keys.forall(x => x.toUpperCase == x)) return\
    \ true\n        return false", "        if (dict.size == 0) return false\n   \
    \     val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        return\
    \ lower || upper", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower =\
    \ firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(key\
    \ => key.toLowerCase == key)\n        val upper = keys.forall(key => key.toUpperCase\
    \ == key)\n        lower || upper", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        return\
    \ lower.size == keys.size || upper.size == keys.size", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val lowerKeys = keys.filter(key\
    \ => key.toLowerCase == key)\n        val upperKeys = keys.filter(key => key.toUpperCase\
    \ == key)\n        if (lowerKeys.size == keys.size || upperKeys.size == keys.size)\
    \ true else false", "        if (dict.size == 0) false\n        else {\n     \
    \       val keys = dict.keys\n            val firstKey = keys.head\n         \
    \   val firstKeyIsLower = firstKey.toLowerCase == firstKey\n            val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n            if (firstKeyIsLower) {\n   \
    \             keys.forall(key => key.toLowerCase == key)\n            } else if\
    \ (firstKeyIsUpper) {\n                keys.forall(key => key.toUpperCase == key)\n\
    \            } else {\n                false\n            }\n        }", "   \
    \     if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        if (first.toUpperCase == first) {\n  \
    \          for (key <- keys) {\n                if (key.toUpperCase != key) return\
    \ false\n            }\n        } else {\n            for (key <- keys) {\n  \
    \              if (key.toLowerCase != key) return false\n            }\n     \
    \   }\n        return true", "        if (dict.isEmpty) return false\n       \
    \ val keys = dict.keys.toList\n        val lower = keys.forall(x => x == x.toLowerCase)\n\
    \        val upper = keys.forall(x => x == x.toUpperCase)\n        lower || upper",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        val firstIsLower = first.toLowerCase == first\n        val firstIsUpper\
    \ = first.toUpperCase == first\n        if (firstIsLower) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            for (key <- keys) {\n                if (key != key.toUpperCase)\
    \ return false\n            }\n        } else if (firstKey == firstKeyLower) {\n\
    \            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val first = keys.head\n        val firstUpper\
    \ = first.toUpperCase\n        val firstLower = first.toLowerCase\n        if\
    \ (keys.forall(key => key == firstUpper || key == firstLower)) true\n        else\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        val firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (keys.forall(x => x == firstUpper || x == firstLower)) true\n    \
    \    else false", "        if (dict.isEmpty) return false\n        val keys =\
    \ dict.keys\n        val first = keys.head\n        if (first.toUpperCase == first)\
    \ {\n            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        }\n        return true", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsUpper = first.head.isUpper\n        val firstIsLower = first.head.isLower\n\
    \        if (firstIsUpper) {\n            for (key <- keys) {\n              \
    \  if (key.head.isLower) return false\n            }\n        } else if (firstIsLower)\
    \ {\n            for (key <- keys) {\n                if (key.head.isUpper) return\
    \ false\n            }\n        } else {\n            return false\n        }\n\
    \        return true", "        if (dict.size == 0) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            for (key <- keys) {\n\
    \                if (key.toLowerCase != key) return false\n            }\n   \
    \     } else if (firstKeyIsUpper) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) return false\n        val firstKey\
    \ = dict.keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n       \
    \ val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            dict.keys.forall(key => key == key.toUpperCase)\n        } else\
    \ if (firstKey == firstKeyLower) {\n            dict.keys.forall(key => key ==\
    \ key.toLowerCase)\n        } else {\n            false\n        }", "       \
    \ if (dict.size == 0) return false\n        val keys = dict.keys.toList\n    \
    \    val first = keys.head\n        val firstIsUpper = first.head.isUpper\n  \
    \      val allUpper = keys.forall(x => x.head.isUpper)\n        val allLower =\
    \ keys.forall(x => x.head.isLower)\n        if (allUpper || allLower) return true\n\
    \        else return false", "        if (dict.isEmpty) return false\n       \
    \ val keys = dict.keys\n        val first = keys.head\n        val firstUpper\
    \ = first.toUpperCase\n        val firstLower = first.toLowerCase\n        if\
    \ (keys.forall(key => key == firstUpper || key == firstLower)) true\n        else\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        if (first.toUpperCase == first) {\n  \
    \          keys.forall(key => key.toUpperCase == key)\n        } else {\n    \
    \        keys.forall(key => key.toLowerCase == key)\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerKeys = keys.filter(x => x.toLowerCase == x)\n        val upperKeys\
    \ = keys.filter(x => x.toUpperCase == x)\n        if (lowerKeys.length == keys.length\
    \ || upperKeys.length == keys.length) true else false", "        if (dict.isEmpty)\
    \ return false\n        val firstKey = dict.keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            dict.keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n        \
    \    dict.keys.forall(key => key.toUpperCase == key)\n        } else {\n     \
    \       false\n        }", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val lower = keys.filter(k => k.toLowerCase == k)\n\
    \        val upper = keys.filter(k => k.toUpperCase == k)\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        if (first.toUpperCase == first) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ first = keys.head\n        val firstIsUpper = first.head.isUpper\n        val\
    \ firstIsLower = first.head.isLower\n        if (firstIsUpper) {\n           \
    \ for (key <- keys) {\n                if (key.head.isLower) return false\n  \
    \          }\n        } else if (firstIsLower) {\n            for (key <- keys)\
    \ {\n                if (key.head.isUpper) return false\n            }\n     \
    \   } else {\n            return false\n        }\n        return true", "   \
    \     if (dict.size == 0) return false\n        val firstKey = dict.keys.head\n\
    \        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower =\
    \ firstKey.toLowerCase\n        if (firstKey == firstKeyUpper) {\n           \
    \ dict.keys.forall(key => key == key.toUpperCase)\n        } else if (firstKey\
    \ == firstKeyLower) {\n            dict.keys.forall(key => key == key.toLowerCase)\n\
    \        } else {\n            false\n        }", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys\n        val lower = keys.filter(x => x.toLowerCase == x)\n      \
    \  val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.size ==\
    \ 0 || upper.size == 0) return false\n        return true", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey == firstKey.toLowerCase\n        val firstKeyIsUpper\
    \ = firstKey == firstKey.toUpperCase\n        if (firstKeyIsLower || firstKeyIsUpper)\
    \ {\n            for (key <- keys) {\n                if (firstKeyIsLower && key\
    \ != key.toLowerCase) return false\n                if (firstKeyIsUpper && key\
    \ != key.toUpperCase) return false\n            }\n            return true\n \
    \       }\n        return false", "        if (dict.isEmpty) return false\n  \
    \      val keys = dict.keys\n        val first = keys.head\n        if (first.toUpperCase\
    \ == first) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toLowerCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.size == 0) return\
    \ false\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            lower = lower && key.toLowerCase == key\n     \
    \       upper = upper && key.toUpperCase == key\n        }\n        return lower\
    \ || upper", "        if (dict.size == 0) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        if (firstKey.toUpperCase == firstKey)\
    \ {\n            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        }\n        return true", "        if (dict.size == 0) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        return lower || upper",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n \
    \       val lower = keys.forall(key => key.toLowerCase == key)\n        val upper\
    \ = keys.forall(key => key.toUpperCase == key)\n        lower || upper", "   \
    \     if (dict.size == 0) return false\n        val keys = dict.keys\n       \
    \ val firstKey = keys.head\n        val firstChar = firstKey.charAt(0)\n     \
    \   val isFirstUpper = firstChar.isUpper\n        for (key <- keys) {\n      \
    \      val firstChar = key.charAt(0)\n            val isUpper = firstChar.isUpper\n\
    \            if (isUpper != isFirstUpper) return false\n        }\n        return\
    \ true", "        if (dict.isEmpty) return false\n        val firstKey = dict.keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     dict.keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        } else\
    \ {\n            false\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toUpperCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toLowerCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.isEmpty) return\
    \ false\n        val firstKey = dict.keys.head\n        val firstKeyIsLower =\
    \ firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            dict.keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n        \
    \    dict.keys.forall(key => key.toUpperCase == key)\n        } else {\n     \
    \       false\n        }", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val first = keys.head\n        val firstIsLower = first.toLowerCase ==\
    \ first\n        val firstIsUpper = first.toUpperCase == first\n        if (firstIsLower)\
    \ {\n            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else if (firstIsUpper) {\n          \
    \  for (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) false\n        else {\n          \
    \  val keys = dict.keys\n            val lowerKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upperKeys = keys.filter(x => x.toUpperCase == x)\n  \
    \          if (lowerKeys.size == keys.size || upperKeys.size == keys.size) true\n\
    \            else false\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstIsUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }", " \
    \       if (dict.size == 0) return false\n        val firstKey = dict.keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     dict.keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        } else\
    \ {\n            false\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (keys.forall(key => key == firstKeyUpper || key == firstKeyLower))\
    \ true\n        else false", "        if (dict.isEmpty) return false\n       \
    \ val keys = dict.keys\n        val first = keys.head\n        val firstUpper\
    \ = first.toUpperCase\n        val firstLower = first.toLowerCase\n        val\
    \ firstIsUpper = first == firstUpper\n        val firstIsLower = first == firstLower\n\
    \        if (firstIsUpper) {\n            for (key <- keys) {\n              \
    \  if (key != key.toUpperCase) return false\n            }\n        } else if\
    \ (firstIsLower) {\n            for (key <- keys) {\n                if (key !=\
    \ key.toLowerCase) return false\n            }\n        } else {\n           \
    \ return false\n        }\n        return true", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        if (firstKey.toUpperCase == firstKey) {\n            for (key <- keys)\
    \ {\n                if (key.toUpperCase != key) return false\n            }\n\
    \        } else {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n   \
    \     val lower = keys.forall(x => x.toLowerCase == x)\n        val upper = keys.forall(x\
    \ => x.toUpperCase == x)\n        return lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        val firstUpper = first.toUpperCase\n        val firstLower = first.toLowerCase\n\
    \        if (first == firstUpper) {\n            for (key <- keys) {\n       \
    \         if (key != key.toUpperCase) return false\n            }\n        } else\
    \ if (first == firstLower) {\n            for (key <- keys) {\n              \
    \  if (key != key.toLowerCase) return false\n            }\n        } else {\n\
    \            return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        val firstKeyUpper =\
    \ firstKey.toUpperCase\n        if (firstKeyLower == firstKey) {\n           \
    \ for (key <- keys) {\n                if (key.toLowerCase != key) return false\n\
    \            }\n        } else if (firstKeyUpper == firstKey) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.length == keys.length || upper.length == keys.length)\
    \ true else false", "        if (dict.isEmpty) return false\n        val lower\
    \ = dict.keys.filter(_.forall(_.isLower)).size\n        val upper = dict.keys.filter(_.forall(_.isUpper)).size\n\
    \        if (lower == dict.size || upper == dict.size) return true\n        return\
    \ false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lowerKeys = keys.filter(x => x == x.toLowerCase)\n        val upperKeys\
    \ = keys.filter(x => x == x.toUpperCase)\n        if (lowerKeys.size == keys.size\
    \ || upperKeys.size == keys.size) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lowerKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerKeys.length == keys.length || upperKeys.length == keys.length)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyLower = firstKey.toLowerCase\n\
    \        val firstKeyUpper = firstKey.toUpperCase\n        if (firstKeyLower ==\
    \ firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else if (firstKeyUpper == firstKey)\
    \ {\n            for (key <- keys) {\n                if (key.toUpperCase != key)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        if (dict.isEmpty) false\n        else\
    \ {\n            val keys = dict.keys\n            val firstKey = keys.head\n\
    \            val firstKeyIsUpper = firstKey.head.isUpper\n            val allKeysAreUpper\
    \ = keys.forall(key => key.head.isUpper)\n            val allKeysAreLower = keys.forall(key\
    \ => key.head.isLower)\n            if (firstKeyIsUpper) allKeysAreUpper\n   \
    \         else allKeysAreLower\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n\
    \        if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n \
    \               if (key != key.toUpperCase) return false\n            }\n    \
    \    } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (dict.isEmpty) return false\n        val first = dict.keys.head\n \
    \       val firstIsLower = first.toLowerCase == first\n        val firstIsUpper\
    \ = first.toUpperCase == first\n        if (firstIsLower) {\n            dict.keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstIsUpper) {\n           \
    \ dict.keys.forall(key => key.toUpperCase == key)\n        } else {\n        \
    \    false\n        }", "        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            lower = lower && key.toLowerCase\
    \ == key\n            upper = upper && key.toUpperCase == key\n        }\n   \
    \     lower || upper", "        if (dict.size == 0) return false\n        val\
    \ keys = dict.keys\n        val lower = keys.forall(k => k.toLowerCase == k)\n\
    \        val upper = keys.forall(k => k.toUpperCase == k)\n        if (lower ||\
    \ upper) return true\n        return false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lower = keys.forall(key =>\
    \ key.toLowerCase == key)\n        val upper = keys.forall(key => key.toUpperCase\
    \ == key)\n        return lower || upper", "        if (dict.isEmpty) false\n\
    \        else {\n            val lower = dict.keys.forall(x => x.toLowerCase ==\
    \ x)\n            val upper = dict.keys.forall(x => x.toUpperCase == x)\n    \
    \        lower || upper\n        }", "        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n  \
    \              if (key != key.toUpperCase) return false\n            }\n     \
    \   } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys\n       \
    \ val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        if (dict.size\
    \ == 0) return false\n        val lower = dict.keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = dict.keys.forall(x => x.toUpperCase == x)\n     \
    \   return lower || upper", "        if (dict.size == 0) return false\n      \
    \  val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val first = keys.head\n        if (first.toUpperCase == first) {\n  \
    \          for (key <- keys) {\n                if (key.toUpperCase != key) return\
    \ false\n            }\n        } else {\n            for (key <- keys) {\n  \
    \              if (key.toLowerCase != key) return false\n            }\n     \
    \   }\n        return true", "        if (dict.size == 0) return false\n     \
    \   val firstKey = dict.keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        dict.keys.forall(key => if (firstKeyIsLower) key.toLowerCase\
    \ == key else key.toUpperCase == key)", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper) {\n           \
    \ keys.forall(key => {\n                val isLower = key.toLowerCase == key\n\
    \                val isUpper = key.toUpperCase == key\n                if (firstKeyIsLower)\
    \ isLower else isUpper\n            })\n        } else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        if (first.toUpperCase == first) {\n            for (key <- keys) {\n\
    \                if (key.toUpperCase != key) return false\n            }\n   \
    \     } else {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ first = keys.head\n        if (first.toUpperCase == first) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            for (key <- keys) {\n          \
    \      if (key.toLowerCase != key) return false\n            }\n        }\n  \
    \      return true", "        if (dict.isEmpty) false\n        else {\n      \
    \      val lower = dict.keys.forall(x => x.forall(y => y.isLower))\n         \
    \   val upper = dict.keys.forall(x => x.forall(y => y.isUpper))\n            lower\
    \ || upper\n        }", "        if (dict.isEmpty) return false\n        val firstKey\
    \ = dict.keys.head\n        if (firstKey.forall(_.isUpper)) {\n            dict.keys.forall(_.forall(_.isUpper))\n\
    \        } else if (firstKey.forall(_.isLower)) {\n            dict.keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) return false\n        val first =\
    \ dict.head\n        val (key, value) = first\n        val isLower = key.toLowerCase\
    \ == key\n        val isUpper = key.toUpperCase == key\n        if (isLower ||\
    \ isUpper) {\n            dict.forall(x => {\n                val (key, value)\
    \ = x\n                if (isLower) key.toLowerCase == key else key.toUpperCase\
    \ == key\n            })\n        } else false", "        if (dict.size == 0)\
    \ return false\n        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        return lowerCase || upperCase", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLowerCase = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLowerCase) {\n   \
    \         for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpperCase) {\n          \
    \  for (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val first = keys.head\n        val firstUpper = first.toUpperCase\n \
    \       val firstLower = first.toLowerCase\n        if (keys.forall(key => key\
    \ == firstUpper || key == firstLower)) true\n        else false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys.toList\n        val\
    \ first = keys.head\n        if (first.toUpperCase == first) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            for (key <- keys) {\n          \
    \      if (key.toLowerCase != key) return false\n            }\n        }\n  \
    \      return true", "        if (dict.size == 0) return false\n        val firstKey\
    \ = dict.keys.head\n        val firstKeyIsLower = firstKey.head.isLower\n    \
    \    for (key <- dict.keys) {\n            if (key.head.isLower != firstKeyIsLower)\
    \ return false\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
