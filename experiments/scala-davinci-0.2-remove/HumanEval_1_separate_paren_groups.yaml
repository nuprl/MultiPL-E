name: HumanEval_1_separate_paren_groups
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n    // separate those group into separate strings\
  \ and return the list of those.\n    // Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n    // Ignore any\
  \ spaces in the input string.\n    def separateParenGroups(paren_string : String)\
  \ : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
  (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
  ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
  )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
  (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
  ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
  \    }\n\n}\n"
completions: ["        val paren_string_no_spaces = paren_string.replaceAll(\" \"\
    , \"\")\n        val paren_groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else {\n                current_group.append(c)\n            }\n\
    \        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var groups = List[String]()\n  \
    \      var group = \"\"\n        var open_count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_count += 1\n          \
    \      group += c\n            } else if (c == ')') {\n                open_count\
    \ -= 1\n                group += c\n                if (open_count == 0) {\n \
    \                   groups = groups :+ group\n                    group = \"\"\
    \n                }\n            } else if (c != ' ') {\n                group\
    \ += c\n            }\n        }\n        groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces_list) {\n            if (c == '(') {\n           \
    \     open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else {\n                current_group += c\n\
    \            }\n        }\n        paren_groups.reverse", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var paren_count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          paren_count += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                paren_count -= 1\n                current_group\
    \ += c\n                if (paren_count == 0) {\n                    paren_groups\
    \ = paren_groups :+ current_group\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var paren_count = 0\n        for (i <-\
    \ 0 until paren_string_no_spaces_length) {\n            val char = paren_string_no_spaces(i)\n\
    \            if (char == '(') {\n                paren_count += 1\n          \
    \  } else if (char == ')') {\n                paren_count -= 1\n            }\n\
    \            paren_group += char\n            if (paren_count == 0) {\n      \
    \          paren_groups = paren_group :: paren_groups\n                paren_group\
    \ = \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var current_group = new StringBuilder()\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    result = result :+ current_group.toString\n             \
    \       current_group = new StringBuilder()\n                }\n            }\
    \ else if (c != ' ') {\n                current_group.append(c)\n            }\n\
    \        }\n        result", "        var paren_stack = new Stack[Char]()\n  \
    \      var paren_groups = new ListBuffer[String]()\n        var paren_group =\
    \ new StringBuilder()\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                paren_stack.push(c)\n            } else if (c == ')')\
    \ {\n                paren_stack.pop()\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += paren_group.toString\n              \
    \      paren_group = new StringBuilder()\n                }\n            } else\
    \ if (c != ' ') {\n                paren_group += c\n            }\n        }\n\
    \        paren_groups.toList", "        var paren_groups = List[String]()\n  \
    \      var group_start = 0\n        var group_end = 0\n        var open_parens\
    \ = 0\n        for (i <- 0 until paren_string.length) {\n            if (paren_string(i)\
    \ == '(') {\n                if (open_parens == 0) {\n                    group_start\
    \ = i\n                }\n                open_parens += 1\n            } else\
    \ if (paren_string(i) == ')') {\n                open_parens -= 1\n          \
    \      if (open_parens == 0) {\n                    group_end = i\n          \
    \          paren_groups = paren_groups :+ paren_string.substring(group_start,\
    \ group_end + 1)\n                }\n            }\n        }\n        paren_groups",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var paren_count = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                paren_count += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                paren_count -= 1\n      \
    \          current_group += c\n                if (paren_count == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ result = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups : List[String] = List()\n        var current_group :\
    \ String = \"\"\n        var paren_count = 0\n        for (c <- paren_string_chars)\
    \ {\n            if (c == '(') {\n                paren_count += 1\n         \
    \   } else if (c == ')') {\n                paren_count -= 1\n            }\n\
    \            current_group += c\n            if (paren_count == 0) {\n       \
    \         paren_groups = paren_groups :+ current_group\n                current_group\
    \ = \"\"\n            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = ListBuffer[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups += current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.toList",
  "        // TODO: Implement this function\n        List(\"\")", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_chars\
    \ = paren_string_no_spaces.toCharArray\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces_chars) {\n            if (c == '(') {\n          \
    \      open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else {\n                current_group += c\n\
    \            }\n        }\n        paren_groups.reverse", "        var groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        var open_paren_count =\
    \ 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n\
    \                open_paren_count += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_paren_count -= 1\n \
    \               current_group.append(c)\n                if (open_paren_count\
    \ == 0) {\n                    paren_groups += current_group.toString\n      \
    \              current_group = new StringBuilder\n                }\n        \
    \    } else {\n                current_group.append(c)\n            }\n      \
    \  }\n        paren_groups.toList", "        var result = List[String]()\n   \
    \     var current_group = new StringBuilder()\n        var paren_count = 0\n \
    \       for (c <- paren_string) {\n            if (c == '(') {\n             \
    \   paren_count += 1\n                current_group.append(c)\n            } else\
    \ if (c == ')') {\n                paren_count -= 1\n                current_group.append(c)\n\
    \            } else if (c == ' ') {\n                // Do nothing\n         \
    \   } else {\n                current_group.append(c)\n            }\n       \
    \     if (paren_count == 0) {\n                result = result :+ current_group.toString\n\
    \                current_group = new StringBuilder()\n            }\n        }\n\
    \        result", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_chars\
    \ = paren_string_no_spaces.toCharArray\n        var paren_groups = List[String]()\n\
    \        var group_start = -1\n        var group_end = -1\n        var open_parens\
    \ = 0\n        for (i <- 0 until paren_string_no_spaces_chars.length) {\n    \
    \        if (paren_string_no_spaces_chars(i) == '(') {\n                if (open_parens\
    \ == 0) {\n                    group_start = i\n                }\n          \
    \      open_parens += 1\n            }\n            else if (paren_string_no_spaces_chars(i)\
    \ == ')') {\n                open_parens -= 1\n                if (open_parens\
    \ == 0) {\n                    group_end = i\n                    paren_groups\
    \ = paren_groups :+ paren_string_no_spaces.substring(group_start, group_end +\
    \ 1)\n                }\n            }\n        }\n        paren_groups", "  \
    \      var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var paren_count = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                paren_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                paren_count -= 1\n\
    \                current_group += c\n                if (paren_count == 0) {\n\
    \                    paren_groups = paren_groups :+ current_group\n          \
    \          current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   paren_groups", "        var result = List[String]()\n        var cur_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                cur_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                cur_group += c\n                if (open_parens == 0) {\n   \
    \                 result = result :+ cur_group\n                    cur_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    cur_group += c\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        //println(paren_string_no_spaces_list)\n\
    \        val paren_string_no_spaces_list_length = paren_string_no_spaces_list.length\n\
    \        var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_index_start\
    \ = 0\n        var paren_string_no_spaces_list_index_end = 0\n        var paren_string_no_spaces_list_index_end_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous = 0\n\
    \        var paren_string_no_spaces_list_index_end_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_end_previous_previous_previous_previous_previous_previous_previous_previous",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var current_depth = 0\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                current_depth += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                current_depth -= 1\n\
    \                current_group += c\n                if (current_depth == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result.reverse", " \
    \       val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n  \
    \      val paren_string_no_spaces_list = paren_string_no_spaces.toList\n     \
    \   val paren_string_no_spaces_list_rev = paren_string_no_spaces_list.reverse\n\
    \        val paren_string_no_spaces_list_rev_stack = new Stack[Char]\n       \
    \ var paren_string_no_spaces_list_rev_stack_count = 0\n        var paren_string_no_spaces_list_rev_stack_count_max\
    \ = 0\n        var paren_string_no_spaces_list_rev_stack_count_max_index = 0\n\
    \        for (i <- 0 until paren_string_no_spaces_list_rev.length) {\n       \
    \     if (paren_string_no_spaces_list_rev(i) == ')') {\n                paren_string_no_spaces_list_rev_stack.push(paren_string_no_spaces_list_rev(i))\n\
    \                paren_string_no_spaces_list_rev_stack_count += 1\n          \
    \  }\n            else {\n                paren_string_no_spaces_list_rev_stack.pop\n\
    \                paren_string_no_spaces_list_rev_stack_count -= 1\n          \
    \  }\n            if (paren_string_no_spaces_list_rev_stack_count > paren_string_no_spaces_list_rev_stack_count_max)\
    \ {\n                paren_string_no_spaces_list_rev_stack_count_max = paren_string_no_spaces_list_rev_stack_count\n\
    \                paren_string_no_spaces_list_rev_stack_count_max_index = i\n \
    \           }\n        }\n        val paren_string_no_spaces_list_rev_stack_count_max_index_rev\
    \ = paren_string_no_spaces_list_rev.length - paren_string_no_spaces_list_rev_stack_count_max_index\
    \ - 1\n       ", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var current_depth = 0\n        for (c <- paren_string) {\n \
    \           if (c == '(') {\n                current_depth += 1\n            \
    \    current_group += c\n            } else if (c == ')') {\n                current_depth\
    \ -= 1\n                current_group += c\n                if (current_depth\
    \ == 0) {\n                    result = current_group :: result\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   result.reverse", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_groups\
    \ = ListBuffer[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             paren_groups += current_group\n                    current_group\
    \ = \"\"\n                }\n            } else {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups.toList", "        var paren_stack\
    \ = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n     \
    \   var current_group = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                paren_stack.push(c)\n          \
    \  } else if (c == ')') {\n                paren_stack.pop\n                if\
    \ (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList", "        var paren_groups =\
    \ List[String]()\n        var current_group = \"\"\n        var open_parens =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups.reverse", "        var\
    \ paren_groups = List[String]()\n        var cur_group = \"\"\n        var paren_count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          paren_count += 1\n                cur_group += c\n            } else\
    \ if (c == ')') {\n                paren_count -= 1\n                cur_group\
    \ += c\n                if (paren_count == 0) {\n                    paren_groups\
    \ = cur_group :: paren_groups\n                    cur_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                cur_group += c\n\
    \            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else {\n                current_group += c\n            }\n   \
    \     }\n        paren_groups.reverse", "        val paren_string_no_spaces =\
    \ paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else {\n                current_group += c\n            }\n   \
    \     }\n        paren_groups.reverse", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        groups", "        var groups = new ListBuffer[String]()\n       \
    \ var current_group = new StringBuilder()\n        var open_parens = 0\n     \
    \   for (c <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group.append(c)\n            } else if (c == ')')\
    \ {\n                open_parens -= 1\n                current_group.append(c)\n\
    \                if (open_parens == 0) {\n                    groups.append(current_group.toString)\n\
    \                    current_group = new StringBuilder()\n                }\n\
    \            } else if (c != ' ') {\n                current_group.append(c)\n\
    \            }\n        }\n        groups.toList", "        var stack = new Stack[Char]\n\
    \        var groups = new ListBuffer[String]\n        var current_group = new\
    \ StringBuilder\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                stack.push(c)\n            } else if (c == ')') {\n     \
    \           stack.pop\n                if (stack.isEmpty) {\n                \
    \    groups += current_group.toString\n                    current_group = new\
    \ StringBuilder\n                }\n            } else if (c != ' ') {\n     \
    \           current_group += c\n            }\n        }\n        groups.toList",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_groups = new ListBuffer[String]\n        var current_group = new\
    \ StringBuilder\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else {\n                current_group.append(c)\n            }\n\
    \        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current_string = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_string += c\n            } else if (c == ')')\
    \ {\n                open_parens -= 1\n                current_string += c\n \
    \               if (open_parens == 0) {\n                    result = current_string\
    \ :: result\n                    current_string = \"\"\n                }\n  \
    \          } else if (c != ' ') {\n                current_string += c\n     \
    \       }\n        }\n        result", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var stack = new Stack[Char]\n  \
    \      var groups = new ListBuffer[String]\n        var curr_group = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // Ignore spaces\n            } else if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new IllegalArgumentException(\"Mismatched parentheses\"\
    )\n                }\n                stack.pop\n                if (stack.isEmpty)\
    \ {\n                    groups += curr_group.toString\n                    curr_group\
    \ = new StringBuilder\n                }\n            } else {\n             \
    \   curr_group += c\n            }\n        }\n        if (!stack.isEmpty) {\n\
    \            throw new IllegalArgumentException(\"Mismatched parentheses\")\n\
    \        }\n        groups.toList", "        var result = List[String]()\n   \
    \     var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n\
    \        var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_buffer\
    \ = new ListBuffer[Char]\n        var paren_string_no_spaces_list_buffer_list\
    \ = new ListBuffer[String]\n        while (paren_string_no_spaces_list_index <\
    \ paren_string_no_spaces_list_length) {\n            if (paren_string_no_spaces_list(paren_string_no_spaces_list_index)\
    \ == '(') {\n                paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                paren_string_no_spaces_list_index += 1\n                while\
    \ (paren_string_no_spaces_list(paren_string_no_spaces_list_index) != ')') {\n\
    \                    paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                    paren_string_no_spaces_list_index += 1\n                }\n\
    \                paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                paren_string_no_spaces_list_buffer_list += paren_string_no_spaces_list_buffer.mkString\n\
    \                paren_string_no_spaces_list_buffer.clear\n            }\n   \
    \         paren_string_no_spaces_list_index += 1\n        }\n        paren_string_no_spaces_list_buffer_list.toList",
  "        var paren_stack = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (paren\
    \ <- paren_string_no_spaces_list) {\n            if (paren == '(') {\n       \
    \         open_parens += 1\n                current_group += paren\n         \
    \   } else if (paren == ')') {\n                open_parens -= 1\n           \
    \     current_group += paren\n                if (open_parens == 0) {\n      \
    \              paren_groups = current_group :: paren_groups\n                \
    \    current_group = \"\"\n                }\n            }\n        }\n     \
    \   paren_groups.reverse", "        var groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        var\
    \ paren_groups = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             paren_groups = current_group :: paren_groups\n                 \
    \   current_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var paren_count = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                paren_count += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                paren_count -= 1\n      \
    \          current_group += c\n                if (paren_count == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ paren_groups = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             paren_groups = current_group :: paren_groups\n                 \
    \   current_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ paren_stack = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var current = new StringBuilder\n        var open_count = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open_count\
    \ += 1\n                current.append(c)\n            } else if (c == ')') {\n\
    \                open_count -= 1\n                current.append(c)\n        \
    \        if (open_count == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder\n                }\n        \
    \    } else if (c != ' ') {\n                current.append(c)\n            }\n\
    \        }\n        result", "        var paren_groups = List[String]()\n    \
    \    var current_group = \"\"\n        var paren_count = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                paren_count +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    paren_groups = paren_groups\
    \ :+ current_group\n                    current_group = \"\"\n               \
    \ }\n            } else if (c != ' ') {\n                current_group += c\n\
    \            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string_no_spaces_list) {\n            if (c == '(') {\n           \
    \     paren_count += 1\n            } else if (c == ')') {\n                paren_count\
    \ -= 1\n            }\n            current_group += c\n            if (paren_count\
    \ == 0) {\n                paren_groups = paren_groups :+ current_group\n    \
    \            current_group = \"\"\n            }\n        }\n        paren_groups",
  "        // TODO: Implement this function\n        return List()", "        // TODO:\
    \ implement this function\n        return List()", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var result = List[String]()\n  \
    \      var current_group = \"\"\n        var paren_count = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                paren_count +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        // TODO: Implement this function\n        return List()", "        var\
    \ result = List[String]()\n        var current = \"\"\n        var open = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open += 1\n                current += c\n            } else if (c == ')')\
    \ {\n                open -= 1\n                current += c\n               \
    \ if (open == 0) {\n                    result = current :: result\n         \
    \           current = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                current += c\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string_no_spaces_list) {\n            if (c == '(') {\n           \
    \     paren_count += 1\n            } else if (c == ')') {\n                paren_count\
    \ -= 1\n            }\n            current_group += c\n            if (paren_count\
    \ == 0) {\n                paren_groups = paren_groups :+ current_group\n    \
    \            current_group = \"\"\n            }\n        }\n        paren_groups",
  "        val paren_string_no_spaces = paren_string.replaceAll(\"\\\\s\", \"\")\n\
    \        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n   \
    \     val paren_string_no_spaces_list_length = paren_string_no_spaces_list.length\n\
    \        var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_index_end\
    \ = 0\n        var paren_string_no_spaces_list_index_start = 0\n        var paren_string_no_spaces_list_index_start_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous =\
    \ 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_string_no_spaces_list_index_start_previous_previous_previous_previous_previous_previous_previous_previous_previous_previous\
    \ = 0\n        var paren_", "        var groups = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    groups = groups :+ current_group\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   groups", "        var paren_stack = new Stack[Char]\n        var paren_groups\
    \ = new ListBuffer[String]\n        var current_group = new StringBuilder\n  \
    \      for (c <- paren_string) {\n            if (c == '(') {\n              \
    \  paren_stack.push(c)\n            } else if (c == ')') {\n                paren_stack.pop\n\
    \                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ += current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups.toList", "        var result\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        result", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var paren_stack = new Stack[Char]\n\
    \        var group_start = 0\n        var group_end = 0\n        var groups =\
    \ new ListBuffer[String]\n        for (i <- 0 until paren_string.length) {\n \
    \           if (paren_string(i) == '(') {\n                if (paren_stack.isEmpty)\
    \ {\n                    group_start = i\n                }\n                paren_stack.push(paren_string(i))\n\
    \            } else if (paren_string(i) == ')') {\n                paren_stack.pop\n\
    \                if (paren_stack.isEmpty) {\n                    group_end = i\n\
    \                    groups += paren_string.substring(group_start, group_end +\
    \ 1)\n                }\n            }\n        }\n        groups.toList", " \
    \       var paren_groups = List[String]()\n        var paren_group = \"\"\n  \
    \      var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                paren_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                paren_group += c\n                if (open_parens == 0) {\n \
    \                   paren_groups = paren_group :: paren_groups\n             \
    \       paren_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                paren_group += c\n            }\n        }\n        paren_groups",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n    \
    \    var paren_groups = List[String]()\n        var group_start = 0\n        var\
    \ open_parens = 0\n        for (i <- 0 until paren_string_no_spaces.length) {\n\
    \            if (paren_string_no_spaces(i) == '(') open_parens += 1\n        \
    \    else if (paren_string_no_spaces(i) == ')') open_parens -= 1\n           \
    \ if (open_parens == 0) {\n                paren_groups = paren_groups :+ paren_string_no_spaces.substring(group_start,\
    \ i + 1)\n                group_start = i + 1\n            }\n        }\n    \
    \    paren_groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n\
    \        var paren_groups = List[String]()\n        var current_group = \"\"\n\
    \        var paren_count = 0\n        for (c <- paren_string_no_spaces_list) {\n\
    \            if (c == '(') {\n                paren_count += 1\n            }\
    \ else if (c == ')') {\n                paren_count -= 1\n            }\n    \
    \        current_group += c\n            if (paren_count == 0) {\n           \
    \     paren_groups = paren_groups :+ current_group\n                current_group\
    \ = \"\"\n            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else {\n                current_group += c\n            }\n   \
    \     }\n        paren_groups.reverse", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var result = List[String]()\n  \
    \      var current_group = \"\"\n        var paren_count = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                paren_count +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var result = List[String]()\n  \
    \      var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        var open_parens = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups +=\
    \ current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        groups.toList", "        var paren_stack\
    \ = new Stack[Char]()\n        var paren_groups = new ListBuffer[String]()\n \
    \       var current_group = new StringBuilder()\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop()\n           \
    \     if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString()\n\
    \                    current_group = new StringBuilder()\n                }\n\
    \            } else if (c != ' ') {\n                current_group += c\n    \
    \        }\n        }\n        paren_groups.toList", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var paren_count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          paren_count += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                paren_count -= 1\n                current_group\
    \ += c\n                if (paren_count == 0) {\n                    paren_groups\
    \ = paren_groups :+ current_group\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_stack = new Stack[Char]\n\
    \        var paren_groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        for (c <- paren_string_no_spaces) {\n         \
    \   if (c == '(') {\n                paren_stack.push(c)\n            } else if\
    \ (c == ')') {\n                paren_stack.pop\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString\n            \
    \        current_group = new StringBuilder\n                }\n            }\n\
    \            current_group += c\n        }\n        paren_groups.toList", "  \
    \      var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             paren_groups = current_group :: paren_groups\n                 \
    \   current_group = \"\"\n                }\n            } else {\n          \
    \      current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        var\
    \ paren_groups = List[String]()\n        var current_group = \"\"\n        var\
    \ paren_count = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                paren_count += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                paren_count -= 1\n        \
    \        current_group += c\n                if (paren_count == 0) {\n       \
    \             paren_groups = paren_groups :+ current_group\n                 \
    \   current_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups",
  "        var stack = new Stack[Char]\n        var groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                stack.push(c)\n            }\
    \ else if (c == ')') {\n                if (stack.isEmpty) {\n               \
    \     return List()\n                }\n                stack.pop\n          \
    \      if (stack.isEmpty) {\n                    groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        if (!stack.isEmpty) {\n            return List()\n\
    \        }\n        groups.toList", "        var paren_stack = new Stack[Char]()\n\
    \        var paren_groups = new ListBuffer[String]()\n        var current_group\
    \ = new StringBuilder()\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                paren_stack.push(c)\n            } else if (c ==\
    \ ')') {\n                paren_stack.pop()\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString()\n          \
    \          current_group = new StringBuilder()\n                }\n          \
    \  } else if (c != ' ') {\n                current_group += c\n            }\n\
    \        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else {\n                current_group += c\n            }\n   \
    \     }\n        paren_groups.reverse", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    paren_groups ::= current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        paren_groups", "        var result = List[String]()\n        var\
    \ current_group = \"\"\n        var paren_count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_count += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   paren_count -= 1\n                current_group += c\n                if (paren_count\
    \ == 0) {\n                    result = current_group :: result\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   result", "        val paren_string_no_space = paren_string.replaceAll(\" \"\
    , \"\")\n        val paren_string_no_space_list = paren_string_no_space.toList\n\
    \        var paren_string_no_space_list_index = 0\n        var paren_string_no_space_list_length\
    \ = paren_string_no_space_list.length\n        var paren_string_no_space_list_stack\
    \ = new Stack[Char]\n        var paren_string_no_space_list_stack_length = 0\n\
    \        var paren_string_no_space_list_stack_top = ' '\n        var paren_string_no_space_list_stack_top_index\
    \ = 0\n        var paren_string_no_space_list_stack_top_index_list = new ListBuffer[Int]\n\
    \        var paren_string_no_space_list_stack_top_index_list_length = 0\n    \
    \    var paren_string_no_space_list_stack_top_index_list_index = 0\n        var\
    \ paren_string_no_space_list_stack_top_index_list_index_value = 0\n        var\
    \ paren_string_no_space_list_stack_top_index_list_index_value_next = 0\n     \
    \   var paren_string_no_space_list_stack_top_index_list_index_value_next_next\
    \ = 0\n        var paren_string_no_space_list_stack_top_index_list_index_value_next_next_next\
    \ = 0\n        var paren_string_no_space_list_stack_top_index_list_index_value_next_next_next_next\
    \ = 0\n        var paren_string_no_space_list_stack_top_index_list_index_value_next_next_next_next_next\
    \ = 0\n        var paren_string_no_space_list_stack_top_index_list_index_value_next_next_next_next_next_next\
    \ = 0\n        var paren_string_no_space_list_stack_top_index_list_index_value_next_next",
  "        // TODO: Implement this function\n        List()", "        var paren_groups\
    \ = List[String]()\n        var cur_group = \"\"\n        var paren_count = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    paren_count += 1\n                cur_group += c\n            } else if (c\
    \ == ')') {\n                paren_count -= 1\n                cur_group += c\n\
    \                if (paren_count == 0) {\n                    paren_groups = cur_group\
    \ :: paren_groups\n                    cur_group = \"\"\n                }\n \
    \           } else if (c != ' ') {\n                cur_group += c\n         \
    \   }\n        }\n        paren_groups", "        var result = List[String]()\n\
    \        var current = new StringBuilder()\n        var open = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                open +=\
    \ 1\n                current.append(c)\n            } else if (c == ')') {\n \
    \               open -= 1\n                current.append(c)\n               \
    \ if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      } else if (c != ' ') {\n                current.append(c)\n           \
    \ }\n        }\n        result", "        var groups = List[String]()\n      \
    \  var current_group = new StringBuilder\n        var depth = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                depth += 1\n\
    \                current_group.append(c)\n            } else if (c == ')') {\n\
    \                depth -= 1\n                current_group.append(c)\n       \
    \         if (depth == 0) {\n                    groups = groups :+ current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group.append(c)\n \
    \           }\n        }\n        groups", "        var paren_stack = new Stack[Char]()\n\
    \        var paren_groups = new ListBuffer[String]()\n        var current_group\
    \ = new StringBuilder()\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                paren_stack.push(c)\n            } else if (c ==\
    \ ')') {\n                paren_stack.pop()\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString()\n          \
    \          current_group = new StringBuilder()\n                }\n          \
    \  } else if (c != ' ') {\n                current_group += c\n            }\n\
    \        }\n        paren_groups.toList", "        var paren_stack = new Stack[Char]()\n\
    \        var paren_groups = new ListBuffer[String]()\n        var current_group\
    \ = new StringBuilder()\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                paren_stack.push(c)\n            } else if (c ==\
    \ ')') {\n                paren_stack.pop()\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString()\n          \
    \          current_group = new StringBuilder()\n                }\n          \
    \  } else if (c != ' ') {\n                current_group += c\n            }\n\
    \        }\n        return paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        var current_depth = 0\n\
    \        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n  \
    \              current_depth += 1\n                current_group.append(c)\n \
    \           } else if (c == ')') {\n                current_depth -= 1\n     \
    \           current_group.append(c)\n                if (current_depth == 0) {\n\
    \                    paren_groups += current_group.toString\n                \
    \    current_group = new StringBuilder\n                }\n            } else\
    \ {\n                current_group.append(c)\n            }\n        }\n     \
    \   paren_groups.toList", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_list = paren_string_no_spaces.toList\n        var\
    \ paren_stack = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n\
    \        var current_group = new ListBuffer[Char]\n        for (paren <- paren_list)\
    \ {\n            if (paren == '(') {\n                paren_stack.push(paren)\n\
    \            } else if (paren == ')') {\n                paren_stack.pop\n   \
    \             if (paren_stack.isEmpty) {\n                    paren_groups +=\
    \ current_group.mkString\n                    current_group = new ListBuffer[Char]\n\
    \                } else {\n                    current_group += paren\n      \
    \          }\n            } else {\n                current_group += paren\n \
    \           }\n        }\n        return paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_stack = new Stack[Char]\n\
    \        var paren_group_list = new ListBuffer[String]\n        var paren_group_string\
    \ = \"\"\n        for (paren <- paren_string_no_spaces_list) {\n            if\
    \ (paren == '(') {\n                paren_stack.push(paren)\n            } else\
    \ if (paren == ')') {\n                if (paren_stack.isEmpty) {\n          \
    \          throw new Exception(\"Unbalanced parentheses\")\n                }\
    \ else {\n                    paren_stack.pop\n                    if (paren_stack.isEmpty)\
    \ {\n                        paren_group_list += paren_group_string\n        \
    \                paren_group_string = \"\"\n                    }\n          \
    \      }\n            } else {\n                paren_group_string += paren\n\
    \            }\n        }\n        if (!paren_stack.isEmpty) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        return paren_group_list.toList",
  "        var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      } else if (c != ' ') {\n                current.append(c)\n           \
    \ }\n        }\n        result", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                if (paren_count\
    \ == 0) {\n                    current_group = \"\"\n                }\n     \
    \           paren_count += 1\n            } else if (c == ')') {\n           \
    \     paren_count -= 1\n                if (paren_count == 0) {\n            \
    \        paren_groups = paren_groups :+ current_group\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        paren_groups", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var paren_stack = new Stack[Char]\n\
    \        var paren_groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                paren_stack.push(c)\n            } else if (c == ')')\
    \ {\n                paren_stack.pop\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString\n            \
    \        current_group = new StringBuilder\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        paren_groups.toList", "        var result = List[String]()\n    \
    \    var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_groups = List[String]()\n        var current_group = \"\"\n     \
    \   var open_parens = 0\n        for (paren <- paren_string_no_spaces_list) {\n\
    \            if (paren == '(') {\n                open_parens += 1\n         \
    \       current_group += paren\n            } else if (paren == ')') {\n     \
    \           open_parens -= 1\n                current_group += paren\n       \
    \         if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            }\n        }\n        paren_groups.reverse", "        var paren_stack\
    \ = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n     \
    \   var current_group = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                paren_stack.push(c)\n          \
    \  } else if (c == ')') {\n                paren_stack.pop\n                if\
    \ (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList", "        var result = List[String]()\n\
    \        var curr = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                curr\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          curr += c\n                if (open == 0) {\n                    result\
    \ = curr :: result\n                    curr = \"\"\n                }\n     \
    \       } else if (c != ' ') {\n                curr += c\n            }\n   \
    \     }\n        result.reverse", "        var groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        var open_parens = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open_parens += 1\n                current_group.append(c)\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group.append(c)\n\
    \                if (open_parens == 0) {\n                    groups.append(current_group.toString)\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group.append(c)\n \
    \           }\n        }\n        groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var paren_count = 0\n        for (i <-\
    \ 0 until paren_string_no_spaces_length) {\n            val c = paren_string_no_spaces(i)\n\
    \            if (c == '(') {\n                paren_count += 1\n            }\
    \ else if (c == ')') {\n                paren_count -= 1\n            }\n    \
    \        paren_group += c\n            if (paren_count == 0) {\n             \
    \   paren_groups = paren_group :: paren_groups\n                paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ stack = new Stack[Char]\n        var groups = new ListBuffer[String]\n     \
    \   var current_group = new StringBuilder\n        for (c <- paren_string) {\n\
    \            if (c == '(') {\n                stack.push(c)\n            } else\
    \ if (c == ')') {\n                stack.pop\n                if (stack.isEmpty)\
    \ {\n                    groups += current_group.toString\n                  \
    \  current_group = new StringBuilder\n                }\n            } else if\
    \ (c != ' ') {\n                current_group += c\n            }\n        }\n\
    \        groups.toList", "        // TODO: Implement this function\n        return\
    \ List()", "        var result = List[String]()\n        var current_group = \"\
    \"\n        var open_parens = 0\n        for (c <- paren_string) {\n         \
    \   if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ paren_groups = List[String]()\n        var current_group = \"\"\n        var\
    \ paren_count = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                paren_count += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                paren_count -= 1\n        \
    \        current_group += c\n                if (paren_count == 0) {\n       \
    \             paren_groups = paren_groups :+ current_group\n                 \
    \   current_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups",
  "        var paren_list = List[String]()\n        var paren_group = \"\"\n     \
    \   var open_parens = 0\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                open_parens += 1\n                paren_group +=\
    \ c\n            } else if (c == ')') {\n                open_parens -= 1\n  \
    \              paren_group += c\n                if (open_parens == 0) {\n   \
    \                 paren_list = paren_group :: paren_list\n                   \
    \ paren_group = \"\"\n                }\n            } else if (c != ' ') {\n\
    \                paren_group += c\n            }\n        }\n        paren_list",
  "        var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        var\
    \ paren_groups = List[String]()\n        var current_group = \"\"\n        var\
    \ paren_count = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                paren_count += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                paren_count -= 1\n        \
    \        current_group += c\n                if (paren_count == 0) {\n       \
    \             paren_groups = paren_groups :+ current_group\n                 \
    \   current_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups",
  "        // Your code goes here\n        var paren_string_list = paren_string.toList\n\
    \        var paren_string_list_new = ListBuffer[Char]()\n        var paren_string_list_new_list\
    \ = ListBuffer[ListBuffer[Char]]()\n        var paren_string_list_new_list_string\
    \ = ListBuffer[String]()\n        var paren_string_list_new_list_string_list =\
    \ ListBuffer[ListBuffer[String]]()\n        var paren_string_list_new_list_string_list_final\
    \ = ListBuffer[String]()\n        var paren_string_list_new_list_string_list_final_list\
    \ = ListBuffer[ListBuffer[String]]()\n        var paren_string_list_new_list_string_list_final_list_final\
    \ = ListBuffer[String]()\n        var paren_string_list_new_list_string_list_final_list_final_list\
    \ = ListBuffer[ListBuffer[String]]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final\
    \ = ListBuffer[String]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final_list\
    \ = ListBuffer[ListBuffer[String]]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final_list_final\
    \ = ListBuffer[String]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final_list_final_list\
    \ = ListBuffer[ListBuffer[String]]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final_list_final_list_final\
    \ = ListBuffer[String]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final_list_final_list_final_list\
    \ = ListBuffer[ListBuffer[String]]()\n        var paren_string_list_new_list_string_list_final_list_final_list_final_list_final_list",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups = current_group :: paren_groups\n          \
    \          current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   return paren_groups.reverse", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    paren_groups = paren_groups\
    \ :+ current_group\n                    current_group = \"\"\n               \
    \ }\n            } else if (c != ' ') {\n                current_group += c\n\
    \            }\n        }\n        paren_groups", "        var paren_stack = new\
    \ Stack[Char]\n        var group_stack = new Stack[String]\n        var current_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             paren_stack.push(c)\n            } else if (c == ')') {\n      \
    \          paren_stack.pop\n                if (paren_stack.isEmpty) {\n     \
    \               group_stack.push(current_group)\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        group_stack.toList",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_length = paren_string_no_spaces.length\n    \
    \    var paren_groups = List[String]()\n        var paren_group = \"\"\n     \
    \   var paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_length)\
    \ {\n            val c = paren_string_no_spaces(i)\n            if (c == '(')\
    \ {\n                paren_count += 1\n            } else if (c == ')') {\n  \
    \              paren_count -= 1\n            }\n            paren_group += c\n\
    \            if (paren_count == 0) {\n                paren_groups = paren_group\
    \ :: paren_groups\n                paren_group = \"\"\n            }\n       \
    \ }\n        paren_groups", "        var paren_groups = List[String]()\n     \
    \   var paren_count = 0\n        var paren_group = \"\"\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_count += 1\n         \
    \       paren_group += c\n            } else if (c == ')') {\n               \
    \ paren_count -= 1\n                paren_group += c\n                if (paren_count\
    \ == 0) {\n                    paren_groups = paren_group :: paren_groups\n  \
    \                  paren_group = \"\"\n                }\n            } else if\
    \ (c != ' ') {\n                paren_group += c\n            }\n        }\n \
    \       paren_groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_count\
    \ = 0\n        var paren_group = \"\"\n        for (i <- 0 until paren_string_no_spaces.length)\
    \ {\n            if (paren_string_no_spaces(i) == '(') {\n                paren_count\
    \ += 1\n                paren_group += '('\n            } else if (paren_string_no_spaces(i)\
    \ == ')') {\n                paren_count -= 1\n                paren_group +=\
    \ ')'\n            }\n            if (paren_count == 0) {\n                paren_groups\
    \ = paren_group :: paren_groups\n                paren_group = \"\"\n        \
    \    }\n        }\n        paren_groups.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        val paren_string_list_length = paren_string_list.length\n        var\
    \ paren_string_list_index = 0\n        var paren_string_list_index_end = 0\n \
    \       var paren_string_list_index_start = 0\n        var paren_string_list_index_start_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev = 0\n        var paren_string_list_index_start_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev = 0\n   \
    \     var paren_string_list_index_start_prev_prev_prev_prev_prev = 0\n       \
    \ var paren_string_list_index_start_prev_prev_prev_prev_prev_prev = 0\n      \
    \  var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev = 0\n\
    \        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_start_prev_prev_prev_prev_prev_prev_",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_groups = List[String]()\n        var current_group = List[Char]()\n\
    \        var paren_stack = List[Char]()\n        for (c <- paren_string_no_spaces_list)\
    \ {\n            if (c == '(') {\n                paren_stack = c :: paren_stack\n\
    \                current_group = c :: current_group\n            } else if (c\
    \ == ')') {\n                paren_stack = paren_stack.tail\n                current_group\
    \ = c :: current_group\n                if (paren_stack.isEmpty) {\n         \
    \           paren_groups = current_group.reverse.mkString :: paren_groups\n  \
    \                  current_group = List[Char]()\n                }\n         \
    \   } else {\n                current_group = c :: current_group\n           \
    \ }\n        }\n        paren_groups.reverse", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                current_group += c\n    \
    \        }\n        }\n        return paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var paren_count = 0\n        for (paren\
    \ <- paren_string_no_spaces_list) {\n            if (paren == '(') {\n       \
    \         paren_count += 1\n            }\n            else if (paren == ')')\
    \ {\n                paren_count -= 1\n            }\n            paren_group\
    \ += paren\n            if (paren_count == 0) {\n                paren_groups\
    \ = paren_group :: paren_groups\n                paren_group = \"\"\n        \
    \    }\n        }\n        paren_groups.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\"\\\\s\", \"\")\n        val paren_list = paren_string_no_spaces.toList\n\
    \        var paren_groups = List[String]()\n        var current_paren_group =\
    \ \"\"\n        var open_parens = 0\n        for (paren <- paren_list) {\n   \
    \         if (paren == '(') {\n                open_parens += 1\n            \
    \    current_paren_group += paren\n            } else if (paren == ')') {\n  \
    \              open_parens -= 1\n                current_paren_group += paren\n\
    \                if (open_parens == 0) {\n                    paren_groups = current_paren_group\
    \ :: paren_groups\n                    current_paren_group = \"\"\n          \
    \      }\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var current_paren_group = \"\"\n        var open_parens = 0\n       \
    \ for (c <- paren_string_no_spaces_list) {\n            if (c == '(') {\n    \
    \            open_parens += 1\n                current_paren_group += c\n    \
    \        } else if (c == ')') {\n                open_parens -= 1\n          \
    \      current_paren_group += c\n                if (open_parens == 0) {\n   \
    \                 paren_groups = current_paren_group :: paren_groups\n       \
    \             current_paren_group = \"\"\n                }\n            } else\
    \ {\n                current_paren_group += c\n            }\n        }\n    \
    \    paren_groups.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_groups = new ListBuffer[String]\n        var current_paren_group\
    \ = new StringBuilder\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_paren_group.append(c)\n            } else if (c == ')') {\n  \
    \              open_parens -= 1\n                current_paren_group.append(c)\n\
    \                if (open_parens == 0) {\n                    paren_groups +=\
    \ current_paren_group.toString\n                    current_paren_group = new\
    \ StringBuilder\n                }\n            } else {\n                current_paren_group.append(c)\n\
    \            }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var current_group = List[Char]()\n        var current_group_open_parens\
    \ = 0\n        for (c <- paren_string_no_spaces_list) {\n            if (c ==\
    \ '(') {\n                current_group_open_parens += 1\n                current_group\
    \ = current_group :+ c\n            } else if (c == ')') {\n                current_group_open_parens\
    \ -= 1\n                current_group = current_group :+ c\n                if\
    \ (current_group_open_parens == 0) {\n                    paren_groups = paren_groups\
    \ :+ current_group.mkString\n                    current_group = List[Char]()\n\
    \                }\n            } else {\n                current_group = current_group\
    \ :+ c\n            }\n        }\n        paren_groups", "        var result =\
    \ List[String]()\n        var current_group = \"\"\n        var open_parens =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        result", "        // TODO: Implement\
    \ this function\n        return List[String]()", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_group\
    \ = \"\"\n        var paren_count = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') paren_count += 1\n            else if (c == ')')\
    \ paren_count -= 1\n            paren_group += c\n            if (paren_count\
    \ == 0) {\n                paren_groups = paren_group :: paren_groups\n      \
    \          paren_group = \"\"\n            }\n        }\n        paren_groups",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_groups = List[String]()\n        var current_group = List[Char]()\n\
    \        var open_parens = 0\n        for (paren <- paren_string_no_spaces_list)\
    \ {\n            if (paren == '(') {\n                open_parens += 1\n     \
    \           current_group = paren :: current_group\n            } else if (paren\
    \ == ')') {\n                open_parens -= 1\n                current_group =\
    \ paren :: current_group\n            }\n            if (open_parens == 0) {\n\
    \                paren_groups = current_group.reverse.mkString :: paren_groups\n\
    \                current_group = List[Char]()\n            }\n        }\n    \
    \    paren_groups.reverse", "        var groups = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    groups = groups :+ current_group\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   return groups", "        val stack = new Stack[Char]\n        val groups =\
    \ new ListBuffer[String]\n        var current_group = new StringBuilder\n    \
    \    for (c <- paren_string) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Unbalanced parentheses\")\n         \
    \       }\n                stack.pop\n                if (stack.isEmpty) {\n \
    \                   groups += current_group.toString\n                    current_group\
    \ = new StringBuilder\n                }\n            } else if (c != ' ') {\n\
    \                current_group += c\n            }\n        }\n        if (!stack.isEmpty)\
    \ {\n            throw new Exception(\"Unbalanced parentheses\")\n        }\n\
    \        groups.toList", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ {\n                current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var open_parens = 0\n        for (i <- 0 until paren_string.length) {\n\
    \            val c = paren_string(i)\n            if (c == '(') {\n          \
    \      open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        var result =\
    \ List[String]()\n        var curr_group = \"\"\n        var paren_count = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    paren_count += 1\n                curr_group += c\n            } else if\
    \ (c == ')') {\n                paren_count -= 1\n                curr_group +=\
    \ c\n                if (paren_count == 0) {\n                    result = result\
    \ :+ curr_group\n                    curr_group = \"\"\n                }\n  \
    \          } else if (c != ' ') {\n                curr_group += c\n         \
    \   }\n        }\n        result", "        var result = List[String]()\n    \
    \    var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_arr = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var paren_group = \"\"\n \
    \       var open_paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_arr.length)\
    \ {\n            val c = paren_string_no_spaces_arr(i)\n            if (c == '(')\
    \ {\n                open_paren_count += 1\n            } else if (c == ')') {\n\
    \                open_paren_count -= 1\n            }\n            paren_group\
    \ += c\n            if (open_paren_count == 0) {\n                paren_groups\
    \ = paren_group :: paren_groups\n                paren_group = \"\"\n        \
    \    }\n        }\n        paren_groups.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else {\n                current_group += c\n            }\n   \
    \     }\n        paren_groups.reverse", "        var stack = new Stack[Char]\n\
    \        var groups = new ListBuffer[String]\n        var group = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    stack.push(c)\n            } else if (c == ')') {\n                stack.pop\n\
    \                if (stack.isEmpty) {\n                    groups += group.toString\n\
    \                    group = new StringBuilder\n                }\n          \
    \  } else if (c != ' ') {\n                group += c\n            }\n       \
    \ }\n        groups.toList", "        var paren_groups = List[String]()\n    \
    \    var current_group = \"\"\n        var paren_count = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                paren_count +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    paren_groups = paren_groups\
    \ :+ current_group\n                    current_group = \"\"\n               \
    \ }\n            } else if (c != ' ') {\n                current_group += c\n\
    \            }\n        }\n        paren_groups", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                if (open_parens\
    \ == 0) current_group = \"\"\n                open_parens += 1\n            }\n\
    \            else if (c == ')') {\n                open_parens -= 1\n        \
    \        if (open_parens == 0) result = current_group :: result\n            }\n\
    \            else if (open_parens > 0) current_group += c\n        }\n       \
    \ result.reverse", "        var paren_groups = List[String]()\n        var current_group\
    \ = new StringBuilder()\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    paren_groups = current_group.toString\
    \ :: paren_groups\n                    current_group = new StringBuilder()\n \
    \               }\n            } else if (c != ' ') {\n                current_group.append(c)\n\
    \            }\n        }\n        paren_groups", "        var paren_groups =\
    \ List[String]()\n        var current_group = \"\"\n        var open_parens =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups.reverse", "        var\
    \ groups = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        groups", "        var result = List[String]()\n\
    \        var current = new StringBuilder()\n        var open_count = 0\n     \
    \   for (c <- paren_string) {\n            if (c == '(') {\n                open_count\
    \ += 1\n                current.append(c)\n            } else if (c == ')') {\n\
    \                open_count -= 1\n                current.append(c)\n        \
    \        if (open_count == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      } else if (c != ' ') {\n                current.append(c)\n           \
    \ }\n        }\n        result", "        val stack = new Stack[Char]\n      \
    \  val groups = new ListBuffer[String]\n        var group = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    stack.push(c)\n            } else if (c == ')') {\n                if (stack.isEmpty)\
    \ return List()\n                stack.pop\n                if (stack.isEmpty)\
    \ {\n                    groups += group.toString\n                    group =\
    \ new StringBuilder\n                }\n            } else if (c != ' ') {\n \
    \               group += c\n            }\n        }\n        if (!stack.isEmpty)\
    \ return List()\n        groups.toList", "        val paren_string_no_spaces =\
    \ paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = new ListBuffer[String]\n\
    \        var current_group = new ListBuffer[Char]\n        var paren_count = 0\n\
    \        for (c <- paren_string_no_spaces_list) {\n            if (c == '(') {\n\
    \                paren_count += 1\n                current_group += c\n      \
    \      } else if (c == ')') {\n                paren_count -= 1\n            \
    \    current_group += c\n            } else {\n                current_group +=\
    \ c\n            }\n            if (paren_count == 0) {\n                paren_groups\
    \ += current_group.mkString\n                current_group = new ListBuffer[Char]\n\
    \            }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_array\
    \ = paren_string_no_spaces.toCharArray\n        var paren_groups = List[String]()\n\
    \        var current_paren_group = \"\"\n        var open_parens = 0\n       \
    \ for (i <- 0 until paren_string_no_spaces_array.length) {\n            val current_char\
    \ = paren_string_no_spaces_array(i)\n            if (current_char == '(') {\n\
    \                open_parens += 1\n            }\n            else if (current_char\
    \ == ')') {\n                open_parens -= 1\n            }\n            current_paren_group\
    \ += current_char\n            if (open_parens == 0) {\n                paren_groups\
    \ = current_paren_group :: paren_groups\n                current_paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             paren_groups = current_group :: paren_groups\n                 \
    \   current_group = \"\"\n                }\n            } else {\n          \
    \      current_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        return groups", " \
    \       var paren_list = List[String]()\n        var current_paren_string = \"\
    \"\n        var open_paren_count = 0\n        for (c <- paren_string) {\n    \
    \        if (c == '(') {\n                open_paren_count += 1\n            \
    \    current_paren_string += c\n            } else if (c == ')') {\n         \
    \       open_paren_count -= 1\n                current_paren_string += c\n   \
    \             if (open_paren_count == 0) {\n                    paren_list = current_paren_string\
    \ :: paren_list\n                    current_paren_string = \"\"\n           \
    \     }\n            } else if (c != ' ') {\n                current_paren_string\
    \ += c\n            }\n        }\n        paren_list", "        var groups = List[String]()\n\
    \        var group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       group += c\n            } else if (c == ')') {\n                open_parens\
    \ -= 1\n                group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ group\n                    group = \"\"\
    \n                }\n            } else if (c != ' ') {\n                group\
    \ += c\n            }\n        }\n        groups", "        var paren_groups =\
    \ List[String]()\n        var current_group = \"\"\n        var paren_count =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        paren_count += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                paren_count -= 1\n                current_group\
    \ += c\n                if (paren_count == 0) {\n                    paren_groups\
    \ = paren_groups :+ current_group\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        val paren_stack = new Stack[Char]\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (paren <- paren_string_list)\
    \ {\n            if (paren == '(') {\n                paren_stack.push(paren)\n\
    \                current_group.append(paren)\n            } else if (paren ==\
    \ ')') {\n                paren_stack.pop\n                current_group.append(paren)\n\
    \                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ += current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            } else {\n                current_group.append(paren)\n\
    \            }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        var paren_string_no_spaces_index =\
    \ 0\n        var paren_string_no_spaces_current_char = paren_string_no_spaces(paren_string_no_spaces_index)\n\
    \        var paren_string_no_spaces_current_char_is_open_paren = paren_string_no_spaces_current_char\
    \ == '('\n        var paren_string_no_spaces_current_char_is_close_paren = paren_string_no_spaces_current_char\
    \ == ')'\n        var paren_string_no_spaces_current_char_is_paren = paren_string_no_spaces_current_char_is_open_paren\
    \ || paren_string_no_spaces_current_char_is_close_paren\n        var paren_string_no_spaces_current_char_is_not_paren\
    \ = !paren_string_no_spaces_current_char_is_paren\n        var paren_string_no_spaces_current_char_is_open_paren_count\
    \ = 0\n        var paren_string_no_spaces_current_char_is_close_paren_count =\
    \ 0\n        var paren_string_no_spaces_current_char_is_paren_count = 0\n    \
    \    var paren_string_no_spaces_current_char_is_not_paren_count = 0\n        var\
    \ paren_string_no_spaces_current_char_is_open_paren_count_stack = new Stack[Int]\n\
    \        var paren_string_no_spaces_current_char_is_close_paren_count_stack =\
    \ new Stack[Int]\n        var paren_string_no_spaces_current_char_is_paren_count_stack\
    \ = new Stack[Int]\n        var paren_string_no_spaces_current_char_is_not_paren_count_stack\
    \ = new Stack[Int]\n       ", "        var result = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    result = current_group :: result\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   result", "        var paren_stack = new Stack[Char]\n        var paren_groups\
    \ = new ListBuffer[String]\n        var current_group = new StringBuilder\n  \
    \      for (c <- paren_string) {\n            if (c == '(') {\n              \
    \  paren_stack.push(c)\n            } else if (c == ')') {\n                paren_stack.pop\n\
    \                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ += current_group.toString\n                    current_group = new StringBuilder\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups.toList", "        var groups\
    \ = List[String]()\n        var current_group = \"\"\n        var paren_count\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          paren_count += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                paren_count -= 1\n                current_group\
    \ += c\n                if (paren_count == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        groups", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var result = List[String]()\n  \
    \      var current_group = \"\"\n        var paren_count = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                paren_count +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        // TODO: Implement this function\n\
    \        return List[String]()", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                current_group += c\n    \
    \        }\n        }\n        paren_groups.reverse", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        groups", "        var paren_groups = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        paren_groups.reverse", "        var paren_groups = List[String]()\n\
    \        var paren_stack = Stack[Char]()\n        var current_group = \"\"\n \
    \       for (c <- paren_string) {\n            if (c == '(') {\n             \
    \   paren_stack.push(c)\n                current_group += c\n            } else\
    \ if (c == ')') {\n                paren_stack.pop\n                current_group\
    \ += c\n                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        var result =\
    \ List[String]()\n        var current_group = \"\"\n        var open_parens =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_paren_group = \"\"\n        var open_parens = 0\n       \
    \ for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n         \
    \       open_parens += 1\n                current_paren_group += c\n         \
    \   } else if (c == ')') {\n                open_parens -= 1\n               \
    \ current_paren_group += c\n                if (open_parens == 0) {\n        \
    \            paren_groups = current_paren_group :: paren_groups\n            \
    \        current_paren_group = \"\"\n                }\n            } else {\n\
    \                current_paren_group += c\n            }\n        }\n        paren_groups.reverse",
  "        var paren_stack = new Stack[Char]\n        var group_start = 0\n      \
    \  var group_end = 0\n        var result = new ListBuffer[String]\n        for\
    \ (i <- 0 until paren_string.length) {\n            if (paren_string(i) == '(')\
    \ {\n                if (paren_stack.isEmpty) {\n                    group_start\
    \ = i\n                }\n                paren_stack.push(paren_string(i))\n\
    \            } else if (paren_string(i) == ')') {\n                paren_stack.pop\n\
    \                if (paren_stack.isEmpty) {\n                    group_end = i\n\
    \                    result += paren_string.substring(group_start, group_end +\
    \ 1)\n                }\n            }\n        }\n        result.toList", " \
    \       var result = List[String]()\n        var current_group = \"\"\n      \
    \  var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ paren_stack = new Stack[Char]()\n        var paren_groups = new ListBuffer[String]()\n\
    \        var cur_group = new StringBuilder()\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                if (paren_stack.isEmpty) {\n  \
    \                  throw new Exception(\"Unbalanced parentheses\")\n         \
    \       }\n                paren_stack.pop()\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += cur_group.toString\n                \
    \    cur_group = new StringBuilder()\n                }\n            } else if\
    \ (c != ' ') {\n                cur_group += c\n            }\n        }\n   \
    \     if (!paren_stack.isEmpty) {\n            throw new Exception(\"Unbalanced\
    \ parentheses\")\n        }\n        return paren_groups.toList", "        var\
    \ paren_stack = new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   if (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList", "        var paren_groups =\
    \ List[String]()\n        var cur_group = new StringBuilder()\n        var cur_depth\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          cur_depth += 1\n                cur_group.append(c)\n            }\
    \ else if (c == ')') {\n                cur_depth -= 1\n                cur_group.append(c)\n\
    \                if (cur_depth == 0) {\n                    paren_groups = paren_groups\
    \ :+ cur_group.toString\n                    cur_group = new StringBuilder()\n\
    \                }\n            } else if (c != ' ') {\n                cur_group.append(c)\n\
    \            }\n        }\n        paren_groups", "        var paren_groups =\
    \ List[String]()\n        var current_group = \"\"\n        var paren_count =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        paren_count += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                paren_count -= 1\n                current_group\
    \ += c\n                if (paren_count == 0) {\n                    paren_groups\
    \ = paren_groups :+ current_group\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        var result =\
    \ List[String]()\n        var current_group = \"\"\n        var open_parens =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        var paren_groups = List[String]()\n        var current_group = \"\"\n\
    \        var paren_count = 0\n        for (c <- paren_string_list) {\n       \
    \     if (c == '(') {\n                paren_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                paren_count -= 1\n\
    \                current_group += c\n            } else {\n                current_group\
    \ += c\n            }\n            if (paren_count == 0) {\n                paren_groups\
    \ = paren_groups :+ current_group\n                current_group = \"\"\n    \
    \        }\n        }\n        return paren_groups", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups.reverse", "        // TODO:\
    \ Implement this function\n        var result = List[String]()\n        var temp\
    \ = \"\"\n        var open = 0\n        for (c <- paren_string) {\n          \
    \  if (c == '(') {\n                open += 1\n                temp += c\n   \
    \         } else if (c == ')') {\n                open -= 1\n                temp\
    \ += c\n                if (open == 0) {\n                    result = result\
    \ :+ temp\n                    temp = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                temp += c\n            }\n        }\n     \
    \   result", "        var result = List[String]()\n        var curr = \"\"\n \
    \       var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                curr += c\n            }\
    \ else if (c == ')') {\n                open -= 1\n                curr += c\n\
    \                if (open == 0) {\n                    result = curr :: result\n\
    \                    curr = \"\"\n                }\n            } else if (c\
    \ != ' ') {\n                curr += c\n            }\n        }\n        result.reverse",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_array = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var current_group = \"\"\n\
    \        var paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_array.length)\
    \ {\n            if (paren_string_no_spaces_array(i) == '(') {\n             \
    \   paren_count += 1\n            } else if (paren_string_no_spaces_array(i) ==\
    \ ')') {\n                paren_count -= 1\n            }\n            current_group\
    \ += paren_string_no_spaces_array(i)\n            if (paren_count == 0) {\n  \
    \              paren_groups = paren_groups :+ current_group\n                current_group\
    \ = \"\"\n            }\n        }\n        paren_groups", "        var paren_groups\
    \ = List[String]()\n        var paren_stack = Stack[Char]()\n        var current_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             paren_stack.push(c)\n                current_group += c\n      \
    \      } else if (c == ')') {\n                if (paren_stack.isEmpty) {\n  \
    \                  throw new IllegalArgumentException(\"Invalid paren string\"\
    )\n                }\n                paren_stack.pop\n                current_group\
    \ += c\n                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        if (!paren_stack.isEmpty) {\n      \
    \      throw new IllegalArgumentException(\"Invalid paren string\")\n        }\n\
    \        paren_groups.reverse", "        var result = List[String]()\n       \
    \ var current_group = new StringBuilder()\n        var open_parens = 0\n     \
    \   for (c <- paren_string) {\n            if (c == '(') {\n                if\
    \ (open_parens == 0) {\n                    current_group.clear()\n          \
    \      }\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = result :+ current_group.toString()\n                }\n\
    \            } else if (c != ' ') {\n                current_group += c\n    \
    \        }\n        }\n        result", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                current_group += c\n       \
    \     }\n        }\n        result", "        var groups = List[String]()\n  \
    \      var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var current_group = \"\"\n\
    \        var open_parens = 0\n        for (i <- 0 until paren_string_no_spaces_chars.length)\
    \ {\n            if (paren_string_no_spaces_chars(i) == '(') {\n             \
    \   open_parens += 1\n                current_group += \"(\"\n            } else\
    \ if (paren_string_no_spaces_chars(i) == ')') {\n                open_parens -=\
    \ 1\n                current_group += \")\"\n            }\n            if (open_parens\
    \ == 0) {\n                paren_groups = current_group :: paren_groups\n    \
    \            current_group = \"\"\n            }\n        }\n        paren_groups.reverse",
  "        var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        var\
    \ groups = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        groups", "        var paren_stack =\
    \ new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n       \
    \ var current_group = new StringBuilder\n        for (c <- paren_string) {\n \
    \           if (c == '(') {\n                paren_stack.push(c)\n           \
    \ } else if (c == ')') {\n                paren_stack.pop\n                if\
    \ (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList", "        var paren_stack =\
    \ new Stack[Char]\n        var paren_groups = new ListBuffer[String]\n       \
    \ var current_group = new StringBuilder\n        for (c <- paren_string) {\n \
    \           if (c == '(') {\n                paren_stack.push(c)\n           \
    \ } else if (c == ')') {\n                paren_stack.pop\n                if\
    \ (paren_stack.isEmpty) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          } else if (c != ' ') {\n                current_group += c\n      \
    \      }\n        }\n        paren_groups.toList"]
stop_tokens:
- "\n    }\n"
