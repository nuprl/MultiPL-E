name: HumanEval_7_filter_by_substring
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that contain given substring\n\
  \    def filterBySubstring(strings : List[String], substring : String) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
  grunt\", \"prune\"))));\n    }\n\n}\n"
completions: ['        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(_.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', "        var filteredList\
    \ = List[String]()\n        for (str <- strings) {\n            if (str.contains(substring))\
    \ {\n                filteredList = str :: filteredList\n            }\n     \
    \   }\n        filteredList", '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(_.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(str => str.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', "        var filtered : List[String] = List()\n  \
    \      for (s <- strings) {\n            if (s.contains(substring)) {\n      \
    \          filtered = s :: filtered\n            }\n        }\n        filtered",
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', "        var result = List[String]()\n        for\
    \ (str <- strings) {\n            if (str.contains(substring)) {\n           \
    \     result = str :: result\n            }\n        }\n        result", '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  "        var filteredStrings = List[String]()\n        for (string <- strings) {\n\
    \            if (string.contains(substring)) {\n                filteredStrings\
    \ = string :: filteredStrings\n            }\n        }\n        filteredStrings",
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(string => string.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(str => str.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', "        var result = List[String]()\n\
    \        for (str <- strings) {\n            if (str.contains(substring)) {\n\
    \                result = str :: result\n            }\n        }\n        result",
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))']
stop_tokens:
- "\n    }\n"
