name: HumanEval_62_derivative
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n\
  \    def derivative(xs : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
  \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong,\
  \ 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val n = xs.length\n        val ys = new Array[Long](n - 1)\n\
    \        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n\
    \        }\n        ys.toList", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) =\
    \ (i + 1) * xs(i + 1)\n        }\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n\
    \            ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "   \
    \     val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList",
  "        val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys\
    \ += xs(i) * i\n        ys.toList", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) *\
    \ xs(i + 1)\n        ys.toList", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) result = result :+ (i * xs(i))\n        result", " \
    \       val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0\
    \ until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n       \
    \ ys.toList", "        val ys = new ListBuffer[Long]\n        for (i <- 1 until\
    \ xs.length) {\n            ys += xs(i) * i\n        }\n        ys.toList", " \
    \       val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0\
    \ until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n\
    \            ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "   \
    \     val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        if (xs.length\
    \ == 1) List(0)\n        else xs.tail.zipWithIndex.map(x => x._1 * (x._2 + 1))",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n       \
    \ ys.toList", "        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ result = result :+ (i * xs(i))\n        result", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n       \
    \ }\n        ys.toList", "        var result = List[Long]()\n        for (i <-\
    \ 1 until xs.length) result = result :+ (i * xs(i))\n        result", "      \
    \  val n = xs.length\n        (1 until n).map(i => xs(i) * i).toList", "     \
    \   val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n  \
    \      ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n  \
    \      }\n        ys.toList", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1)\
    \ * xs(i + 1)\n        ys.toList", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) *\
    \ xs(i + 1)\n        ys.toList", '        xs.zipWithIndex.map(p => p._1 * p._2).tail',
  "        if (xs.length == 1) List(0)\n        else List(xs(1)) ++ derivative(xs.tail.map(x\
    \ => x * (xs.length - 1)))", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i\
    \ + 1)\n        ys.toList", "        var result = List[Long]()\n        for (i\
    \ <- 1 until xs.length) {\n            result = result :+ xs(i) * i\n        }\n\
    \        return result", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys +=\
    \ xs(i) * i\n        ys.toList", "        val ys = new ListBuffer[Long]\n    \
    \    for (i <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", "     \
    \   val n = xs.length\n        (1 until n).map(i => xs(i) * i).toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).drop(1)', '        xs.zipWithIndex.map(x => x._1 * x._2).tail',
  "        if (xs.length == 1) List(0)\n        else xs.tail.zipWithIndex.map(x =>\
    \ x._1 * (x._2 + 1)).toList", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n   \
    \     ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n  \
    \      }\n        ys.toList", "        val ys = new ListBuffer[Long]\n       \
    \ for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n        }\n   \
    \     ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        if (xs.length == 1) List(0)\n        else xs.tail.zipWithIndex.map(x\
    \ => x._1 * (x._2 + 1))", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n    \
    \    }\n        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n            ys(i\
    \ - 1) = xs(i) * i\n        }\n        ys.toList", "        if (xs.length == 1)\
    \ List(0)\n        else xs.tail.zipWithIndex.map(x => x._1 * (x._2 + 1))", '        (1
    until xs.length).map(i => i * xs(i)).toList', "        val n = xs.length\n   \
    \     val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            ys += i * xs(i)\n       \
    \ }\n        ys.toList", "        var result = List[Long]()\n        for (i <-\
    \ 1 until xs.length) {\n            result = result :+ (i * xs(i))\n        }\n\
    \        result", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList",
  "        var result = new ListBuffer[Long]\n        for (i <- 1 until xs.length)\
    \ result += xs(i) * i\n        result.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n\
    \        }\n        result", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        val ys = new ListBuffer[Long]\n        for\
    \ (i <- 1 until xs.length) {\n            ys += i * xs(i)\n        }\n       \
    \ ys.toList", "        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ result = (i * xs(i)) :: result\n        result.reverse", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        var ys = List[Long]()\n\
    \        for (i <- 1 until xs.length) ys = ys :+ (i * xs(i))\n        ys", " \
    \       val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys\
    \ += i * xs(i)\n        ys.toList", "        val n = xs.length\n        if (n\
    \ == 1) List(0)\n        else {\n            val ys = new ListBuffer[Long]\n \
    \           for (i <- 1 until n) {\n                ys += i * xs(i)\n        \
    \    }\n            ys.toList\n        }", "        val n = xs.length\n      \
    \  val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n         \
    \   ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "        val n = xs.length\n\
    \        (1 until n).map(i => xs(i) * i).toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1)\
    \ * xs(i + 1)\n        ys.toList", "        if (xs.length == 1) List(0)\n    \
    \    else xs.zipWithIndex.map(x => x._1 * x._2).tail", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n       \
    \ }\n        ys.toList", '        (for (i <- 1 until xs.length) yield xs(i) *
    i).toList', "        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            result = result :+ (i * xs(i))\n        }\n        result", " \
    \       val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n     \
    \   ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n            ys(i\
    \ - 1) = xs(i) * i\n        }\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n\
    \            ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "   \
    \     val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList",
  "        val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 until xs.length) {\n            result =\
    \ result :+ xs(i) * i\n        }\n        return result", "        val n = xs.length\n\
    \        val dxs = new Array[Long](n - 1)\n        for (i <- 1 until n) dxs(i\
    \ - 1) = xs(i) * i\n        dxs.toList", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n       \
    \ }\n        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n  \
    \      }\n        ys.toList", "        val ys = new ListBuffer[Long]\n       \
    \ for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n        }\n   \
    \     ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail', "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList", "        var ys = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            ys = ys :+ (i * xs(i))\n\
    \        }\n        ys", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1)\
    \ * xs(i + 1)\n        ys.toList", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1)\
    \ * (i + 1)\n        ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail',
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        result", "      \
    \  val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n   \
    \         ys += xs(i) * i\n        }\n        ys.toList", '        xs.zipWithIndex.map(p
    => p._1 * p._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList",
  "        val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        val n =\
    \ xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = xs(i + 1) * (i + 1)\n        ys.toList", "        val n = xs.length\n    \
    \    val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) =\
    \ (i + 1) * xs(i + 1)\n        ys.toList", "        val n = xs.length\n      \
    \  val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n     \
    \       ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0\
    \ until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n\
    \            ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "   \
    \     val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 until xs.length) result = (i * xs(i)) ::\
    \ result\n        result.reverse", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) *\
    \ xs(i + 1)\n        ys.toList", "        val n = xs.length\n        val ys =\
    \ new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        var result = List[Long]()\n        for (i\
    \ <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n      \
    \  }\n        result", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n     \
    \   ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "        if\
    \ (xs.length == 1) List(0)\n        else xs.zipWithIndex.map(x => x._1 * x._2).tail",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        var result = List[Long]()\n  \
    \      for (i <- 1 until xs.length) {\n            result = result :+ xs(i) *\
    \ i\n        }\n        return result", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n          \
    \  ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1 until\
    \ n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "  \
    \      def helper(xs : List[Long], n : Int) : List[Long] = {\n            if (xs.isEmpty)\
    \ Nil\n            else xs.head * n :: helper(xs.tail, n + 1)\n        }\n   \
    \     helper(xs.tail, 1)", "        val ys = new ListBuffer[Long]\n        for\
    \ (i <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        (for (i <- 1 until n) yield i * xs(i)).toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = result :+ (i * xs(i))\n        result", "        val n =\
    \ xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        var result = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) result += xs(i) * i\n        result.toList",
  "        if (xs.length == 1) List(0)\n        else xs.tail.zipWithIndex.map(x =>\
    \ x._1 * (x._2 + 1))", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val ys = new ListBuffer[Long]\n        for (i <- 1 until\
    \ xs.length) {\n            ys += i * xs(i)\n        }\n        ys.toList", " \
    \       val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        val n =\
    \ xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "        var result\
    \ = new ListBuffer[Long]\n        for (i <- 1 until xs.length) result += xs(i)\
    \ * i\n        result.toList", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) =\
    \ xs(i) * i\n        }\n        ys.toList", "        val n = xs.length\n     \
    \   val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) =\
    \ xs(i + 1) * (i + 1)\n        ys.toList", "        if (xs.length == 1) List(0)\n\
    \        else (1 until xs.length).map(i => xs(i) * i).toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n        ys.toList",
  "        val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        val ys =\
    \ new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n            ys\
    \ += xs(i) * i\n        }\n        ys.toList", "        var ys = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            ys = ys :+ (i * xs(i))\n\
    \        }\n        ys", "        var result = List[Long]()\n        for (i <-\
    \ 1 until xs.length) result = result :+ xs(i) * i\n        result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val ys = new ListBuffer[Long]\n        for (i\
    \ <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", "        if (xs.length\
    \ == 1) List(0)\n        else (1 to xs.length - 1).map(i => i * xs(i)).toList",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) result\
    \ = result :+ (i * xs(i))\n        result", "        def helper(xs : List[Long],\
    \ i : Int) : List[Long] = {\n            if (i == xs.length) Nil\n           \
    \ else xs(i) * i :: helper(xs, i + 1)\n        }\n        helper(xs, 1)", "  \
    \      val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList", "    \
    \    var result = List[Long]()\n        for (i <- 1 until xs.length) {\n     \
    \       result = result :+ (i * xs(i))\n        }\n        result", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1\
    \ until n) ys(i - 1) = xs(i) * i\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n   \
    \         ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1 until\
    \ n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "  \
    \      val n = xs.length\n        val dxs = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) dxs(i) = (i + 1) * xs(i + 1)\n        dxs.toList", "  \
    \      if (xs.length == 1) return List(0)\n        return xs.tail.zipWithIndex.map(x\
    \ => x._1 * (x._2 + 1)).toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail',
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail', " \
    \       val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys\
    \ += xs(i) * i\n        ys.toList", "        val ys = new ListBuffer[Long]\n \
    \       for (i <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList",
  '        xs.zipWithIndex.map(x => x._1 * x._2).tail', '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val dxs = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) dxs(i) = xs(i + 1) * (i + 1)\n      \
    \  dxs.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n     \
    \   ys.toList", "        val n = xs.length\n        val dxs = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) dxs(i) = xs(i + 1) * (i + 1)\n      \
    \  dxs.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = xs(i + 1) * (i + 1)\n       \
    \ ys.toList", '        return (1 until xs.length).map(i => xs(i) * i).toList',
  '        xs.zipWithIndex.map(x => x._1 * x._2).tail', "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = xs(i + 1) * (i + 1)\n        ys.toList", "        val n = xs.length\n    \
    \    val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) =\
    \ xs(i + 1) * (i + 1)\n        ys.toList", "        val n = xs.length\n      \
    \  val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n         \
    \   ys(i - 1) = xs(i) * i\n        }\n        ys.toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val ys = new ListBuffer[Long]\n        for (i\
    \ <- 1 until xs.length) {\n            ys += xs(i) * i\n        }\n        ys.toList",
  "        if (xs.length == 1) List(0)\n        else xs.tail.zipWithIndex.map(x =>\
    \ x._1 * (x._2 + 1))", "        val ys = new ListBuffer[Long]\n        for (i\
    \ <- 1 until xs.length) ys += xs(i) * i\n        ys.toList"]
stop_tokens:
- "\n    }\n"
