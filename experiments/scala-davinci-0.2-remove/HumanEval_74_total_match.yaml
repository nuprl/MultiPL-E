name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    def totalMatch(lst1 : List[String], lst2\
  \ : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) =>\
    \ sum + str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        if (sum1 < sum2) lst1 else lst2", "        if (lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length) < lst2.foldLeft(0)((acc, x) => acc + x.length)) lst1\n\
    \        else lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) => sum +\
    \ str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        if (sum1 < sum2) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val lst2Total = lst2.foldLeft(0)((total,\
    \ str) => total + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2",
  "        val total1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ val total2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if (total1\
    \ < total2) lst1 else lst2", "        val total1 = lst1.map(_.length).sum\n  \
    \      val total2 = lst2.map(_.length).sum\n        if (total1 < total2) lst1\
    \ else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.map(_.length).sum\n       \
    \ val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total) lst1\
    \ else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "        var\
    \ total1 = 0\n        var total2 = 0\n        for (str <- lst1) total1 += str.length\n\
    \        for (str <- lst2) total2 += str.length\n        if (total1 < total2)\
    \ lst1 else lst2", "        val total1 = lst1.map(_.length).sum\n        val total2\
    \ = lst2.map(_.length).sum\n        if (total1 < total2) lst1 else lst2", "  \
    \      val total1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ val total2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if (total1\
    \ < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        var sum1 = 0\n       \
    \ var sum2 = 0\n        for (i <- lst1) sum1 += i.length\n        for (i <- lst2)\
    \ sum2 += i.length\n        if (sum1 < sum2) lst1 else lst2", "        val total1\
    \ = lst1.foldLeft(0)((acc, str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        if (total1 < total2) lst1 else lst2", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) => acc +\
    \ x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  var sum1 = 0\n        var sum2 = 0\n        for (str <- lst1) sum1 += str.length\n\
    \        for (str <- lst2) sum2 += str.length\n        if (sum1 < sum2) lst1 else\
    \ lst2", "        val total1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        val total2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n     \
    \   if (total1 < total2) lst1 else lst2", "        val total1 = lst1.map(_.length).sum\n\
    \        val total2 = lst2.map(_.length).sum\n        if (total1 < total2) lst1\
    \ else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  def totalMatchHelper(lst1 : List[String], lst2 : List[String], total1 : Int,\
    \ total2 : Int) : List[String] = {\n            if (lst1.isEmpty) {\n        \
    \        if (total1 < total2) lst1 else lst2\n            } else {\n         \
    \       totalMatchHelper(lst1.tail, lst2, total1 + lst1.head.length, total2)\n\
    \            }\n        }\n        totalMatchHelper(lst1, lst2, 0, 0)", "    \
    \    val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x\
    \ => x.length).sum\n        if (lst1Total < lst2Total) lst1 else lst2", "    \
    \    val total1 = lst1.map(_.length).sum\n        val total2 = lst2.map(_.length).sum\n\
    \        if (total1 == total2) lst1\n        else if (total1 < total2) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  if (lst1.foldLeft(0)((sum, str) => sum + str.length) < lst2.foldLeft(0)((sum,\
    \ str) => sum + str.length)) lst1\n        else lst2", "        if (lst1.foldLeft(0)((acc,\
    \ s) => acc + s.length) < lst2.foldLeft(0)((acc, s) => acc + s.length)) lst1\n\
    \        else lst2", "        var sum1 = 0\n        var sum2 = 0\n        for\
    \ (i <- lst1) sum1 += i.length\n        for (i <- lst2) sum2 += i.length\n   \
    \     if (sum1 < sum2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val\
    \ sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if (sum1 <\
    \ sum2) lst1 else lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) => sum\
    \ + str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        if (sum1 < sum2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (total1 < total2) lst1 else lst2", "        var total1\
    \ = 0\n        var total2 = 0\n        for (s <- lst1) total1 += s.length\n  \
    \      for (s <- lst2) total2 += s.length\n        if (total1 < total2) lst1 else\
    \ lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ if (sum1 < sum2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val total2\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 < total2)\
    \ lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        val total2 = lst2.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        def total(lst :\
    \ List[String]) : Int = {\n            lst.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        }\n        if (total(lst1) < total(lst2)) lst1 else lst2", "        val\
    \ total1 = lst1.foldLeft(0)((total, str) => total + str.length)\n        val total2\
    \ = lst2.foldLeft(0)((total, str) => total + str.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        val total1 = lst1.map(_.length).sum\n    \
    \    val total2 = lst2.map(_.length).sum\n        if (total1 < total2) lst1 else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   val sum1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val sum2\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (sum1 < sum2) lst1\
    \ else lst2", "        var total1 = 0\n        var total2 = 0\n        for (i\
    \ <- lst1) total1 += i.length\n        for (i <- lst2) total2 += i.length\n  \
    \      if (total1 < total2) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val total2 = lst2.foldLeft(0)((total, str)\
    \ => total + str.length)\n        if (total1 < total2) lst1 else lst2", "    \
    \    var total1 = 0\n        var total2 = 0\n        for (str <- lst1) total1\
    \ += str.length\n        for (str <- lst2) total2 += str.length\n        if (total1\
    \ == total2) lst1\n        else if (total1 < total2) lst1\n        else lst2",
  "        val total1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ val total2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if (total1\
    \ < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str) => acc\
    \ + str.length)\n        if (total1 < total2) lst1 else lst2", "        val total1\
    \ = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val total2 = lst2.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        if (total1 < total2) lst1 else lst2", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n     \
    \   if (lst1_total < lst2_total) lst1 else lst2", "        if (lst1.length ==\
    \ 0) return lst2\n        if (lst2.length == 0) return lst1\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) return lst1\n        return lst2", "        var total1\
    \ = 0\n        var total2 = 0\n        for (str <- lst1) total1 += str.length\n\
    \        for (str <- lst2) total2 += str.length\n        if (total1 < total2)\
    \ lst1 else lst2", "        val total1 = lst1.foldLeft(0)((a, b) => a + b.length)\n\
    \        val total2 = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (total1\
    \ < total2) lst1 else lst2", "        var total1 = 0\n        var total2 = 0\n\
    \        for (str <- lst1) total1 += str.length\n        for (str <- lst2) total2\
    \ += str.length\n        if (total1 < total2) lst1 else lst2", "        val total1\
    \ = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (total1 < total2) lst1 else lst2", "     \
    \   val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val total2\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 < total2)\
    \ lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((a, b) => a\
    \ + b.length)\n        val total2 = lst2.foldLeft(0)((a, b) => a + b.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (total1 < total2) lst1 else lst2", "        val lst1Total\
    \ = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       var sum1 = 0\n        var sum2 = 0\n        for (s <- lst1) sum1 += s.length\n\
    \        for (s <- lst2) sum2 += s.length\n        if (sum1 < sum2) lst1 else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        var total1 = 0\n     \
    \   var total2 = 0\n        for (s <- lst1) total1 += s.length\n        for (s\
    \ <- lst2) total2 += s.length\n        if (total1 < total2) lst1 else lst2", " \
    \       val total1 = lst1.foldLeft(0)((total, str) => total + str.length)\n  \
    \      val total2 = lst2.foldLeft(0)((total, str) => total + str.length)\n   \
    \     if (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) =>\
    \ sum + str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        if (sum1 < sum2) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        val lst2Total = lst2.foldLeft(0)((sum, str)\
    \ => sum + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        var total1 = 0\n        var total2 = 0\n\
    \        for (i <- lst1) total1 += i.length\n        for (i <- lst2) total2 +=\
    \ i.length\n        if (total1 < total2) lst1\n        else lst2", "        val\
    \ sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val sum2 =\
    \ lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if (sum1 < sum2) lst1\
    \ else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2Total\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        val sum1 = lst1.map(_.length).sum\n\
    \        val sum2 = lst2.map(_.length).sum\n        if (sum1 < sum2) lst1 else\
    \ lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) => acc +\
    \ x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val lst1Total = lst1.map(x => x.length).sum\n        val lst2Total = lst2.map(x\
    \ => x.length).sum\n        if (lst1Total < lst2Total) lst1 else lst2", "    \
    \    val lst1Total = lst1.foldLeft(0)((a, b) => a + b.length)\n        val lst2Total\
    \ = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2", "        val total1 = lst1.map(x => x.length).sum\n       \
    \ val total2 = lst2.map(x => x.length).sum\n        if (total1 < total2) lst1\
    \ else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        var total1 = 0\n     \
    \   var total2 = 0\n        for (s <- lst1) total1 += s.length\n        for (s\
    \ <- lst2) total2 += s.length\n        if (total1 < total2) lst1 else lst2", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val total1 = lst1.map(_.length).sum\n        val total2 = lst2.map(_.length).sum\n\
    \        if (total1 < total2) lst1 else lst2", "        var sum1 = 0\n       \
    \ var sum2 = 0\n        for (i <- lst1) sum1 += i.length\n        for (i <- lst2)\
    \ sum2 += i.length\n        if (sum1 < sum2) lst1 else lst2", "        val total1\
    \ = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val total2 = lst2.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        if (total1 < total2) lst1 else lst2", " \
    \       val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        val lst1Total = lst1.map(_.length).sum\n \
    \       val lst2Total = lst2.map(_.length).sum\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        def total(lst : List[String]) : Int = lst\
    \ match {\n            case Nil => 0\n            case x :: xs => x.length + total(xs)\n\
    \        }\n        if (total(lst1) < total(lst2)) lst1 else lst2", "        val\
    \ total1 = lst1.map(_.length).sum\n        val total2 = lst2.map(_.length).sum\n\
    \        if (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (total1 < total2) lst1 else lst2", "        def totalMatchHelper(lst1\
    \ : List[String], lst2 : List[String], total1 : Int, total2 : Int) : List[String]\
    \ = {\n            if (lst1.isEmpty) {\n                if (total1 < total2) lst1\
    \ else lst2\n            } else {\n                totalMatchHelper(lst1.tail,\
    \ lst2, total1 + lst1.head.length, total2)\n            }\n        }\n       \
    \ totalMatchHelper(lst1, lst2, 0, 0)", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val sum1 = lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) =>\
    \ sum + str.length)\n        if (sum1 < sum2) lst1 else lst2", "        var sum1\
    \ = 0\n        var sum2 = 0\n        for (str <- lst1) {\n            sum1 +=\
    \ str.length\n        }\n        for (str <- lst2) {\n            sum2 += str.length\n\
    \        }\n        if (sum1 < sum2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val total2 = lst2.foldLeft(0)((total, str)\
    \ => total + str.length)\n        if (total1 < total2) lst1 else lst2", "    \
    \    val sum1 = lst1.map(_.length).sum\n        val sum2 = lst2.map(_.length).sum\n\
    \        if (sum1 < sum2) lst1 else lst2", "        if (lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length) < lst2.foldLeft(0)((sum, str) => sum + str.length))\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val lst1Total = lst1.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        val lst2Total = lst2.foldLeft(0)((acc, str) =>\
    \ acc + str.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "   \
    \     val total1 = lst1.foldLeft(0)((total, str) => total + str.length)\n    \
    \    val total2 = lst2.foldLeft(0)((total, str) => total + str.length)\n     \
    \   if (total1 < total2) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   val lst1_total = lst1.foldLeft(0)((a, b) => a + b.length)\n        val lst2_total\
    \ = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (lst1_total < lst2_total)\
    \ lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.map(_.length).sum\n   \
    \     val total2 = lst2.map(_.length).sum\n        if (total1 < total2) lst1 else\
    \ lst2", "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        val sum1 = lst1.map(_.length).sum\n\
    \        val sum2 = lst2.map(_.length).sum\n        if (sum1 < sum2) lst1 else\
    \ lst2", "        val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val lst2Total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n      \
    \  if (lst1Total < lst2Total) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val total2 = lst2.foldLeft(0)((total, str)\
    \ => total + str.length)\n        if (total1 < total2) lst1 else lst2", "    \
    \    if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        if (lst1.foldLeft(0)((acc, s) => acc + s.length) < lst2.foldLeft(0)((acc,\
    \ s) => acc + s.length)) lst1\n        else lst2", "        var total1 = 0\n \
    \       var total2 = 0\n        for (s <- lst1) total1 += s.length\n        for\
    \ (s <- lst2) total2 += s.length\n        if (total1 < total2) lst1 else lst2",
  "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) =>\
    \ sum + str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        if (sum1 < sum2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str)\
    \ => acc + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  var total1 = 0\n        var total2 = 0\n        for (s <- lst1) total1 += s.length\n\
    \        for (s <- lst2) total2 += s.length\n        if (total1 < total2) lst1\
    \ else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        if (lst1.length == 0)\
    \ lst2\n        else if (lst2.length == 0) lst1\n        else {\n            val\
    \ lst1sum = lst1.foldLeft(0)((sum, str) => sum + str.length)\n            val\
    \ lst2sum = lst2.foldLeft(0)((sum, str) => sum + str.length)\n            if (lst1sum\
    \ < lst2sum) lst1\n            else if (lst1sum > lst2sum) lst2\n            else\
    \ lst1\n        }", "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((total, str)\
    \ => total + str.length)\n        val total2 = lst2.foldLeft(0)((total, str) =>\
    \ total + str.length)\n        if (total1 < total2) lst1 else lst2", "       \
    \ val lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2Total\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2", "        var total1 = 0\n        var total2 = 0\n        for\
    \ (s <- lst1) total1 += s.length\n        for (s <- lst2) total2 += s.length\n\
    \        if (total1 < total2) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   val lst1Total = lst1.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ val lst2Total = lst2.foldLeft(0)((sum, str) => sum + str.length)\n        if\
    \ (lst1Total < lst2Total) lst1 else lst2", "        val total1 = lst1.map(x =>\
    \ x.length).sum\n        val total2 = lst2.map(x => x.length).sum\n        if\
    \ (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val sum1 = lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) =>\
    \ sum + str.length)\n        if (sum1 < sum2) lst1 else lst2", "        val total1\
    \ = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val total2 = lst2.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        if (total1 < total2) lst1 else lst2", " \
    \       if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val total1 = lst1.foldLeft(0)((acc, str) => acc + str.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, str) => acc + str.length)\n     \
    \   if (total1 < total2) lst1 else lst2", "        def total(lst : List[String])\
    \ : Int = {\n            var sum = 0\n            for (str <- lst) {\n       \
    \         sum += str.length\n            }\n            sum\n        }\n     \
    \   if (total(lst1) < total(lst2)) lst1\n        else lst2", "        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- lst1) total1 += i.length\n  \
    \      for (i <- lst2) total2 += i.length\n        if (total1 < total2) lst1\n\
    \        else lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) => sum +\
    \ str.length)\n        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        if (sum1 < sum2) lst1 else lst2", "        var total1 = 0\n        var\
    \ total2 = 0\n        for (str <- lst1) {\n            total1 += str.length\n\
    \        }\n        for (str <- lst2) {\n            total2 += str.length\n  \
    \      }\n        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((x,\
    \ y) => x + y.length)\n        val total2 = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (total1 < total2) lst1 else lst2", "        var total1\
    \ = 0\n        var total2 = 0\n        for (s <- lst1) total1 += s.length\n  \
    \      for (s <- lst2) total2 += s.length\n        if (total1 < total2) lst1 else\
    \ lst2", "        val sum1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        val sum2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ if (sum1 < sum2) lst1 else lst2", "        val lst1Total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", "     \
    \   val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val total2\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (total1 < total2)\
    \ lst1 else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((total,\
    \ str) => total + str.length)\n        val total2 = lst2.foldLeft(0)((total, str)\
    \ => total + str.length)\n        if (total1 < total2) lst1 else lst2", "    \
    \    var sum1 = 0\n        var sum2 = 0\n        for (str <- lst1) {\n       \
    \     sum1 += str.length\n        }\n        for (str <- lst2) {\n           \
    \ sum2 += str.length\n        }\n        if (sum1 < sum2) lst1 else lst2", " \
    \       var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n  \
    \          total1 += i.length\n        }\n        for (i <- lst2) {\n        \
    \    total2 += i.length\n        }\n        if (total1 < total2) lst1 else lst2",
  "        val total1 = lst1.foldLeft(0)((a, b) => a + b.length)\n        val total2\
    \ = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (total1 < total2) lst1\
    \ else lst2", "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        if (lst1.length == 0) lst2\n   \
    \     else if (lst2.length == 0) lst1\n        else {\n            var total1\
    \ = 0\n            var total2 = 0\n            for (str <- lst1) total1 += str.length\n\
    \            for (str <- lst2) total2 += str.length\n            if (total1 <\
    \ total2) lst1\n            else if (total2 < total1) lst2\n            else lst1\n\
    \        }", "        val total1 = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val total2 = lst2.foldLeft(0)((total, str) => total + str.length)\n \
    \       if (total1 < total2) lst1 else lst2", "        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n        }\n\
    \        for (i <- lst2) {\n            sum2 += i.length\n        }\n        if\
    \ (sum1 < sum2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (total1 < total2) lst1 else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1\n        else lst2", "        val total1 = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val total2 = lst2.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n        if (total1 < total2) lst1 else lst2", "        var sum1\
    \ = 0\n        var sum2 = 0\n        for (s <- lst1) {\n            sum1 += s.length\n\
    \        }\n        for (s <- lst2) {\n            sum2 += s.length\n        }\n\
    \        if (sum1 < sum2) lst1 else lst2", "        var total1 = 0\n        var\
    \ total2 = 0\n        for (str <- lst1) total1 += str.length\n        for (str\
    \ <- lst2) total2 += str.length\n        if (total1 < total2) lst1 else lst2",
  "        if (lst1.map(_.length).sum == lst2.map(_.length).sum) lst1\n        else\
    \ if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else lst2",
  "        val total1 = lst1.foldLeft(0)((acc, s) => acc + s.length)\n        val\
    \ total2 = lst2.foldLeft(0)((acc, s) => acc + s.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        val total1 = lst1.foldLeft(0)((acc, str) =>\
    \ acc + str.length)\n        val total2 = lst2.foldLeft(0)((acc, str) => acc +\
    \ str.length)\n        if (total1 < total2) lst1 else lst2"]
stop_tokens:
- "\n    }\n"
