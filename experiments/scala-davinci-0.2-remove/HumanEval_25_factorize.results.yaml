language: scala
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var current = n\n        var\
    \ i = 2L\n        while (i <= current) {\n            if (current % i == 0) {\n\
    \                factors = factors :+ i\n                current /= i\n      \
    \      } else {\n                i += 1\n            }\n        }\n        factors\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n        \
    \        factors += i\n                m /= i\n            }\n        }\n    \
    \    if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val primes = new PrimeIterator\n        var factors = List[Long]()\n\
    \        var m = n\n        while (m > 1) {\n            val p = primes.next\n\
    \            while (m % p == 0) {\n                factors = factors :+ p\n  \
    \              m /= p\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_eyfpq9u.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mPrimeIterator\e[0m\n\e[31m\e[31m  |\e[0m                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                         Not found: type PrimeIterator\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i * i <= nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \           i += 1\n        }\n        if (nn > 1) factors = factors :+ nn\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = ListBuffer[Long]()\n        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors += i\n                m /= i\n            } else {\n          \
    \      i += 1\n            }\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= nn) {\n            while (nn % i == 0) {\n         \
    \       factors = factors :+ i\n                nn /= i\n            }\n     \
    \       i += 1\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = ListBuffer[Long]()\n        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            while (m % i == 0) {\n       \
    \         factors += i\n                m /= i\n            }\n            i +=\
    \ 1\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors = factors :+ i\n                x /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var result = List[Long]()\n        var m = n\n        var i = 2L\n\
    \        while (i * i <= m) {\n            while (m % i == 0) {\n            \
    \    result = i :: result\n                m /= i\n            }\n           \
    \ i += 1\n        }\n        if (m > 1) result = m :: result\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkfgmpxfy.scala:25)\n\tat Problem.main(tmpkfgmpxfy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var x = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors = factors :+ i\n                x /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var d = 2\n        while (m > 1) {\n            while (m % d == 0) {\n     \
    \           factors += d\n                m /= d\n            }\n            d\
    \ += 1\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var result = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to n) {\n            while (m % i == 0) {\n                result = i ::\
    \ result\n                m /= i\n            }\n        }\n        result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqlu8j5k.scala:22)\n\tat Problem.main(tmpdqlu8j5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var result = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                result\
    \ = i :: result\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) result = m :: result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpktrye3l_.scala:23)\n\tat Problem.main(tmpktrye3l_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors = factors :+ i\n                x /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var p =\
    \ 2\n        while (nn > 1) {\n            while (nn % p == 0) {\n           \
    \     factors = factors :+ p\n                nn /= p\n            }\n       \
    \     p += 1\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val primes = new PrimeGenerator(n.toInt)\n        var factors =\
    \ List[Long]()\n        var m = n\n        for (p <- primes) {\n            while\
    \ (m % p == 0) {\n                factors = p :: factors\n                m /=\
    \ p\n            }\n            if (m == 1) return factors\n        }\n      \
    \  throw new Exception(\"Should not reach here\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqw0_ypi.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mPrimeGenerator\e[0m(n.toInt)\n\e[31m\e[31m  |\e[0m                 \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ type PrimeGenerator\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = ListBuffer[Long]()\n        var m = n\n        for\
    \ (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n            \
    \    factors += i\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors += m\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n                i -= 1\n            }\n      \
    \  }\n        factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfleyfkwq.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a\
    \ member of Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        def factorizeRec(n : Long, primes : Stream[Long]) : List[Long]\
    \ = {\n            if (n == 1) Nil\n            else if (n % primes.head == 0)\
    \ primes.head :: factorizeRec(n / primes.head, primes)\n            else factorizeRec(n,\
    \ primes.tail)\n        }\n        factorizeRec(n, primes)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqxecm3i1.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        factorizeRec(n, primes)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: primes\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ while (m % 2 == 0) {\n            factors += 2\n            m /= 2\n       \
    \ }\n        var i = 3\n        while (i <= sqrt(m)) {\n            while (m %\
    \ i == 0) {\n                factors += i\n                m /= i\n          \
    \  }\n            i += 2\n        }\n        if (m > 1) factors += m\n       \
    \ factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  while (nn % 2 == 0) {\n            factors += 2\n            nn /= 2\n    \
    \    }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while\
    \ (nn % i == 0) {\n                factors += i\n                nn /= i\n   \
    \         }\n            i += 2\n        }\n        if (nn > 1) factors += nn\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val primes = new PrimeIterator\n        var factors = List[Long]()\n\
    \        var m = n\n        while (m > 1) {\n            val p = primes.next\n\
    \            if (m % p == 0) {\n                factors = factors :+ p\n     \
    \           m /= p\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvs7dd1y.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mPrimeIterator\e[0m\n\e[31m\e[31m  |\e[0m                         ^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                         Not found: type PrimeIterator\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028283
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsym588xh.scala:23)\n\tat Problem.main(tmpsym588xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var cur = n\n        var i\
    \ = 2L\n        while (i <= cur) {\n            if (cur % i == 0) {\n        \
    \        factors = factors :+ i\n                cur /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var m = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  while (nn % 2 == 0) {\n            factors += 2\n            nn /= 2\n    \
    \    }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while\
    \ (nn % i == 0) {\n                factors += i\n                nn /= i\n   \
    \         }\n            i += 2\n        }\n        if (nn > 1) factors += nn\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            }\n        }\n  \
    \      if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var p =\
    \ 2L\n        while (m > 1) {\n            while (m % p == 0) {\n            \
    \    factors = factors :+ p\n                m /= p\n            }\n         \
    \   p += 1\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var num = n\n        for (i\
    \ <- 2 to sqrt(n).toInt) {\n            while (num % i == 0) {\n             \
    \   factors = factors :+ i\n                num /= i\n            }\n        }\n\
    \        if (num != 1) factors = factors :+ num\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var x = n\n       \
    \ while (x % 2 == 0) {\n            factors += 2\n            x /= 2\n       \
    \ }\n        var i = 3\n        while (i <= sqrt(x)) {\n            while (x %\
    \ i == 0) {\n                factors += i\n                x /= i\n          \
    \  }\n            i += 2\n        }\n        if (x > 1) factors += x\n       \
    \ factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2\n        while (i <= nn) {\n            if (nn % i == 0) {\n             \
    \   factors = factors :+ i\n                nn /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (x % i == 0) {\n                factors\
    \ = factors :+ i\n                x /= i\n            }\n        }\n        if\
    \ (x > 1) factors = factors :+ x\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  var p = 2L\n        while (nn > 1) {\n            while (nn % p == 0) {\n \
    \               factors += p\n                nn /= p\n            }\n       \
    \     p += 1\n        }\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n   \
    \             factors += i\n                nn /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        factors.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i * i <= nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \           i += 1\n        }\n        if (nn > 1) factors = factors :+ nn\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  while (nn % 2 == 0) {\n            factors += 2\n            nn /= 2\n    \
    \    }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while\
    \ (nn % i == 0) {\n                factors += i\n                nn /= i\n   \
    \         }\n            i += 2\n        }\n        if (nn > 1) factors += nn\n\
    \        factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]()\n        var m = n\n     \
    \   var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n    \
    \            factors += i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var m = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4nuchdo.scala:25)\n\tat Problem.main(tmpt4nuchdo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors = factors :+ i\n                x /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var p =\
    \ 2L\n        while (m > 1) {\n            while (m % p == 0) {\n            \
    \    factors = factors :+ p\n                m /= p\n            }\n         \
    \   p += 1\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i * i <= nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \           i += 1\n        }\n        if (nn > 1) factors = factors :+ nn\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        var i =\
    \ 2L\n        while (i * i <= nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \           i += 1\n        }\n        if (nn > 1) factors = factors :+ nn\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsym588xh.scala:23)\n\tat Problem.main(tmpsym588xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n        \
    \        factors += i\n                m /= i\n            }\n        }\n    \
    \    if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n        \
    \        factors += i\n                m /= i\n            }\n        }\n    \
    \    if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var i =\
    \ 2L\n        while (i * i <= x) {\n            while (x % i == 0) {\n       \
    \         factors = factors :+ i\n                x /= i\n            }\n    \
    \        i += 1\n        }\n        if (x > 1) factors = factors :+ x\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ while (m % 2 == 0) {\n            factors += 2\n            m /= 2\n       \
    \ }\n        var i = 3\n        while (i <= sqrt(m)) {\n            while (m %\
    \ i == 0) {\n                factors += i\n                m /= i\n          \
    \  }\n            i += 2\n        }\n        if (m > 1) factors += m\n       \
    \ factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i * i <= nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \           i += 1\n        }\n        if (nn > 1) factors = factors :+ nn\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            }\n        }\n  \
    \      if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsym588xh.scala:23)\n\tat Problem.main(tmpsym588xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        def factorizeRec(n : Long, d : Long) : List[Long] = {\n       \
    \     if (n == 1) Nil\n            else if (n % d == 0) d :: factorizeRec(n /\
    \ d, d)\n            else factorizeRec(n, d + 1)\n        }\n        factorizeRec(n,\
    \ 2)\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = new ListBuffer[Long]\n        var x = n\n       \
    \ var p = 2L\n        while (x > 1) {\n            if (x % p == 0) {\n       \
    \         factors += p\n                x /= p\n            } else {\n       \
    \         p += 1\n            }\n        }\n        factors.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val primes = new PrimeGenerator(n).getPrimes\n        var factors\
    \ = List[Long]()\n        var nn = n\n        for (p <- primes) {\n          \
    \  while (nn % p == 0) {\n                factors = factors :+ p\n           \
    \     nn /= p\n            }\n        }\n        factors\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpixdzz6r0.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = \e[33mnew\e\
    [0m \e[35mPrimeGenerator\e[0m(n).getPrimes\n\e[31m\e[31m  |\e[0m             \
    \            ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                         Not found:\
    \ type PrimeGenerator\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        while (m\
    \ % 2 == 0) {\n            factors = 2 :: factors\n            m /= 2\n      \
    \  }\n        var i = 3\n        while (i <= sqrt(m)) {\n            while (m\
    \ % i == 0) {\n                factors = i :: factors\n                m /= i\n\
    \            }\n            i += 2\n        }\n        if (m > 1) factors = m\
    \ :: factors\n        factors\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpasermtl8.scala:29)\n\tat Problem.main(tmpasermtl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  for (i <- 2 to sqrt(nn).toInt) {\n            while (nn % i == 0) {\n     \
    \           factors += i\n                nn /= i\n            }\n        }\n\
    \        if (nn > 1) factors += nn\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var p =\
    \ 2L\n        while (nn > 1) {\n            while (nn % p == 0) {\n          \
    \      factors = factors :+ p\n                nn /= p\n            }\n      \
    \      p += 1\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors = factors :+ i\n                x /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsym588xh.scala:23)\n\tat Problem.main(tmpsym588xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = ListBuffer[Long]()\n        var m = n\n        var\
    \ i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors += i\n                m /= i\n            } else {\n          \
    \      i += 1\n            }\n        }\n        factors.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2\n        while (i <= m) {\n            if (m % i == 0) {\n               \
    \ factors = factors :+ i\n                m /= i\n            } else {\n     \
    \           i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var result = List[Long]()\n        var nn = n\n        for (i <-\
    \ 2L to n) {\n            while (nn % i == 0) {\n                result = i ::\
    \ result\n                nn /= i\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphlgb3nzy.scala:22)\n\tat Problem.main(tmphlgb3nzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = ListBuffer[Long]()\n        var m = n\n        for\
    \ (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n            \
    \    factors += i\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors += m\n        factors.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n        \
    \        factors += i\n                m /= i\n            }\n        }\n    \
    \    if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ for (i <- 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            }\n        }\n  \
    \      if (m > 1) factors += m\n        factors.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ while (m % 2 == 0) {\n            factors += 2\n            m /= 2\n       \
    \ }\n        var i = 3\n        while (i <= sqrt(m).toInt) {\n            while\
    \ (m % i == 0) {\n                factors += i\n                m /= i\n     \
    \       }\n            i += 2\n        }\n        if (m > 1) factors += m\n  \
    \      factors.toList\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        if (n == 1) return List(1)\n        var factors = List[Long]()\n\
    \        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n            while\
    \ (m % i == 0) {\n                factors = i :: factors\n                m /=\
    \ i\n            }\n        }\n        if (m != 1) factors = m :: factors\n  \
    \      factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5v3esez8.scala:24)\n\tat Problem.main(tmp5v3esez8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcon6av68.scala:25)\n\tat Problem.main(tmpcon6av68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var nn = n\n        while (nn\
    \ % 2 == 0) {\n            factors = 2 :: factors\n            nn /= 2\n     \
    \   }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while (nn\
    \ % i == 0) {\n                factors = i :: factors\n                nn /= i\n\
    \            }\n            i += 2\n        }\n        if (nn > 1) factors = nn\
    \ :: factors\n        factors\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplz9p7atn.scala:29)\n\tat Problem.main(tmplz9p7atn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var i =\
    \ 2L\n        while (i <= x) {\n            if (x % i == 0) {\n              \
    \  factors = factors :+ i\n                x /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var m = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n       \
    \         factors = i :: factors\n                m /= i\n            }\n    \
    \        i += 1\n        }\n        if (m > 1) factors = m :: factors\n      \
    \  factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4nuchdo.scala:25)\n\tat Problem.main(tmpt4nuchdo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ArrayBuffer[Long]\n        var m = n\n      \
    \  var i = 2L\n        while (i * i <= m) {\n            while (m % i == 0) {\n\
    \                factors += i\n                m /= i\n            }\n       \
    \     i += 1\n        }\n        if (m > 1) factors += m\n        factors.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var m = n\n        var factors = List[Long]()\n        for (i <-\
    \ 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13rqj0g2.scala:23)\n\tat Problem.main(tmp13rqj0g2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2\n        while (i <= m) {\n            if (m % i == 0) {\n               \
    \ factors = factors :+ i\n                m /= i\n            } else {\n     \
    \           i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var nn = n\n      \
    \  var i = 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n   \
    \             factors += i\n                nn /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        factors.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2 to sqrt(n).toInt) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrwgaxtm.scala:23)\n\tat Problem.main(tmpfrwgaxtm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i * i <= nn) {\n            while (nn % i == 0) {\n     \
    \           factors = factors :+ i\n                nn /= i\n            }\n \
    \           i += 1\n        }\n        if (nn > 1) factors = factors :+ nn\n \
    \       factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        for (i <-\
    \ 2L to sqrt(n).toLong) {\n            while (m % i == 0) {\n                factors\
    \ = i :: factors\n                m /= i\n            }\n        }\n        if\
    \ (m > 1) factors = m :: factors\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsym588xh.scala:23)\n\tat Problem.main(tmpsym588xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        for (i\
    \ <- 2 to sqrt(nn).toInt) {\n            while (nn % i == 0) {\n             \
    \   factors = factors :+ i\n                nn /= i\n            }\n        }\n\
    \        if (nn > 1) factors = factors :+ nn\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var x = n\n        var d =\
    \ 2\n        while (d * d <= x) {\n            while (x % d == 0) {\n        \
    \        factors = factors :+ d\n                x /= d\n            }\n     \
    \       d += 1\n        }\n        if (x > 1) factors = factors :+ x\n       \
    \ factors\n    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        for (i\
    \ <- 2 to sqrt(nn).toInt) {\n            while (nn % i == 0) {\n             \
    \   factors = factors :+ i\n                nn /= i\n            }\n        }\n\
    \        if (nn > 1) factors = factors :+ nn\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var nn = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i <= nn) {\n            if (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        factors\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var d =\
    \ 2\n        while (m > 1) {\n            while (m % d == 0) {\n             \
    \   factors = factors :+ d\n                m /= d\n            }\n          \
    \  d += 1\n        }\n        factors\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var m = n\n        var factors = List[Long]()\n        var i =\
    \ 2L\n        while (i * i <= m) {\n            if (m % i == 0) {\n          \
    \      factors = factors :+ i\n                m /= i\n            } else i +=\
    \ 1\n        }\n        factors :+ m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n    assert(factorize((4l)).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n\
    \    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        var factors = List[Long]()\n        var m = n\n        var i =\
    \ 2L\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors = factors :+ i\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        factors\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    def factorize(n : Long) : List[Long]\
    \ = {\n        val factors = new ListBuffer[Long]\n        var m = n\n       \
    \ var i = 2L\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors += i\n                m /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        factors.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
    \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n   \
    \ assert(factorize((8l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(factorize((57l)).equals((List[Long](3l.toLong, 19l.toLong))));\n \
    \   assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong, 19l.toLong,\
    \ 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
    \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028280
