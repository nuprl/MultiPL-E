name: HumanEval_147_get_max_triples
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
  \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
  \ is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        var count = 0L\n        for (i <- 1L to n) {\n            for\
    \ (j <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n           \
    \         if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1) = i\
    \ * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt - 2)\
    \ {\n            for (j <- i + 1 until n.toInt - 1) {\n                for (k\
    \ <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) {\n \
    \           a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n    \
    \    for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2)\
    \ {\n                for (k <- j + 1 to n.toInt - 1) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n    \
    \                }\n                }\n            }\n        }\n        count",
  "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k - i - j\
    \ - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k -\
    \ 1) + (i + j + k) + 1\n        // = (i + j + k) * (i + j + k - 1 + 1) + 1\n \
    \       // = (i + j + k) * (i + j + k + 1) + 1\n        // = (i + j + k) * (i\
    \ + j + k + 1) + (i + j + k) + 1\n        // = (i + j + k) * (i + j + k + 2)\n\
    \        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j\
    \ + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j +\
    \ k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        //\
    \ = (i + j + k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n\
    \        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j\
    \ + k + 2)\n        // = (i + j + k) * (i + j + k + 2)\n        // = (i + j +\
    \ k) * (i + j + k + 2)\n        // = (i + j + k) * (i + j + k +", "        //\
    \ Let's first find the number of triples where a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n        // a[i] + a[j] + a[k] = 3 * x\n        // a[i] + a[j] = 3 * x\
    \ - a[k]\n        // a[i] + a[j] = 3 * x - (i * i - i + 1)\n        // a[i] +\
    \ a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n\
    \        // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 *\
    \ x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        //\
    \ a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j]\
    \ = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n  \
    \      // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x\
    \ - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        //\
    \ a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j] = 3 * x - i * i\
    \ + i - 1\n        // a[i] + a[j] = 3 * x - i * i + i - 1\n        // a[i] + a[j]\
    \ = 3 * x - i * i + i - 1\n        //", "        val a = ArrayBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) a += i * i - i + 1\n        var count = 0L\n\
    \        for (i <- 0 until a.length - 2) {\n            for (j <- i + 1 until\
    \ a.length - 1) {\n                for (k <- j + 1 until a.length) {\n       \
    \             if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = ArrayBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            a += i * i - i + 1\n        }\n\
    \        var count = 0L\n        for (i <- 0 until a.length - 2) {\n         \
    \   for (j <- i + 1 until a.length - 1) {\n                for (k <- j + 1 until\
    \ a.length) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count", "        val\
    \ a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a += i * i - i + 1\n\
    \        var count = 0L\n        for (i <- 0 until a.length - 2) {\n         \
    \   for (j <- i + 1 until a.length - 1) {\n                for (k <- j + 1 until\
    \ a.length) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count", "        val\
    \ a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            a +=\
    \ i * i - i + 1\n        }\n        var count = 0\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt)\
    \ {\n            for (j <- i + 1 until n.toInt) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ count += 1\n                }\n            }\n        }\n        count", " \
    \       // a[i] = i * i - i + 1 = i * (i - 1) + 1\n        // a[i] + a[j] + a[k]\
    \ = i * (i - 1) + j * (j - 1) + k * (k - 1) + 3\n        // a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j +\
    \ k) * (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) *\
    \ (i + j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i +\
    \ j + k - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k\
    \ - 1) / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1)\
    \ / 2 + 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 +\
    \ 3\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\n \
    \       // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\n      \
    \  // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) / 2 + 3\n        // a[i]\
    \ + a[j] + a[", "        val a = new Array[Long](n.toInt)\n        for (i <- 1\
    \ to n.toInt) a(i - 1) = i * i - i + 1\n        var result = 0L\n        for (i\
    \ <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n    \
    \            for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) result += 1\n                }\n            }\n   \
    \     }\n        result", "        // a[i] = i * i - i + 1\n        // a[i] +\
    \ a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i\
    \ * i + j * j + k * k - i - j - k + 3\n        // = (i + j + k) * (i + j + k)\
    \ - (i + j + k) + 3\n        // = (i + j + k) * (i + j + k - 1) + 2\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j +\
    \ k - 1) + (1 + 1)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (1)\n        // = (i + j + k) * (i + j + k - 1) + (1 - 1)\n \
    \       // = (i + j + k) * (i + j + k - 1) + (0)\n        // = (i + j + k) * (i\
    \ + j + k - 1)\n        // = (i + j + k) * (i + j + k - 1)\n        // = (i +\
    \ j + k) * (i + j + k - 1)\n        // = (i + j + k) * (i + j + k - 1)\n     \
    \   // = (i + j + k) * (i + j + k - 1)\n        // = (i + j + k) * (i + j + k\
    \ - 1)\n        // = (i + j + k) * (i + j + k - 1)\n        // = (i + j + k) *\
    \ (i + j + k - 1)\n        // = (i + j + k) * (i + j + k - 1)\n        // = (i\
    \ + j + k)", "        val a = new Array[Long](n.toInt)\n        for (i <- 0 until\
    \ n.toInt) a(i) = i * i - i + 1\n        var cnt = 0L\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) cnt += 1\n                }\n            }\n        }\n  \
    \      cnt", "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] =\
    \ 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n    \
    \    // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 *\
    \ (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) -\
    \ 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j +\
    \ k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n   \
    \     // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 *\
    \ (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j *\
    \ j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) -\
    \ 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j +\
    \ k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n   \
    \     // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 *\
    \ (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i", " \
    \       // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3\
    \ * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n        // a[i]\
    \ + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i - 1) * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 *\
    \ (i - 1) * (i - 1) + 3 * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a += i * i\
    \ - i + 1\n        var count = 0\n        for (i <- 0 until a.length - 2) {\n\
    \            for (j <- i + 1 until a.length - 1) {\n                for (k <-\
    \ j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k)) % 3 ==\
    \ 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) a += (i *\
    \ i - i + 1)\n        var count = 0L\n        for (i <- 0 until a.length - 2)\
    \ {\n            for (j <- i + 1 until a.length - 1) {\n                for (k\
    \ <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      a += i * i - i + 1\n        }\n        var count = 0\n        for (i <-\
    \ 0 until a.length - 2) {\n            for (j <- i + 1 until a.length - 1) {\n\
    \                for (k <- j + 1 until a.length) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        // a[i] = i * i - i + 1\n        // a[i] + a[j]\
    \ + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        // = i * i +\
    \ j * j + k * k - i - j - k + 3\n        // = (i + j + k) * (i + j + k) - (i +\
    \ j + k) + 3\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k)\
    \ * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n    \
    \    // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j\
    \ + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) + 2\n        // = (i\
    \ + j + k) * (", "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k]\
    \ = 3 * i * i - 3 * i + 3 = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * a[i]\n        // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j]\
    \ + a[k] = 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\
    \ / 3\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j]\
    \ + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n\
    \        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] +\
    \ a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n\
    \        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] +\
    \ a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n\
    \        // a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n        // a[i] + a[j] +\
    \ a[k] = a[i] + a[j]", "        // Let's first find the number of triples that\
    \ are multiples of 3.\n        // For each i, there are (n - i) / 3 possible j's,\
    \ and (n - j) / 3 possible k's.\n        // So the number of triples that are\
    \ multiples of 3 is:\n        // sum(i = 1 to n) (n - i) / 3 * (n - i) / 3\n \
    \       // = sum(i = 1 to n) (n^2 - 2n * i + i^2) / 9\n        // = sum(i = 1\
    \ to n) (n^2 - 2n * i + i^2 - 9 * i + 9) / 9\n        // = sum(i = 1 to n) (n^2\
    \ - 2n * i + i^2 - 9 * i + 9 - i^2 + i) / 9\n        // = sum(i = 1 to n) (n^2\
    \ - 2n * i - 8 * i + 9) / 9\n        // = sum(i = 1 to n) (n^2 - 2n * i - 8 *\
    \ i + 9 - n^2 + n) / 9\n        // = sum(i = 1 to n) (n - 2 * i - 8 + 9 - n) /\
    \ 9\n        // = sum(i = 1 to n) (1 - 2 * i) / 9\n        // = (n - 2 * (1 +\
    \ 2 + ... + n)) / 9\n        // = (n - 2 * n * (n + 1) / 2) / 9\n        // =\
    \ (n - n * (n + 1)) / 9\n        // = n * (n - 1) / 9\n        // = n * (n - 1)\
    \ / 3 * 3 / 9\n        // = n * (n - 1) / 3 * 1 / 3\n        // = n * (n - 1)\
    \ / 9\n        val triples = n * (n - 1) / 9\n        // Now let's find the number\
    \ of triples that are not multiples of 3.\n        // For each i, there are (n\
    \ - i) / 3 possible j's, and (n - j) / 3 possible k's.\n        // So the number\
    \ of triples that are not multiples of 3 is:", "        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0L\n        for (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n \
    \               for (k <- j + 1L to n) {\n                    if ((i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count", "        var count = 0L\n        for (i <- 1L to n) {\n      \
    \      for (j <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n  \
    \                  if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k - i - j\
    \ - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k -\
    \ 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n        //\
    \ = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k\
    \ - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i\
    \ + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1)\
    \ + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n  \
    \      // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (2)\n        // =", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        // a[i] = i * i - i + 1\n      \
    \  // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n   \
    \     // = i * i + j * j + k * k - i - j - k + 3\n        // = (i + j + k) * (i\
    \ + j + k) - (i + j + k) + 3\n        // = (i + j + k) * (i + j + k - 1) + 2\n\
    \        // = (i + j + k) * (i + j + k - 1) + 1 + 1\n        // = (i + j + k)\
    \ * (i + j + k - 1) + (1 + 1)\n        // = (i + j + k) * (i + j + k - 1) + (1\
    \ + 1)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) *\
    \ (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n  \
    \      // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i +\
    \ j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n       ",
  "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n   \
    \         a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n       \
    \ for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n\
    \                for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        var count = 0L\n        for (i <- 1L to n) {\n\
    \            for (j <- i + 1L to n) {\n                for (k <- j + 1L to n)\
    \ {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0) {\n                        count += 1\n                    }\n     \
    \           }\n            }\n        }\n        count", "        var count =\
    \ 0L\n        for (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n   \
    \             for (k <- j + 1L to n) {\n                    if ((i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n \
    \           }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i) = i * i\
    \ - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n\
    \            for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j\
    \ + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ count += 1\n                }\n            }\n        }\n        count", " \
    \       val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n  \
    \          a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n      \
    \  for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2)\
    \ {\n                for (k <- j + 1 to n.toInt - 1) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n\
    \        }\n        count", "        val a = new Array[Long](n.toInt)\n      \
    \  for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n        }\n\
    \        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n            for\
    \ (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt -\
    \ 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n           \
    \             count += 1\n                    }\n                }\n         \
    \   }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        var count = 0L\n        for (i <-\
    \ 1L to n) {\n            for (j <- i + 1L to n) {\n                for (k <-\
    \ j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1\
    \ to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i\
    \ <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n\
    \                for (k <- j + 1 until n.toInt) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        var count = 0L\n        for (i <- 1L to n) {\n\
    \            for (j <- i + 1L to n) {\n                for (k <- j + 1L to n)\
    \ {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0) {\n                        count += 1\n                    }\n     \
    \           }\n            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0L\n        for (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n \
    \               for (k <- j + 1L to n) {\n                    if ((i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n   \
    \         }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        var ans = 0L\n        for (i <-\
    \ 1L to n) {\n            for (j <- i + 1L to n) {\n                for (k <-\
    \ j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0) ans += 1\n                }\n            }\n        }\n\
    \        ans", "        var count = 0L\n        for (i <- 1L to n) {\n       \
    \     for (j <- i + 1L to n) {\n                for (k <- j + 1L to n) {\n   \
    \                 if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i -\
    \ i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i +\
    \ 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[", "    \
    \    val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        var count = 0L\n        for (i <- 1L to n) {\n            for (j <- i +\
    \ 1L to n) {\n                for (k <- j + 1L to n) {\n                    if\
    \ ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n    \
    \            }\n            }\n        }\n        count", "        val a = new\
    \ Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i - i +\
    \ 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n         \
    \   for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i -\
    \ i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k - i - j - k +\
    \ 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k - 1) +\
    \ 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n        // = (i\
    \ + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1)\
    \ + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (1)\n        // = (i\
    \ + j + k) * (i + j + k - 1) + (1 - 1)\n        // = (i + j + k) * (i + j + k\
    \ - 1) + (0)\n        // = (i + j + k) * (i + j + k - 1)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (0)\n        // = (i + j + k) * (i + j + k - 1) + (1\
    \ - 1)\n        // = (i + j + k) * (i + j + k - 1) + (1)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1)\
    \ + (2)\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n        // = (i\
    \ + j + k) * (i + j + k - 1) + 1", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n         \
    \               count += 1\n                    }\n                }\n       \
    \     }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1\
    \ + 3 * k * k - 3 * k + 1\n        // = 3 * (i * i + j * j + k * k) - 3 * (i +\
    \ j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k *\
    \ k) - 3 * (i + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i\
    \ + j + k) + 3\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n\
    \        // = 3 * (i * i", "        val a = new Array[Long](n.toInt)\n       \
    \ for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n \
    \       for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i +\
    \ 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[", "    \
    \    val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1)\
    \ = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3\
    \ * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n        // = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // = 3 * (i + j + k) * (i\
    \ + j + k) - 3 * (i + j + k) + 3\n        // = 3 * (i + j + k) * (i + j + k -\
    \ 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 *\
    \ (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k\
    \ - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3\
    \ * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j +\
    \ k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // =\
    \ 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j\
    \ + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        //\
    \ = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3 * (i + j + k) * (i +\
    \ j + k - 1) + 3\n        // = 3 * (i + j + k) * (i + j + k - 1) + 3\n       \
    \ // = 3 * (i + j + k) * (i + j + k - 1) + 3\n        // = 3", "        val a\
    \ = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) {\n            a(i\
    \ - 1) = i * i - i + 1\n        }\n        var count = 0\n        for (i <- 0\
    \ to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n         \
    \       for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) {\n                        count += 1\n                  \
    \  }\n                }\n            }\n        }\n        count", "        //\
    \ Let's say we have a triple (a[i], a[j], a[k]) where i < j < k.\n        // Then\
    \ a[i] + a[j] + a[k] = 3 * (i * i - i + 1) + 3 * (j * j - j + 1) + 3 * (k * k\
    \ - k + 1)\n        // = 3 * (i * i + j * j + k * k - i - j - k + 3)\n       \
    \ // = 3 * (i + j + k) * (i + j + k - 3)\n        // So a[i] + a[j] + a[k] is\
    \ a multiple of 3 if and only if (i + j + k) * (i + j + k - 3) is a multiple of\
    \ 3.\n        // Let's say (i + j + k) * (i + j + k - 3) = 3 * m.\n        //\
    \ Then i + j + k = 3 * m / (i + j + k - 3).\n        // So i + j + k is a multiple\
    \ of 3.\n        // Let's say i + j + k = 3 * l.\n        // Then i + j + k -\
    \ 3 = 3 * (l - 1).\n        // So i + j + k - 3 is a multiple of 3.\n        //\
    \ So i + j + k is a multiple of 3.\n        // So (i + j + k) * (i + j + k - 3)\
    \ is a multiple of 3.\n        // So a[i] + a[j] + a[k] is a multiple of 3.\n\
    \        // So (a[i], a[j], a[k]) is a valid triple.\n        // So we can conclude\
    \ that a[i] + a[j] + a[k] is a multiple of 3 if and only if i + j + k is a multiple\
    \ of 3.\n        // So we can conclude that a[i] + a[j] + a[k] is a multiple of\
    \ 3 if and only if i, j, k are all multiples of 3.\n        // So we can conclude\
    \ that a[i] + a[j] + a[k] is a multiple of 3 if and only if i, j, k are", "  \
    \      var count = 0L\n        val a = new Array[Long](n.toInt)\n        for (i\
    \ <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n        }\n       \
    \ for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n\
    \                for (k <- j + 1 until n.toInt) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        val a = new Array[Long](n.toInt)\n        for\
    \ (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n        }\n    \
    \    var count = 0L\n        for (i <- 0 until n.toInt) {\n            for (j\
    \ <- i + 1 until n.toInt) {\n                if ((a(i) + a(j)) % 3 == 0) {\n \
    \                   for (k <- j + 1 until n.toInt) {\n                       \
    \ if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                            count += 1\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        count", "        // a[i] = i * i - i + 1\n       \
    \ // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 *\
    \ k * k - 3 * k + 1\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\n        // = 3 * (i * i + j * j + k * k - i - j - k) + 3\n        // =\
    \ 3 * (i * i + j * j + k * k - i - j - k + 1)\n        // = 3 * (i * i + j * j\
    \ + k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i + j +\
    \ k))\n        // = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i + j + k) *\
    \ (i + j + k) - (i + j + k) * (i + j + k))\n        // = 3 * (i * i + j * j +\
    \ k * k - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i + j + k))\n\
    \        // = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i + j + k) * (i +\
    \ j + k) - (i + j + k) * (i + j + k))\n        // = 3 * (i * i + j * j + k * k\
    \ - i - j - k + 1 + (i + j + k) * (i + j + k) - (i + j + k) * (i + j + k))\n \
    \       // = 3 * (i * i + j * j + k * k - i - j - k + 1 + (i + j + k) * (i + j\
    \ + k) - (i + j + k) * (i + j + k))\n        // = 3 * (i * i +", "        // Let's\
    \ say we have a[i] + a[j] + a[k] = 3 * x.\n        // Then, i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1 = 3 * x.\n        // Then, i * i + j * j + k * k\
    \ - i - j - k + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i +\
    \ j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i + j + k)\
    \ + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 =\
    \ 3 * x.\n        // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n\
    \        // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n     \
    \   // Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        //\
    \ Then, (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then,\
    \ (i + j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i +\
    \ j + k) * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i + j + k)\
    \ * (i + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i\
    \ + j + k) - (i + j + k) + 3 = 3 * x.\n        // Then, (i + j + k) * (i + j +\
    \ k) - (i + j + k) + 3 = 3 * x.\n        //", "        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       \
    \ // (1, 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3,\
    \ 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n\
    \        // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       ",
  "        var count = 0L\n        for (i <- 1L to n - 2) {\n            for (j <-\
    \ i + 1L to n - 1) {\n                for (k <- j + 1L to n) {\n             \
    \       if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count +=\
    \ 1\n                }\n            }\n        }\n        count", "        //\
    \ a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\
    \ = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 * a[i]\n        //\
    \ a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k] = 3 * a[k]\n  \
    \      // a[i] + a[j] + a[k] = 3 * a[i] = 3 * a[j] = 3 * a[k]\n        // a[i]\
    \ = a[j] = a[k]\n        // a[i] = a[j] = a[k] = i * i - i + 1\n        // i *\
    \ i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n      \
    \  // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n\
    \        // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i -\
    \ i + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 =\
    \ i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i -\
    \ i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n        //\
    \ i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i + 1\n  \
    \      // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i * i - i\
    \ + 1\n        // i * i - i + 1 = i * i - i + 1\n        // i * i - i + 1 = i\
    \ * i - i", "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to\
    \ n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <-\
    \ 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n       \
    \         for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k]\
    \ = 3 * i * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[", "        val a = new Array[Long](n.toInt)\n        for (i <-\
    \ 0 until n.toInt) {\n            a(i) = i * i - i + 1\n        }\n        var\
    \ count = 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <-\
    \ i + 1 until n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n\
    \                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n        count", "        val a = new Array[Long](n.toInt)\n       \
    \ for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n  \
    \      for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        var count = 0L\n        for (i <-\
    \ 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n                for\
    \ (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n  \
    \      }\n        count", "        val a = new Array[Long](n.toInt)\n        for\
    \ (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n      \
    \  for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        var count = 0L\n        for (i <-\
    \ 1L to n) {\n            for (j <- i + 1L to n) {\n                for (k <-\
    \ j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        val a = new Array[Long](n.toInt)\n        for (i <-\
    \ 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n        }\n        var\
    \ count = 0\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i +\
    \ 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n   \
    \                 if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                     \
    \   count += 1\n                    }\n                }\n            }\n    \
    \    }\n        count", "        val a = new Array[Long](n.toInt)\n        for\
    \ (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n      \
    \  for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        val a = Array.fill(n.toInt)(0L)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n         \
    \               count += 1\n                    }\n                }\n       \
    \     }\n        }\n        count", "        var count = 0L\n        for (i <-\
    \ 1L to n) {\n            for (j <- i + 1L to n) {\n                for (k <-\
    \ j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k]\
    \ = 3 * i * i - 3 * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * a[i]\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[j]\n        // a[i] + a[j] + a[k] = 3 * a[k]\n        // a[i] + a[j] + a[k]\
    \ = 3 * a[i] + 3 * a[j] + 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var cnt = 0L\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n                }\n         \
    \   }\n        }\n        cnt", "        val a = Array.fill(n.toInt)(0)\n    \
    \    for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        // a[i] = i * i - i + 1\n       \
    \ // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 *\
    \ k * k - 3 * k + 1\n        // = 3 * (i * i + j * j + k * k) - 3 * (i + j + k)\
    \ + 3\n        // = 3 * (i + j + k) * (i + j + k) - 3 * (i + j + k) + 3\n    \
    \    // = 3 * (i + j + k) * (i + j + k - 1) + 1\n        // i + j + k = (a[i]\
    \ + a[j] + a[k]) / 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] - 3) / 3\n\
    \        // i + j + k - 1 = (a[i] + a[j] + a[k] - 1) / 3\n        // i + j + k\
    \ - 1 = (a[i] + a[j] + a[k] + 1) / 3\n        // i + j + k - 1 = (a[i] + a[j]\
    \ + a[k] + 2) / 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] + 3) / 3\n \
    \       // i + j + k - 1 = (a[i] + a[j] + a[k] + 4) / 3\n        // i + j + k\
    \ - 1 = (a[i] + a[j] + a[k] + 5) / 3\n        // i + j + k - 1 = (a[i] + a[j]\
    \ + a[k] + 6) / 3\n        // i + j + k - 1 = (a[i] + a[j] + a[k] + 7) / 3\n \
    \       // i + j + k - 1 = (a[i] + a[j] + a[k] + 8) / 3\n        // i + j + k\
    \ - 1 = (a[i] + a[", "        val a = new Array[Long](n.toInt)\n        for (i\
    \ <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n        for\
    \ (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n \
    \               for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        val a = Array.fill(n.toInt)(0)\n        for (i\
    \ <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n        for\
    \ (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1)\
    \ {\n                for (k <- j + 1 until n.toInt) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n\
    \        }\n        count", "        val a = new Array[Long](n.toInt)\n      \
    \  for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n \
    \       for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) {\n            a(i) = i * i - i + 1\n    \
    \    }\n        var count = 0L\n        for (i <- 0 until n.toInt - 2) {\n   \
    \         for (j <- i + 1 until n.toInt - 1) {\n                for (k <- j +\
    \ 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        // (1,\
    \ 7, 13)\n        // (1, 3, 7)\n        // (1, 3, 13)\n        // (1, 7, 21)\n\
    \        // (1, 3, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n      \
    \  // (3, 7, 21)\n        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1,\
    \ 3, 7, 13)\n        // (1, 3, 7, 21)\n        // (1, 3, 13, 21)\n        // (1,\
    \ 7, 13, 21)\n        // (3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n      \
    \  // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13,\
    \ 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        //\
    \ (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n\
    \        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3,\
    \ 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n   \
    \     // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7,\
    \ 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n      \
    \  // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13,\
    \ 21)\n        // (1, 3, 7, 13, 21)\n        // (1, 3, 7, 13, 21)\n        //\
    \ (1, 3, 7, 13, 21)\n       ", "        val a = new Array[Long](n.toInt)\n   \
    \     for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        // Let's say a[i] + a[j] +\
    \ a[k] = 3m.\n        // Then, i * i - i + 1 + j * j - j + 1 + k * k - k + 1 =\
    \ 3m.\n        // Then, i * i + j * j + k * k - i - j - k + 3 = 3m.\n        //\
    \ Then, i * i + j * j + k * k - i - j - k = 3m - 3.\n        // Then, i * i +\
    \ j * j + k * k - i - j - k = 3(m - 1).\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m - 1.\n        // Then, i * i + j * j + k *\
    \ k - i - j - k = 3m' where m' = m", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n         \
    \               count += 1\n                    }\n                }\n       \
    \     }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 1 + 3 * j * j - 3 * j + 1\
    \ + 3 * k * k - 3 * k + 1\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j\
    \ + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i +\
    \ j * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n   \
    \     // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) +\
    \ 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j\
    \ + k) + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i + j * j + k * k) - 3 *\
    \ (i +", "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 *\
    \ i * i - 3 * i + 3 = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 *\
    \ a[i]\n        // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k]\
    \ = 3 * a[k]\n        // a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\n\
    \        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] +", "        val a = new Array[Long](n.toInt)\n  \
    \      for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        // The number of triples is\
    \ equal to the number of pairs of numbers\n        // whose sum is divisible by\
    \ 3.\n        // The number of pairs of numbers whose sum is divisible by 3 is\
    \ equal to\n        // the number of numbers whose remainder is 0 plus the number\
    \ of numbers\n        // whose remainder is 1 plus the number of numbers whose\
    \ remainder is 2.\n        // The number of numbers whose remainder is 0 is equal\
    \ to the number of\n        // numbers whose remainder is 2.\n        // The number\
    \ of numbers whose remainder is 1 is equal to the number of\n        // numbers\
    \ whose remainder is 2 plus 1.\n        // Therefore, the number of pairs of numbers\
    \ whose sum is divisible by 3 is\n        // equal to the number of numbers whose\
    \ remainder is 0 plus the number of\n        // numbers whose remainder is 1 plus\
    \ 2 * the number of numbers whose\n        // remainder is 2.\n        // The\
    \ number of numbers whose remainder is 0 is equal to floor(n / 3).\n        //\
    \ The number of numbers whose remainder is 1 is equal to floor(n / 3) + 1.\n \
    \       // The number of numbers whose remainder is 2 is equal to floor(n / 3).\n\
    \        // Therefore, the number of pairs of numbers whose sum is divisible by\
    \ 3 is\n        // equal to floor(n / 3) + floor(n / 3) + 1 + 2 * floor(n / 3)\
    \ =\n        // 3 * floor(n / 3) + 1.\n        // The number of triples is equal\
    \ to the number of pairs of numbers whose\n        // sum is divisible by 3.\n\
    \        // Therefore, the number of triples is equal to 3 * floor(n / 3) + 1.\n\
    \        3 * (n / 3) + 1", "        val a = new Array[Long](n.toInt)\n       \
    \ for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count = 0L\n  \
    \      for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            val a = i * i - i + 1\n            for (j\
    \ <- i + 1L to n - 1) {\n                val b = j * j - j + 1\n             \
    \   if ((a + b) % 3 == 0) {\n                    val k = (a + b) / 3\n       \
    \             if (k > j && k <= n) {\n                        count += 1\n   \
    \                 }\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1)\
    \ = i * i - i + 1\n        var count = 0\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3\
    \ * i + 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n        // a[i]\
    \ + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] +\
    \ a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i\
    \ * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n    \
    \    // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) +\
    \ 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[", " \
    \       var count = 0L\n        for (i <- 1L to n) {\n            for (j <- i\
    \ + 1L to n) {\n                for (k <- j + 1L to n) {\n                   \
    \ if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n \
    \               }\n            }\n        }\n        count", "        var count\
    \ = 0L\n        for (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n \
    \               for (k <- j + 1L to n) {\n                    if ((i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        var count = 0L\n        for\
    \ (i <- 1L to n - 2) {\n            for (j <- i + 1L to n - 1) {\n           \
    \     for (k <- j + 1L to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count", "        // We can see that the only valid triples\
    \ are when a[i] + a[j] + a[k] = 3.\n        // This means that a[i] + a[j] = 2.\n\
    \        // We can see that a[i] = 1, a[j] = 1, a[k] = 1 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 3, a[k] = 3 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 5, a[k] = 5 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 7, a[k] = 7 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 9, a[k] = 9 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 11, a[k] = 11 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 13, a[k] = 13 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 15, a[k] = 15 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 17, a[k] = 17 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 19, a[k] = 19 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 21, a[k] = 21 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 23, a[k] = 23 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 25, a[k] = 25 is a valid triple.\n\
    \        // We can also see that a[i] = 1, a[j] = 27, a[k] = 27 is a valid triple.\n\
    \       ", "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt)\
    \ {\n            a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n\
    \        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count", "        var count = 0L\n        for (i <-\
    \ 1L to n) {\n            for (j <- i + 1L to n) {\n                for (k <-\
    \ j + 1L to n) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0) count += 1\n                }\n            }\n        }\n\
    \        count", "        // 3x + 2y + z = 0\n        // x + y + z = 0\n     \
    \   // x + y + z = 3\n        // x + y + z = 6\n        // x + y + z = 9\n   \
    \     // x + y + z = 12\n        // x + y + z = 15\n        // x + y + z = 18\n\
    \        // x + y + z = 21\n        // x + y + z = 24\n        // x + y + z =\
    \ 27\n        // x + y + z = 30\n        // x + y + z = 33\n        // x + y +\
    \ z = 36\n        // x + y + z = 39\n        // x + y + z = 42\n        // x +\
    \ y + z = 45\n        // x + y + z = 48\n        // x + y + z = 51\n        //\
    \ x + y + z = 54\n        // x + y + z = 57\n        // x + y + z = 60\n     \
    \   // x + y + z = 63\n        // x + y + z = 66\n        // x + y + z = 69\n\
    \        // x + y + z = 72\n        // x + y + z = 75\n        // x + y + z =\
    \ 78\n        // x + y + z = 81\n        // x + y + z = 84\n        // x + y +\
    \ z = 87\n        // x + y + z = 90\n        // x + y + z = 93\n        // x +\
    \ y + z = 96\n        // x + y + z = 99\n        // x + y + z = 102\n        //\
    \ x + y + z = 105\n        // x + y + z = 108\n        // x + y + z = 111\n  \
    \      // x + y + z = 114\n        // x + y + z = 117\n        // x + y + z =\
    \ 120\n        // x + y + z = 123\n        // x + y + z = 126\n        // x +\
    \ y + z = 129\n        // x + y + z = 132\n        // x + y + z = 135\n      \
    \  // x + y + z = 138\n        // x + y + z = 141\n        // x + y + z = 144\n\
    \        // x + y + z = 147", "        val a = new Array[Long](n.toInt)\n    \
    \    for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n       \
    \ }\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n         \
    \   for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0L\n        for (i <- 1L to n - 2) {\n            for (j <- i + 1L to n -\
    \ 1) {\n                for (k <- j + 1L to n) {\n                    if ((i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                   \
    \     count += 1\n                    }\n                }\n            }\n  \
    \      }\n        count", "        var count = 0L\n        for (i <- 1 to n.toInt)\
    \ {\n            for (j <- i + 1 to n.toInt) {\n                for (k <- j +\
    \ 1 to n.toInt) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n      \
    \  }\n        count", "        var count = 0L\n        for (i <- 1L to n) {\n\
    \            for (j <- i + 1L to n) {\n                for (k <- j + 1L to n)\
    \ {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3)\
    \ {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k <-\
    \ j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 ==\
    \ 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 1 to n.toInt) {\n\
    \            a(i - 1) = i * i - i + 1\n        }\n        var count = 0L\n   \
    \     for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt -\
    \ 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                  \
    \  if ((a(i) + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        count",
  "        var count = 0L\n        for (i <- 1L to n) {\n            for (j <- i +\
    \ 1L to n) {\n                for (k <- j + 1L to n) {\n                    if\
    \ ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n    \
    \            }\n            }\n        }\n        count", "        val a = new\
    \ Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i - i +\
    \ 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n         \
    \   for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i - i\
    \ + 1\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n        \
    \    for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) {\n            a(i\
    \ - 1) = i * i - i + 1\n        }\n        var count = 0L\n        for (i <- 0\
    \ to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n         \
    \       for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) {\n                        count += 1\n                  \
    \  }\n                }\n            }\n        }\n        count", "        val\
    \ a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i *\
    \ i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n \
    \           for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1\
    \ to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n        \
    \    a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n        for (i\
    \ <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n    \
    \            for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        // a[i] = i * i - i + 1\n        // a[i] + a[j]\
    \ + a[k] = 3 * i * i - 3 * i + 3\n        // = 3 * (i * i - i + 1)\n        //\
    \ = 3 * a[i]\n        // a[i] + a[j] + a[k] = 3 * a[i]\n        // a[j] + a[k]\
    \ = 2 * a[i]\n        // a[j] + a[k] = 2 * (i * i - i + 1)\n        // a[j] +\
    \ a[k] = 2 * i * i - 2 * i + 2\n        // a[j] + a[k] = 2 * (i * i - i + 1)\n\
    \        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n      \
    \  // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j]\
    \ + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k]\
    \ = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 *\
    \ a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n\
    \        // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n      \
    \  // a[j] + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[j]\
    \ + a[k] = 2 * a[i]\n        // a[j] + a[k] = 2 * a[i]\n        // a[", "    \
    \    val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n     \
    \       a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n        for\
    \ (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n \
    \               for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        val a = Array.fill(n.toInt)(0)\n        for (i\
    \ <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0\n        for\
    \ (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1)\
    \ {\n                for (k <- j + 1 until n.toInt) {\n                    if\
    \ ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n\
    \        }\n        count", "        val a = Array.fill(n.toInt)(0)\n        for\
    \ (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0\n      \
    \  for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n       \
    \     }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i -\
    \ i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i +\
    \ 3\n        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i\
    \ - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        //\
    \ a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] =\
    \ 3 * (i * (i - 1) + 1)\n        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * (i - 1) + 1)\n        // a[", "    \
    \    // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1\n        // a[i] + a[j] + a[k] = (i + j + k) *\
    \ (i + j + k) - (i + j + k) + 3\n        // a[i] + a[j] + a[k] = (i + j + k) *\
    \ (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j +\
    \ k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) +\
    \ 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n     \
    \   // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n        // a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] +\
    \ a[k] = (i + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i\
    \ + j + k) * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k)\
    \ * (i + j + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k - 1) + 2\n        // a[i] + a[j] + a[k] = (i + j + k) * (i + j + k - 1)\
    \ + 2\n        // a[i", "        var count = 0L\n        for (i <- 1L to n - 2)\
    \ {\n            for (j <- i + 1L to n - 1) {\n                for (k <- j + 1L\
    \ to n) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0) count += 1\n                }\n            }\n        }\n   \
    \     count", "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to\
    \ n.toInt) a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <-\
    \ 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n \
    \               for (k <- j + 1 until n.toInt) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        // The sum of the first n odd numbers is n^2.\n\
    \        // The sum of the first n even numbers is n^2 - n.\n        // The sum\
    \ of the first n numbers is n(n + 1) / 2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even numbers is n^2 - n.\n\
    \        // The sum of the first n numbers is n(n + 1) / 2.\n        // The sum\
    \ of the first n odd numbers is n^2.\n        // The sum of the first n even numbers\
    \ is n^2 - n.\n        // The sum of the first n numbers is n(n + 1) / 2.\n  \
    \      // The sum of the first n odd numbers is n^2.\n        // The sum of the\
    \ first n even numbers is n^2 - n.\n        // The sum of the first n numbers\
    \ is n(n + 1) / 2.\n        // The sum of the first n odd numbers is n^2.\n  \
    \      // The sum of the first n even numbers is n^2 - n.\n        // The sum\
    \ of the first n numbers is n(n + 1) / 2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even numbers is n^2 - n.\n\
    \        // The sum of the first n numbers is n(n + 1) / 2.\n        // The sum\
    \ of the first n odd numbers is n^2.\n        // The sum of the first n even numbers\
    \ is n^2 - n.\n        // The sum of the first n numbers is n(n + 1) / 2.\n  \
    \      // The sum of the first n odd numbers is n^2.\n        // The sum of the\
    \ first n even numbers is n^2 - n.\n        // The sum of the first n numbers\
    \ is n(n + 1) / 2.\n        // The sum of the first n odd numbers is n^2.\n  \
    \      // The sum of the first n even numbers is n^2 - n.\n        // The sum\
    \ of the first n numbers is n(n + 1) / 2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even", "        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var cnt = 0\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n                }\n         \
    \   }\n        }\n        cnt", "        // a[i] = i * i - i + 1\n        // a[i]\
    \ + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        // =\
    \ i * i + j * j + k * k - i - j - k + 3\n        // = (i + j + k) * (i + j + k)\
    \ - (i + j + k) + 3\n        // = (i + j + k) * (i + j + k - 1) + 2\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 1 + 1\n        // = (i + j + k) * (i + j +\
    \ k - 1) + (1 + 1)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n       \
    \ // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j\
    \ + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        //\
    \ = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k\
    \ - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i\
    \ + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1)\
    \ + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (2)\n        // =", "        val\
    \ a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i *\
    \ i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n \
    \           for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1\
    \ to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) =\
    \ i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n\
    \            for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j +\
    \ 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0)\
    \ count += 1\n                }\n            }\n        }\n        count", " \
    \       val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) a(i)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n   \
    \         a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n       \
    \ for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n\
    \                for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) count += 1\n                }\n            }\n    \
    \    }\n        count", "        var count = 0L\n        var i = 1L\n        while\
    \ (i <= n) {\n            var j = i + 1\n            while (j <= n) {\n      \
    \          var k = j + 1\n                while (k <= n) {\n                 \
    \   if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n\
    \                    k += 1\n                }\n                j += 1\n     \
    \       }\n            i += 1\n        }\n        count", "        val a = new\
    \ Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i - i +\
    \ 1\n        var count = 0L\n        for (i <- 0 to n.toInt - 3) {\n         \
    \   for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n            a(i -\
    \ 1) = i * i - i + 1\n        }\n        var count = 0\n        for (i <- 0 to\
    \ n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n            \
    \    for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) +\
    \ a(k)) % 3 == 0) {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n        count", "        val a =\
    \ Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1) = i * i - i\
    \ + 1\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n        \
    \    for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0L\n        for (i <- 1L to n - 2) {\n            for (j <- i + 1L to n -\
    \ 1) {\n                for (k <- j + 1L to n) {\n                    if ((i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n          \
    \      }\n            }\n        }\n        count", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count", "        // a[i] = i * i - i + 1\n\
    \        // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n\
    \        // = i * i + j * j + k * k - i - j - k + 3\n        // = (i + j + k)\
    \ * (i + j + k) - (i + j + k) + 3\n        // = (i + j + k) * (i + j + k - 1)\
    \ + 2\n        // = (i + j + k) * (i + j + k - 1) + 1 + 1\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (1 + 1)\n        // = (i + j + k) * (i + j + k - 1)\
    \ + (2)\n        // = (i + j + k) * (i + j + k - 1) + (2 - 1)\n        // = (i\
    \ + j + k) * (i + j + k - 1) + (3 - 2)\n        // = (i + j + k) * (i + j + k\
    \ - 1) + (3 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k)\
    \ * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3\
    \ - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i\
    \ +", "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt)\
    \ a(i - 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt\
    \ - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        // a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n        // = i * i + j * j + k * k - i - j\
    \ - k + 3\n        // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n        //\
    \ = (i + j + k) * (i + j + k - 1) + 2\n        // = (i + j + k) * (i + j + k -\
    \ 1) + 1 + 1\n        // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n        //\
    \ = (i + j + k) * (i + j + k - 1) + (2)\n        // = (i + j + k) * (i + j + k\
    \ - 1) + (2 - 1)\n        // = (i + j + k) * (i + j + k - 1) + (3 - 2)\n     \
    \   // = (i + j + k) * (i + j + k - 1) + (3 - 1)\n        // = (i + j + k) * (i\
    \ + j + k - 1) + (3)\n        // = (i + j + k) * (i + j + k - 1) + (3 + 0)\n \
    \       // = (i + j + k) * (i + j + k - 1) + (3 + 1 - 1)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (3 + 2 - 2)\n        // = (i + j + k) * (i + j + k\
    \ - 1) + (3 + 3 - 3)\n        // = (i + j + k) * (i + j + k - 1) + (3 + 4 - 4)\n\
    \        // = (i + j + k) * (i + j + k - 1) + (3 + 5 - 5)\n        // = (i + j\
    \ + k) * (i + j + k - 1) + (3 + 6", "        // (1, 7, 13)\n        // (1, 7,\
    \ 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3, 7, 21)\n\
    \        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n      \
    \  // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n        // (1,\
    \ 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3, 7, 21)\n\
    \        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n      \
    \  // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n        // (1,\
    \ 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3, 7, 21)\n\
    \        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n      \
    \  // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n        // (1,\
    \ 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3, 7, 21)\n\
    \        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n      \
    \  // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n        // (1,\
    \ 7, 21)\n        // (1, 13, 21)\n        // (3, 7, 13)\n        // (3, 7, 21)\n\
    \        // (3, 13, 21)\n        // (7, 13, 21)\n        // (1, 3, 7)\n      \
    \  // (1, 3, 13)\n        // (1, 3, 21)\n        // (1, 7, 13)\n       ", "  \
    \      val a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) a(i - 1)\
    \ = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt -\
    \ 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = Array.ofDim[Long](n.toInt)\n        for (i <- 0 until n.toInt)\
    \ a(i) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 until n.toInt\
    \ - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n                for\
    \ (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j) + a(k)) %\
    \ 3 == 0) count += 1\n                }\n            }\n        }\n        count",
  "        val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) a(i -\
    \ 1) = i * i - i + 1\n        var count = 0L\n        for (i <- 0 to n.toInt -\
    \ 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n                for (k\
    \ <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3\
    \ == 0) count += 1\n                }\n            }\n        }\n        count",
  "        var count = 0L\n        for (i <- 1L to n) {\n            for (j <- i +\
    \ 1L to n) {\n                for (k <- j + 1L to n) {\n                    if\
    \ ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n    \
    \            }\n            }\n        }\n        count", "        var count =\
    \ 0L\n        for (i <- 1L to n) {\n            for (j <- i + 1L to n) {\n   \
    \             for (k <- j + 1L to n) {\n                    if ((i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n \
    \           }\n        }\n        count", "        // a[i] = i * i - i + 1\n \
    \       // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n        // a[i] + a[j]\
    \ + a[k] = 3 * (i * i - i + 1)\n        // a[i] + a[j] + a[k] = 3 * a[i]\n   \
    \     // a[i] + a[j] + a[k] = 3 * a[j]\n        // a[i] + a[j] + a[k] = 3 * a[k]\n\
    \        // a[i] + a[j] + a[k] = 3 * a[i] + 3 * a[j] + 3 * a[k]\n        // a[i]\
    \ + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3\
    \ * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n\
    \        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i]\
    \ + a[j] + a[k])\n        // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n \
    \       // a[i] + a[j] + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j]\
    \ + a[k] = 3 * (a[i] + a[j] + a[k])\n        // a[i] + a[j] + a", "        val\
    \ a = Array.fill(n.toInt)(0)\n        for (i <- 1 to n.toInt) {\n            a(i\
    \ - 1) = i * i - i + 1\n        }\n        var count = 0\n        for (i <- 0\
    \ to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n         \
    \       for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) {\n                        count += 1\n                  \
    \  }\n                }\n            }\n        }\n        count", "        //\
    \ a[i] = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3\n\
    \        // a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n        // a[i] + a[j] +\
    \ a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k]\
    \ = 3 * (i - 1) * (i - 1) + 3 * i\n        // a[i] + a[j] + a[k] = 3 * (i - 1)\
    \ * (i - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i\
    \ - 1) + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1)\
    \ + 3 * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3\
    \ * (i - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i\
    \ - 1) + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1)\
    \ + 3\n        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n\
    \        // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (i - 1) + 3\n   \
    \     // a[i] + a[j] + a[k] = 3 * (i - 1) * (i - 1) + 3 * (", "        // a[i]\
    \ = i * i - i + 1\n        // a[i] + a[j] + a[k] = 3 * i * i - 3 * i + 3 * j *\
    \ j - 3 * j + 3 * k * k - 3 * k + 3\n        // = 3 * (i * i - i + j * j - j +\
    \ k * k - k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) +\
    \ 3 * (k - i) * (k - i) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j - k)\
    \ * (j - k) + 3 * (i - k) * (i - k) + 3\n        // = 3 * (i - j) * (i - j) +\
    \ 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n        // = 3 * (i - j)\
    \ * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n        // =\
    \ 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i - k) + 3\n\
    \        // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i - k) * (i\
    \ - k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j - k) + 3 * (i\
    \ - k) * (i - k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j - k) * (j -\
    \ k) + 3 * (i - k) * (i - k) + 3\n        // = 3 * (i - j) * (i - j) + 3 * (j\
    \ - k) * (j - k) + 3 * (i - k) * (i - k)", "        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0L\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
