name: HumanEval_148_bf
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // There are eight planets in our solar system: the closerst to the Sun \n\
  \    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
  \    // Uranus, Neptune.\n    // Write a function that takes two planet names as\
  \ strings planet1 and planet2. \n    // The function should return a tuple containing\
  \ all planets whose orbits are \n    // located between the orbit of planet1 and\
  \ the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The\
  \ function should return an empty tuple if planet1 or planet2\n    // are not correct\
  \ planet names. \n    // Examples\n    def bf(planet1 : String, planet2 : String)\
  \ : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"),\
  \ (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
  Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
  Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"\
  Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
  ), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\"\
  )).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n\
  \    }\n\n}\n"
completions: ["        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        val (min, max) = if (i1 < i2) (i1, i2) else (i2, i1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val idx1 = planets.indexOf(planet1)\n\
    \        val idx2 = planets.indexOf(planet2)\n        if (idx1 == -1 || idx2 ==\
    \ -1) return List()\n        val min = min(idx1, idx2)\n        val max = max(idx1,\
    \ idx2)\n        planets.slice(min + 1, max)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val index1 = planets.indexOf(planet1)\n\
    \        val index2 = planets.indexOf(planet2)\n        if (index1 == -1 || index2\
    \ == -1) return List()\n        if (index1 > index2) return planets.slice(index2,\
    \ index1 + 1)\n        planets.slice(index1, index2 + 1)", "        val planets\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n      \
    \  val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1) return\
    \ List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n     \
    \   planets.slice(min + 1, max)", "        val planets = List(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) List()\n        else if (i1 < i2) planets.slice(i1\
    \ + 1, i2)\n        else planets.slice(i2 + 1, i1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val idx1 = planets.indexOf(planet1)\n        val idx2\
    \ = planets.indexOf(planet2)\n        if (idx1 == -1 || idx2 == -1) return List()\n\
    \        val minIdx = min(idx1, idx2)\n        val maxIdx = max(idx1, idx2)\n\
    \        planets.slice(minIdx + 1, maxIdx)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        return planets.slice(p1, p2 + 1)", "    \
    \    val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (i1, i2) = if (p1\
    \ < p2) (p1, p2) else (p2, p1)\n        planets.slice(i1 + 1, i2)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 < 0 || p2 < 0) List()\n\
    \        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ {\n            List()\n        } else {\n            if (p1 < p2) {\n      \
    \          planets.slice(p1 + 1, p2)\n            } else {\n                planets.slice(p2\
    \ + 1, p1)\n            }\n        }", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 < 0 || p2 < 0) return List()\n        if (p1 > p2) return planets.slice(p2,\
    \ p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ Nil\n        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        val (a, b) = if (i1 < i2) (i1, i2) else (i2, i1)\n  \
    \      planets.slice(a + 1, b)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else {\n            val (min, max) = if (p1 < p2) (p1, p2) else\
    \ (p2, p1)\n            planets.slice(min + 1, max)\n        }", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val idx1 = planets.indexOf(planet1)\n\
    \        val idx2 = planets.indexOf(planet2)\n        if (idx1 == -1 || idx2 ==\
    \ -1) List()\n        else if (idx1 < idx2) planets.slice(idx1, idx2 + 1)\n  \
    \      else planets.slice(idx2, idx1 + 1)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val index1 = planets.indexOf(planet1)\n        val index2 = planets.indexOf(planet2)\n\
    \        if (index1 == -1 || index2 == -1) return List()\n        if (index1 >\
    \ index2) return planets.slice(index2, index1 + 1)\n        else return planets.slice(index1,\
    \ index2 + 1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1\
    \ = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n    \
    \    if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if (p1\
    \ < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "      \
    \  val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 < 0 || p2 < 0) return\
    \ List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n        planets.slice(p1,\
    \ p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        planets.slice(p1,\
    \ p2)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n\
    \        val planet2Index = planets.indexOf(planet2)\n        if (planet1Index\
    \ == -1 || planet2Index == -1) return List()\n        val (min, max) = if (planet1Index\
    \ < planet2Index) (planet1Index, planet2Index) else (planet2Index, planet1Index)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1)\n        else return planets.slice(p1, p2)", "       \
    \ val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        if (i1 > i2) return planets.slice(i2, i1)\n        planets.slice(i1,\
    \ i2)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index\
    \ = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n\
    \        if (planet1Index == -1 || planet2Index == -1) return List()\n       \
    \ val minIndex = min(planet1Index, planet2Index)\n        val maxIndex = max(planet1Index,\
    \ planet2Index)\n        planets.slice(minIndex + 1, maxIndex)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        (min + 1 until max).map(planets(_)).toList",
  "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        return\
    \ planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val min = min(p1, p2)\n\
    \        val max = max(p1, p2)\n        planets.slice(min + 1, max)", "      \
    \  val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else {\n            val (min,\
    \ max) = if (p1 < p2) (p1, p2) else (p2, p1)\n            planets.slice(min +\
    \ 1, max)\n        }", "        val planets = List(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n       \
    \ val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        else return planets.slice(p1, p2 + 1)", " \
    \       val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        else return planets.slice(p1, p2 + 1)", " \
    \       val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val min = min(p1, p2)\n\
    \        val max = max(p1, p2)\n        planets.slice(min + 1, max)", "      \
    \  val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        val (min, max) = if (i1 < i2) (i1, i2) else (i2, i1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        if (i1 > i2) return\
    \ planets.slice(i2, i1)\n        planets.slice(i1, i2)", "        val planets\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n      \
    \  val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1) return\
    \ List()\n        if (p1 < p2) return planets.slice(p1 + 1, p2)\n        else\
    \ return planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   else return planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        else\
    \ return planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) Nil\n        else if (i1 < i2) planets.slice(i1\
    \ + 1, i2)\n        else planets.slice(i2 + 1, i1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        if (i1 > i2) return\
    \ planets.slice(i2, i1 + 1)\n        planets.slice(i1, i2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ {\n            List()\n        } else {\n            val (min, max) = if (p1\
    \ < p2) (p1, p2) else (p2, p1)\n            planets.slice(min + 1, max)\n    \
    \    }", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            List()\n        } else {\n \
    \           if (p1 < p2) {\n                planets.slice(p1 + 1, p2)\n      \
    \      } else {\n                planets.slice(p2 + 1, p1)\n            }\n  \
    \      }", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        if (i1 > i2) return planets.slice(i2, i1)\n        else\
    \ return planets.slice(i1, i2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val min = min(p1, p2)\n\
    \        val max = max(p1, p2)\n        planets.slice(min + 1, max)", "      \
    \  val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        val (min, max) = if (i1 < i2) (i1, i2) else (i2, i1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            return List()\n        }\n \
    \       if (p1 < p2) {\n            return planets.slice(p1 + 1, p2)\n       \
    \ }\n        return planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val idx1 = planets.indexOf(planet1)\n        val idx2\
    \ = planets.indexOf(planet2)\n        if (idx1 == -1 || idx2 == -1) return List()\n\
    \        val (min, max) = if (idx1 < idx2) (idx1, idx2) else (idx2, idx1)\n  \
    \      planets.slice(min + 1, max)", "        val planets = List(\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val index1 = planets.indexOf(planet1)\n        val index2 = planets.indexOf(planet2)\n\
    \        if (index1 == -1 || index2 == -1) return List()\n        val min = min(index1,\
    \ index2)\n        val max = max(index1, index2)\n        planets.slice(min +\
    \ 1, max)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        if (i1 > i2) return planets.slice(i2, i1 + 1)\n     \
    \   planets.slice(i1, i2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else {\n            val (min,\
    \ max) = if (p1 < p2) (p1, p2) else (p2, p1)\n            planets.slice(min +\
    \ 1, max)\n        }", "        val planets = List(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n       \
    \ val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        (min + 1 until max).map(planets(_)).toList",
  "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n\
    \        val planet2Index = planets.indexOf(planet2)\n        if (planet1Index\
    \ == -1 || planet2Index == -1) return List()\n        if (planet1Index < planet2Index)\
    \ planets.slice(planet1Index + 1, planet2Index)\n        else planets.slice(planet2Index\
    \ + 1, planet1Index)", "        val planets = List(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n       \
    \ val (i1, i2) = (planets.indexOf(planet1), planets.indexOf(planet2))\n      \
    \  if (i1 == -1 || i2 == -1) return List()\n        if (i1 > i2) return planets.slice(i2,\
    \ i1 + 1)\n        else return planets.slice(i1, i2 + 1)", "        val planets\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n      \
    \  val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1) return\
    \ List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n     \
    \   planets.slice(min + 1, max)", "        val planets = List(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (a, b) = if (p1\
    \ < p2) (p1, p2) else (p2, p1)\n        planets.slice(a + 1, b)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ List()\n        else if (i1 < i2) planets.slice(i1 + 1, i2)\n        else planets.slice(i2\
    \ + 1, i1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (a, b) = if (p1 < p2) (p1, p2) else (p2, p1)\n  \
    \      planets.slice(a + 1, b)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   else return planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val p = if (p1 < p2) planets.slice(p1, p2) else planets.slice(p2,\
    \ p1)\n        return p", "        val planets = List(\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        else\
    \ return planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (from, to) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(from + 1, to)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else {\n            val (min,\
    \ max) = if (p1 < p2) (p1, p2) else (p2, p1)\n            (min + 1 until max).map(planets(_)).toList\n\
    \        }", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) Nil\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) List()\n        else if (i1 < i2) planets.slice(i1\
    \ + 1, i2)\n        else planets.slice(i2 + 1, i1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 < 0 || p2 < 0) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        if (i1 > i2) return\
    \ planets.slice(i2, i1 + 1)\n        return planets.slice(i1, i2 + 1)", "    \
    \    val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        if (i1 > i2) return planets.slice(i2, i1 + 1)\n     \
    \   planets.slice(i1, i2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val min = min(p1, p2)\n\
    \        val max = max(p1, p2)\n        planets.slice(min + 1, max)", "      \
    \  val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) List()\n        else if (i1 < i2) planets.slice(i1\
    \ + 1, i2)\n        else planets.slice(i2 + 1, i1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1)\n        else return planets.slice(p1, p2)", "       \
    \ val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        else\
    \ return planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else {\n            val (min,\
    \ max) = if (p1 < p2) (p1, p2) else (p2, p1)\n            planets.slice(min +\
    \ 1, max)\n        }", "        val planets = List(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n       \
    \ val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ {\n            List()\n        } else {\n            if (p1 < p2) {\n      \
    \          planets.slice(p1 + 1, p2)\n            } else {\n                planets.slice(p2\
    \ + 1, p1)\n            }\n        }", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        if (planets.contains(planet1)\
    \ && planets.contains(planet2)) {\n            val i1 = planets.indexOf(planet1)\n\
    \            val i2 = planets.indexOf(planet2)\n            val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n            planets.slice(min + 1, max)\n\
    \        } else List()", "        val planets = List(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n       \
    \ val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1)\n        planets.slice(p1, p2)", "        val planets\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n      \
    \  val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1) return\
    \ List()\n        if (p1 < p2) {\n            planets.slice(p1 + 1, p2)\n    \
    \    } else {\n            planets.slice(p2 + 1, p1)\n        }", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   else return planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else if (p1 < p2) planets.slice(p1 + 1, p2)\n        else planets.slice(p2\
    \ + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        val (min, max) = if (i1 < i2) (i1, i2) else (i2, i1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        else\
    \ return planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ List()\n        else {\n            val (min, max) = if (p1 < p2) (p1, p2) else\
    \ (p2, p1)\n            planets.slice(min + 1, max)\n        }", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 < 0 || p2 < 0) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1).reverse\n        return planets.slice(p1, p2)", "    \
    \    val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val index1 = planets.indexOf(planet1)\n\
    \        val index2 = planets.indexOf(planet2)\n        if (index1 == -1 || index2\
    \ == -1) Nil\n        else {\n            val (min, max) = if (index1 < index2)\
    \ (index1, index2) else (index2, index1)\n            planets.slice(min + 1, max)\n\
    \        }", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n\
    \        val planet2Index = planets.indexOf(planet2)\n        if (planet1Index\
    \ == -1 || planet2Index == -1) return List()\n        val start = min(planet1Index,\
    \ planet2Index)\n        val end = max(planet1Index, planet2Index)\n        planets.slice(start,\
    \ end + 1)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        if (i1 > i2) return planets.slice(i2 + 1, i1)\n     \
    \   planets.slice(i1 + 1, i2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val i1 = planets.indexOf(planet1)\n\
    \        val i2 = planets.indexOf(planet2)\n        if (i1 == -1 || i2 == -1)\
    \ return List()\n        val (min, max) = if (i1 < i2) (i1, i2) else (i2, i1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (a, b) = if (p1 < p2) (p1, p2) else (p2, p1)\n  \
    \      planets.slice(a + 1, b)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        planets.slice(p1,\
    \ p2)", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 > p2) return\
    \ planets.slice(p2, p1 + 1)\n        planets.slice(p1, p2 + 1)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val i1 = planets.indexOf(planet1)\n        val i2 = planets.indexOf(planet2)\n\
    \        if (i1 == -1 || i2 == -1) return List()\n        val (min, max) = if\
    \ (i1 < i2) (i1, i2) else (i2, i1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1 + 1)\n     \
    \   planets.slice(p1, p2 + 1)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (min, max) = if\
    \ (p1 < p2) (p1, p2) else (p2, p1)\n        planets.slice(min + 1, max)", "  \
    \      val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (a, b) = if (p1 < p2) (p1, p2) else (p2, p1)\n  \
    \      planets.slice(a + 1, b)"]
stop_tokens:
- "\n    }\n"
