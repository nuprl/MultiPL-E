language: scala
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWord\
    \ => sortedWordMap(sortedWord))\n        sortedWordList.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnecw0b8u.scala:19)\n\tat Problem.main(tmpnecw0b8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toCharArray.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(Random.nextInt(word.permutations.size)))\n\
    \        shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfazg85fc.scala:13:77 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.permutations.toList(Random.nextInt(word.permutations.size)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                            Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            val sorted = word.toList.sortWith(_\
    \ < _).mkString\n            result.append(sorted)\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = (sortedWords zip words).toMap\n        val result = sortedWords.map(x => sortedWordMap(x))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr12a09xr.scala:19)\n\tat Problem.main(tmpr12a09xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val wordMap\
    \ = words.zip(sortedWords).toMap\n        val result = new StringBuilder\n   \
    \     for (word <- words) {\n            result.append(wordMap(word))\n      \
    \      result.append(\" \")\n        }\n        result.toString.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val map = new\
    \ HashMap[String, String]\n        for (i <- 0 until words.length) {\n       \
    \     map(sortedWords(i)) = words(i)\n        }\n        val sorted = sortedWords.sorted\n\
    \        val result = new StringBuilder\n        for (i <- 0 until sorted.length)\
    \ {\n            result.append(map(sorted(i)) + \" \")\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkkd1y1o.scala:26)\n\tat Problem.main(tmpdkkd1y1o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val result = new StringBuilder\n        for (word <- sortedWordList)\
    \ {\n            result.append(sortedWordMap.find(_._2 == word).get._1 + \" \"\
    )\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyrzqsp7e.scala:23)\n\tat Problem.main(tmpyrzqsp7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = new HashMap[String, String]()\n        for (i <- 0 until words.length) {\n\
    \            sortedWordMap(sortedWords(i)) = words(i)\n        }\n        val\
    \ sortedSortedWords = sortedWords.sorted\n        val result = new StringBuilder\n\
    \        for (i <- 0 until sortedSortedWords.length) {\n            result.append(sortedWordMap(sortedSortedWords(i)))\n\
    \            if (i != sortedSortedWords.length - 1) result.append(\" \")\n   \
    \     }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwko2y96.scala:27)\n\tat Problem.main(tmpjwko2y96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = new HashMap[String, String]()\n        for (i <- 0 until words.length) {\n\
    \            sortedWordMap(sortedWords(i)) = words(i)\n        }\n        val\
    \ sortedSortedWords = sortedWords.sorted\n        val result = new StringBuilder\n\
    \        for (i <- 0 until sortedSortedWords.length) {\n            result.append(sortedWordMap(sortedSortedWords(i)))\n\
    \            if (i != sortedSortedWords.length - 1) result.append(\" \")\n   \
    \     }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao_wdzg6.scala:27)\n\tat Problem.main(tmpao_wdzg6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        sortedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val wordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap = wordMap.toSeq.sortBy(_._2)\n\
    \        val sortedWords = sortedWordMap.map(_._1)\n        sortedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq09fszay.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = sortedWordMap.map(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0msortedWords is already defined as \e[33mvalue\e[0m \e[35msortedWords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val wordMap\
    \ = words.zip(sortedWords).toMap\n        val sortedWordMap = wordMap.toSeq.sortBy(x\
    \ => x._2)\n        val sortedWords2 = sortedWordMap.map(x => x._1)\n        sortedWords2.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjirhc3hk.scala:20)\n\tat Problem.main(tmpjirhc3hk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = new HashMap[String, String]\n        for (i <- 0 until words.length) {\n \
    \           sortedWordMap(sortedWords(i)) = words(i)\n        }\n        val sortedWordList\
    \ = sortedWords.toList.sortWith((w1, w2) => w1 < w2)\n        val result = new\
    \ StringBuilder\n        for (w <- sortedWordList) {\n            result.append(sortedWordMap(w)\
    \ + \" \")\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdmboczyw.scala:26)\n\tat Problem.main(tmpdmboczyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val result = sortedWordList.map(sortedWord => sortedWordMap(sortedWord)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp49df3h2o.scala:20)\n\tat Problem.main(tmp49df3h2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(Random.nextInt(word.permutations.size)))\n\
    \        shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfazg85fc.scala:13:77 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.permutations.toList(Random.nextInt(word.permutations.size)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                            Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList.map(w => w.mkString).sorted.last)\n\
    \        shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63s_x8su.scala:17)\n\tat Problem.main(tmp63s_x8su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toCharArray.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val shuffledWords\
    \ = sortedWords.map(x => x.shuffle)\n        val shuffledString = shuffledWords.mkString(\"\
    \ \")\n        shuffledString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn52_pk4y.scala:13:51 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mx\e[0m => x.shuffle)\n\e[31m\e[31m   |\e[0m                              \
    \                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \       value shuffle is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpn52_pk4y.scala:13:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e[36mx\e[0m => x.shuffle)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.shuffle)\n        val shuffledSentence = shuffledWords.mkString(\"\
    \ \")\n        shuffledSentence\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpul038yh_.scala:13:57 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.shuffle)\n\e[31m\e[31m   |\e[0m                        \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   value shuffle is not a member of String\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpul038yh_.scala:13:65 -----------------------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.shuffle)\n\e[31m\e[31m   |\e[0m                        \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                              No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val result = sortedWords.map(x => sortedWordMap(x))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprq0u0dum.scala:19)\n\tat Problem.main(tmprq0u0dum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toCharArray.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val result = sortedWordList.map(w => sortedWordMap(w)).mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5rnwn84.scala:20)\n\tat Problem.main(tmpo5rnwn84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toCharArray.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val shuffledWords\
    \ = sortedWords.map(x => x.permutations.toList.map(y => y.mkString).distinct).flatten\n\
    \        val shuffledWordsMap = shuffledWords.map(x => (x, shuffledWords.count(_\
    \ == x))).toMap\n        val shuffledWordsMapSorted = shuffledWordsMap.toList.sortBy(_._2)\n\
    \        val shuffledWordsMapSortedFiltered = shuffledWordsMapSorted.filter(_._2\
    \ == 1)\n        val shuffledWordsMapSortedFilteredMap = shuffledWordsMapSortedFiltered.map(_._1).toSet\n\
    \        val shuffledWordsMapSortedFilteredMapList = shuffledWordsMapSortedFilteredMap.toList\n\
    \        val shuffledWordsMapSortedFilteredMapListSorted = shuffledWordsMapSortedFilteredMapList.sortBy(_.length)\n\
    \        val shuffledWordsMapSortedFilteredMapListSortedMap = shuffledWordsMapSortedFilteredMapListSorted.map(x\
    \ => (x, shuffledWordsMapSortedFilteredMapListSorted.count(_ == x))).toMap\n \
    \       val shuffledWordsMapSortedFilteredMapListSortedMapList = shuffledWordsMapSortedFilteredMapListSortedMap.toList\n\
    \        val shuffledWordsMapSortedFilteredMapListSortedMapListSorted = shuffledWordsMapSortedFilteredMapListSortedMapList.sortBy(_._2)\n\
    \        val shuffledWordsMapSortedFilteredMapListSortedMapListSortedMap = shuffledWordsMapSortedFilteredMapListSortedMapListSorted.map(_._1).toSet\n\
    \        val shuffledWordsMapSortedFilteredMapListSortedMapListSortedMapList =\
    \ shuffledWordsMapSortedFilteredMapListSortedMapListSortedMap.toList\n       \
    \ val shuffledWordsMapSortedFilteredMapListSortedMapListSortedMapListSorted =\
    \ shuffledWordsMapSortedFilteredMapListSortedMapListSortedMapList.sortBy(_.length)\n\
    \        val shuffledWordsMapSortedFil\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6yuvfjsw.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6yuvfjsw.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val antiShuffledWords = words.map(word => word.sorted)\n      \
    \  antiShuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList(Random.nextInt(w.permutations.toList.length)))\n\
    \        val shuffledString = shuffledWords.mkString(\" \")\n        shuffledString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp172p1pvu.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mw\e[0m => w.permutations.toList(Random.nextInt(w.permutations.toList.length)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                      Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val orderedWords = words.map(word => word.sorted)\n        orderedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val chars = word.toCharArray\n            val sortedChars = chars.sortWith((a,\
    \ b) => a < b)\n            val sortedWord = new String(sortedChars)\n       \
    \     result.append(sortedWord)\n            result.append(\" \")\n        }\n\
    \        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val result = sortedWordList.map(x => sortedWordMap(x)).mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0x69oqw7.scala:20)\n\tat Problem.main(tmp0x69oqw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        sortedWords.map(sortedWord => sortedWordMap(sortedWord)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqwzaymy.scala:18)\n\tat Problem.main(tmpnqwzaymy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        val sortedWordMap = sortedWords.zipWithIndex.toMap\n        val sortedWordMap2\
    \ = sortedWordMap.map(_.swap)\n        val sortedWordMap3 = sortedWordMap2.map(_.swap)\n\
    \        val sortedWordMap4 = sortedWordMap3.map(_.swap)\n        val sortedWordMap5\
    \ = sortedWordMap4.map(_.swap)\n        val sortedWordMap6 = sortedWordMap5.map(_.swap)\n\
    \        val sortedWordMap7 = sortedWordMap6.map(_.swap)\n        val sortedWordMap8\
    \ = sortedWordMap7.map(_.swap)\n        val sortedWordMap9 = sortedWordMap8.map(_.swap)\n\
    \        val sortedWordMap10 = sortedWordMap9.map(_.swap)\n        val sortedWordMap11\
    \ = sortedWordMap10.map(_.swap)\n        val sortedWordMap12 = sortedWordMap11.map(_.swap)\n\
    \        val sortedWordMap13 = sortedWordMap12.map(_.swap)\n        val sortedWordMap14\
    \ = sortedWordMap13.map(_.swap)\n        val sortedWordMap15 = sortedWordMap14.map(_.swap)\n\
    \        val sortedWordMap16 = sortedWordMap15.map(_.swap)\n        val sortedWordMap17\
    \ = sortedWordMap16.map(_.swap)\n        val sortedWordMap18 = sortedWordMap17.map(_.swap)\n\
    \        val sortedWordMap19 = sortedWordMap18.map(_.swap)\n        val sortedWordMap20\
    \ = sortedWordMap19.map(_.swap)\n        val sortedWordMap21 = sortedWordMap20.map(_.swap)\n\
    \        val sortedWordMap22 = sortedWordMap21.map(_.swap)\n        val sortedWordMap23\
    \ = sortedWordMap22.map(_.swap)\n        val sortedWordMap24 = sortedWordMap23.map(_.swap)\n\
    \        val sortedWordMap25 = sortedWordMap24.map(_.swap)\n        val sortedWordMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpviiq4tka.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpviiq4tka.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val result = sortedWords.map(x => sortedWordMap(x))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprq0u0dum.scala:19)\n\tat Problem.main(tmprq0u0dum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            val sorted = word.toCharArray.sortWith(_\
    \ < _)\n            result.append(sorted)\n            if (i != words.length -\
    \ 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppipba0xg.scala:22)\n\tat Problem.main(tmppipba0xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toList.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            val sortedWord = word.toCharArray.sortWith(_\
    \ < _).mkString\n            result.append(sortedWord)\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.toCharArray.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        // Split the string into\
    \ words\n        val words = s.split(\" \")\n        // For each word, sort the\
    \ characters in the word\n        val sortedWords = words.map(w => w.sorted)\n\
    \        // Join the words back together\n        sortedWords.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val chars = word.toCharArray\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            result.append(sortedChars.mkString(\"\"))\n            result.append(\"\
    \ \")\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList.sortBy(x => x.mkString).head)\n\
    \        val shuffledString = shuffledWords.mkString(\" \")\n        shuffledString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new ArrayBuffer[String]\n        for (word <- words)\
    \ {\n            val chars = word.toCharArray\n            val sorted = chars.sortWith((a,\
    \ b) => a < b)\n            val sortedWord = sorted.mkString\n            result\
    \ += sortedWord\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.toList.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordSet\
    \ = sortedWords.toSet\n        val wordMap = new HashMap[String, String]\n   \
    \     for (word <- words) {\n            val sortedWord = word.sorted\n      \
    \      if (!wordMap.contains(sortedWord)) {\n                val newWord = sortedWordSet.filter(w\
    \ => w != sortedWord).toList.sorted.head\n                wordMap += (sortedWord\
    \ -> newWord)\n            }\n        }\n        val newWords = words.map(word\
    \ => wordMap(word.sorted))\n        newWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.antiShuffle$$anonfun$1(tmphu8jlo91.scala:18)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.antiShuffle(tmphu8jlo91.scala:21)\n\
    \tat Problem$.main(tmphu8jlo91.scala:26)\n\tat Problem.main(tmphu8jlo91.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordsInOrder = sortedWords.map(word\
    \ => sortedWordMap(word))\n        sortedWordsInOrder.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lw_nm98.scala:19)\n\tat Problem.main(tmp6lw_nm98.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordMapKeys = sortedWordMap.keys.toList.sorted\n\
    \        val result = sortedWordMapKeys.map(x => sortedWordMap(x)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp75mt4st_.scala:20)\n\tat Problem.main(tmp75mt4st_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val wordMap\
    \ = new HashMap[String, String]\n        for (i <- 0 until words.length) {\n \
    \           wordMap(sortedWords(i)) = words(i)\n        }\n        val sortedSortedWords\
    \ = sortedWords.sorted\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until sortedSortedWords.length) {\n            result.append(wordMap(sortedSortedWords(i))\
    \ + \" \")\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfkk5yjxt.scala:26)\n\tat Problem.main(tmpfkk5yjxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = words.zip(sortedWords).toMap\n        val sortedWordMap2 = sortedWordMap.map(x\
    \ => (x._2, x._1))\n        val sortedWords2 = sortedWords.map(x => sortedWordMap2(x))\n\
    \        sortedWords2.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7bz3_lq7.scala:20)\n\tat Problem.main(tmp7bz3_lq7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new ArrayBuffer[String]\n        for (word <- words)\
    \ {\n            val chars = word.toCharArray\n            val sortedChars = chars.sortWith((a,\
    \ b) => a < b)\n            result += sortedChars.mkString\n        }\n      \
    \  result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toCharArray.sortWith(_ <\
    \ _).mkString)\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        val sortedWordMap = (words zip sortedWords).toMap\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            result.append(sortedWordMap(word))\n\
    \            result.append(\" \")\n        }\n        result.toString.trim\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        val wordMap = (words zip sortedWords).toMap\n        val sortedWordsSet\
    \ = sortedWords.toSet\n        val sortedWordsSetList = sortedWordsSet.toList\n\
    \        val sortedWordsSetListSorted = sortedWordsSetList.sorted\n        val\
    \ sortedWordsSetListSortedMap = (sortedWordsSetListSorted zip sortedWordsSetList).toMap\n\
    \        val sortedWordsSetListSortedMapSorted = sortedWordsSetListSortedMap.toList.sortBy(_._1)\n\
    \        val sortedWordsSetListSortedMapSortedMap = (sortedWordsSetListSortedMapSorted\
    \ map (_.swap)).toMap\n        val sortedWordsSetListSortedMapSortedMapList =\
    \ sortedWordsSetListSortedMapSortedMap.toList\n        val sortedWordsSetListSortedMapSortedMapListMap\
    \ = (sortedWordsSetListSortedMapSortedMapList map (_.swap)).toMap\n        val\
    \ sortedWordsSetListSortedMapSortedMapListMapList = sortedWordsSetListSortedMapSortedMapListMap.toList\n\
    \        val sortedWordsSetListSortedMapSortedMapListMapListMap = (sortedWordsSetListSortedMapSortedMapListMapList\
    \ map (_.swap)).toMap\n        val sortedWordsSetListSortedMapSortedMapListMapListMapList\
    \ = sortedWordsSetListSortedMapSortedMapListMapListMap.toList\n        val sortedWordsSetListSortedMapSortedMapListMapListMapListMap\
    \ = (sortedWordsSetListSortedMapSortedMapListMapListMapList map (_.swap)).toMap\n\
    \        val sortedWordsSetListSortedMapSortedMapListMapListMapListMapList = sortedWordsSetListSortedMapSortedMapListMapListMapListMap.toList\n\
    \        val sortedWordsSetListSortedMapSortedMapListMapListMapListMapListMap\
    \ = (sortedWordsSetListSortedMapSortedMapListMapListMapListMapList map (_.swap)).toMap\n\
    \        val sortedWordsSetListSortedMapSortedMapListMapListMapListMapListMapList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkrcr538i.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkrcr538i.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap2 = sortedWordMap.toList.sortBy(_._2)\n\
    \        val sortedWordMap3 = sortedWordMap2.map(x => x._1)\n        sortedWordMap3.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8xzqe76.scala:20)\n\tat Problem.main(tmpf8xzqe76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val map\
    \ = new HashMap[String, String]\n        for (i <- 0 until words.length) {\n \
    \           map += (sortedWords(i) -> words(i))\n        }\n        val sortedWords2\
    \ = sortedWords.sorted\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until sortedWords2.length) {\n            result.append(map(sortedWords2(i))\
    \ + \" \")\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf9nssdnn.scala:26)\n\tat Problem.main(tmpf9nssdnn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val result = sortedWords.map(x => sortedWordMap(x))\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprq0u0dum.scala:19)\n\tat Problem.main(tmprq0u0dum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.toList.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val sortedWordListMap = (sortedWordList zip sortedWords).toMap\n    \
    \    val sortedWordListMap2 = sortedWordListMap.map(x => (x._2, x._1))\n     \
    \   val sortedWordListMap3 = sortedWordListMap2.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap4 = sortedWordListMap3.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap5 = sortedWordListMap4.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap6 = sortedWordListMap5.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap7 = sortedWordListMap6.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap8 = sortedWordListMap7.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap9 = sortedWordListMap8.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap10 = sortedWordListMap9.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap11 = sortedWordListMap10.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap12 = sortedWordListMap11.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap13 = sortedWordListMap12.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap14 = sortedWordListMap13.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWordListMap15 = sortedWordListMap14.map(x => (x._1, x._2.sorted))\n\
    \        val sortedWord\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp84g1rn9j.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp84g1rn9j.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWordMap(_))\n\
    \        sortedWordList.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyhgcrk0.scala:19)\n\tat Problem.main(tmpoyhgcrk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val orderedWords = words.map(word => word.sorted)\n        orderedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            val sorted = word.toCharArray.sortWith(_\
    \ < _)\n            result.append(sorted.mkString)\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val result = sortedWordList.map(w => sortedWordMap(w)).mkString(\" \"\
    )\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5rnwn84.scala:20)\n\tat Problem.main(tmpo5rnwn84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.toList.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val map = new\
    \ HashMap[String, String]\n        for (i <- 0 until words.length) {\n       \
    \     map += (sortedWords(i) -> words(i))\n        }\n        val result = sortedWords.map(x\
    \ => map(x))\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpak9s543g.scala:22)\n\tat Problem.main(tmpak9s543g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val wordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap = wordMap.toSeq.sortBy(_._2)\n\
    \        val sortedWords = sortedWordMap.map(_._1)\n        sortedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq09fszay.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = sortedWordMap.map(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0msortedWords is already defined as \e[33mvalue\e[0m \e[35msortedWords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(0))\n        val shuffledString\
    \ = shuffledWords.mkString(\" \")\n        return shuffledString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toCharArray.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(Random.nextInt(word.permutations.toList.length)))\n\
    \        val shuffledSentence = shuffledWords.mkString(\" \")\n        shuffledSentence\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y9j7fum.scala:13:77 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.permutations.toList(Random.nextInt(word.permutations.toList.length)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                            Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val antiShuffledWords = words.map(word => word.toList.sorted.mkString)\n\
    \        antiShuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sortedWord = word.toCharArray.sortWith(_ < _).mkString\n    \
    \        result.append(sortedWord)\n            result.append(\" \")\n       \
    \ }\n        result.toString.trim\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = new HashMap[String, String]()\n        for (i <- 0 until words.length) {\n\
    \            sortedWordMap(sortedWords(i)) = words(i)\n        }\n        val\
    \ sortedSortedWords = sortedWords.sorted\n        val result = new StringBuilder()\n\
    \        for (i <- 0 until sortedSortedWords.length) {\n            result.append(sortedWordMap(sortedSortedWords(i)))\n\
    \            if (i != sortedSortedWords.length - 1) result.append(\" \")\n   \
    \     }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp88p70pz9.scala:27)\n\tat Problem.main(tmp88p70pz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(w => w.sorted).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(word => word.toList.sorted.mkString).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(x\
    \ => sortedWordMap(x))\n        sortedWordList.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4o12i4z.scala:19)\n\tat Problem.main(tmpu4o12i4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val ans = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            val sorted = word.toList.sortWith(_\
    \ < _).mkString\n            ans.append(sorted)\n            if (i != words.length\
    \ - 1) ans.append(\" \")\n        }\n        ans.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toCharArray.sorted.mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordsMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordsSet = sortedWords.toSet\n\
    \        val sortedWordsSetList = sortedWordsSet.toList.sorted\n        val sortedWordsList\
    \ = sortedWordsSetList.map(sortedWordsMap(_))\n        sortedWordsList.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmc1c8kqb.scala:21)\n\tat Problem.main(tmpmc1c8kqb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordsMap\
    \ = sortedWords.zip(words).toMap\n        val sortedSortedWords = sortedWords.sorted\n\
    \        val result = sortedSortedWords.map(w => sortedWordsMap(w))\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpinx6yixj.scala:20)\n\tat Problem.main(tmpinx6yixj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toCharArray.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sorted = word.toList.sortWith(_ < _).mkString\n            result.append(sorted)\n\
    \            result.append(\" \")\n        }\n        result.toString.trim\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList(Random.nextInt(w.permutations.size)))\n\
    \        shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfbmrbro7.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mw\e[0m => w.permutations.toList(Random.nextInt(w.permutations.size)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                    Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        var result = \"\"\n   \
    \     var word = \"\"\n        for (c <- s) {\n            if (c == ' ') {\n \
    \               result += word + \" \"\n                word = \"\"\n        \
    \    } else {\n                word += c\n            }\n        }\n        result\
    \ += word\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx0b_2zov.scala:26)\n\tat Problem.main(tmpx0b_2zov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(word => word.sorted).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sorted = words.map(x => x.sorted)\n        val sortedMap =\
    \ (words zip sorted).toMap\n        val sortedWords = words.map(x => sortedMap(x))\n\
    \        val result = sortedWords.mkString(\" \")\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(word => word.sorted).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList(w.length / 2))\n        shuffledWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv_2qigy.scala:17)\n\tat Problem.main(tmplv_2qigy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toList.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toCharArray.sortWith(_ <\
    \ _).mkString)\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val wordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap = wordMap.toSeq.sortBy(_._2)\n\
    \        val sortedWords2 = sortedWordMap.map(_._1)\n        sortedWords2.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyzaw6z1x.scala:20)\n\tat Problem.main(tmpyzaw6z1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordsWithBlanks = words.map(word\
    \ => sortedWordMap(word.sorted))\n        sortedWordsWithBlanks.mkString(\" \"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkdl_3fv_.scala:19)\n\tat Problem.main(tmpkdl_3fv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(0))\n        val shuffledSentence\
    \ = shuffledWords.mkString(\" \")\n        shuffledSentence\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(word => word.sorted).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toList.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val shuffledWords\
    \ = sortedWords.map(x => x.permutations.toList(Random.nextInt(x.permutations.toList.length)))\n\
    \        val shuffledSentence = shuffledWords.mkString(\" \")\n        shuffledSentence\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg7zzsce2.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mx\e[0m => x.permutations.toList(Random.nextInt(x.permutations.toList.length)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                      Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordsMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordsSet = sortedWords.toSet\n\
    \        val sortedWordsSetList = sortedWordsSet.toList\n        val sortedWordsSetListSorted\
    \ = sortedWordsSetList.sorted\n        val sortedWordsSetListSortedMap = sortedWordsSetListSorted.zip(sortedWordsSetList).toMap\n\
    \        val sortedWordsSetListSortedMapSorted = sortedWordsSetListSortedMap.toList.sorted\n\
    \        val sortedWordsSetListSortedMapSortedMap = sortedWordsSetListSortedMapSorted.toMap\n\
    \        val sortedWordsSetListSortedMapSortedMapSorted = sortedWordsSetListSortedMapSortedMap.toList.sorted\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMap = sortedWordsSetListSortedMapSortedMapSorted.toMap\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMapSorted = sortedWordsSetListSortedMapSortedMapSortedMap.toList.sorted\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMapSortedMap = sortedWordsSetListSortedMapSortedMapSortedMapSorted.toMap\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSorted = sortedWordsSetListSortedMapSortedMapSortedMapSortedMap.toList.sorted\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSortedMap =\
    \ sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSorted.toMap\n       \
    \ val sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSortedMapSorted =\
    \ sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSortedMap.toList.sorted\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSortedMapSortedMap\
    \ = sortedWordsSetListSortedMapSortedMapSortedMapSortedMapSortedMapSorted.toMap\n\
    \        val sortedWordsSetListSortedMapSortedMapSortedMapS\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcmi5bgyc.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcmi5bgyc.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toList.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        val sortedWordMap = (words zip sortedWords).toMap\n        val sortedWordMap2\
    \ = sortedWordMap.toSeq.sortBy(_._2)\n        val sortedWordMap3 = sortedWordMap2.map(_._1)\n\
    \        sortedWordMap3.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3dd8s0g.scala:20)\n\tat Problem.main(tmpb3dd8s0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val wordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap = wordMap.toSeq.sortBy(_._2)\n\
    \        val sortedWords = sortedWordMap.map(_._1)\n        sortedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq09fszay.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = sortedWordMap.map(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0msortedWords is already defined as \e[33mvalue\e[0m \e[35msortedWords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        var result = \"\"\n   \
    \     var words = s.split(\" \")\n        for (word <- words) {\n            var\
    \ chars = word.toCharArray\n            var sortedChars = chars.sortWith(_ < _)\n\
    \            result += sortedChars.mkString(\"\") + \" \"\n        }\n       \
    \ return result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sorted = word.toCharArray.sortWith(_ < _)\n            result.append(sorted)\n\
    \            result.append(\" \")\n        }\n        result.toString.trim\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_regjw_.scala:21)\n\tat Problem.main(tmpg_regjw_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toCharArray.sortWith(_ <\
    \ _).mkString)\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedMap\
    \ = new HashMap[String, String]\n        for (i <- 0 until words.length) sortedMap(sortedWords(i))\
    \ = words(i)\n        val sorted = sortedWords.sorted\n        val result = new\
    \ StringBuilder\n        for (i <- 0 until sorted.length) {\n            result.append(sortedMap(sorted(i)))\n\
    \            if (i != sorted.length - 1) result.append(\" \")\n        }\n   \
    \     result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpitpud55o.scala:25)\n\tat Problem.main(tmpitpud55o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList(Random.nextInt(w.permutations.size)))\n\
    \        shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfbmrbro7.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mw\e[0m => w.permutations.toList(Random.nextInt(w.permutations.size)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                    Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toCharArray.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toList.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toCharArray.sorted.mkString).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWord\
    \ => sortedWordMap(sortedWord))\n        sortedWordList.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnecw0b8u.scala:19)\n\tat Problem.main(tmpnecw0b8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList(Random.nextInt(w.permutations.size)))\n\
    \        shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfbmrbro7.scala:13:71 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mw\e[0m => w.permutations.toList(Random.nextInt(w.permutations.size)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \             ^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                    Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(w => w.toCharArray.sorted.mkString).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val wordMap\
    \ = words.zip(sortedWords).toMap\n        val sortedWordMap = wordMap.toSeq.sortBy(_._2)\n\
    \        val sortedWords = sortedWordMap.map(_._1)\n        sortedWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4b53zq9.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = sortedWordMap.map(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0msortedWords is already defined as \e[33mvalue\e[0m \e[35msortedWords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660028872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val map = (words\
    \ zip sortedWords).toMap\n        val sortedMap = map.toSeq.sortBy(_._2)\n   \
    \     val result = sortedMap.map(x => x._1).mkString(\" \")\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp36sbsqp6.scala:20)\n\tat Problem.main(tmp36sbsqp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        var words = s.split(\"\
    \ \")\n        var ans = \"\"\n        for (word <- words) {\n            var\
    \ chars = word.toCharArray\n            var sorted = chars.sortWith((a, b) =>\
    \ a < b)\n            ans += sorted.mkString(\"\") + \" \"\n        }\n      \
    \  ans.trim\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.toList.sorted\n\
    \        val result = sortedWordList.map(sortedWord => sortedWordMap(sortedWord)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp49df3h2o.scala:20)\n\tat Problem.main(tmp49df3h2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        s.split(\" \").map(x =>\
    \ x.toList.sortWith(_ < _).mkString).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList.sortBy(x => x).head)\n        shuffledWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            result.append(word.sorted)\n\
    \            if (i != words.length - 1) result.append(\" \")\n        }\n    \
    \    result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            if (i != 0) result.append(\" \")\n            result.append(words(i).sorted)\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toCharArray.sortWith(_ < _).mkString(\"\
    \"))\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val shuffledWords\
    \ = sortedWords.map(w => w.permutations.toList.map(p => p.mkString).toSet).toList\n\
    \        val shuffledWordsIndex = shuffledWords.map(w => w.toList.zipWithIndex.toMap)\n\
    \        val shuffledWordsIndexMap = shuffledWordsIndex.map(m => m.map(p => (p._2,\
    \ p._1))).toMap\n        val shuffledWordsIndexMapList = shuffledWordsIndexMap.toList.sortBy(_._1)\n\
    \        val shuffledWordsIndexMapListMap = shuffledWordsIndexMapList.map(m =>\
    \ m._2).toMap\n        val shuffledWordsIndexMapListMapList = shuffledWordsIndexMapListMap.toList.sortBy(_._1)\n\
    \        val shuffledWordsIndexMapListMapListMap = shuffledWordsIndexMapListMapList.map(m\
    \ => m._2).toMap\n        val shuffledWordsIndexMapListMapListMapList = shuffledWordsIndexMapListMapListMap.toList.sortBy(_._1)\n\
    \        val shuffledWordsIndexMapListMapListMapListMap = shuffledWordsIndexMapListMapListMapList.map(m\
    \ => m._2).toMap\n        val shuffledWordsIndexMapListMapListMapListMapList =\
    \ shuffledWordsIndexMapListMapListMapListMap.toList.sortBy(_._1)\n        val\
    \ shuffledWordsIndexMapListMapListMapListMapListMap = shuffledWordsIndexMapListMapListMapListMapList.map(m\
    \ => m._2).toMap\n        val shuffledWordsIndexMapListMapListMapListMapListMapList\
    \ = shuffledWordsIndexMapListMapListMapListMapListMap.toList.sortBy(_._1)\n  \
    \      val shuffledWordsIndexMapListMapListMapListMapListMapListMap = shuffledWordsIndexMapListMapListMapListMapListMapList.map(m\
    \ => m._2).toMap\n        val shuffledWordsIndexMapListMapListMapListMapListMapListMapList\
    \ = shuffledWordsIndexMapListMapListMapListMapListMapListMap.toList.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65l22ev4.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp65l22ev4.scala:15:95\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mshuffledWordsIndexMap\e[0m = shuffledWordsIndex.map(\e\
    [36mm\e[0m => m.map(\e[36mp\e[0m => (p._2, p._1))).toMap\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                  Cannot prove that\
    \ Map[K2, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  where:  \
    \  K2 is a type variable with constraint >: Int\n\e[31m   |\e[0m             \
    \      <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  where:  \
    \  K is a type variable\n\e[31m   |\e[0m                            V is a type\
    \ variable\n\e[31m   |\e[0m                  .\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp65l22ev4.scala:27:5 ---------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            result.append(sortedWords(i))\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        var words = s.split(\"\
    \ \")\n        var result = new StringBuilder\n        for (word <- words) {\n\
    \            var chars = word.toCharArray\n            var sorted = chars.sortWith(_\
    \ < _)\n            result.append(sorted.mkString)\n            result.append(\"\
    \ \")\n        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwhfhbsu.scala:22)\n\tat Problem.main(tmpxwhfhbsu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sorted = word.toCharArray.sortWith(_ < _)\n            result.append(sorted.mkString)\n\
    \            result.append(\" \")\n        }\n        result.toString.trim\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(word => word.sorted).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWord\
    \ => sortedWordMap(sortedWord))\n        sortedWordList.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnecw0b8u.scala:19)\n\tat Problem.main(tmpnecw0b8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(word.length - 1))\n     \
    \   shuffledWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqe85uhp.scala:17)\n\tat Problem.main(tmpgqe85uhp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sortedWord = word.toList.sortWith(_ < _).mkString\n         \
    \   result.append(sortedWord + \" \")\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(Random.nextInt(word.permutations.toList.length)))\n\
    \        val shuffledString = shuffledWords.mkString(\" \")\n        shuffledString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkh5sf454.scala:13:77 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.permutations.toList(Random.nextInt(word.permutations.toList.length)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                            Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val map = new\
    \ HashMap[String, String]\n        for (i <- 0 until words.length) map(sortedWords(i))\
    \ = words(i)\n        sortedWords.map(w => map(w)).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcg10ivjm.scala:19)\n\tat Problem.main(tmpcg10ivjm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toCharArray.sortWith(_ <\
    \ _).mkString)\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            val sorted = word.toCharArray.sortWith(_\
    \ < _)\n            result.append(sorted.mkString)\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap2 = sortedWordMap.toSeq.sortBy(_._2)\n\
    \        val sortedWordMap3 = sortedWordMap2.map(_._1)\n        sortedWordMap3.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuf4ssq0k.scala:20)\n\tat Problem.main(tmpuf4ssq0k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val shuffledWords\
    \ = sortedWords.map(word => word.permutations.toList(Random.nextInt(word.permutations.size)))\n\
    \        val shuffledSentence = shuffledWords.mkString(\" \")\n        return\
    \ shuffledSentence\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14el_ztp.scala:13:77 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshuffledWords\e[0m = sortedWords.map(\e\
    [36mword\e[0m => word.permutations.toList(Random.nextInt(word.permutations.size)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                            Not found: Random\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordsMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordsMap2 = sortedWordsMap.map(x\
    \ => (x._1, x._2.sorted))\n        val sortedWordsMap3 = sortedWordsMap2.map(x\
    \ => (x._1, x._2.mkString))\n        val sortedWordsMap4 = sortedWordsMap3.map(x\
    \ => (x._1, x._2.toList))\n        val sortedWordsMap5 = sortedWordsMap4.map(x\
    \ => (x._1, x._2.sorted))\n        val sortedWordsMap6 = sortedWordsMap5.map(x\
    \ => (x._1, x._2.mkString))\n        val sortedWordsMap7 = sortedWordsMap6.map(x\
    \ => (x._1, x._2.toList))\n        val sortedWordsMap8 = sortedWordsMap7.map(x\
    \ => (x._1, x._2.sorted))\n        val sortedWordsMap9 = sortedWordsMap8.map(x\
    \ => (x._1, x._2.mkString))\n        val sortedWordsMap10 = sortedWordsMap9.map(x\
    \ => (x._1, x._2.toList))\n        val sortedWordsMap11 = sortedWordsMap10.map(x\
    \ => (x._1, x._2.sorted))\n        val sortedWordsMap12 = sortedWordsMap11.map(x\
    \ => (x._1, x._2.mkString))\n        val sortedWordsMap13 = sortedWordsMap12.map(x\
    \ => (x._1, x._2.toList))\n        val sortedWordsMap14 = sortedWordsMap13.map(x\
    \ => (x._1, x._2.sorted))\n        val sortedWordsMap15 = sortedWordsMap14.map(x\
    \ => (x._1, x._2.mkString))\n        val sortedWordsMap16 = sortedWordsMap15.map(x\
    \ => (x._1, x._2.toList))\n        val sortedWordsMap17 = sortedWordsMap16.map(x\
    \ => (x._1, x._2.sorted))\n        val sortedWords\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo8mfq071.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpo8mfq071.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordMapKeys = sortedWordMap.keys.toList.sorted\n\
    \        val result = sortedWordMapKeys.map(key => sortedWordMap(key)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnkdqegj1.scala:20)\n\tat Problem.main(tmpnkdqegj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.toCharArray.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sortedWord = word.toCharArray.sortWith(_ < _).mkString\n    \
    \        result.append(sortedWord + \" \")\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sortedWord = word.toList.sortWith((a, b) => a < b).mkString\n\
    \            result.append(sortedWord)\n            result.append(\" \")\n   \
    \     }\n        result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWordMap)\n\
    \        sortedWordList.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7rz0bga.scala:19)\n\tat Problem.main(tmpp7rz0bga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(word => word.toList.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new ArrayBuffer[String]\n        for (word <- words)\
    \ {\n            val sortedWord = word.toCharArray.sortWith(_ < _).mkString\n\
    \            result += sortedWord\n        }\n        result.mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(w => w.sorted)\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = (words zip sortedWords).toMap\n        val sortedWordMap2 = sortedWordMap.map(x\
    \ => (x._2, x._1))\n        val sortedWordMap3 = sortedWordMap2.toList.sortBy(_._1)\n\
    \        val sortedWordMap4 = sortedWordMap3.map(x => x._2)\n        val result\
    \ = sortedWordMap4.mkString(\" \")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n  \
    \  assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfngersrm.scala:22)\n\tat Problem.main(tmpfngersrm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordsInOrder = sortedWords.map(x\
    \ => sortedWordMap(x))\n        sortedWordsInOrder.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprqs242i8.scala:19)\n\tat Problem.main(tmprqs242i8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.toList.sorted.mkString)\n\
    \        sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            val sorted = word.toCharArray.sortWith(_ < _)\n            result.append(sorted)\n\
    \            result.append(\" \")\n        }\n        result.toString.trim\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_regjw_.scala:21)\n\tat Problem.main(tmpg_regjw_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toCharArray.sorted.mkString)\n\
    \        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            result.append(sortedWords(i))\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(w => w.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWordMap(_))\n\
    \        sortedWordList.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoyhgcrk0.scala:19)\n\tat Problem.main(tmpoyhgcrk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(word => word.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(sortedWord\
    \ => sortedWordMap(sortedWord))\n        sortedWordList.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnecw0b8u.scala:19)\n\tat Problem.main(tmpnecw0b8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toCharArray.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.toList.sorted.mkString)\n  \
    \      sortedWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        words.map(word => word.sorted).mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val sortedWords = words.map(x => x.sorted)\n        val sortedWordMap\
    \ = sortedWords.zip(words).toMap\n        val sortedWordList = sortedWords.map(x\
    \ => sortedWordMap(x))\n        sortedWordList.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\"\
    )));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4o12i4z.scala:19)\n\tat Problem.main(tmpu4o12i4z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    def antiShuffle(s : String) : String = {\n        val words = s.split(\"\
    \ \")\n        val newWords = words.map(x => x.toCharArray.sortWith(_ < _).mkString)\n\
    \        newWords.mkString(\" \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
